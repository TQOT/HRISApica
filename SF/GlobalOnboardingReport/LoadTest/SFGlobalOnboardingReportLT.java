
// *********************************************************************************************
//
// Automatically Generated Load Test Program
// -----------------------------------------
//
// Source: SFGlobalOnboardingReportLT.java
// Date  : 18 Nov 2019 15:45:22 PST
// Author: Apica ZebraTester V5.5-F / automatically generated
//
// Procedure Copyright by Ingenieurbuero David Fischer AG  |  A Company of the Apica Group
// All Rights Reserved
//
// http://www.apicasystem.com                                         http://www.zebratester.com
// *********************************************************************************************


import java.io.*;
import java.nio.charset.Charset;
import java.util.*;
import java.util.concurrent.atomic.*;
import dfischer.utils.AbstractInputFileReader;
import dfischer.utils.Base64Decoder;
import dfischer.utils.Base64Encoder;
import dfischer.utils.ConvertToDoubleNumber;
import dfischer.utils.ContentTokenExtractor;
import dfischer.utils.ContentTokenExtractorItem;
import dfischer.utils.Cookie;
import dfischer.utils.CookieHandler;
import dfischer.utils.DigestAuthContext;
import dfischer.utils.DNSCache;
import dfischer.utils.DNSTranslationTable;
import dfischer.utils.DynamicProtobufContentParser;
import dfischer.utils.ExternalParamFile;
import dfischer.utils.FileCache;
import dfischer.utils.GenericPluginInterface;
import dfischer.utils.GetRealTimeUserInputFieldsInterface;
import dfischer.utils.HtmlContentParser;
import dfischer.utils.HtmlHeaderCookieExtractor;
import dfischer.utils.HttpLoadTest;
import dfischer.utils.HttpLoadTestIncrementUserThread;
import dfischer.utils.HttpLoadTestUserContext;
import dfischer.utils.HttpSocketPool;
import dfischer.utils.HttpTestURL;
import dfischer.utils.HttpTestURLDNSContext;
import dfischer.utils.HttpTestURLThreadHandler;
import dfischer.utils.InlineScriptExecutionException;
import dfischer.utils.InlineScriptExecutor;
import dfischer.utils.InnerLoopContext;
import dfischer.utils.JSONHtmlBasedExtractor;
import dfischer.utils.JSONPathBasedExtractor;
import dfischer.utils.JSONPathBasedExtractorItem;
import dfischer.utils.Lib;
import dfischer.utils.LoadtestInlineScriptContext;
import dfischer.utils.LoadtestInlineScriptVar;
import dfischer.utils.LoadtestPluginClassLoader;
import dfischer.utils.LoadtestPluginContext;
import dfischer.utils.NextProxyConfig;
import dfischer.utils.ParseArgs;
import dfischer.utils.ParseUrl;
import dfischer.utils.PerformanceData;
import dfischer.utils.PerformanceDataTickExtension;
import dfischer.utils.ProtobufFieldAndValueElement;
import dfischer.utils.ProtobufLib;
import dfischer.utils.RealTimeUserInputField;
import dfischer.utils.ScreenshotImage;
import dfischer.utils.SetThreadStepInterface;
import dfischer.utils.SSLInit;
import dfischer.utils.SSLSessionCacheStatistic;
import dfischer.utils.SSLSessionCacheStatisticInterface;
import dfischer.utils.SuspendResumeInterface;
import dfischer.utils.SymmetricEncrypt;
import dfischer.utils.SymmetricEncryptContext;
import dfischer.utils.TextLineTokenExtractor;
import dfischer.utils.TextLineTokenExtractorItem;
import dfischer.utils.ThreadStepInterface;
import dfischer.utils.UserInputField;
import dfischer.utils.UserTransactionContext;
import dfischer.utils.UserTransactionRuntimeHandler;
import dfischer.utils.VarInputFileReader;
import dfischer.utils.VarRandomInputFileReader;
import dfischer.utils.VaryingLoadInterface;
import dfischer.utils.VaryingTestDurationInterface;
import dfischer.utils.XmlContentParser;
import dfischer.utils.XmlDoctypeCommentParser;
import dfischer.utils.ZoneTime;
import dfischer.proxysniffer.ProxySnifferVarSourceInlineScript;
import dfischer.utils.WebSocketPluginInterface;
import dfischer.utils.BoundaryBasedExtractor;
import dfischer.utils.BoundaryBasedExtractorItem;
import dfischer.utils.RegExpBasedExtractor;
import dfischer.utils.RegExpBasedExtractorItem;
import dfischer.utils.XpathBasedExtractor;
import dfischer.utils.XpathBasedExtractorItem;
import dfischer.proxysniffer.WebSocketData;
import dfischer.utils.HttpTestWebsocketContext;
import dfischer.websocket.*;


/**
 * Automatically generated load test program.
 */
public class SFGlobalOnboardingReportLT extends HttpLoadTest implements Runnable, ThreadStepInterface, SetThreadStepInterface, SSLSessionCacheStatisticInterface, VaryingLoadInterface, VaryingTestDurationInterface, SuspendResumeInterface, GetRealTimeUserInputFieldsInterface
{
	public static final String prxVersion = "V5.5-F";
	public static final int    prxCharEncoding = 3;                         // 1 = OS Default, 2 = ISO-8859-1, 3 = UTF-8
	public static final String testDescription = "correlated";

	public static String USER_AGENT_1 = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0";

	private static final boolean CONTAINS_PARALLEL_EXECUTED_URLS = true;
	private static final int MAX_PARALLEL_THREADS_PER_USER = 6;                       // default value for max. parallel executed URLs per user
	private static int maxParallelThreadsPerUser = MAX_PARALLEL_THREADS_PER_USER;     // configured value for max. parallel executed URLs per user

	private static final boolean CONTAINS_EXTERNAL_RESOURCES = false;       // note: external resources are typically additional Java library files (*.jar files) invoked by self-developed plug-ins. Consider that Input Files and the Main Class of Plug-Ins are NOT external resources in this context because ZebraTester knows already their declarations.

	// --- WebSocket Object ---
	WebSocketData webSocketData = null;                                     // WebSocket Object that contains data of recorded WebSocket frames.
	WebSocketPluginInterface[] webSocketPluginsForURL = null;               // all assiciated web socket plugins for specific URL.

	// --- proxy configuration ---
	private static boolean proxyEnabled = false;                             // if false: do not use a proxy server
	private static boolean proxyCacheDisabled = true;
	private static String  proxyHttpHost = "";
	private static int     proxyHttpPort = -1;
	private static String  proxyHttpsHost = "";
	private static int     proxyHttpsPort = -1;
	private static String  noProxyFor = "";
	private static String  proxyAuthorization = null;
	private static NextProxyConfig commonNextProxyConfig = null;
	private NextProxyConfig userNextProxyConfig = null;
	
	private static int plannedStartupDelay = 200;                           // startup delay between concurrent users in milliseconds, see main argument "-sdelay"
	private static int plannedTestDuration = -1;                            // planned load test duration in seconds, 0 = unlimited, see main argument "-d"
	private static int maxPlannedLoops = 0;  								   // maximum planned loops per user, 0 = unlimited, see main argument "-maxloops"
	private static int plannedRequestTimeout = 0;                           // planned request timeout in seconds, see main argument "-t"
	private static int plannedConnectTimeout = 0;                           // planned TCP/IP socket connect timeout in seconds (default = use plannedRequestTimeout), see main argument "-tconnect"
	
	private static String defaultTimeZone = "PST";                          // use main argument -tz <timezone> to alter
	private static char defaultNumberGroupingSeparator = '\'';              // use main argument -dgs a|c to alter
	private static String sslProtocolVersion = "all";                       // applied ssl protocol version: "all" = v3/tls/tls11/tls12, use main argument -ssl to set a fixed protocol version
	private static boolean sslcmode = false;                                // support of deficient ssl servers, use main argument -sslcmode to enable
	private static boolean sslECC = false;                                  // elliptic curve cryptography (ECC) is disabled by default, use main argument -ecc to enable
	private static boolean sslSNI = true;                                   // server name indication (SNI) is enabled by default, use main argument -nosni to disable
	private static boolean sslSNICirical = false;                           // the SNI TLS extension is by default set as non-critical, use main argument -snicritical to set as critical
	private static boolean useTlsSessionTickets = false;                    // Session Tickets can only be used with TLS, use main argument -tlssessiontickets to set to use
	private static final long loopErrorDelay = 20;                          // error delay (in milliseconds) applied if a loop of a virtual user has failed
	private static final String THREAD_NAME = "T000000";                    // internal
	private static Integer dumpLock = new Integer(0);                       // internal
	private static Integer inputFileLock = new Integer(0);                  // internal
	private volatile int threadStep = ThreadStepInterface.THREAD_NO_STEP;   // internal
	private boolean urlCallPassed = false;                                  // internal
	private String localIpAddress = null;                                   // internal
	private static long downlinkBandwidth = 0;                              // max. downlink bandwidth per user. 0 = unlimited. use main argument -downlink <kbps> to alter
	private static long uplinkBandwidth = 0;                                // max. uplink bandwidth per user. 0 = unlimited. use main argument -uplink <kbps> to alter
	private static boolean dnsPerLoop = false;								// true if main argument "-dnsperloop" is set = perform new DNS resolves for each executed loop. normally false
	private HttpTestURLDNSContext userDNSContext = null;                    // user specific DNS context - normally null when no special DNS servers are used
	
	private static volatile boolean debugFailedLoops = false;               // true if main argument "-dfl" is set
	private static volatile boolean debugLoops = false;                     // true if main argument "-dl" is set
	private static volatile boolean debugHttp = false;                      // true if main argument "-dh" is set
	private static volatile boolean debugContent = false;                   // true if main argument "-dc" is set
	private static volatile boolean debugCookies = false;                   // true if main argument "-dC" is set
	private static volatile boolean debugKeepAlive = false;                 // true if main argument "-dK" is set
	private static volatile boolean debugSsl = false;                       // true if main argument "-dssl" is set
	
	private static String resultFile = null;                                // name of binary test result file or null
	
	private final static String httpProtocolVersion = "1.1";      // applied HTTP protocol version V1.1
	
	private static ExternalParamFile externalParamFile = null;                              // used only for very large parameter values (commonly unused)
	private static final String EXTERNAL_PARAM_FILE = "SFGlobalOnboardingReportLTExtParams.dat";// input file name for very large parameter values
	private static FileCache requestFileCache = new FileCache();  // file cache for large XML, SOAP and ASCII requests
	
	private int requestTimeout = -1;                              // thread input data from constructor, timeout per url request in seconds
	private int remainingLoops = -1;                              // thread input data from constructor, number of loops per thread (optional)
	private boolean checkLoopCount = false;                       // thread input data from constructor, number of loops per thread (optional)
	private int threadNumber = -1;                                // thread input data from constructor, internal thread number
	private int threadLoopCounter = 0;                            // internal loop counter per thread
	private volatile int userResumeStartWaitDelay = 0;            // internal, user specific delay when the load test execution is resumed
	private volatile boolean decrementEndOfLoopFlag = false;	  // internal flag to decrement the simulated user at runtime
	private volatile boolean incrementUserFlag = false;           // internal flag to increment the simulated user at runtime
	private volatile long incrementUserStartTime = -1;            // internal start time when increment the simulated user at runtime
	private static AtomicInteger totalLoopCounter = new AtomicInteger(0);    // internal overall loop counter

	private LoadtestPluginContext userPluginContext = null;       // plug-in context per user
	private LoadtestInlineScriptContext inlineScriptContext = null;          // re-used, scratch, the returned context of an inline script that runs at item or URL exec scope

	private Object sslSessionCache = null;                        // internal ssl session cache per thread
	private SSLSessionCacheStatistic sslStatistic = null;         // internal ssl session cache statistic per thread
	private static int sslSessionCacheTimeout = 300;              // timeout of ssl session cache in seconds, 0 = session cache disabled
	private static int sslHandshakeRandomGeneratorType = -1;      // invalid initial value, use the default secure random generator for SSL handshakes
	private HttpSocketPool socketPool = null;                     // re-used, scratch, internal socket pool per thread and loop
	private CookieHandler cookieHandler = null;                   // re-used, scratch, internal cookie handler per thread and loop

	private HttpTestURL testURL = null;                           // re-used, scratch, http request and response
	private HttpTestURLThreadHandler pageThreadHandler = null;    // re-used, scratch, support for parallel processing of http request within a page
	private int httpStatus = -1;                                  // re-used, scratch, http response status code from webserver
	private HtmlContentParser htmlContentParser = null;           // re-used, scratch, used to extract vars from http response
	private XmlContentParser xmlContentParser = null;             // re-used, scratch, used to extract vars from http response
	private JSONHtmlBasedExtractor jsonHtmlBasedExtractor = null; // re-used, scratch, used to extract vars from http response
	private DynamicProtobufContentParser protobufContentParser = null;  // re-used, scratch, used to extract vars from http response
	private TextLineTokenExtractor textLineTokenExtractor = null; // re-used, scratch, used to extract vars from http response
	private ContentTokenExtractor contentTokenExtractor = null;   // re-used, scratch, used to extract vars from http response
	private BoundaryBasedExtractor boundaryBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private RegExpBasedExtractor regExpBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private XpathBasedExtractor xpathBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private JSONPathBasedExtractor jsonPathBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	
	private static VarInputFileReader UserLogin_txt = null;          // input file UserLogin.txt, file scope: new line per user

	private volatile UserTransactionRuntimeHandler transactionHandler = new UserTransactionRuntimeHandler();		// re-used, support to manage user-defined transactions
	private Map<String,String> transactionContextMap = new HashMap<>();		// used to correctly measure the user-defined transactions

	private String P_Password = null;                                     // var declaration from web admin var handler: scope = per user
	private String P_UserID = null;                                       // var declaration from web admin var handler: scope = per user

	private String C_Mod2 = null;                        // var declaration from web admin var handler: scope = per loop
	private String VScrb_Enc = null;                     // var declaration from web admin var handler: scope = per loop
	private String C_Mod0 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_Viewstate2 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_UIres = null;                       // var declaration from web admin var handler: scope = per loop
	private String C_Viewstate1 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_Eventval2 = null;                   // var declaration from web admin var handler: scope = per loop
	private String C_Eventval1 = null;                   // var declaration from web admin var handler: scope = per loop
	private String C_Token2 = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_Token1 = null;                      // var declaration from web admin var handler: scope = per loop
	private String vSAMLRequest = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_Merge1 = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_SAMLResponse = null;                // var declaration from web admin var handler: scope = per loop
	private String C_Vsgen1 = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_Showme1 = null;                     // var declaration from web admin var handler: scope = per loop
	private String C_Name = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_belieze1 = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_SiteVersion = null;                 // var declaration from web admin var handler: scope = per loop
	private String C_LoginDetails = null;                // var declaration from web admin var handler: scope = per loop
	private String vSignature = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_EventID = null;                     // var declaration from web admin var handler: scope = per loop
	private String C_docKey = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_AspxRoles = null;                   // var declaration from web admin var handler: scope = per loop
	private String vScrb = null;                         // var declaration from web admin var handler: scope = per loop
	private String C_QASFONB = null;                     // var declaration from web admin var handler: scope = per loop
	private String C_SessionID = null;                   // var declaration from web admin var handler: scope = per loop
	private String C_mod1 = null;                        // var declaration from web admin var handler: scope = per loop
	private String SAPUI_Version = null;                 // var declaration from web admin var handler: scope = per loop
	private String C_AjaxToken = null;                   // var declaration from web admin var handler: scope = per loop
	private String C_href2 = null;                       // var declaration from web admin var handler: scope = per loop
	private String C_href1 = null;                       // var declaration from web admin var handler: scope = per loop
	private String C_Mod4 = null;                        // var declaration from web admin var handler: scope = per loop
	
	/**
	 * constructor: called from load test plug-ins (scope = global).
	 */
	public SFGlobalOnboardingReportLT()
	{
		super();
	}


	/**
	 * constructor: called when a user is created (per user).
	 */
	public SFGlobalOnboardingReportLT(int maxLoops, int requestTimeout, int threadNumber)
	{
		super();
		this.requestTimeout = requestTimeout;
		this.remainingLoops = maxLoops;
		this.checkLoopCount = (maxLoops > 0);
		this.threadNumber = threadNumber;
		this.sslSessionCache = SSLInit.getNewSslSessionCache(sslSessionCacheTimeout);
		this.sslStatistic = new SSLSessionCacheStatistic();
		if (isMultihomed() && (!ipPerLoop()))
			this.localIpAddress = getNextMultihomedIpAddress();
		if (dnsCache != null)
			userDNSContext = new HttpTestURLDNSContext(dnsCache, threadNumber);
		
		// read next line from input file: scope = per user
		try
		{
			synchronized (inputFileLock)
			{
				if (!UserLogin_txt.getNextLine())
					abortByEofInputFile();
				// extract vars from input file: scope = per user
				P_Password = new String(UserLogin_txt.getLineVar(2));
				P_UserID = new String(UserLogin_txt.getLineVar(1));
			}
		}
		catch (Exception ie)
		{
			abortByEofInputFile();
		}
		
		applyNextProxySettingsFromFileIfExists();
		
		if (commonNextProxyConfig != null)
			// set proxy configuration data per user 
			userNextProxyConfig = new NextProxyConfig(commonNextProxyConfig);
		
		// initialize context for plug-ins which are executed per user
		userPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, this, threadNumber);
	}


	/**
	 * internal method: called when a user starts a loop.
	 * contains the recorded session which is called by users x loops.
	 * 
	 * @param totalLoopCounter total number of loops (0..n-1) counted overall threads. This value is unique per loop.
	 * 
	 * @return  true:  loop successful completed.
	 *          false: loop failed.
	 */
	private boolean execute(int totalLoopCounter) throws Exception
	{
		markStartOfLoop();
		threadStep = 0;                 // internal - start loop at thread step 0
		
		// enable DNS resolves per loop?
		if (dnsPerLoop)
			userDNSContext = new HttpTestURLDNSContext(dnsCache.clone(false), threadNumber);
		
		// debug http headers?
		Object httpLogVectorObject = null;
		if (debugHttp)
			httpLogVectorObject = this;
		
		// create socket pool per loop
		sslSessionCache = SSLInit.getNewSslSessionCache(sslSessionCacheTimeout);		// reset the SSL session cache to get new SSL session IDs for this loop
		socketPool = new HttpSocketPool(this, sslProtocolVersion, sslSessionCache, sslStatistic, sslcmode);
		if (plannedConnectTimeout > 0)
			socketPool.setConnectTimeout(plannedConnectTimeout);
		if (sslHandshakeRandomGeneratorType != -1)
			socketPool.setSslHandshakeRandomGeneratorType(sslHandshakeRandomGeneratorType);
		socketPool.setSupportEllipticCurves(sslECC);
		socketPool.setHintUseSNI(sslSNI);
		socketPool.setSniCritical(sslSNICirical);
		socketPool.setUseTlsSessionTickets(useTlsSessionTickets);
		if (debugKeepAlive)
		{
			socketPool.setlogVectorObject(this);
			if (debugSsl)
				socketPool.enableSslLog();
		}
		
		if (downlinkBandwidth > 0)
			socketPool.setDownlinkBandwidth(downlinkBandwidth);
		if (uplinkBandwidth > 0)
			socketPool.setUplinkBandwidth(uplinkBandwidth);
		
		if (isMultihomed())
		{
			if (ipPerLoop())
				localIpAddress = getNextMultihomedIpAddress();
			socketPool.setClientIpAddress(localIpAddress);
			log();
			log("multihomed client ip address = " + localIpAddress);
		}
		
		// setup cookie handler per loop
		cookieHandler = new CookieHandler();
		if (debugCookies)
			cookieHandler.setLogVectorInterface(this);
		
		// customised vars from web admin var handler: scope = per user
		log();
		log("<<< P_Password = " + P_Password);
		log("<<< P_UserID = " + P_UserID);
		
		// customised vars from web admin var handler: scope = per loop
		htmlContentParser = null;
		xmlContentParser = null;
		jsonHtmlBasedExtractor = null;
		protobufContentParser = null;
		C_Mod2 = null;
		VScrb_Enc = "";
		C_Mod0 = null;
		C_Viewstate2 = null;
		C_UIres = null;
		C_Viewstate1 = null;
		C_Eventval2 = null;
		C_Eventval1 = null;
		C_Token2 = null;
		C_Token1 = null;
		vSAMLRequest = null;
		C_Merge1 = null;
		C_SAMLResponse = null;
		C_Vsgen1 = null;
		C_Showme1 = null;
		C_Name = null;
		C_belieze1 = null;
		C_SiteVersion = null;
		C_LoginDetails = null;
		vSignature = null;
		C_EventID = null;
		C_docKey = null;
		C_AspxRoles = null;
		vScrb = null;
		C_QASFONB = null;
		C_SessionID = null;
		C_mod1 = null;
		SAPUI_Version = null;
		C_AjaxToken = null;
		C_href2 = null;
		C_href1 = null;
		C_Mod4 = null;
		log();
		log("<<< C_Mod2 = " + C_Mod2);
		log("<<< VScrb_Enc = " + VScrb_Enc);
		log("<<< C_Mod0 = " + C_Mod0);
		log("<<< C_Viewstate2 = " + C_Viewstate2);
		log("<<< C_UIres = " + C_UIres);
		log("<<< C_Viewstate1 = " + C_Viewstate1);
		log("<<< C_Eventval2 = " + C_Eventval2);
		log("<<< C_Eventval1 = " + C_Eventval1);
		log("<<< C_Token2 = " + C_Token2);
		log("<<< C_Token1 = " + C_Token1);
		log("<<< vSAMLRequest = " + vSAMLRequest);
		log("<<< C_Merge1 = " + C_Merge1);
		log("<<< C_SAMLResponse = " + C_SAMLResponse);
		log("<<< C_Vsgen1 = " + C_Vsgen1);
		log("<<< C_Showme1 = " + C_Showme1);
		log("<<< C_Name = " + C_Name);
		log("<<< C_belieze1 = " + C_belieze1);
		log("<<< C_SiteVersion = " + C_SiteVersion);
		log("<<< C_LoginDetails = " + C_LoginDetails);
		log("<<< vSignature = " + vSignature);
		log("<<< C_EventID = " + C_EventID);
		log("<<< C_docKey = " + C_docKey);
		log("<<< C_AspxRoles = " + C_AspxRoles);
		log("<<< vScrb = " + vScrb);
		log("<<< C_QASFONB = " + C_QASFONB);
		log("<<< C_SessionID = " + C_SessionID);
		log("<<< C_mod1 = " + C_mod1);
		log("<<< SAPUI_Version = " + SAPUI_Version);
		log("<<< C_AjaxToken = " + C_AjaxToken);
		log("<<< C_href2 = " + C_href2);
		log("<<< C_href1 = " + C_href1);
		log("<<< C_Mod4 = " + C_Mod4);
		
		// initialize context for plug-ins which are executed per loop
		LoadtestPluginContext loopPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, this, threadNumber, socketPool, cookieHandler);
		



		// --- VIRTUAL PAGE #0 ---
		if (!executePage_0(totalLoopCounter, loopPluginContext, new InnerLoopContext(), 0,0, httpLogVectorObject))
			return false;



		// --- PAGE BREAK: Test [0] ---
		log();
		log();
		log("# Page #1: LaunchPage URL");
		log("# -----------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #1: LaunchPage URL", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 1 failed
		
		// page 1 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [50] ---
		log();
		log();
		log("# Page #2: Login");
		log("# --------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #2: Login", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 2 failed
		
		// page 2 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [136] ---
		log();
		log();
		log("# Page #3: OnboardingPage");
		log("# -----------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #3: OnboardingPage", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 3 failed
		
		// page 3 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [221] ---
		log();
		log();
		log("# Page #4: Reports");
		log("# ----------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #4: Reports", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 4 failed
		
		// page 4 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [247] ---
		log();
		log();
		log("# Page #5: GlobalOnboarding");
		log("# -------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #5: GlobalOnboarding", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 5 failed
		
		// page 5 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [253] ---
		log();
		log();
		log("# Page #6: SubmitSearch");
		log("# ---------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #6: SubmitSearch", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 6 failed
			synchResponsesParallelRequestsPage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 6 failed
		
		// page 6 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [258] ---
		log();
		log();
		log("# Page #7: LogOut");
		log("# ---------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #7: LogOut", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_7_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 7 failed
		
		// page 7 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);
		
		
		// loop successful done
		// --------------------
		
		markEndOfPage(performanceData);
		
		endOfExecuteLoop(true, null, -1, loopPluginContext);
		log();
		return true;
	}		// end of execute()
		
		
		
	/**
	 * internal method: called when a user has completed a loop.
	 */
	private void endOfExecuteLoop(boolean loopPassed, HttpTestURL testURL, int threadStep, LoadtestPluginContext loopPluginContext) throws Exception
	{
		// log URL if last call has failed
		if ((!loopPassed) && (testURL != null))
			log(testURL);
		
		// update plugin context
		loopPluginContext.setLoopPassed(loopPassed);
		if ((testURL != null) && (loopPluginContext.getHttpTestURL() == null))
			loopPluginContext.setHttpTestURL(testURL);
		if ((threadStep != -1) && (loopPluginContext.getThreadStep() == -1))
			loopPluginContext.setThreadStep(threadStep);
	}


	/**
	 * Recorded http requests of page #0.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_0(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{

		// all http requests of page #0 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #1: LaunchPage URL
		// # -----------------------



		// --- HTTP REQUEST: Test [1] <- WEB ADMIN Index 1 ---
		String requestProt0001 = "https";
		String requestHost0001 = "hcm4preview.sapsf.com";
		int    requestPort0001 = 443;
		String requestFile0001 = "/sf/login" +
				"?company=tctest" +
				"&loginMethod=SSO";
		String requestHeader0001 = "GET " + requestFile0001 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0001, requestHost0001, requestPort0001, requestHeader0001, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0001 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 6917
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors Log in");		// Test [1] <- Index 1
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [2] <- WEB ADMIN Index 2 ---
		String requestProt0002 = "https";
		String requestHost0002 = "hcm4preview.sapsf.com";
		int    requestPort0002 = 443;
		String requestFile0002 = "/ui/extlib/XMLHttpRequest_1.0.5_sf.15/XMLHttpRequest.js";
		String requestHeader0002 = "GET " + requestFile0002 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0002, requestHost0002, requestPort0002, requestHeader0002, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0002 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [3] <- WEB ADMIN Index 3 ---
		String requestProt0003 = "https";
		String requestHost0003 = "hcm4preview.sapsf.com";
		int    requestPort0003 = 443;
		String requestFile0003 = "/ui/surj/js/core/config-util_1f1411d7d63c13c9fff25c556f656cd6.js";
		String requestHeader0003 = "GET " + requestFile0003 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0003, requestHost0003, requestPort0003, requestHeader0003, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0003 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [4] <- WEB ADMIN Index 4 ---
		String requestProt0004 = "https";
		String requestHost0004 = "hcm4preview.sapsf.com";
		int    requestPort0004 = 443;
		String requestFile0004 = "/ui/perflog/js/perflog_a42a6d04a245968118caec695f3c3d2f.js";
		String requestHeader0004 = "GET " + requestFile0004 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0004, requestHost0004, requestPort0004, requestHeader0004, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0004 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [5] <- WEB ADMIN Index 5 ---
		String requestProt0005 = "https";
		String requestHost0005 = "hcm4preview.sapsf.com";
		int    requestPort0005 = 443;
		String requestFile0005 = "/ui/extlib/jshash_2.2/sha256.js";
		String requestHeader0005 = "GET " + requestFile0005 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0005, requestHost0005, requestPort0005, requestHeader0005, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0005 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [6] <- WEB ADMIN Index 6 ---
		String requestProt0006 = "https";
		String requestHost0006 = "hcm4preview.sapsf.com";
		int    requestPort0006 = 443;
		String requestFile0006 = "/ui/extlib/jquery_3.2.1/jquery.js";
		String requestHeader0006 = "GET " + requestFile0006 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0006, requestHost0006, requestPort0006, requestHeader0006, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0006 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [7] <- WEB ADMIN Index 7 ---
		String requestProt0007 = "https";
		String requestHost0007 = "hcm4preview.sapsf.com";
		int    requestPort0007 = 443;
		String requestFile0007 = "/ui/juic/js/InterstitialUtil_1f1a1807326bb0d8ceaa3c1c842340d9.js";
		String requestHeader0007 = "GET " + requestFile0007 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0007, requestHost0007, requestPort0007, requestHeader0007, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0007 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [8] <- WEB ADMIN Index 8 ---
		String requestProt0008 = "https";
		String requestHost0008 = "hcm4preview.sapsf.com";
		int    requestPort0008 = 443;
		String requestFile0008 = "/ui/juic/js/GlobalFunctions_7c6c0000b683cb791f25f3210a0a1731.js";
		String requestHeader0008 = "GET " + requestFile0008 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0008, requestHost0008, requestPort0008, requestHeader0008, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0008 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [9] <- WEB ADMIN Index 9 ---
		String requestProt0009 = "https";
		String requestHost0009 = "hcm4preview.sapsf.com";
		int    requestPort0009 = 443;
		String requestFile0009 = "/ui/uicore/css/revolutionfont-Icons_e66c293a573ac22c088d0dae05237b02.css";
		String requestHeader0009 = "GET " + requestFile0009 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0009, requestHost0009, requestPort0009, requestHeader0009, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0009 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [10] <- WEB ADMIN Index 10 ---
		String requestProt0010 = "https";
		String requestHost0010 = "hcm4preview.sapsf.com";
		int    requestPort0010 = 443;
		String requestFile0010 = "/ui/sfgrp/js/SURJUtil_305d4ce02664e4587a9021eb38d00f50.js";
		String requestHeader0010 = "GET " + requestFile0010 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0010, requestHost0010, requestPort0010, requestHeader0010, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0010 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [11] <- WEB ADMIN Index 11 ---
		String requestProt0011 = "https";
		String requestHost0011 = "hcm4preview.sapsf.com";
		int    requestPort0011 = 443;
		String requestFile0011 = "/ui/sfgrp/js/SURJStartup_78a027715aeb2ab678a4435189a8a063.js";
		String requestHeader0011 = "GET " + requestFile0011 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0011, requestHost0011, requestPort0011, requestHeader0011, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0011 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [12] <- WEB ADMIN Index 12 ---
		String requestProt0012 = "https";
		String requestHost0012 = "hcm4preview.sapsf.com";
		int    requestPort0012 = 443;
		String requestFile0012 = "/ui/surj/js/core/surj-ui-config_8cfa0ccc0254f72fde2a519c30a57b26.js";
		String requestHeader0012 = "GET " + requestFile0012 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0012, requestHost0012, requestPort0012, requestHeader0012, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0012 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [13] <- WEB ADMIN Index 13 ---
		String requestProt0013 = "https";
		String requestHost0013 = "hcm4preview.sapsf.com";
		int    requestPort0013 = 443;
		String requestFile0013 = "/ui/sapui5/lite_1.65.5/common-0.js";
		String requestHeader0013 = "GET " + requestFile0013 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0013, requestHost0013, requestPort0013, requestHeader0013, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0013 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [14] <- WEB ADMIN Index 14 ---
		String requestProt0014 = "https";
		String requestHost0014 = "hcm4preview.sapsf.com";
		int    requestPort0014 = 443;
		String requestFile0014 = "/ui/surj/resources_1.4/lite/resources/sap-ui-core-nojQuery.js";
		String requestHeader0014 = "GET " + requestFile0014 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0014, requestHost0014, requestPort0014, requestHeader0014, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0014 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [15] <- WEB ADMIN Index 15 ---
		String requestProt0015 = "https";
		String requestHost0015 = "hcm4preview.sapsf.com";
		int    requestPort0015 = 443;
		String requestFile0015 = "/ui/sapui5/lite_1.65.5/common-1.js";
		String requestHeader0015 = "GET " + requestFile0015 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0015, requestHost0015, requestPort0015, requestHeader0015, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0015 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [16] <- WEB ADMIN Index 16 ---
		String requestProt0016 = "https";
		String requestHost0016 = "hcm4preview.sapsf.com";
		int    requestPort0016 = 443;
		String requestFile0016 = "/ui/sapui5/lite_1.65.5/common-2.js";
		String requestHeader0016 = "GET " + requestFile0016 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0016, requestHost0016, requestPort0016, requestHeader0016, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0016 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [17] <- WEB ADMIN Index 17 ---
		String requestProt0017 = "https";
		String requestHost0017 = "hcm4preview.sapsf.com";
		int    requestPort0017 = 443;
		String requestFile0017 = "/ui/sapui5/lite_1.65.5/common-3.js";
		String requestHeader0017 = "GET " + requestFile0017 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0017, requestHost0017, requestPort0017, requestHeader0017, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0017 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [18] <- WEB ADMIN Index 18 ---
		String requestProt0018 = "https";
		String requestHost0018 = "hcm4preview.sapsf.com";
		int    requestPort0018 = 443;
		String requestFile0018 = "/ui/login/css/bizx/BizXLogin_1e062c07e4f3d7e580f4e1685abe3701.css";
		String requestHeader0018 = "GET " + requestFile0018 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0018, requestHost0018, requestPort0018, requestHeader0018, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0018 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [19] <- WEB ADMIN Index 19 ---
		String requestProt0019 = "https";
		String requestHost0019 = "hcm4preview.sapsf.com";
		int    requestPort0019 = 443;
		String requestFile0019 = "/ui/sfgrp/js/loginBizX_28b8154adedc7836ae0fcd237ce875c9.js";
		String requestHeader0019 = "GET " + requestFile0019 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0019, requestHost0019, requestPort0019, requestHeader0019, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0019 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [20] <- WEB ADMIN Index 20 ---
		String requestProt0020 = "https";
		String requestHost0020 = "hcm4preview.sapsf.com";
		int    requestPort0020 = 443;
		String requestFile0020 = "/ui/surj/js/LastPageVisitedUtil_f667e3b7dddc5cdf8deec5a143d1e156.js";
		String requestHeader0020 = "GET " + requestFile0020 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0020, requestHost0020, requestPort0020, requestHeader0020, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0020 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;



		// all http requests of page #1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 2 of 3)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [21] <- WEB ADMIN Index 21 ---
		String requestProt0021 = "https";
		String requestHost0021 = "hcm4preview.sapsf.com";
		int    requestPort0021 = 443;
		String requestFile0021 = "/ui/uicore/img/successfactors-large_abf7640c2701d6e38bbb0fe0d0fa326b.gif";
		String requestHeader0021 = "GET " + requestFile0021 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0021, requestHost0021, requestPort0021, requestHeader0021, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0021 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [22] <- WEB ADMIN Index 22 ---
		String requestProt0022 = "https";
		String requestHost0022 = "hcm4preview.sapsf.com";
		int    requestPort0022 = 443;
		String requestFile0022 = "/ui/surj/resources_2213D821AC74F396468EA925CE663FD4/sap/sf/surj/shell/library-preload.js";
		String requestHeader0022 = "GET " + requestFile0022 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001411f3276-f0c2-4fc0-9520-67fd2d8bb72529820909-1501-babe-face-00000000000349816245-a612-4166-9828-6a972404192fHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145437-788976\r\n" + 
				"X-Ajax-Token: KFuoBGMT94BbHw6aEFcfZ9b4iyo%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0022, requestHost0022, requestPort0022, requestHeader0022, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0022 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [23] <- WEB ADMIN Index 23 ---
		String requestProt0023 = "https";
		String requestHost0023 = "hcm4preview.sapsf.com";
		int    requestPort0023 = 443;
		String requestFile0023 = "/ui/sapui5/main_1.65.5/sap/ui/core/themes/sap_belize/library.css";
		String requestHeader0023 = "GET " + requestFile0023 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0023, requestHost0023, requestPort0023, requestHeader0023, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0023 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [24] <- WEB ADMIN Index 24 ---
		String requestProt0024 = "https";
		String requestHost0024 = "ds-aksb-a.akamaihd.net";
		int    requestPort0024 = 443;
		String requestFile0024 = "/aksb.min.js";
		String requestHeader0024 = "GET " + requestFile0024 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0024, requestHost0024, requestPort0024, requestHeader0024, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0024 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [25] <- WEB ADMIN Index 25 ---
		String requestProt0025 = "https";
		String requestHost0025 = "hcm4preview.sapsf.com";
		int    requestPort0025 = 443;
		String requestFile0025 = "/ui/sapui5/main_1.65.5/sap/m/themes/sap_belize/library.css";
		String requestHeader0025 = "GET " + requestFile0025 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0025, requestHost0025, requestPort0025, requestHeader0025, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0025 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [26] <- WEB ADMIN Index 26 ---
		String requestProt0026 = "https";
		String requestHost0026 = "hcm4preview.sapsf.com";
		int    requestPort0026 = 443;
		String requestFile0026 = "/ui/sapui5/lite_1.65.5/themes/sap_belize/library.css";
		String requestHeader0026 = "GET " + requestFile0026 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0026, requestHost0026, requestPort0026, requestHeader0026, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0026 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [27] <- WEB ADMIN Index 27 ---
		String requestProt0027 = "https";
		String requestHost0027 = "hcm4preview.sapsf.com";
		int    requestPort0027 = 443;
		String requestFile0027 = "/ui/sapui5/lite_1.65.5/messagebundle-preload_en.js";
		String requestHeader0027 = "GET " + requestFile0027 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500012cf63214-3212-4018-8920-37a82ad0402029820909-1501-babe-face-0000000000036b2fc2d1-e0a2-4eea-b72a-20ca22a14d22HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145437-788976\r\n" + 
				"X-Ajax-Token: KFuoBGMT94BbHw6aEFcfZ9b4iyo%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0027, requestHost0027, requestPort0027, requestHeader0027, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0027 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [28] <- WEB ADMIN Index 28 ---
		String requestProt0028 = "https";
		String requestHost0028 = "hcm4preview.sapsf.com";
		int    requestPort0028 = 443;
		String requestFile0028 = "/ui/surj/resources_2213D821AC74F396468EA925CE663FD4/sap/sf/surj/shell/themes/sap_belize/library.css";
		String requestHeader0028 = "GET " + requestFile0028 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0028, requestHost0028, requestPort0028, requestHeader0028, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0028 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [29] <- WEB ADMIN Index 29 ---
		String requestProt0029 = "https";
		String requestHost0029 = "hcm4preview.sapsf.com";
		int    requestPort0029 = 443;
		String requestFile0029 = "/ui/sapui5/main_1.65.5/sap/ui/layout/themes/sap_belize/library.css";
		String requestHeader0029 = "GET " + requestFile0029 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0029, requestHost0029, requestPort0029, requestHeader0029, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0029 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [30] <- WEB ADMIN Index 30 ---
		String requestProt0030 = "https";
		String requestHost0030 = "hcm4preview.sapsf.com";
		int    requestPort0030 = 443;
		String requestFile0030 = "/ui/surj/resources_3F4C83BBB730C19B1759C532CE73BCB9/sap/sf/surj/commons/patch/sap-ui-core-Popup-PATCH.js";
		String requestHeader0030 = "GET " + requestFile0030 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500011f4fa2f3-3682-47bf-be25-60152c16a52329820909-1501-babe-face-0000000000030eb6d2fd-2512-40b1-aa28-56382b5eb220HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145437-788976\r\n" + 
				"X-Ajax-Token: KFuoBGMT94BbHw6aEFcfZ9b4iyo%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0030, requestHost0030, requestPort0030, requestHeader0030, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0030 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [31] <- WEB ADMIN Index 31 ---
		String requestProt0031 = "https";
		String requestHost0031 = "hcm4preview.sapsf.com";
		int    requestPort0031 = 443;
		String requestFile0031 = "/favicon.ico";
		String requestHeader0031 = "GET " + requestFile0031 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0031, requestHost0031, requestPort0031, requestHeader0031, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0031 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [32] <- WEB ADMIN Index 32 ---
		String requestProt0032 = "https";
		String requestHost0032 = "hcm4preview.sapsf.com";
		int    requestPort0032 = 443;
		String requestFile0032 = "/messagebundle/_/vmod_e63c85ea/ui/login/resources/sap/sf/login/i18n/messagebundle_en.properties";
		String requestHeader0032 = "GET " + requestFile0032 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000150863288-cc42-42ca-8225-285d2f1e572529820909-1501-babe-face-000000000003f880c23f-5ff2-49f1-8d25-c14a2ecf1321HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145437-788976\r\n" + 
				"X-Ajax-Token: KFuoBGMT94BbHw6aEFcfZ9b4iyo%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0032, requestHost0032, requestPort0032, requestHeader0032, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0032 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [33] <- WEB ADMIN Index 33 ---
		String requestProt0033 = "https";
		String requestHost0033 = "hcm4preview.sapsf.com";
		int    requestPort0033 = 443;
		String requestFile0033 = "/ui/sapui5/main_1.65.5/sap/ui/core/themes/sap_belize/library-parameters.json";
		String requestHeader0033 = "GET " + requestFile0033 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001f59dc2e3-3f12-449d-bf29-db712531362f29820909-1501-babe-face-00000000000301f2d285-a602-45a7-a728-57752df46a2bHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145437-788976\r\n" + 
				"X-Ajax-Token: KFuoBGMT94BbHw6aEFcfZ9b4iyo%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0033, requestHost0033, requestPort0033, requestHeader0033, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0033 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [34] <- WEB ADMIN Index 34 ---
		String requestProt0034 = "https";
		String requestHost0034 = "hcm4preview.sapsf.com";
		int    requestPort0034 = 443;
		String requestFile0034 = "/ui/sapui5/main_1.65.5/sap/m/themes/sap_belize/library-parameters.json";
		String requestHeader0034 = "GET " + requestFile0034 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500016d008226-9fd2-448c-9126-6bfd2405742829820909-1501-babe-face-000000000003b079e260-3cd2-44f0-9c21-430327027625HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145437-788976\r\n" + 
				"X-Ajax-Token: KFuoBGMT94BbHw6aEFcfZ9b4iyo%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0034, requestHost0034, requestPort0034, requestHeader0034, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0034 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [35] <- WEB ADMIN Index 35 ---
		String requestProt0035 = "https";
		String requestHost0035 = "hcm4preview.sapsf.com";
		int    requestPort0035 = 443;
		String requestFile0035 = "/ui/sapui5/lite_1.65.5/themes/sap_belize/library-parameters.json";
		String requestHeader0035 = "GET " + requestFile0035 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001f4b8029a-8b02-4bf7-b22a-7a1f21af882429820909-1501-babe-face-000000000003250b4208-1d52-4c6b-be24-63042d39e22fHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145437-788976\r\n" + 
				"X-Ajax-Token: KFuoBGMT94BbHw6aEFcfZ9b4iyo%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0035, requestHost0035, requestPort0035, requestHeader0035, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0035 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [36] <- WEB ADMIN Index 36 ---
		String requestProt0036 = "https";
		String requestHost0036 = "hcm4preview.sapsf.com";
		int    requestPort0036 = 443;
		String requestFile0036 = "/ui/surj/resources_2213D821AC74F396468EA925CE663FD4/sap/sf/surj/shell/themes/sap_belize/library-parameters.json";
		String requestHeader0036 = "GET " + requestFile0036 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001a260728d-9382-40ba-a42e-f2562ae1e62f29820909-1501-babe-face-000000000003883f5291-06b2-4e8a-982a-6ef927395724HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145437-788976\r\n" + 
				"X-Ajax-Token: KFuoBGMT94BbHw6aEFcfZ9b4iyo%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0036, requestHost0036, requestPort0036, requestHeader0036, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0036 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [37] <- WEB ADMIN Index 37 ---
		String requestProt0037 = "https";
		String requestHost0037 = "hcm4preview.sapsf.com";
		int    requestPort0037 = 443;
		String requestFile0037 = "/ui/sapui5/main_1.65.5/sap/ui/layout/themes/sap_belize/library-parameters.json";
		String requestHeader0037 = "GET " + requestFile0037 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500017fd252eb-4992-4aa4-9a2a-57db277bbe2229820909-1501-babe-face-00000000000386cf0284-c202-4a4b-bd28-03e5292d642dHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145437-788976\r\n" + 
				"X-Ajax-Token: KFuoBGMT94BbHw6aEFcfZ9b4iyo%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0037, requestHost0037, requestPort0037, requestHeader0037, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0037 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [38] <- WEB ADMIN Index 38 ---
		String requestProt0038 = "https";
		String requestHost0038 = "hcm4preview.sapsf.com";
		int    requestPort0038 = 443;
		String requestFile0038 = "/ui/sapui5/main_1.65.5/sap/ui/core/themes/base/fonts/SAP-icons.woff2";
		String requestHeader0038 = "GET " + requestFile0038 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/ui/uicore/css/revolutionfont-Icons_e66c293a573ac22c088d0dae05237b02.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0038, requestHost0038, requestPort0038, requestHeader0038, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0038 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [39] <- WEB ADMIN Index 39 ---
		String requestProt0039 = "https";
		String requestHost0039 = "hcm4preview.sapsf.com";
		int    requestPort0039 = 443;
		String requestFile0039 = "/ui/sapui5/main_1.65.5/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		String requestHeader0039 = "GET " + requestFile0039 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/ui/sapui5/main_1.65.5/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0039, requestHost0039, requestPort0039, requestHeader0039, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0039 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [40] <- WEB ADMIN Index 40 ---
		String requestProt0040 = "https";
		String requestHost0040 = "hcm4preview.sapsf.com";
		int    requestPort0040 = 443;
		String requestFile0040 = "/ui/surj/resources_1.4/SF-supp-icons.ttf";
		String requestHeader0040 = "GET " + requestFile0040 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/ui/uicore/css/revolutionfont-Icons_e66c293a573ac22c088d0dae05237b02.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0040, requestHost0040, requestPort0040, requestHeader0040, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0040 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;



		// all http requests of page #1_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 3 of 3)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [41] <- WEB ADMIN Index 41 ---
		String requestProt0041 = "https";
		String requestHost0041 = "hcm4preview.sapsf.com";
		int    requestPort0041 = 443;
		String requestFile0041 = "/ui/sapui5/main_1.65.5/sap/ui/core/themes/sap_belize/fonts/72-Bold.woff2";
		String requestHeader0041 = "GET " + requestFile0041 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/ui/sapui5/main_1.65.5/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0041, requestHost0041, requestPort0041, requestHeader0041, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0041 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [42] <- WEB ADMIN Index 42 ---
		String requestProt0042 = "https";
		String requestHost0042 = "hcm4preview.sapsf.com";
		int    requestPort0042 = 443;
		String requestFile0042 = "/public/theme-api/css/tctest/*/ui/login/css/bizx/BizXLoginTheme.dcss";
		String requestHeader0042 = "GET " + requestFile0042 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0042, requestHost0042, requestPort0042, requestHeader0042, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0042 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [42] <- Index 42
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		htmlContentParser = new HtmlContentParser(testURL, this);
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'C_Mod2'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0042_1 = new BoundaryBasedExtractorItem( "3Fmod=" , "=26name",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0042_1);

		// setup var extractor for 'C_UIres'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0042_2 = new BoundaryBasedExtractorItem( "uires=" , "=3Fmod",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0042_2);

		// setup var extractor for 'C_Name'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0042_3 = new BoundaryBasedExtractorItem( "3DTeck=" , ".jpg",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0042_3);

		// setup var extractor for 'C_belieze1'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0042_4 = new BoundaryBasedExtractorItem( ".jpg" , "/ui/login/",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0042_4);

		// setup var extractor for 'C_href2'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0042_5 = new BoundaryBasedExtractorItem( "dcss/tctest/_/" , "uires=",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0042_5);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Mod2'
			C_Mod2 = boundaryBasedHeaderExtractorItem0042_1.getResultText();
			log("<<< C_Mod2 = " + C_Mod2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod2!= null && C_Mod2.trim().length() == 0)
			{
				C_Mod2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod2' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod2 = " + C_Mod2);
			}
		}
		catch (Exception e) { C_Mod2 = null; log(e); }
		if (C_Mod2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Mod0'
			C_Mod0 = Lib.trimString(Lib.extractTextToken(testURL.getHeaderField("Location"), 2, ";"));		// recorded value = mod=10fe641c
			log("<<< C_Mod0 = " + C_Mod0);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod0!= null && C_Mod0.trim().length() == 0)
			{
				C_Mod0 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod0' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod0 = " + C_Mod0);
			}
		}
		catch (Exception e) { C_Mod0 = null; log(e); }
		if (C_Mod0 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod0' from http response header field";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_UIres'
			C_UIres = boundaryBasedHeaderExtractorItem0042_2.getResultText();
			log("<<< C_UIres = " + C_UIres);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_UIres!= null && C_UIres.trim().length() == 0)
			{
				C_UIres = "";
				log("runtime note: the extraction of a new value for the variable 'C_UIres' ends up with an empty string - a substitute value was set");
				log("<<< C_UIres = " + C_UIres);
			}
		}
		catch (Exception e) { C_UIres = null; log(e); }
		if (C_UIres == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_UIres' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Name'
			C_Name = boundaryBasedHeaderExtractorItem0042_3.getResultText();
			log("<<< C_Name = " + C_Name);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Name!= null && C_Name.trim().length() == 0)
			{
				C_Name = "";
				log("runtime note: the extraction of a new value for the variable 'C_Name' ends up with an empty string - a substitute value was set");
				log("<<< C_Name = " + C_Name);
			}
		}
		catch (Exception e) { C_Name = null; log(e); }
		if (C_Name == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Name' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_belieze1'
			C_belieze1 = boundaryBasedHeaderExtractorItem0042_4.getResultText();
			log("<<< C_belieze1 = " + C_belieze1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_belieze1!= null && C_belieze1.trim().length() == 0)
			{
				C_belieze1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_belieze1' ends up with an empty string - a substitute value was set");
				log("<<< C_belieze1 = " + C_belieze1);
			}
		}
		catch (Exception e) { C_belieze1 = null; log(e); }
		if (C_belieze1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_belieze1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_href2'
			C_href2 = boundaryBasedHeaderExtractorItem0042_5.getResultText();
			log("<<< C_href2 = " + C_href2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_href2!= null && C_href2.trim().length() == 0)
			{
				C_href2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_href2' ends up with an empty string - a substitute value was set");
				log("<<< C_href2 = " + C_href2);
			}
		}
		catch (Exception e) { C_href2 = null; log(e); }
		if (C_href2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_href2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [43] <- WEB ADMIN Index 43 ---
		String requestProt0043 = "https";
		String requestHost0043 = "hcm4preview.sapsf.com";
		int    requestPort0043 = 443;
		String requestFile0043 = "/perfLogServlet" +
				"?callId=7664242322-0" +
				"&eventId=EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145437-788976" +
				"&ST=1571770477808" +
				"&MEM=13966" +
				"&NRE=28" +
				"&NWR=26" +
				"&SCPU=10" +
				"&SQLC=41" +
				"&SQLT=21" +
				"&SVT=81" +
				"&UCPU=50" +
				"&CPU=60" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=19" +
				"&cssNum=8" +
				"&renderTime=1609" +
				"&TTB=88" +
				"&RSR=1022" +
				"&DIA=2156";
		String requestContent0043 = 
				"OPTR_INFO=411f3276-f0c2-4fc0-9520-67fd2d8bb725!1571770479214!1571770479267!0" +
				"&OPTR_INFO=2cf63214-3212-4018-8920-37a82ad04020!1571770479322!1571770479491!0" +
				"&OPTR_INFO=657acb02-f4fd-11e9-a9d0-5927ca99197e!0!1571770479572!1" +
				"&OPTR_INFO=1f4fa2f3-3682-47bf-be25-60152c16a523!1571770479598!1571770479636!0" +
				"&OPTR_INFO=50863288-cc42-42ca-8225-285d2f1e5725!1571770479657!1571770479692!0" +
				"&OPTR_INFO=f59dc2e3-3f12-449d-bf29-db712531362f!1571770479736!1571770479773!0" +
				"&OPTR_INFO=6d008226-9fd2-448c-9126-6bfd24057428!1571770479780!1571770479815!0" +
				"&OPTR_INFO=f4b8029a-8b02-4bf7-b22a-7a1f21af8824!1571770479818!1571770479853!0" +
				"&OPTR_INFO=a260728d-9382-40ba-a42e-f2562ae1e62f!1571770479862!1571770480013!0" +
				"&OPTR_INFO=7fd252eb-4992-4aa4-9a2a-57db277bbe22!1571770480021!1571770480109!0";
		String requestHeader0043 = "POST " + requestFile0043 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145437-788976\r\n" + 
				"X-Ajax-Token: KFuoBGMT94BbHw6aEFcfZ9b4iyo%3d\r\n" + 
				"Content-Length: " + requestContent0043.length() + "\r\n" + 		// Content-Length: 757
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0043, requestHost0043, requestPort0043, requestHeader0043, requestContent0043.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0043 = null;		// support garbage collector to reduce memory
		requestContent0043 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: check size +/- 5%, defined content size = 0
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, 0, 5);		// Test [43] <- Index 43
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [44] <- WEB ADMIN Index 44 ---
		String requestProt0044 = "https";
		String requestHost0044 = "hcm4preview.sapsf.com";
		int    requestPort0044 = 443;
		String requestFile0044 = "/ui/login/img/sf_logo_new_white_54bd215a5131b86dfb90fa1f29efb843.png";
		String requestHeader0044 = "GET " + requestFile0044 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/ui/login/css/bizx/BizXLogin_1e062c07e4f3d7e580f4e1685abe3701.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0044, requestHost0044, requestPort0044, requestHeader0044, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0044 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [45] <- WEB ADMIN Index 45 ---
		String requestProt0045 = "https";
		String requestHost0045 = "hcm4preview.sapsf.com";
		int    requestPort0045 = 443;
		String requestFile0045 = "/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/ui/login/css/bizx/BizXLoginTheme.dcss;mod=10fe641c";
		requestFile0045 = Lib.replaceTextPattern(requestFile0045, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod2' on all occurrences
		requestFile0045 = Lib.replaceTextPattern(requestFile0045, "mod=10fe641c", C_Mod0, 0);		// search and replace request file fragment "mod=10fe641c" with variable 'C_Mod0' on all occurrences
		requestFile0045 = Lib.replaceTextPattern(requestFile0045, "3A280", C_UIres, 0);		// search and replace request file fragment "3A280" with variable 'C_UIres' on all occurrences
		requestFile0045 = Lib.replaceTextPattern(requestFile0045, "255f54321=252d2", C_Name, 0);		// search and replace request file fragment "255f54321=252d2" with variable 'C_Name' on all occurrences
		requestFile0045 = Lib.replaceTextPattern(requestFile0045, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!" with variable 'C_belieze1' on all occurrences
		requestFile0045 = Lib.replaceTextPattern(requestFile0045, "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2, 0);		// search and replace request file fragment "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_href2' on all occurrences

		String requestHeader0045 = "GET " + requestFile0045 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0045, requestHost0045, requestPort0045, requestHeader0045, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0045 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 910
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [45] <- Index 45
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [46] <- WEB ADMIN Index 46 ---
		String requestProt0046 = "https";
		String requestHost0046 = "hcm4preview.sapsf.com";
		int    requestPort0046 = 443;
		String requestFile0046 = "/ui/login/img/topnav/belize_light_bg_132a77170450d7007fd6f1b60109ccd6.png";
		String requestHeader0046 = "GET " + requestFile0046 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/ui/login/css/bizx/BizXLoginTheme.dcss;mod=10fe641c\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0046, requestHost0046, requestPort0046, requestHeader0046, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("mod=10fe641c", C_Mod0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3A280", C_UIres);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("255f54321=252d2", C_Name);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0046 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 3765
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [46] <- Index 46
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [47] <- WEB ADMIN Index 47 ---
		String requestProt0047 = "https";
		String requestHost0047 = "hcm4preview.sapsf.com";
		int    requestPort0047 = 443;
		String requestFile0047 = "/ui/login/img/sf_logo_new_dark_bbca44d394a268f0a40b207fdf794ae9.png";
		String requestHeader0047 = "GET " + requestFile0047 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/ui/login/css/bizx/BizXLoginTheme.dcss;mod=10fe641c\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0047, requestHost0047, requestPort0047, requestHeader0047, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("mod=10fe641c", C_Mod0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3A280", C_UIres);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("255f54321=252d2", C_Name);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0047 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 1792
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [47] <- Index 47
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [48] <- WEB ADMIN Index 48 ---
		String requestProt0048 = "https";
		String requestHost0048 = "hcm4preview.sapsf.com";
		int    requestPort0048 = 443;
		String requestFile0048 = "/companyLogoServlet/" +
				"?companyId=tctest";
		String requestHeader0048 = "GET " + requestFile0048 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0048, requestHost0048, requestPort0048, requestHeader0048, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0048 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [49] <- WEB ADMIN Index 49 ---
		String requestProt0049 = "https";
		String requestHost0049 = "ds-aksb-a.akamaihd.net";
		int    requestPort0049 = 443;
		String requestFile0049 = "/2/492962/b" +
				"?dE=0" +
				"&cS=0" +
				"&cE=1" +
				"&rqS=1" +
				"&rsS=83" +
				"&rsE=1005" +
				"&sS=-6" +
				"&dl=1016" +
				"&di=2150" +
				"&fp=" +
				"&dlS=2170" +
				"&dlE=2901" +
				"&dc=3380" +
				"&leS=3380" +
				"&leE=3380" +
				"&to=" +
				"&ol=0" +
				"&cr=22" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/sf/login" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A69.0%29%20Gecko/20100101%20Firefox/69.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=24.244.17.176" +
				"&t=" +
				"&rid=1a999274" +
				"&r=11746" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=6037fc00" +
				"&akTX=1" +
				"&akTI=1a999274" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0049 = "GET " + requestFile0049 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0049, requestHost0049, requestPort0049, requestHeader0049, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0049 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;



		// all http requests of page #1_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #2: Login
		// # --------------



		// --- HTTP REQUEST: Test [51] <- WEB ADMIN Index 51 ---
		String requestProt0051 = "https";
		String requestHost0051 = "hcm4preview.sapsf.com";
		int    requestPort0051 = 443;
		String requestFile0051 = "/ui/sapui5/main_1.65.5/sap/ui/core/themes/sap_belize/fonts/72-Regular-full.woff2";
		String requestHeader0051 = "GET " + requestFile0051 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/ui/sapui5/main_1.65.5/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0051, requestHost0051, requestPort0051, requestHeader0051, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0051 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 53376
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [51] <- Index 51
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [52] <- WEB ADMIN Index 52 ---
		String requestProt0052 = "https";
		String requestHost0052 = "hcm4preview.sapsf.com";
		int    requestPort0052 = 443;
		String requestFile0052 = "/login";
		String requestContent0052 = 
				"referer=%2Fsf%2Flogin%3Fcompany%3Dtctest%26loginMethod%3DSSO" +
				"&bplte_userid=" +
				"&company=tctest" +
				"&username=SIT20018" +
				"&password=Perform1234%21";
		requestContent0052 = Lib.replaceTextPattern(requestContent0052, "Perform1234%21", P_Password, 0);		// search and replace content fragment "Perform1234%21" with variable 'P_Password' on all occurrences
		requestContent0052 = Lib.replaceTextPattern(requestContent0052, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences

		String requestHeader0052 = "POST " + requestFile0052 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0052.length() + "\r\n" + 		// Content-Length: 131
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0052, requestHost0052, requestPort0052, requestHeader0052, requestContent0052.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0052 = null;		// support garbage collector to reduce memory
		requestContent0052 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [52] <- Index 52
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		htmlContentParser = new HtmlContentParser(testURL, this);
		try
		{
			// extract var 'vScrb'
			vScrb = testURL.getRedirectLocation().getParameter("_s.crb");		// recorded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
			log("<<< vScrb = " + vScrb);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && vScrb!= null && vScrb.trim().length() == 0)
			{
				vScrb = "";
				log("runtime note: the extraction of a new value for the variable 'vScrb' ends up with an empty string - a substitute value was set");
				log("<<< vScrb = " + vScrb);
			}
		}
		catch (Exception e) { vScrb = null; log(e); }
		if (vScrb == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'vScrb' from http redirection";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [53] <- WEB ADMIN Index 53 ---
		log();
		log("# title: SuccessFactors: Home");
		String requestProt0053 = "https";
		String requestHost0053 = "hcm4preview.sapsf.com";
		int    requestPort0053 = 443;
		String requestFile0053 = "/sf/login" +
				"?company=tctest" +
				"&loginMethod=SSO" +
				"&_s.crb=" + vScrb;		// recorded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		String requestHeader0053 = "GET " + requestFile0053 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0053, requestHost0053, requestPort0053, requestHeader0053, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0053 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 7648
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors: Home");		// Test [53] <- Index 53
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Merge1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0053_1 = new BoundaryBasedExtractorItem( "merge_" , "/ui/sapui",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0053_1);

		// setup var extractor for 'C_Showme1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0053_2 = new BoundaryBasedExtractorItem( "\"showme_" , "\",\"authorPerm",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0053_2);

		// setup var extractor for 'C_EventID'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0053_3 = new BoundaryBasedExtractorItem( "EID=EVENT-UNKNOWN-UNKNOWN-" , "&",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0053_3);

		// setup var extractor for 'C_mod1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0053_4 = new BoundaryBasedExtractorItem( "mod=" , "\" type=\"text",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0053_4);

		// setup var extractor for 'C_AjaxToken'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0053_5 = new BoundaryBasedExtractorItem( "var ajaxSecKey = \"" , "\";",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0053_5);

		// setup var extractor for 'C_href1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0053_6 = new BoundaryBasedExtractorItem( "ui-dcss/tctest/_/" , ";mod",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0053_6);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Merge1'
			C_Merge1 = boundaryBasedContentExtractorItem0053_1.getResultText();
			log("<<< C_Merge1 = " + C_Merge1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Merge1!= null && C_Merge1.trim().length() == 0)
			{
				C_Merge1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Merge1' ends up with an empty string - a substitute value was set");
				log("<<< C_Merge1 = " + C_Merge1);
			}
		}
		catch (Exception e) { C_Merge1 = null; log(e); }
		if (C_Merge1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Merge1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Showme1'
			C_Showme1 = boundaryBasedContentExtractorItem0053_2.getResultText();
			log("<<< C_Showme1 = " + C_Showme1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Showme1!= null && C_Showme1.trim().length() == 0)
			{
				C_Showme1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Showme1' ends up with an empty string - a substitute value was set");
				log("<<< C_Showme1 = " + C_Showme1);
			}
		}
		catch (Exception e) { C_Showme1 = null; log(e); }
		if (C_Showme1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Showme1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_EventID'
			C_EventID = boundaryBasedContentExtractorItem0053_3.getResultText();
			log("<<< C_EventID = " + C_EventID);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_EventID!= null && C_EventID.trim().length() == 0)
			{
				C_EventID = "";
				log("runtime note: the extraction of a new value for the variable 'C_EventID' ends up with an empty string - a substitute value was set");
				log("<<< C_EventID = " + C_EventID);
			}
		}
		catch (Exception e) { C_EventID = null; log(e); }
		if (C_EventID == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_EventID' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_mod1'
			C_mod1 = boundaryBasedContentExtractorItem0053_4.getResultText();
			log("<<< C_mod1 = " + C_mod1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_mod1!= null && C_mod1.trim().length() == 0)
			{
				C_mod1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_mod1' ends up with an empty string - a substitute value was set");
				log("<<< C_mod1 = " + C_mod1);
			}
		}
		catch (Exception e) { C_mod1 = null; log(e); }
		if (C_mod1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_mod1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_AjaxToken'
			C_AjaxToken = boundaryBasedContentExtractorItem0053_5.getResultText();
			log("<<< C_AjaxToken = " + C_AjaxToken);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_AjaxToken!= null && C_AjaxToken.trim().length() == 0)
			{
				C_AjaxToken = "";
				log("runtime note: the extraction of a new value for the variable 'C_AjaxToken' ends up with an empty string - a substitute value was set");
				log("<<< C_AjaxToken = " + C_AjaxToken);
			}
		}
		catch (Exception e) { C_AjaxToken = null; log(e); }
		if (C_AjaxToken == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_AjaxToken' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_href1'
			C_href1 = boundaryBasedContentExtractorItem0053_6.getResultText();
			log("<<< C_href1 = " + C_href1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_href1!= null && C_href1.trim().length() == 0)
			{
				C_href1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_href1' ends up with an empty string - a substitute value was set");
				log("<<< C_href1 = " + C_href1);
			}
		}
		catch (Exception e) { C_href1 = null; log(e); }
		if (C_href1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_href1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [54] <- WEB ADMIN Index 54 ---
		String requestProt0054 = "https";
		String requestHost0054 = "hcm4preview.sapsf.com";
		int    requestPort0054 = 443;
		String requestFile0054 = "/public/ui-dcss/tctest/_/3l!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2JreRG!/.dcss;mod=42095680";
		requestFile0054 = Lib.replaceTextPattern(requestFile0054, "42095680", C_mod1, 0);		// search and replace request file fragment "42095680" with variable 'C_mod1' on all occurrences
		requestFile0054 = Lib.replaceTextPattern(requestFile0054, "3l!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2JreRG!/.dcss", C_href1, 0);		// search and replace request file fragment "3l!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2JreRG!/.dcss" with variable 'C_href1' on all occurrences

		String requestHeader0054 = "GET " + requestFile0054 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0054, requestHost0054, requestPort0054, requestHeader0054, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0054 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [55] <- WEB ADMIN Index 55 ---
		String requestProt0055 = "https";
		String requestHost0055 = "hcm4preview.sapsf.com";
		int    requestPort0055 = 443;
		String requestFile0055 = "/ui/sapui5/main_1.65.5/sap/ui/thirdparty/jqueryui/jquery-ui-position.js";
		String requestHeader0055 = "GET " + requestFile0055 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0055, requestHost0055, requestPort0055, requestHeader0055, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0055 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [56] <- WEB ADMIN Index 56 ---
		String requestProt0056 = "https";
		String requestHost0056 = "hcm4preview.sapsf.com";
		int    requestPort0056 = 443;
		String requestFile0056 = "/ui/topnav/img/belize_light_bg_132a77170450d7007fd6f1b60109ccd6.png";
		String requestHeader0056 = "GET " + requestFile0056 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/public/ui-dcss/tctest/_/3l!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2JreRG!/.dcss;mod=42095680\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0056, requestHost0056, requestPort0056, requestHeader0056, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("42095680", C_mod1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3l!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2JreRG!/.dcss", C_href1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0056 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [57] <- WEB ADMIN Index 57 ---
		String requestProt0057 = "https";
		String requestHost0057 = "hcm4preview.sapsf.com";
		int    requestPort0057 = 443;
		String requestFile0057 = "/ui/homepage3/resources_BC534AFF1C78D2852F6E6247898C3C7E/sap/ushell/library-preload.js";
		String requestHeader0057 = "GET " + requestFile0057 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0057, requestHost0057, requestPort0057, requestHeader0057, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0057 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [58] <- WEB ADMIN Index 58 ---
		String requestProt0058 = "https";
		String requestHost0058 = "hcm4preview.sapsf.com";
		int    requestPort0058 = 443;
		String requestFile0058 = "/ui/homepage3/resources_B9DB6696EC83C7A2651CEE8087CCB8DF/sap/sf/homepage3/commons/library-preload.js";
		String requestHeader0058 = "GET " + requestFile0058 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0058, requestHost0058, requestPort0058, requestHeader0058, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0058 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [59] <- WEB ADMIN Index 59 ---
		String requestProt0059 = "https";
		String requestHost0059 = "hcm4preview.sapsf.com";
		int    requestPort0059 = 443;
		String requestFile0059 = "/perfLogServlet" +
				"?callId=4597992751-0" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&ST=1571770499267" +
				"&MEM=295300" +
				"&NRE=2416" +
				"&NWR=339" +
				"&SCPU=60" +
				"&SQLC=336" +
				"&SQLT=589" +
				"&SVT=1646" +
				"&UCPU=840" +
				"&CPU=900" +
				"&FRE=11" +
				"&FWR=0" +
				"&jsNum=15" +
				"&cssNum=1" +
				"&renderTime=116" +
				"&RED=1" +
				"&TTB=14" +
				"&RSR=2425" +
				"&DIA=2583";
		String requestContent0059 = 
				"OPTR_INFO=7246db16-f4fd-11e9-a9d0-5927ca99197e!1571770499017!1571770501598!1";
		String requestHeader0059 = "POST " + requestFile0059 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0059.length() + "\r\n" + 		// Content-Length: 76
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0059, requestHost0059, requestPort0059, requestHeader0059, requestContent0059.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0059 = null;		// support garbage collector to reduce memory
		requestContent0059 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [59] <- Index 59
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [60] <- WEB ADMIN Index 60 ---
		String requestProt0060 = "https";
		String requestHost0060 = "hcm4preview.sapsf.com";
		int    requestPort0060 = 443;
		String requestFile0060 = "/ui/sapui5/main_1.65.5/sap/ui/core/library.js";
		String requestHeader0060 = "GET " + requestFile0060 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500011ac90231-a2a2-4db2-bc2a-61a42127e32a29820909-1501-babe-face-0000000000039cf412ea-9f02-4868-bf24-342828ecc023HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-1\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0060, requestHost0060, requestPort0060, requestHeader0060, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0060 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [61] <- WEB ADMIN Index 61 ---
		String requestProt0061 = "https";
		String requestHost0061 = "hcm4preview.sapsf.com";
		int    requestPort0061 = 443;
		String requestFile0061 = "/public/ui-dcss/tctest/_/3l!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2JreRG!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css";
		requestFile0061 = Lib.replaceTextPattern(requestFile0061, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0061 = "GET " + requestFile0061 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0061, requestHost0061, requestPort0061, requestHeader0061, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0061 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [62] <- WEB ADMIN Index 62 ---
		String requestProt0062 = "https";
		String requestHost0062 = "hcm4preview.sapsf.com";
		int    requestPort0062 = 443;
		String requestFile0062 = "/ui/sapui5/main_1.65.5/sap/m/library.js";
		String requestHeader0062 = "GET " + requestFile0062 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500010b2a321c-fd82-4dae-8821-62f02fa0b92529820909-1501-babe-face-000000000003d29602df-9e92-477c-ab2b-3ce52309c52bHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-1\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0062, requestHost0062, requestPort0062, requestHeader0062, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0062 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [63] <- WEB ADMIN Index 63 ---
		String requestProt0063 = "https";
		String requestHost0063 = "hcm4preview.sapsf.com";
		int    requestPort0063 = 443;
		String requestFile0063 = "/ui/sapui5/main_1.65.5/sap/base/strings/capitalize.js";
		String requestHeader0063 = "GET " + requestFile0063 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001355632ab-6d62-4a18-a626-b2592958f92729820909-1501-babe-face-0000000000030a9fc2b2-7b22-420d-862a-4b5f2ad2fb27HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-1\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0063, requestHost0063, requestPort0063, requestHeader0063, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0063 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [64] <- WEB ADMIN Index 64 ---
		String requestProt0064 = "https";
		String requestHost0064 = "hcm4preview.sapsf.com";
		int    requestPort0064 = 443;
		String requestFile0064 = "/ui/sapui5/main_1.65.5/sap/base/security/encodeCSS.js";
		String requestHeader0064 = "GET " + requestFile0064 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500014359325e-f9f2-4c0f-982c-ccbb2aad4a2329820909-1501-babe-face-000000000003827f22e6-8222-483b-a124-a94e21709c26HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-1\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0064, requestHost0064, requestPort0064, requestHeader0064, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0064 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [65] <- WEB ADMIN Index 65 ---
		String requestProt0065 = "https";
		String requestHost0065 = "hcm4preview.sapsf.com";
		int    requestPort0065 = 443;
		String requestFile0065 = "/ui/sapui5/main_1.65.5/sap/m/Support.js";
		String requestHeader0065 = "GET " + requestFile0065 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500017d67a295-59c2-4f80-a725-6bbd21fcc12a29820909-1501-babe-face-000000000003ddeb3284-ac92-4d74-a024-cd3325848d24HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-1\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0065, requestHost0065, requestPort0065, requestHeader0065, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0065 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [66] <- WEB ADMIN Index 66 ---
		String requestProt0066 = "https";
		String requestHost0066 = "hcm4preview.sapsf.com";
		int    requestPort0066 = 443;
		String requestFile0066 = "/public/ui-dcss/tctest/_/3l!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2JreRG!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library.css";
		requestFile0066 = Lib.replaceTextPattern(requestFile0066, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0066 = "GET " + requestFile0066 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0066, requestHost0066, requestPort0066, requestHeader0066, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0066 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [67] <- WEB ADMIN Index 67 ---
		String requestProt0067 = "https";
		String requestHost0067 = "hcm4preview.sapsf.com";
		int    requestPort0067 = 443;
		String requestFile0067 = "/ui/homepage3/resources_BC534AFF1C78D2852F6E6247898C3C7E/sap/ushell/themes/sap_belize/library.css";
		String requestHeader0067 = "GET " + requestFile0067 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0067, requestHost0067, requestPort0067, requestHeader0067, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0067 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [68] <- WEB ADMIN Index 68 ---
		String requestProt0068 = "https";
		String requestHost0068 = "hcm4preview.sapsf.com";
		int    requestPort0068 = 443;
		String requestFile0068 = "/ui/homepage3/resources_B9DB6696EC83C7A2651CEE8087CCB8DF/sap/sf/homepage3/commons/themes/sap_belize/library.css";
		String requestHeader0068 = "GET " + requestFile0068 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0068, requestHost0068, requestPort0068, requestHeader0068, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0068 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [69] <- WEB ADMIN Index 69 ---
		String requestProt0069 = "https";
		String requestHost0069 = "hcm4preview.sapsf.com";
		int    requestPort0069 = 443;
		String requestFile0069 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TRS";
		String requestHeader0069 = "GET " + requestFile0069 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0069, requestHost0069, requestPort0069, requestHeader0069, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0069 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [70] <- WEB ADMIN Index 70 ---
		String requestProt0070 = "https";
		String requestHost0070 = "hcm4preview.sapsf.com";
		int    requestPort0070 = 443;
		String requestFile0070 = "/public/ui-dcss/tctest/_/3l!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2JreRG!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		requestFile0070 = Lib.replaceTextPattern(requestFile0070, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0070 = "GET " + requestFile0070 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/public/ui-dcss/tctest/_/3l!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2JreRG!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0070, requestHost0070, requestPort0070, requestHeader0070, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FD3E69DB8103A603EC04DBBA1D636582", C_Merge1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0070 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;



		// all http requests of page #2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 2 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [71] <- WEB ADMIN Index 71 ---
		String requestProt0071 = "https";
		String requestHost0071 = "hcm4preview.sapsf.com";
		int    requestPort0071 = 443;
		String requestFile0071 = "/perfLogServlet" +
				"?callId=4597992751-1" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&TRS=729" +
				"&ST=1571770501883" +
				"&ET=1571770502372" +
				"&MEM=0" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=0" +
				"&UCPU=0" +
				"&CPU=0" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=15" +
				"&cssNum=8" +
				"&renderTime=274";
		String requestContent0071 = 
				"OPTR_INFO=1ac90231-a2a2-4db2-bc2a-61a42127e32a!1571770501883!1571770501919!0" +
				"&OPTR_INFO=0b2a321c-fd82-4dae-8821-62f02fa0b925!1571770501947!1571770501997!0" +
				"&OPTR_INFO=355632ab-6d62-4a18-a626-b2592958f927!1571770502001!1571770502045!0" +
				"&OPTR_INFO=4359325e-f9f2-4c0f-982c-ccbb2aad4a23!1571770502047!1571770502088!0" +
				"&OPTR_INFO=7d67a295-59c2-4f80-a725-6bbd21fcc12a!1571770502092!1571770502137!0" +
				"&OPTR_INFO=429ec2e8-4a92-40b0-ae24-897d21a0332b!1571770502149!1571770502157!0";
		String requestHeader0071 = "POST " + requestFile0071 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-1\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0071.length() + "\r\n" + 		// Content-Length: 461
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0071, requestHost0071, requestPort0071, requestHeader0071, requestContent0071.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0071 = null;		// support garbage collector to reduce memory
		requestContent0071 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [71] <- Index 71
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [72] <- WEB ADMIN Index 72 ---
		String requestProt0072 = "https";
		String requestHost0072 = "hcm4preview.sapsf.com";
		int    requestPort0072 = 443;
		String requestFile0072 = "/ui/homepage3/resources_A5340237F9A603BDB523F8A2CE927FB6/sap/sf/homepage3/core/Component-preload.js";
		String requestHeader0072 = "GET " + requestFile0072 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001b6c702fc-59f2-4e4f-aa2c-130424a0982729820909-1501-babe-face-0000000000036ac062b6-5c52-4487-9229-296b22358125HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0072, requestHost0072, requestPort0072, requestHeader0072, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0072 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [73] <- WEB ADMIN Index 73 ---
		String requestProt0073 = "https";
		String requestHost0073 = "hcm4preview.sapsf.com";
		int    requestPort0073 = 443;
		String requestFile0073 = "/ui/homepage3/resources_A5340237F9A603BDB523F8A2CE927FB6/sap/sf/homepage3/core/css/homepage3.css";
		String requestHeader0073 = "GET " + requestFile0073 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0073, requestHost0073, requestPort0073, requestHeader0073, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0073 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [74] <- WEB ADMIN Index 74 ---
		String requestProt0074 = "https";
		String requestHost0074 = "hcm4preview.sapsf.com";
		int    requestPort0074 = 443;
		String requestFile0074 = "/ui/homepage3/resources_BC534AFF1C78D2852F6E6247898C3C7E/sap/ushell/renderers/fiori2/resources/resources_en.properties";
		String requestHeader0074 = "GET " + requestFile0074 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001e120e245-6c12-41c1-8f28-ffdd21ed062e29820909-1501-babe-face-0000000000036d766274-8952-4253-882c-71a32c40e02eHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0074, requestHost0074, requestPort0074, requestHeader0074, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0074 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [75] <- WEB ADMIN Index 75 ---
		String requestProt0075 = "https";
		String requestHost0075 = "hcm4preview.sapsf.com";
		int    requestPort0075 = 443;
		String requestFile0075 = "/ui/sapui5/main_1.65.5/sap/ui/core/mimes/logo/sap_50x26.png";
		String requestHeader0075 = "GET " + requestFile0075 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0075, requestHost0075, requestPort0075, requestHeader0075, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0075 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [76] <- WEB ADMIN Index 76 ---
		String requestProt0076 = "https";
		String requestHost0076 = "hcm4preview.sapsf.com";
		int    requestPort0076 = 443;
		String requestFile0076 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TIP";
		String requestHeader0076 = "GET " + requestFile0076 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0076, requestHost0076, requestPort0076, requestHeader0076, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0076 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [77] <- WEB ADMIN Index 77 ---
		String requestProt0077 = "https";
		String requestHost0077 = "hcm4preview.sapsf.com";
		int    requestPort0077 = 443;
		String requestFile0077 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TML";
		String requestHeader0077 = "GET " + requestFile0077 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0077, requestHost0077, requestPort0077, requestHeader0077, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0077 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [78] <- WEB ADMIN Index 78 ---
		String requestProt0078 = "https";
		String requestHost0078 = "hcm4preview.sapsf.com";
		int    requestPort0078 = 443;
		String requestFile0078 = "/xi/ui/commonshell/pages/smrf.xhtml" +
				"?js%5B%5D=%2Fui%2Fjuic%2Fjs%2Fcomponents%2FsfDom.js";
		String requestHeader0078 = "GET " + requestFile0078 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500018181120b-0372-4ef3-9a28-64d72e98d52429820909-1501-babe-face-0000000000030070b2d7-6d82-49e2-9222-cd3726176b26HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0078, requestHost0078, requestPort0078, requestHeader0078, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0078 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [79] <- WEB ADMIN Index 79 ---
		String requestProt0079 = "https";
		String requestHost0079 = "ds-aksb-a.akamaihd.net";
		int    requestPort0079 = 443;
		String requestFile0079 = "/2/492962/b" +
				"?dE=0" +
				"&cS=1" +
				"&cE=2" +
				"&rqS=3" +
				"&rsS=9" +
				"&rsE=1776" +
				"&sS=-642" +
				"&dl=1783" +
				"&di=1941" +
				"&fp=" +
				"&dlS=1951" +
				"&dlE=1953" +
				"&dc=2712" +
				"&leS=2712" +
				"&leE=2712" +
				"&to=" +
				"&ol=0" +
				"&cr=28" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/sf/login" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A69.0%29%20Gecko/20100101%20Firefox/69.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=24.244.17.176" +
				"&t=" +
				"&rid=1a99e1c4" +
				"&r=11746" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=6037fc00" +
				"&akTX=1" +
				"&akTI=1a99e1c4" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0079 = "GET " + requestFile0079 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0079, requestHost0079, requestPort0079, requestHeader0079, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0079 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [80] <- WEB ADMIN Index 80 ---
		String requestProt0080 = "https";
		String requestHost0080 = "hcm4preview.sapsf.com";
		int    requestPort0080 = 443;
		String requestFile0080 = "/messagebundle/tctest/vmod_1920985f-651502e6/sap.m!/ui/sapui5/main/sap/m/messagebundle_en_US.properties";
		String requestHeader0080 = "GET " + requestFile0080 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500016b91f28a-bf22-401f-9e25-34ab27b23f2429820909-1501-babe-face-000000000003be04d296-6482-4ce2-9224-9ca42da13521HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0080, requestHost0080, requestPort0080, requestHeader0080, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0080 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [81] <- WEB ADMIN Index 81 ---
		String requestProt0081 = "https";
		String requestHost0081 = "hcm4preview.sapsf.com";
		int    requestPort0081 = 443;
		String requestFile0081 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/util/PanelManager.js";
		String requestHeader0081 = "GET " + requestFile0081 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500011f3802ad-f422-48bb-8228-4d9722de142f29820909-1501-babe-face-00000000000322c5e231-8092-434f-b228-7acb2db9e021HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0081, requestHost0081, requestPort0081, requestHeader0081, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0081 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [82] <- WEB ADMIN Index 82 ---
		String requestProt0082 = "https";
		String requestHost0082 = "hcm4preview.sapsf.com";
		int    requestPort0082 = 443;
		String requestFile0082 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/util/Util.js";
		String requestHeader0082 = "GET " + requestFile0082 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001e2664238-3502-4ce0-b828-e56821b0772029820909-1501-babe-face-000000000003972ee233-4ac2-4c68-9b23-408b25671f2eHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0082, requestHost0082, requestPort0082, requestHeader0082, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0082 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [83] <- WEB ADMIN Index 83 ---
		String requestProt0083 = "https";
		String requestHost0083 = "hcm4preview.sapsf.com";
		int    requestPort0083 = 443;
		String requestFile0083 = "/messagebundle/tctest/vmod_4c354d61-651502e6/ui/todo/resources/sap/sf/todo/i18n/messagebundle_en_US.properties";
		String requestHeader0083 = "GET " + requestFile0083 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001c14352d3-af92-4ca2-8627-ada32720702129820909-1501-babe-face-00000000000322c0b272-9a02-479b-b62f-33122ef8532eHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0083, requestHost0083, requestPort0083, requestHeader0083, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0083 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [84] <- WEB ADMIN Index 84 ---
		String requestProt0084 = "https";
		String requestHost0084 = "hcm4preview.sapsf.com";
		int    requestPort0084 = 443;
		String requestFile0084 = "/messagebundle/tctest/vmod_139e41dd-651502e6/ui/homepage3/resources/sap/sf/homepage3/app/i18n/messagebundle_en_US.properties";
		String requestHeader0084 = "GET " + requestFile0084 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500014b4462c0-dd32-43a8-9d23-63ce23fa222b29820909-1501-babe-face-0000000000034784526c-3662-4c19-8129-29a725106225HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0084, requestHost0084, requestPort0084, requestHeader0084, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0084 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [85] <- WEB ADMIN Index 85 ---
		String requestProt0085 = "https";
		String requestHost0085 = "hcm4preview.sapsf.com";
		int    requestPort0085 = 443;
		String requestFile0085 = "/xi/ajax/remoting/call/plaincall/homepage3ControllerProxy.getTileInitializer.dwr" +
				"?_s.crb=" + C_AjaxToken;		// recorded value = FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d
		requestFile0085 = Lib.replaceTextPattern(requestFile0085, "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken, 0);		// search and replace request file fragment "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d" with variable 'C_AjaxToken' on all occurrences

		String requestContent0085 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423599" + "\r\n" + 
				"c0-scriptName=homepage3ControllerProxy" + "\r\n" + 
				"c0-methodName=getTileInitializer" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=null:null" + "\r\n" + 
				"batchId=0";
		byte[] binarySearchPattern0085_0 = Base64Decoder.decodeToBytes("RkswNW1mVVYzNldjeTUlMjUyYlppbVhIcnBWa0dVRSUyNTNk");		// note: the search pattern value is base 64 encoded. decoded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestContent0085 = new String(Lib.binaryReplace(requestContent0085.getBytes(), binarySearchPattern0085_0, java.net.URLEncoder.encode(C_AjaxToken).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0085 = "POST " + requestFile0085 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001f874921c-92b2-48b4-8729-30852935052629820909-1501-babe-face-0000000000035154f2f5-4a72-4abe-9525-0c8828566624HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0085.length() + "\r\n" + 		// Content-Length: 278
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0085, requestHost0085, requestPort0085, requestHeader0085, requestContent0085.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0085 = null;		// support garbage collector to reduce memory
		requestContent0085 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4971
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [85] <- Index 85
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [86] <- WEB ADMIN Index 86 ---
		String requestProt0086 = "https";
		String requestHost0086 = "hcm4preview.sapsf.com";
		int    requestPort0086 = 443;
		String requestFile0086 = "/messagebundle/tctest/vmod_e63c85ea-651502e6/ui/surj/resources/sap/sf/surj/shell/i18n/messagebundle_en_US.properties";
		String requestHeader0086 = "GET " + requestFile0086 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500015c7ef29a-b792-44c5-a82f-66822ec6382929820909-1501-babe-face-0000000000031ffb72bb-1702-41ec-8e29-4bff2dcff826HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0086, requestHost0086, requestPort0086, requestHeader0086, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0086 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [87] <- WEB ADMIN Index 87 ---
		String requestProt0087 = "https";
		String requestHost0087 = "hcm4preview.sapsf.com";
		int    requestPort0087 = 443;
		String requestFile0087 = "/xi/ajax/remoting/call/plaincall/globalNotificationControllerProxy.getNumberOfNewNotifications.dwr" +
				"?_s.crb=" + C_AjaxToken;		// recorded value = FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d
		requestFile0087 = Lib.replaceTextPattern(requestFile0087, "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken, 0);		// search and replace request file fragment "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d" with variable 'C_AjaxToken' on all occurrences

		String requestContent0087 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423599" + "\r\n" + 
				"c0-scriptName=globalNotificationControllerProxy" + "\r\n" + 
				"c0-methodName=getNumberOfNewNotifications" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"batchId=1";
		requestContent0087 = Lib.replaceTextPattern(requestContent0087, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences

		byte[] binarySearchPattern0087_0 = Base64Decoder.decodeToBytes("RkswNW1mVVYzNldjeTUlMjUyYlppbVhIcnBWa0dVRSUyNTNk");		// note: the search pattern value is base 64 encoded. decoded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestContent0087 = new String(Lib.binaryReplace(requestContent0087.getBytes(), binarySearchPattern0087_0, java.net.URLEncoder.encode(C_AjaxToken).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0087 = "POST " + requestFile0087 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000190a772b9-f282-40da-ab2f-556d22f6162a29820909-1501-babe-face-0000000000037b1d22b0-9bc2-43c4-9b23-694e294d6e2dHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0087.length() + "\r\n" + 		// Content-Length: 302
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0087, requestHost0087, requestPort0087, requestHeader0087, requestContent0087.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0087 = null;		// support garbage collector to reduce memory
		requestContent0087 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 114
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [87] <- Index 87
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [88] <- WEB ADMIN Index 88 ---
		String requestProt0088 = "https";
		String requestHost0088 = "hcm4preview.sapsf.com";
		int    requestPort0088 = 443;
		String requestFile0088 = "/xi/ajax/remoting/call/plaincall/showMeControllerProxy.signAPIUrl.dwr" +
				"?_s.crb=" + C_AjaxToken;		// recorded value = FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d
		requestFile0088 = Lib.replaceTextPattern(requestFile0088, "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken, 0);		// search and replace request file fragment "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d" with variable 'C_AjaxToken' on all occurrences

		String requestContent0088 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423599" + "\r\n" + 
				"c0-scriptName=showMeControllerProxy" + "\r\n" + 
				"c0-methodName=signAPIUrl" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:%2Fmedia%2Fshowme_597075b7_0dbc_491c_b3d1_f9fc838ee8e9%2FHOME_TAB%2Fstatus" + "\r\n" + 
				"c0-param1=string:HOME_TAB" + "\r\n" + 
				"c0-param2=string:727a1820ae53fe16b4a90eb72d5a4387" + "\r\n" + 
				"batchId=2";
		requestContent0088 = Lib.replaceTextPattern(requestContent0088, "597075b7_0dbc_491c_b3d1_f9fc838ee8e9", C_Showme1, 0);		// search and replace content fragment "597075b7_0dbc_491c_b3d1_f9fc838ee8e9" with variable 'C_Showme1' on all occurrences

		byte[] binarySearchPattern0088_0 = Base64Decoder.decodeToBytes("RkswNW1mVVYzNldjeTUlMjUyYlppbVhIcnBWa0dVRSUyNTNk");		// note: the search pattern value is base 64 encoded. decoded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestContent0088 = new String(Lib.binaryReplace(requestContent0088.getBytes(), binarySearchPattern0088_0, java.net.URLEncoder.encode(C_AjaxToken).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0088 = "POST " + requestFile0088 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500017c3f5248-7ed2-46c6-8526-e2cf299a972129820909-1501-babe-face-000000000003bc43a2c9-91f2-4777-bf2b-76052866192aHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0088.length() + "\r\n" + 		// Content-Length: 415
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0088, requestHost0088, requestPort0088, requestHeader0088, requestContent0088.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0088 = null;		// support garbage collector to reduce memory
		requestContent0088 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 420
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [88] <- Index 88
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Token2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0088_1 = new BoundaryBasedExtractorItem( "token=" , "\");",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0088_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Token2'
			C_Token2 = boundaryBasedContentExtractorItem0088_1.getResultText();
			log("<<< C_Token2 = " + C_Token2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Token2!= null && C_Token2.trim().length() == 0)
			{
				C_Token2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Token2' ends up with an empty string - a substitute value was set");
				log("<<< C_Token2 = " + C_Token2);
			}
		}
		catch (Exception e) { C_Token2 = null; log(e); }
		if (C_Token2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Token2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [89] <- WEB ADMIN Index 89 ---
		String requestProt0089 = "https";
		String requestHost0089 = "hcm4preview.sapsf.com";
		int    requestPort0089 = 443;
		String requestFile0089 = "/ui/inproductsupport/resources_6042571ACC8F5073B3A016270AADA7F0/sap/sf/ips/Container.js";
		String requestHeader0089 = "GET " + requestFile0089 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0089, requestHost0089, requestPort0089, requestHeader0089, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0089 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [90] <- WEB ADMIN Index 90 ---
		String requestProt0090 = "https";
		String requestHost0090 = "hcm4preview.sapsf.com";
		int    requestPort0090 = 443;
		String requestFile0090 = "/eduPhoto/view" +
				"?companyId=tctest" +
				"&photo_type=liveProfile" +
				"&user_id=SIT20018" +
				"&mod=";
		requestFile0090 = Lib.replaceTextPattern(requestFile0090, "SIT20018", P_UserID, 0);		// search and replace request file fragment "SIT20018" with variable 'P_UserID' on all occurrences

		String requestHeader0090 = "GET " + requestFile0090 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0090, requestHost0090, requestPort0090, requestHeader0090, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0090 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;



		// all http requests of page #2_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 3 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [91] <- WEB ADMIN Index 91 ---
		String requestProt0091 = "https";
		String requestHost0091 = "hcm4preview.sapsf.com";
		int    requestPort0091 = 443;
		String requestFile0091 = "/ui/smrf/js/smrf_cfafb3b7324cd76f1eefb96594e7b183.js";
		String requestHeader0091 = "GET " + requestFile0091 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0091, requestHost0091, requestPort0091, requestHeader0091, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0091 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [92] <- WEB ADMIN Index 92 ---
		String requestProt0092 = "https";
		String requestHost0092 = "hcm4preview.sapsf.com";
		int    requestPort0092 = 443;
		String requestFile0092 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/model/ApvReqModel.js";
		String requestHeader0092 = "GET " + requestFile0092 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0092, requestHost0092, requestPort0092, requestHeader0092, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0092 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [93] <- WEB ADMIN Index 93 ---
		String requestProt0093 = "https";
		String requestHost0093 = "hcm4preview.sapsf.com";
		int    requestPort0093 = 443;
		String requestFile0093 = "/ui/sfgrp/css/juicGlobal_fe32c31f4282fdbb81e71d8db1068b60.css";
		String requestHeader0093 = "GET " + requestFile0093 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0093, requestHost0093, requestPort0093, requestHeader0093, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0093 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [94] <- WEB ADMIN Index 94 ---
		String requestProt0094 = "https";
		String requestHost0094 = "hcm4preview.sapsf.com";
		int    requestPort0094 = 443;
		String requestFile0094 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/model/LearningModel.js";
		String requestHeader0094 = "GET " + requestFile0094 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0094, requestHost0094, requestPort0094, requestHeader0094, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0094 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [95] <- WEB ADMIN Index 95 ---
		String requestProt0095 = "https";
		String requestHost0095 = "hcm4preview.sapsf.com";
		int    requestPort0095 = 443;
		String requestFile0095 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/model/OnboardingModel.js";
		String requestHeader0095 = "GET " + requestFile0095 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0095, requestHost0095, requestPort0095, requestHeader0095, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0095 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [96] <- WEB ADMIN Index 96 ---
		String requestProt0096 = "https";
		String requestHost0096 = "hcm4preview.sapsf.com";
		int    requestPort0096 = 443;
		String requestFile0096 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/model/ThirdPartyModel.js";
		String requestHeader0096 = "GET " + requestFile0096 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0096, requestHost0096, requestPort0096, requestHeader0096, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0096 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [97] <- WEB ADMIN Index 97 ---
		String requestProt0097 = "https";
		String requestHost0097 = "hcm4preview.sapsf.com";
		int    requestPort0097 = 443;
		String requestFile0097 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/model/PayrollHireModel.js";
		String requestHeader0097 = "GET " + requestFile0097 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0097, requestHost0097, requestPort0097, requestHeader0097, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0097 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [98] <- WEB ADMIN Index 98 ---
		String requestProt0098 = "https";
		String requestHost0098 = "hcm4preview.sapsf.com";
		int    requestPort0098 = 443;
		String requestFile0098 = "/ui/uicore/img/photoNotAvailable_a0c897b28771df5c8ecfb20dfe63199d.gif";
		String requestHeader0098 = "GET " + requestFile0098 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0098, requestHost0098, requestPort0098, requestHeader0098, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0098 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [99] <- WEB ADMIN Index 99 ---
		String requestProt0099 = "https";
		String requestHost0099 = "hcm4preview.sapsf.com";
		int    requestPort0099 = 443;
		String requestFile0099 = "/xi/ajax/remoting/call/plaincall/dossierControllerProxy.getDossierSlideCount.dwr" +
				"?_s.crb=" + C_AjaxToken;		// recorded value = FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d
		requestFile0099 = Lib.replaceTextPattern(requestFile0099, "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken, 0);		// search and replace request file fragment "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d" with variable 'C_AjaxToken' on all occurrences

		String requestContent0099 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423599" + "\r\n" + 
				"c0-scriptName=dossierControllerProxy" + "\r\n" + 
				"c0-methodName=getDossierSlideCount" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:manager" + "\r\n" + 
				"batchId=3";
		byte[] binarySearchPattern0099_0 = Base64Decoder.decodeToBytes("RkswNW1mVVYzNldjeTUlMjUyYlppbVhIcnBWa0dVRSUyNTNk");		// note: the search pattern value is base 64 encoded. decoded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestContent0099 = new String(Lib.binaryReplace(requestContent0099.getBytes(), binarySearchPattern0099_0, java.net.URLEncoder.encode(C_AjaxToken).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0099 = "POST " + requestFile0099 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001a76812c1-6bb2-4a65-8623-e4b928ce822b29820909-1501-babe-face-000000000003db20b242-6e52-4786-9321-d4482ba2c627HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0099.length() + "\r\n" + 		// Content-Length: 283
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0099, requestHost0099, requestPort0099, requestHeader0099, requestContent0099.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0099 = null;		// support garbage collector to reduce memory
		requestContent0099 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 114
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [99] <- Index 99
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [100] <- WEB ADMIN Index 100 ---
		String requestProt0100 = "https";
		String requestHost0100 = "hcm4preview.sapsf.com";
		int    requestPort0100 = 443;
		String requestFile0100 = "/xi/ajax/remoting/call/plaincall/hp3ReportTileControllerProxy.getFavoritesCount.dwr" +
				"?_s.crb=" + C_AjaxToken;		// recorded value = FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d
		requestFile0100 = Lib.replaceTextPattern(requestFile0100, "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken, 0);		// search and replace request file fragment "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d" with variable 'C_AjaxToken' on all occurrences

		String requestContent0100 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423599" + "\r\n" + 
				"c0-scriptName=hp3ReportTileControllerProxy" + "\r\n" + 
				"c0-methodName=getFavoritesCount" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=4";
		byte[] binarySearchPattern0100_0 = Base64Decoder.decodeToBytes("RkswNW1mVVYzNldjeTUlMjUyYlppbVhIcnBWa0dVRSUyNTNk");		// note: the search pattern value is base 64 encoded. decoded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestContent0100 = new String(Lib.binaryReplace(requestContent0100.getBytes(), binarySearchPattern0100_0, java.net.URLEncoder.encode(C_AjaxToken).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0100 = "POST " + requestFile0100 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500010b69f21d-d032-4d80-8a2d-bf7f28c6972329820909-1501-babe-face-000000000003ac3b925d-66f2-4d46-892f-37cf2a90ad26HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0100.length() + "\r\n" + 		// Content-Length: 261
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0100, requestHost0100, requestPort0100, requestHeader0100, requestContent0100.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0100 = null;		// support garbage collector to reduce memory
		requestContent0100 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 114
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [100] <- Index 100
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [101] <- WEB ADMIN Index 101 ---
		String requestProt0101 = "https";
		String requestHost0101 = "hcm4preview.sapsf.com";
		int    requestPort0101 = 443;
		String requestFile0101 = "/ui/sapui5/main_1.65.5/sap/ui/core/cldr/en.json";
		String requestHeader0101 = "GET " + requestFile0101 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000174cbc2d3-d1e2-42d9-9025-25322a7de82329820909-1501-babe-face-000000000003b6d0027e-d012-4f0a-ac25-2f262f1ea223HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0101, requestHost0101, requestPort0101, requestHeader0101, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0101 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [102] <- WEB ADMIN Index 102 ---
		String requestProt0102 = "https";
		String requestHost0102 = "hcm4preview.sapsf.com";
		int    requestPort0102 = 443;
		String requestFile0102 = "/xi/ajax/remoting/call/plaincall/myInfoControllerProxy.getInitializer.dwr" +
				"?_s.crb=" + C_AjaxToken;		// recorded value = FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d
		requestFile0102 = Lib.replaceTextPattern(requestFile0102, "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken, 0);		// search and replace request file fragment "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d" with variable 'C_AjaxToken' on all occurrences

		String requestContent0102 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423599" + "\r\n" + 
				"c0-scriptName=myInfoControllerProxy" + "\r\n" + 
				"c0-methodName=getInitializer" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:10%2F22%2F2019" + "\r\n" + 
				"batchId=5";
		byte[] binarySearchPattern0102_0 = Base64Decoder.decodeToBytes("RkswNW1mVVYzNldjeTUlMjUyYlppbVhIcnBWa0dVRSUyNTNk");		// note: the search pattern value is base 64 encoded. decoded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestContent0102 = new String(Lib.binaryReplace(requestContent0102.getBytes(), binarySearchPattern0102_0, java.net.URLEncoder.encode(C_AjaxToken).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0102 = "POST " + requestFile0102 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500018c096264-4122-4700-a927-c0ab2f23d92d29820909-1501-babe-face-0000000000030a1062bb-9d32-4a3b-9727-b3a3295f1a2dHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0102.length() + "\r\n" + 		// Content-Length: 283
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0102, requestHost0102, requestPort0102, requestHeader0102, requestContent0102.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0102 = null;		// support garbage collector to reduce memory
		requestContent0102 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 752
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [102] <- Index 102
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [103] <- WEB ADMIN Index 103 ---
		String requestProt0103 = "https";
		String requestHost0103 = "hcm4preview.sapsf.com";
		int    requestPort0103 = 443;
		String requestFile0103 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/popup/service/DueDateHelper.js";
		String requestHeader0103 = "GET " + requestFile0103 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0103, requestHost0103, requestPort0103, requestHeader0103, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0103 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [104] <- WEB ADMIN Index 104 ---
		String requestProt0104 = "https";
		String requestHost0104 = "hcm4preview.sapsf.com";
		int    requestPort0104 = 443;
		String requestFile0104 = "/xi/ajax/remoting/call/plaincall/hp3TourControllerProxy.getTourPreference.dwr" +
				"?_s.crb=" + C_AjaxToken;		// recorded value = FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d
		requestFile0104 = Lib.replaceTextPattern(requestFile0104, "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken, 0);		// search and replace request file fragment "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d" with variable 'C_AjaxToken' on all occurrences

		String requestContent0104 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423599" + "\r\n" + 
				"c0-scriptName=hp3TourControllerProxy" + "\r\n" + 
				"c0-methodName=getTourPreference" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=6";
		byte[] binarySearchPattern0104_0 = Base64Decoder.decodeToBytes("RkswNW1mVVYzNldjeTUlMjUyYlppbVhIcnBWa0dVRSUyNTNk");		// note: the search pattern value is base 64 encoded. decoded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestContent0104 = new String(Lib.binaryReplace(requestContent0104.getBytes(), binarySearchPattern0104_0, java.net.URLEncoder.encode(C_AjaxToken).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0104 = "POST " + requestFile0104 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000116ac729b-cd62-4e94-9524-f945289fea2c29820909-1501-babe-face-000000000003384752b8-0cb2-4031-ad2a-9db228779528HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0104.length() + "\r\n" + 		// Content-Length: 255
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0104, requestHost0104, requestPort0104, requestHeader0104, requestContent0104.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0104 = null;		// support garbage collector to reduce memory
		requestContent0104 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 170
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [104] <- Index 104
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [105] <- WEB ADMIN Index 105 ---
		String requestProt0105 = "https";
		String requestHost0105 = "hcm4preview.sapsf.com";
		int    requestPort0105 = 443;
		String requestFile0105 = "/welcomePortletImageUpload/a6d386d4-0d39-4684-90c9-e8a9e116ea92";
		String requestHeader0105 = "GET " + requestFile0105 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0105, requestHost0105, requestPort0105, requestHeader0105, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0105 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [106] <- WEB ADMIN Index 106 ---
		String requestProt0106 = "https";
		String requestHost0106 = "hcm4preview.sapsf.com";
		int    requestPort0106 = 443;
		String requestFile0106 = "/public/ui-dcss/tctest/_/3l!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2JreRG!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Bold.woff2";
		requestFile0106 = Lib.replaceTextPattern(requestFile0106, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0106 = "GET " + requestFile0106 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/public/ui-dcss/tctest/_/3l!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2JreRG!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0106, requestHost0106, requestPort0106, requestHeader0106, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FD3E69DB8103A603EC04DBBA1D636582", C_Merge1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0106 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [107] <- WEB ADMIN Index 107 ---
		String requestProt0107 = "https";
		String requestHost0107 = "hcm4preview.sapsf.com";
		int    requestPort0107 = 443;
		String requestFile0107 = "/odata/v2/restricted/AttachmentInternal,COAHStatusBean,COAdminLinkItemBean,COAdminTileLinkBean,COAdminTileLinkListBean,SLActivityBean,SLEmpActivitiesBean,SLEmpActivitiesBeanList,Tour,changeFavoriteLink,getAdminTileLinks,getInternalJobPostingCount,getPreApprovedJobReqCount,getSLActivityList/Tour" +
				"?%24format=json" +
				"&_=1571770501556";
		String requestHeader0107 = "GET " + requestFile0107 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001e8f80249-6ae2-4f78-952d-c38b29aeff2629820909-1501-babe-face-0000000000033a61420e-1402-4b02-a62c-692b22868823HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0107, requestHost0107, requestPort0107, requestHeader0107, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0107 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [108] <- WEB ADMIN Index 108 ---
		String requestProt0108 = "https";
		String requestHost0108 = "hcm4preview.sapsf.com";
		int    requestPort0108 = 443;
		String requestFile0108 = "/xi/ui/commonshell/pages/smrf.xhtml" +
				"?js%5B%5D=%2Fui%2Fuicore%2Fjs%2Fshell%2Fshell.library.smrf.js";
		String requestHeader0108 = "GET " + requestFile0108 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000134c7c290-c282-41b3-b723-77282db03e2929820909-1501-babe-face-00000000000354771265-3ff2-4558-9b2d-ab2e2d5c2b2aHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0108, requestHost0108, requestPort0108, requestHeader0108, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0108 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [109] <- WEB ADMIN Index 109 ---
		String requestProt0109 = "https";
		String requestHost0109 = "hcm4preview.sapsf.com";
		int    requestPort0109 = 443;
		String requestFile0109 = "/xi/ajax/remoting/call/plaincall/myInfoControllerProxy.getCompletePercent.dwr" +
				"?_s.crb=" + C_AjaxToken;		// recorded value = FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d
		requestFile0109 = Lib.replaceTextPattern(requestFile0109, "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken, 0);		// search and replace request file fragment "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d" with variable 'C_AjaxToken' on all occurrences

		String requestContent0109 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423599" + "\r\n" + 
				"c0-scriptName=myInfoControllerProxy" + "\r\n" + 
				"c0-methodName=getCompletePercent" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"batchId=7";
		requestContent0109 = Lib.replaceTextPattern(requestContent0109, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences

		byte[] binarySearchPattern0109_0 = Base64Decoder.decodeToBytes("RkswNW1mVVYzNldjeTUlMjUyYlppbVhIcnBWa0dVRSUyNTNk");		// note: the search pattern value is base 64 encoded. decoded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestContent0109 = new String(Lib.binaryReplace(requestContent0109.getBytes(), binarySearchPattern0109_0, java.net.URLEncoder.encode(C_AjaxToken).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0109 = "POST " + requestFile0109 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001ab8c5208-6e92-44bf-b620-60e420b8a22329820909-1501-babe-face-00000000000373cf126b-ba92-41a4-9128-32a82307ae23HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0109.length() + "\r\n" + 		// Content-Length: 281
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0109, requestHost0109, requestPort0109, requestHeader0109, requestContent0109.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0109 = null;		// support garbage collector to reduce memory
		requestContent0109 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 126
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [109] <- Index 109
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [110] <- WEB ADMIN Index 110 ---
		String requestProt0110 = "https";
		String requestHost0110 = "hcm4preview.sapsf.com";
		int    requestPort0110 = 443;
		String requestFile0110 = "/ui/juic/js/Util_c628076f6686d02db00e973ccd944d56.js";
		String requestHeader0110 = "GET " + requestFile0110 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0110, requestHost0110, requestPort0110, requestHeader0110, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0110 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;



		// all http requests of page #2_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 4 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [111] <- WEB ADMIN Index 111 ---
		String requestProt0111 = "https";
		String requestHost0111 = "hcm4preview.sapsf.com";
		int    requestPort0111 = 443;
		String requestFile0111 = "/odata/v2/restricted/TodoEntryV2,WfRequest/TodoEntryV2/$count" +
				"?%24filter=categoryId%20in%20%2714%27%2C%2717%27%2C%2718%27%2C%2721%27%2C%2724%27%2C%2725%27%2C%2729%27%2C%2739%27%2C%2746%27%20and%20status%20eq%202%20and%20wfRequestNav%2FwfRequestId%20ne%20null";
		String requestHeader0111 = "GET " + requestFile0111 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-CSRF-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001d2b052ab-17f2-4559-8d29-19aa2f96832b29820909-1501-babe-face-000000000003f895f22c-bb42-4457-b921-6ccc2c4c982bHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0111, requestHost0111, requestPort0111, requestHeader0111, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0111 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [112] <- WEB ADMIN Index 112 ---
		String requestProt0112 = "https";
		String requestHost0112 = "hcm4preview.sapsf.com";
		int    requestPort0112 = 443;
		String requestFile0112 = "/xi/ajax/remoting/call/plaincall/hp3TodoPanelControllerProxy.getLearningTodoDetails.dwr" +
				"?_s.crb=" + C_AjaxToken;		// recorded value = FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d
		requestFile0112 = Lib.replaceTextPattern(requestFile0112, "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken, 0);		// search and replace request file fragment "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d" with variable 'C_AjaxToken' on all occurrences

		String requestContent0112 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423599" + "\r\n" + 
				"c0-scriptName=hp3TodoPanelControllerProxy" + "\r\n" + 
				"c0-methodName=getLearningTodoDetails" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=8";
		byte[] binarySearchPattern0112_0 = Base64Decoder.decodeToBytes("RkswNW1mVVYzNldjeTUlMjUyYlppbVhIcnBWa0dVRSUyNTNk");		// note: the search pattern value is base 64 encoded. decoded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestContent0112 = new String(Lib.binaryReplace(requestContent0112.getBytes(), binarySearchPattern0112_0, java.net.URLEncoder.encode(C_AjaxToken).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0112 = "POST " + requestFile0112 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001913be2a4-5a42-4428-a824-3903202c312129820909-1501-babe-face-000000000003ad1ee25f-8242-474d-8a22-3cd322719d28HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0112.length() + "\r\n" + 		// Content-Length: 265
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0112, requestHost0112, requestPort0112, requestHeader0112, requestContent0112.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0112 = null;		// support garbage collector to reduce memory
		requestContent0112 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 695
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [112] <- Index 112
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [113] <- WEB ADMIN Index 113 ---
		String requestProt0113 = "https";
		String requestHost0113 = "hcm4preview.sapsf.com";
		int    requestPort0113 = 443;
		String requestFile0113 = "/xi/ajax/remoting/call/plaincall/OnboardingHP3TileControllerProxy.getOnboardingTasksTile.dwr" +
				"?_s.crb=" + C_AjaxToken;		// recorded value = FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d
		requestFile0113 = Lib.replaceTextPattern(requestFile0113, "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken, 0);		// search and replace request file fragment "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d" with variable 'C_AjaxToken' on all occurrences

		String requestContent0113 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423599" + "\r\n" + 
				"c0-scriptName=OnboardingHP3TileControllerProxy" + "\r\n" + 
				"c0-methodName=getOnboardingTasksTile" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=9";
		byte[] binarySearchPattern0113_0 = Base64Decoder.decodeToBytes("RkswNW1mVVYzNldjeTUlMjUyYlppbVhIcnBWa0dVRSUyNTNk");		// note: the search pattern value is base 64 encoded. decoded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestContent0113 = new String(Lib.binaryReplace(requestContent0113.getBytes(), binarySearchPattern0113_0, java.net.URLEncoder.encode(C_AjaxToken).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0113 = "POST " + requestFile0113 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001fc40c292-a182-4fdf-8325-9a6c2f77322529820909-1501-babe-face-00000000000352571209-3f92-42bc-ac2f-5b5729c1c92fHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0113.length() + "\r\n" + 		// Content-Length: 270
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0113, requestHost0113, requestPort0113, requestHeader0113, requestContent0113.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0113 = null;		// support garbage collector to reduce memory
		requestContent0113 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 360
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [113] <- Index 113
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [114] <- WEB ADMIN Index 114 ---
		String requestProt0114 = "https";
		String requestHost0114 = "hcm4preview.sapsf.com";
		int    requestPort0114 = 443;
		String requestFile0114 = "/odata/v2/PayrollDataMaintenanceTask/PayrollDataMaintenanceTask/$count" +
				"?%24filter=status%20eq%20%27IN_PROCESS%27%20or%20status%20eq%20%27OPEN%27";
		String requestHeader0114 = "GET " + requestFile0114 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-CSRF-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001ba379293-3f52-4d8f-9b2f-18cf28c7b02129820909-1501-babe-face-000000000003e94e8244-d712-45b1-a52a-52bd298d562cHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0114, requestHost0114, requestPort0114, requestHeader0114, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0114 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [115] <- WEB ADMIN Index 115 ---
		String requestProt0115 = "https";
		String requestHost0115 = "hcm4preview.sapsf.com";
		int    requestPort0115 = 443;
		String requestFile0115 = "/odata/v2/restricted/TodoEntryV2" +
				"?%24filter=categoryId%20eq%2057%20and%20status%20eq%202" +
				"&%24orderby=dueDate" +
				"&%24select=dueDate";
		String requestHeader0115 = "GET " + requestFile0115 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-CSRF-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500019afd72c9-e282-48a0-9720-8d512e458b2029820909-1501-babe-face-000000000003ff10921d-8f52-41b1-8c24-0d6f2549f02cHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0115, requestHost0115, requestPort0115, requestHeader0115, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0115 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [116] <- WEB ADMIN Index 116 ---
		String requestProt0116 = "https";
		String requestHost0116 = "hcm4preview.sapsf.com";
		int    requestPort0116 = 443;
		String requestFile0116 = "/ui/juic/js/core/component_ca4231790bc781dc49a1857b2a4e24d5.js";
		String requestHeader0116 = "GET " + requestFile0116 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0116, requestHost0116, requestPort0116, requestHeader0116, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0116 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [117] <- WEB ADMIN Index 117 ---
		String requestProt0117 = "https";
		String requestHost0117 = "hcm4preview.sapsf.com";
		int    requestPort0117 = 443;
		String requestFile0117 = "/odata/v2/restricted/AttachmentInternal,COAHStatusBean,COAdminLinkItemBean,COAdminTileLinkBean,COAdminTileLinkListBean,SLActivityBean,SLEmpActivitiesBean,SLEmpActivitiesBeanList,Tour,changeFavoriteLink,getAdminTileLinks,getInternalJobPostingCount,getPreApprovedJobReqCount,getSLActivityList/getInternalJobPostingCount" +
				"?%24format=json" +
				"&_=1571770501557";
		String requestHeader0117 = "GET " + requestFile0117 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001889622d5-6a82-4950-bc2c-3180236d252829820909-1501-babe-face-000000000003bdf48211-f802-4cc2-8323-27ea27409125HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0117, requestHost0117, requestPort0117, requestHeader0117, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0117 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [118] <- WEB ADMIN Index 118 ---
		String requestProt0118 = "https";
		String requestHost0118 = "hcm4preview.sapsf.com";
		int    requestPort0118 = 443;
		String requestFile0118 = "/eduPhoto/view" +
				"?companyId=tctest" +
				"&photo_type=userExpressivePhoto" +
				"&user_id=SIT20018" +
				"&mod=240141571184340000";
		requestFile0118 = Lib.replaceTextPattern(requestFile0118, "SIT20018", P_UserID, 0);		// search and replace request file fragment "SIT20018" with variable 'P_UserID' on all occurrences

		String requestHeader0118 = "GET " + requestFile0118 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0118, requestHost0118, requestPort0118, requestHeader0118, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0118 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [119] <- WEB ADMIN Index 119 ---
		String requestProt0119 = "https";
		String requestHost0119 = "hcm4preview.sapsf.com";
		int    requestPort0119 = 443;
		String requestFile0119 = "/xi/ui/commonshell/pages/smrf.xhtml" +
				"?js%5B%5D=%2Fui%2Fyoucalc%2Fjs%2Fcontrol%2FTile.js";
		String requestHeader0119 = "GET " + requestFile0119 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500010fe5e2b3-e822-453c-bc2a-51d02d910a2f29820909-1501-babe-face-0000000000031a3752cd-5102-4cdd-8120-a32f2de2ba2aHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0119, requestHost0119, requestPort0119, requestHeader0119, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0119 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [120] <- WEB ADMIN Index 120 ---
		String requestProt0120 = "https";
		String requestHost0120 = "hcm4preview.sapsf.com";
		int    requestPort0120 = 443;
		String requestFile0120 = "/ui/sfgrp/js/juicUtils_9a6794ee067de934138170d9a5fdb2d8.js";
		String requestHeader0120 = "GET " + requestFile0120 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0120, requestHost0120, requestPort0120, requestHeader0120, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0120 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [121] <- WEB ADMIN Index 121 ---
		String requestProt0121 = "https";
		String requestHost0121 = "mediaservicesfmsprod.ms.successfactors.com";
		int    requestPort0121 = 443;
		String requestFile0121 = "/mediaservice/api/v2/media/showme_597075b7_0dbc_491c_b3d1_f9fc838ee8e9/HOME_TAB/status" +
				"?token=" + C_Token2 +		// recorded value = 78ba294bad2f4e595450e2c2de123b385066b13c7b779a9cd71bec81536b7fcf3d451abaf61bfe9051f12c3af54f5ad06ae583817c22277e924651535b4ef17f,-9078163323106904726,1571772303,1
				"&callback=sfDeferredUtilCallback6";
		requestFile0121 = Lib.replaceTextPattern(requestFile0121, "78ba294bad2f4e595450e2c2de123b385066b13c7b779a9cd71bec81536b7fcf3d451abaf61bfe9051f12c3af54f5ad06ae583817c22277e924651535b4ef17f,-9078163323106904726,1571772303,1", C_Token2, 0);		// search and replace request file fragment "78ba294bad2f4e595450e2c2de123b385066b13c7b779a9cd71bec81536b7fcf3d451abaf61bfe9051f12c3af54f5ad06ae583817c22277e924651535b4ef17f,-9078163323106904726,1571772303,1" with variable 'C_Token2' on all occurrences
		requestFile0121 = Lib.replaceTextPattern(requestFile0121, "597075b7_0dbc_491c_b3d1_f9fc838ee8e9", C_Showme1, 0);		// search and replace request file fragment "597075b7_0dbc_491c_b3d1_f9fc838ee8e9" with variable 'C_Showme1' on all occurrences

		String requestHeader0121 = "GET " + requestFile0121 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mediaservicesfmsprod.ms.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0121, requestHost0121, requestPort0121, requestHeader0121, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0121 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 128
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [121] <- Index 121
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [122] <- WEB ADMIN Index 122 ---
		String requestProt0122 = "https";
		String requestHost0122 = "hcm4preview.sapsf.com";
		int    requestPort0122 = 443;
		String requestFile0122 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TSL";
		String requestHeader0122 = "GET " + requestFile0122 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0122, requestHost0122, requestPort0122, requestHeader0122, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0122 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [123] <- WEB ADMIN Index 123 ---
		String requestProt0123 = "https";
		String requestHost0123 = "hcm4preview.sapsf.com";
		int    requestPort0123 = 443;
		String requestFile0123 = "/ui/ycserver/css/youcalc_22144c538716f1647455783fd8f2e3d7.css";
		String requestHeader0123 = "GET " + requestFile0123 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0123, requestHost0123, requestPort0123, requestHeader0123, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0123 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [124] <- WEB ADMIN Index 124 ---
		String requestProt0124 = "https";
		String requestHost0124 = "hcm4preview.sapsf.com";
		int    requestPort0124 = 443;
		String requestFile0124 = "/ui/surj/js/core/surj-ui-core_8a189e8cb1f9b21c5dbc7bfb2df74830.js";
		String requestHeader0124 = "GET " + requestFile0124 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0124, requestHost0124, requestPort0124, requestHeader0124, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0124 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [125] <- WEB ADMIN Index 125 ---
		String requestProt0125 = "https";
		String requestHost0125 = "hcm4preview.sapsf.com";
		int    requestPort0125 = 443;
		String requestFile0125 = "/ui/juic/js/core/component-surj_f3ab217faa0d6807425510d0ad2294e2.js";
		String requestHeader0125 = "GET " + requestFile0125 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0125, requestHost0125, requestPort0125, requestHeader0125, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0125 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [126] <- WEB ADMIN Index 126 ---
		String requestProt0126 = "https";
		String requestHost0126 = "hcm4preview.sapsf.com";
		int    requestPort0126 = 443;
		String requestFile0126 = "/ui/extlib/json2_git8e0b15c/json2.js";
		String requestHeader0126 = "GET " + requestFile0126 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0126, requestHost0126, requestPort0126, requestHeader0126, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0126 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [127] <- WEB ADMIN Index 127 ---
		String requestProt0127 = "https";
		String requestHost0127 = "hcm4preview.sapsf.com";
		int    requestPort0127 = 443;
		String requestFile0127 = "/ui/sfgrp/js/ycserverFramework_2723ea4fcf015fa0a26c8e3c53edad36.js";
		String requestHeader0127 = "GET " + requestFile0127 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0127, requestHost0127, requestPort0127, requestHeader0127, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0127 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [128] <- WEB ADMIN Index 128 ---
		String requestProt0128 = "https";
		String requestHost0128 = "hcm4preview.sapsf.com";
		int    requestPort0128 = 443;
		String requestFile0128 = "/public/theme-api/info/tctest;jsonp=youcalcParseThemeInfo";
		String requestHeader0128 = "GET " + requestFile0128 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0128, requestHost0128, requestPort0128, requestHeader0128, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0128 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [129] <- WEB ADMIN Index 129 ---
		String requestProt0129 = "https";
		String requestHost0129 = "hcm4preview.sapsf.com";
		int    requestPort0129 = 443;
		String requestFile0129 = "/ui/youcalc/js/control/Tile_984eb9d7d44cf421c3dccc41f383a34e.js";
		String requestHeader0129 = "GET " + requestFile0129 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0129, requestHost0129, requestPort0129, requestHeader0129, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0129 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [130] <- WEB ADMIN Index 130 ---
		String requestProt0130 = "https";
		String requestHost0130 = "hcm4preview.sapsf.com";
		int    requestPort0130 = 443;
		String requestFile0130 = "/xi/ajax/remoting/call/plaincall/youcalcTileControllerProxy.getYoucalcDocument.dwr" +
				"?_s.crb=" + C_AjaxToken;		// recorded value = FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d
		requestFile0130 = Lib.replaceTextPattern(requestFile0130, "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken, 0);		// search and replace request file fragment "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d" with variable 'C_AjaxToken' on all occurrences

		String requestContent0130 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423599" + "\r\n" + 
				"c0-scriptName=youcalcTileControllerProxy" + "\r\n" + 
				"c0-methodName=getYoucalcDocument" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=number:804" + "\r\n" + 
				"batchId=10";
		byte[] binarySearchPattern0130_0 = Base64Decoder.decodeToBytes("RkswNW1mVVYzNldjeTUlMjUyYlppbVhIcnBWa0dVRSUyNTNk");		// note: the search pattern value is base 64 encoded. decoded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestContent0130 = new String(Lib.binaryReplace(requestContent0130.getBytes(), binarySearchPattern0130_0, java.net.URLEncoder.encode(C_AjaxToken).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0130 = "POST " + requestFile0130 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001a8456225-0f02-47a5-b22e-bc2a2ee7a82029820909-1501-babe-face-000000000003c554f2be-03a2-437b-9220-395827f85220HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0130.length() + "\r\n" + 		// Content-Length: 282
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0130, requestHost0130, requestPort0130, requestHeader0130, requestContent0130.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0130 = null;		// support garbage collector to reduce memory
		requestContent0130 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 658
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [130] <- Index 130
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_docKey'
		ContentTokenExtractorItem contentTokenExtractorItem0130_1 = new ContentTokenExtractorItem("documentKey:", "\t\n\r \"(),={}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0130_1);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'C_docKey'
			C_docKey = contentTokenExtractorItem0130_1.getResultToken();
			log("<<< C_docKey = " + C_docKey);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_docKey!= null && C_docKey.trim().length() == 0)
			{
				C_docKey = "";
				log("runtime note: the extraction of a new value for the variable 'C_docKey' ends up with an empty string - a substitute value was set");
				log("<<< C_docKey = " + C_docKey);
			}
		}
		catch (Exception e) { C_docKey = null; log(e); }
		if (C_docKey == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_docKey' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 5 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [131] <- WEB ADMIN Index 131 ---
		String requestProt0131 = "https";
		String requestHost0131 = "hcm4preview.sapsf.com";
		int    requestPort0131 = 443;
		String requestFile0131 = "/public/theme-api/config/tctest/3eybd488sn;mod=16bfc1941f1&jsonp=youcalcParseThemeConfig";
		String requestHeader0131 = "GET " + requestFile0131 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0131, requestHost0131, requestPort0131, requestHeader0131, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0131 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [132] <- WEB ADMIN Index 132 ---
		String requestProt0132 = "https";
		String requestHost0132 = "hcm4preview.sapsf.com";
		int    requestPort0132 = 443;
		String requestFile0132 = "/ui/uicore/img/__325472601571f31e1bf00674c368d335.gif";
		String requestHeader0132 = "GET " + requestFile0132 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0132, requestHost0132, requestPort0132, requestHeader0132, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0132 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [133] <- WEB ADMIN Index 133 ---
		String requestProt0133 = "https";
		String requestHost0133 = "hcm4preview.sapsf.com";
		int    requestPort0133 = 443;
		String requestFile0133 = "/YoucalcUpdate";
		String requestContent0133 = 
				"event=update" +
				"&documentKey=" + C_docKey +		// recorded value = 4360661342610935612344892
				"&appId=804" +
				"&data=%7B%22event%22%3A%22init%22%2C%22widgets%22%3A%5B1%5D%7D" +
				"&_s.crb=" + vScrb;		// recorded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		byte[] binarySearchPattern0133_0 = Base64Decoder.decodeToBytes("RkswNW1mVVYzNldjeTUlMjUyYlppbVhIcnBWa0dVRSUyNTNk");		// note: the search pattern value is base 64 encoded. decoded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestContent0133 = new String(Lib.binaryReplace(requestContent0133.getBytes(), binarySearchPattern0133_0, java.net.URLEncoder.encode(C_AjaxToken).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0133 = Lib.replaceTextPattern(requestContent0133, "4360661342610935612344892", C_docKey, 0);		// search and replace content fragment "4360661342610935612344892" with variable 'C_docKey' on all occurrences

		byte[] requestContentBinary0133 = requestContent0133.getBytes("UTF-8");
		String requestHeader0133 = "POST " + requestFile0133 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000173cf1229-1c62-40c2-9824-57e6248f322029820909-1501-babe-face-000000000003aa9c8225-81e2-47d9-ac26-0d8526de7029HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContentBinary0133.length + "\r\n" + 		// Content-Length: 166
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0133, requestHost0133, requestPort0133, requestHeader0133, requestContentBinary0133, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0133 = null;		// support garbage collector to reduce memory
		requestContent0133 = null;		// support garbage collector to reduce memory
		requestContentBinary0133 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 615
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, "{\"defaults\":{\"date\":");		// Test [133] <- Index 133
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [134] <- WEB ADMIN Index 134 ---
		String requestProt0134 = "https";
		String requestHost0134 = "hcm4preview.sapsf.com";
		int    requestPort0134 = 443;
		String requestFile0134 = "/ui/sfgrp/js/ycserverViz_f6eef04e254187a9613533329a0132dd.js";
		String requestHeader0134 = "GET " + requestFile0134 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0134, requestHost0134, requestPort0134, requestHeader0134, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0134 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [135] <- WEB ADMIN Index 135 ---
		String requestProt0135 = "https";
		String requestHost0135 = "hcm4preview.sapsf.com";
		int    requestPort0135 = 443;
		String requestFile0135 = "/perfLogServlet" +
				"?callId=4597992751-2" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&TRS=729" +
				"&TIP=1227" +
				"&TML=1228" +
				"&TSL=3455" +
				"&ST=1571770502381" +
				"&ET=1571770507715" +
				"&MEM=255057" +
				"&NRE=1095" +
				"&NWR=151" +
				"&SCPU=30" +
				"&SQLC=113" +
				"&SQLT=684" +
				"&SVT=4825" +
				"&UCPU=830" +
				"&CPU=860" +
				"&FRE=3" +
				"&FWR=0" +
				"&jsNum=40" +
				"&cssNum=12" +
				"&renderTime=5233";
		String requestContent0135 = 
				"OPTR_INFO=b6c702fc-59f2-4e4f-aa2c-130424a09827!1571770502381!1571770502434!0" +
				"&OPTR_INFO=e120e245-6c12-41c1-8f28-ffdd21ed062e!1571770502469!1571770502530!0" +
				"&OPTR_INFO=8181120b-0372-4ef3-9a28-64d72e98d524!1571770502664!1571770502800!0" +
				"&OPTR_INFO=6b91f28a-bf22-401f-9e25-34ab27b23f24!1571770502724!1571770502857!0" +
				"&OPTR_INFO=1f3802ad-f422-48bb-8228-4d9722de142f!1571770502911!1571770502944!0" +
				"&OPTR_INFO=e2664238-3502-4ce0-b828-e56821b07720!1571770502947!1571770502997!0" +
				"&OPTR_INFO=c14352d3-af92-4ca2-8627-ada327207021!1571770503001!1571770503140!0" +
				"&OPTR_INFO=4b4462c0-dd32-43a8-9d23-63ce23fa222b!1571770503148!1571770503317!0" +
				"&OPTR_INFO=f874921c-92b2-48b4-8729-308529350526!1571770503366!1571770503864!0" +
				"&OPTR_INFO=5c7ef29a-b792-44c5-a82f-66822ec63829!1571770503415!1571770503601!0" +
				"&OPTR_INFO=90a772b9-f282-40da-ab2f-556d22f6162a!1571770503656!1571770503771!0" +
				"&OPTR_INFO=7c3f5248-7ed2-46c6-8526-e2cf299a9721!1571770503658!1571770503768!0" +
				"&OPTR_INFO=a76812c1-6bb2-4a65-8623-e4b928ce822b!1571770504043!1571770504384!0" +
				"&OPTR_INFO=0b69f21d-d032-4d80-8a2d-bf7f28c69723!1571770504044!1571770504311!0" +
				"&OPTR_INFO=74cbc2d3-d1e2-42d9-9025-25322a7de823!1571770504047!1571770504136!0" +
				"&OPTR_INFO=8c096264-4122-4700-a927-c0ab2f23d92d!1571770504152!1571770504374!0" +
				"&OPTR_INFO=16ac729b-cd62-4e94-9524-f945289fea2c!1571770504161!1571770504345!0" +
				"&OPTR_INFO=e8f80249-6ae2-4f78-952d-c38b29aeff26!1571770504380!1571770504564!0" +
				"&OPTR_INFO=ab8c5208-6e92-44bf-b620-60e420b8a223!1571770504387!1571770504546!0" +
				"&OPTR_INFO=34c7c290-c282-41b3-b723-77282db03e29!1571770504389!1571770504655!0" +
				"&OPTR_INFO=d2b052ab-17f2-4559-8d29-19aa2f96832b!1571770504459!1571770504674!0" +
				"&OPTR_INFO=913be2a4-5a42-4428-a824-3903202c3121!1571770504468!1571770507614!0" +
				"&OPTR_INFO=fc40c292-a182-4fdf-8325-9a6c2f773225!1571770504470!1571770504928!0" +
				"&OPTR_INFO=ba379293-3f52-4d8f-9b2f-18cf28c7b021!1571770504485!1571770504700!0" +
				"&OPTR_INFO=9afd72c9-e282-48a0-9720-8d512e458b20!1571770504498!1571770504703!0" +
				"&OPTR_INFO=889622d5-6a82-4950-bc2c-3180236d2528!1571770504547!1571770504840!0" +
				"&OPTR_INFO=0fe5e2b3-e822-453c-bc2a-51d02d910a2f!1571770504699!1571770504910!0" +
				"&OPTR_INFO=a8456225-0f02-47a5-b22e-bc2a2ee7a820!1571770505807!1571770505989!0" +
				"&OPTR_INFO=73cf1229-1c62-40c2-9824-57e6248f3220!1571770505999!1571770507078!0";
		String requestHeader0135 = "POST " + requestFile0135 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-2\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0135.length() + "\r\n" + 		// Content-Length: 2232
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0135, requestHost0135, requestPort0135, requestHeader0135, requestContent0135.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0135 = null;		// support garbage collector to reduce memory
		requestContent0135 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [135] <- Index 135
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #3: OnboardingPage
		// # -----------------------



		// --- HTTP REQUEST: Test [137] <- WEB ADMIN Index 137 ---
		String requestProt0137 = "https";
		String requestHost0137 = "hcm4preview.sapsf.com";
		int    requestPort0137 = 443;
		String requestFile0137 = "/xi/ui/onboarding/pages/dashboard.xhtml" +
				"?bplte_company=tctest" +
				"&_s.crb=" + vScrb;		// recorded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestFile0137 = Lib.replaceTextPattern(requestFile0137, "FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d", java.net.URLEncoder.encode(C_AjaxToken), 0);		// search and replace request file fragment "FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" with variable 'C_AjaxToken' on all occurrences

		String requestHeader0137 = "GET " + requestFile0137 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0137, requestHost0137, requestPort0137, requestHeader0137, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0137 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 63682
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors Business Execution Suite");		// Test [137] <- Index 137
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [138] <- WEB ADMIN Index 138 ---
		String requestProt0138 = "https";
		String requestHost0138 = "hcm4preview.sapsf.com";
		int    requestPort0138 = 443;
		String requestFile0138 = "/perfLogServlet" +
				"?callId=4597992751-3" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&TRS=729" +
				"&TIP=1227" +
				"&TML=1228" +
				"&TSL=3455" +
				"&ST=1571770529421" +
				"&ET=1571770529536" +
				"&MEM=0" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=0" +
				"&UCPU=0" +
				"&CPU=0" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=40" +
				"&cssNum=12" +
				"&renderTime=6";
		String requestContent0138 = 
				"OPTR_INFO=08e5123c-cc22-4bdb-aa2d-64db2cc0fb27!1571770529421!1571770529427!0";
		String requestHeader0138 = "POST " + requestFile0138 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145459-789001-3\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0138.length() + "\r\n" + 		// Content-Length: 76
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0138, requestHost0138, requestPort0138, requestHeader0138, requestContent0138.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("rb3abe13s-20191022145459-789001", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0138 = null;		// support garbage collector to reduce memory
		requestContent0138 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [138] <- Index 138
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [139] <- WEB ADMIN Index 139 ---
		String requestProt0139 = "https";
		String requestHost0139 = "hcm4preview.sapsf.com";
		int    requestPort0139 = 443;
		String requestFile0139 = "/ui/uicore/css/revolutioncommon_a28bb0fc5b33f5cb55458a07dd85d772.css";
		String requestHeader0139 = "GET " + requestFile0139 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0139, requestHost0139, requestPort0139, requestHeader0139, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0139 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [140] <- WEB ADMIN Index 140 ---
		// execute inline script "VscrbEncode"
		inlineScriptContext = executeInlineScript_1571858096671(threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			endOfExecuteLoop(false, null, threadStep, loopPluginContext);
			return false;
		}
		
		String requestProt0140 = "https";
		String requestHost0140 = "hcm4preview.sapsf.com";
		int    requestPort0140 = 443;
		String requestFile0140 = "/ui/uicore/css/fiori_fc960c9ddf57de1aa2536367a33ba8fb.css";
		String requestHeader0140 = "GET " + requestFile0140 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0140, requestHost0140, requestPort0140, requestHeader0140, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0140 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [141] <- WEB ADMIN Index 141 ---
		String requestProt0141 = "https";
		String requestHost0141 = "hcm4preview.sapsf.com";
		int    requestPort0141 = 443;
		String requestFile0141 = "/ui/topnav/css/SFRevolutionTopNav_02506b3b1d8cf8ea2ab7e78a3813e887.css";
		String requestHeader0141 = "GET " + requestFile0141 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0141, requestHost0141, requestPort0141, requestHeader0141, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0141 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [142] <- WEB ADMIN Index 142 ---
		String requestProt0142 = "https";
		String requestHost0142 = "hcm4preview.sapsf.com";
		int    requestPort0142 = 443;
		String requestFile0142 = "/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/.dcss;mod=35f4b8ab";
		requestFile0142 = Lib.replaceTextPattern(requestFile0142, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod2' on all occurrences
		requestFile0142 = Lib.replaceTextPattern(requestFile0142, "3A280", C_UIres, 0);		// search and replace request file fragment "3A280" with variable 'C_UIres' on all occurrences
		requestFile0142 = Lib.replaceTextPattern(requestFile0142, "255f54321=252d2", C_Name, 0);		// search and replace request file fragment "255f54321=252d2" with variable 'C_Name' on all occurrences
		requestFile0142 = Lib.replaceTextPattern(requestFile0142, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!" with variable 'C_belieze1' on all occurrences
		requestFile0142 = Lib.replaceTextPattern(requestFile0142, "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2, 0);		// search and replace request file fragment "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_href2' on all occurrences
		requestFile0142 = Lib.replaceTextPattern(requestFile0142, "35f4b8ab", C_Mod4, 0);		// search and replace request file fragment "35f4b8ab" with variable 'C_Mod4' on all occurrences

		String requestHeader0142 = "GET " + requestFile0142 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0142, requestHost0142, requestPort0142, requestHeader0142, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0142 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [143] <- WEB ADMIN Index 143 ---
		String requestProt0143 = "https";
		String requestHost0143 = "hcm4preview.sapsf.com";
		int    requestPort0143 = 443;
		String requestFile0143 = "/ui/admin/css/tutorial/tutorialvideo_1cad8f05b307a86757f0960d7c9afbc6.css";
		String requestHeader0143 = "GET " + requestFile0143 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0143, requestHost0143, requestPort0143, requestHeader0143, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0143 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [144] <- WEB ADMIN Index 144 ---
		String requestProt0144 = "https";
		String requestHost0144 = "hcm4preview.sapsf.com";
		int    requestPort0144 = 443;
		String requestFile0144 = "/ui/uicore/css/grids-min_1d062c12866a8a9b1a8b046dd813df5e.css";
		String requestHeader0144 = "GET " + requestFile0144 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0144, requestHost0144, requestPort0144, requestHeader0144, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0144 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [145] <- WEB ADMIN Index 145 ---
		String requestProt0145 = "https";
		String requestHost0145 = "hcm4preview.sapsf.com";
		int    requestPort0145 = 443;
		String requestFile0145 = "/ui/onboarding/css/onboardingKMS_79f9d4fe58ff996a9ffecb3314d6be47.css";
		String requestHeader0145 = "GET " + requestFile0145 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0145, requestHost0145, requestPort0145, requestHeader0145, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0145 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [146] <- WEB ADMIN Index 146 ---
		String requestProt0146 = "https";
		String requestHost0146 = "hcm4preview.sapsf.com";
		int    requestPort0146 = 443;
		String requestFile0146 = "/ui/sfgrp/css/juicMatrixTables_08d30c781611c87566d4d807dee86ccb.css";
		String requestHeader0146 = "GET " + requestFile0146 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0146, requestHost0146, requestPort0146, requestHeader0146, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0146 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [147] <- WEB ADMIN Index 147 ---
		String requestProt0147 = "https";
		String requestHost0147 = "hcm4preview.sapsf.com";
		int    requestPort0147 = 443;
		String requestFile0147 = "/ui/extlib/yui_2.9_sf.3/js/yahoo-dom-event/yahoo-dom-event.js";
		String requestHeader0147 = "GET " + requestFile0147 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0147, requestHost0147, requestPort0147, requestHeader0147, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0147 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [148] <- WEB ADMIN Index 148 ---
		String requestProt0148 = "https";
		String requestHost0148 = "hcm4preview.sapsf.com";
		int    requestPort0148 = 443;
		String requestFile0148 = "/ui/extlib/yui_2.9_sf.3/js/animation/animation.js";
		String requestHeader0148 = "GET " + requestFile0148 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0148, requestHost0148, requestPort0148, requestHeader0148, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0148 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [149] <- WEB ADMIN Index 149 ---
		String requestProt0149 = "https";
		String requestHost0149 = "hcm4preview.sapsf.com";
		int    requestPort0149 = 443;
		String requestFile0149 = "/ui/extlib/yui_2.9_sf.3/js/connection/connection.js";
		String requestHeader0149 = "GET " + requestFile0149 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0149, requestHost0149, requestPort0149, requestHeader0149, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0149 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [150] <- WEB ADMIN Index 150 ---
		String requestProt0150 = "https";
		String requestHost0150 = "hcm4preview.sapsf.com";
		int    requestPort0150 = 443;
		String requestFile0150 = "/ui/extlib/yui_2.9_sf.3/js/autocomplete/autocomplete.js";
		String requestHeader0150 = "GET " + requestFile0150 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0150, requestHost0150, requestPort0150, requestHeader0150, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0150 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [151] <- WEB ADMIN Index 151 ---
		String requestProt0151 = "https";
		String requestHost0151 = "hcm4preview.sapsf.com";
		int    requestPort0151 = 443;
		String requestFile0151 = "/ui/ajaxservice/js/engine_195ddf977bd9394da5411c65e8f86a34.js";
		String requestHeader0151 = "GET " + requestFile0151 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0151, requestHost0151, requestPort0151, requestHeader0151, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0151 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [152] <- WEB ADMIN Index 152 ---
		String requestProt0152 = "https";
		String requestHost0152 = "hcm4preview.sapsf.com";
		int    requestPort0152 = 443;
		String requestFile0152 = "/ui/ajaxservice/js/AjaxService_328848108701c4060306e5a764d4b34a.js";
		String requestHeader0152 = "GET " + requestFile0152 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0152, requestHost0152, requestPort0152, requestHeader0152, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0152 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [153] <- WEB ADMIN Index 153 ---
		String requestProt0153 = "https";
		String requestHost0153 = "hcm4preview.sapsf.com";
		int    requestPort0153 = 443;
		String requestFile0153 = "/ui/showme/js/ajaxservice/showMeControllerASProxy_619594cf233e35820583fb250b9368c3.js";
		String requestHeader0153 = "GET " + requestFile0153 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0153, requestHost0153, requestPort0153, requestHeader0153, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0153 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [154] <- WEB ADMIN Index 154 ---
		String requestProt0154 = "https";
		String requestHost0154 = "hcm4preview.sapsf.com";
		int    requestPort0154 = 443;
		String requestFile0154 = "/ui/peopleprofile/js/actionEditPopup_0ee13f05d3b049aa83e7a148e14f86ce.js";
		String requestHeader0154 = "GET " + requestFile0154 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0154, requestHost0154, requestPort0154, requestHeader0154, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0154 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [155] <- WEB ADMIN Index 155 ---
		String requestProt0155 = "https";
		String requestHost0155 = "hcm4preview.sapsf.com";
		int    requestPort0155 = 443;
		String requestFile0155 = "/ui/platform/js/TopNavBar_c0e0ae73229046c0828e40fdd54c5dcd.js";
		String requestHeader0155 = "GET " + requestFile0155 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0155, requestHost0155, requestPort0155, requestHeader0155, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0155 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [156] <- WEB ADMIN Index 156 ---
		String requestProt0156 = "https";
		String requestHost0156 = "hcm4preview.sapsf.com";
		int    requestPort0156 = 443;
		String requestFile0156 = "/ui/notification/js/ajaxservice/globalNotificationControllerASProxy_a38ad21c3791f84b68198c84068e5ec3.js";
		String requestHeader0156 = "GET " + requestFile0156 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0156, requestHost0156, requestPort0156, requestHeader0156, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0156 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;



		// all http requests of page #3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 2 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [157] <- WEB ADMIN Index 157 ---
		String requestProt0157 = "https";
		String requestHost0157 = "hcm4preview.sapsf.com";
		int    requestPort0157 = 443;
		String requestFile0157 = "/ui/topnav/js/SFResponsiveHeader_35c9e358dca8d169abc24603fb4d35ae.js";
		String requestHeader0157 = "GET " + requestFile0157 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0157, requestHost0157, requestPort0157, requestHeader0157, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0157 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [158] <- WEB ADMIN Index 158 ---
		String requestProt0158 = "https";
		String requestHost0158 = "hcm4preview.sapsf.com";
		int    requestPort0158 = 443;
		String requestFile0158 = "/ui/v4/js/ajaxservice/tutorialVideoControllerASProxy_bc8f4aae6a9b7b05938cf9cac58f7cb8.js";
		String requestHeader0158 = "GET " + requestFile0158 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0158, requestHost0158, requestPort0158, requestHeader0158, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0158 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [159] <- WEB ADMIN Index 159 ---
		String requestProt0159 = "https";
		String requestHost0159 = "hcm4preview.sapsf.com";
		int    requestPort0159 = 443;
		String requestFile0159 = "/ui/admin/js/tutorial/admTutorialVideoLinks_558b98a6faadf9db0a70314d319a755a.js";
		String requestHeader0159 = "GET " + requestFile0159 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0159, requestHost0159, requestPort0159, requestHeader0159, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0159 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [160] <- WEB ADMIN Index 160 ---
		String requestProt0160 = "https";
		String requestHost0160 = "hcm4preview.sapsf.com";
		int    requestPort0160 = 443;
		String requestFile0160 = "/ui/onboarding/js/core/onbIframeProxyUtils_1e36d4652919a75907d7b3d6fe8654fa.js";
		String requestHeader0160 = "GET " + requestFile0160 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0160, requestHost0160, requestPort0160, requestHeader0160, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0160 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [161] <- WEB ADMIN Index 161 ---
		String requestProt0161 = "https";
		String requestHost0161 = "hcm4preview.sapsf.com";
		int    requestPort0161 = 443;
		String requestFile0161 = "/ui/onboarding/js/core/onbCustomMenu_b61280988a879c985f03545a4c46556b.js";
		String requestHeader0161 = "GET " + requestFile0161 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0161, requestHost0161, requestPort0161, requestHeader0161, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0161 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [162] <- WEB ADMIN Index 162 ---
		String requestProt0162 = "https";
		String requestHost0162 = "hcm4preview.sapsf.com";
		int    requestPort0162 = 443;
		String requestFile0162 = "/ui/juic/js/components/sfSpacingManager_3d18488b97beb2eca273c8ce5517f7df.js";
		String requestHeader0162 = "GET " + requestFile0162 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0162, requestHost0162, requestPort0162, requestHeader0162, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0162 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [163] <- WEB ADMIN Index 163 ---
		String requestProt0163 = "https";
		String requestHost0163 = "hcm4preview.sapsf.com";
		int    requestPort0163 = 443;
		String requestFile0163 = "/ui/sfgrp/js/juicLayoutUtils_506bad84c309e7d3ed0dad530a51d119.js";
		String requestHeader0163 = "GET " + requestFile0163 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0163, requestHost0163, requestPort0163, requestHeader0163, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0163 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [164] <- WEB ADMIN Index 164 ---
		String requestProt0164 = "https";
		String requestHost0164 = "hcm4preview.sapsf.com";
		int    requestPort0164 = 443;
		String requestFile0164 = "/ui/analyticspane/js/component/AnalyticsPaneLoad_e1e0ded9a823426996b2efbedfa4ba91.js";
		String requestHeader0164 = "GET " + requestFile0164 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0164, requestHost0164, requestPort0164, requestHeader0164, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0164 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [165] <- WEB ADMIN Index 165 ---
		String requestProt0165 = "https";
		String requestHost0165 = "hcm4preview.sapsf.com";
		int    requestPort0165 = 443;
		String requestFile0165 = "/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css";
		requestFile0165 = Lib.replaceTextPattern(requestFile0165, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod2' on all occurrences
		requestFile0165 = Lib.replaceTextPattern(requestFile0165, "3A280", C_UIres, 0);		// search and replace request file fragment "3A280" with variable 'C_UIres' on all occurrences
		requestFile0165 = Lib.replaceTextPattern(requestFile0165, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences
		requestFile0165 = Lib.replaceTextPattern(requestFile0165, "255f54321=252d2", C_Name, 0);		// search and replace request file fragment "255f54321=252d2" with variable 'C_Name' on all occurrences
		requestFile0165 = Lib.replaceTextPattern(requestFile0165, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!" with variable 'C_belieze1' on all occurrences
		requestFile0165 = Lib.replaceTextPattern(requestFile0165, "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2, 0);		// search and replace request file fragment "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_href2' on all occurrences

		String requestHeader0165 = "GET " + requestFile0165 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0165, requestHost0165, requestPort0165, requestHeader0165, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0165 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [166] <- WEB ADMIN Index 166 ---
		String requestProt0166 = "https";
		String requestHost0166 = "hcm4preview.sapsf.com";
		int    requestPort0166 = 443;
		String requestFile0166 = "/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library.css";
		requestFile0166 = Lib.replaceTextPattern(requestFile0166, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod2' on all occurrences
		requestFile0166 = Lib.replaceTextPattern(requestFile0166, "3A280", C_UIres, 0);		// search and replace request file fragment "3A280" with variable 'C_UIres' on all occurrences
		requestFile0166 = Lib.replaceTextPattern(requestFile0166, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences
		requestFile0166 = Lib.replaceTextPattern(requestFile0166, "255f54321=252d2", C_Name, 0);		// search and replace request file fragment "255f54321=252d2" with variable 'C_Name' on all occurrences
		requestFile0166 = Lib.replaceTextPattern(requestFile0166, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!" with variable 'C_belieze1' on all occurrences
		requestFile0166 = Lib.replaceTextPattern(requestFile0166, "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2, 0);		// search and replace request file fragment "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_href2' on all occurrences

		String requestHeader0166 = "GET " + requestFile0166 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0166, requestHost0166, requestPort0166, requestHeader0166, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0166 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [167] <- WEB ADMIN Index 167 ---
		String requestProt0167 = "https";
		String requestHost0167 = "hcm4preview.sapsf.com";
		int    requestPort0167 = 443;
		String requestFile0167 = "/ui/sapui5/main_1.65.5/sap/ui/commons/Menu.js";
		String requestHeader0167 = "GET " + requestFile0167 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001505bf248-6c42-4b4f-a327-0a712a31882529820909-1501-babe-face-0000000000037884525f-fa02-4700-b229-08382b2f1e21HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145529-789039\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=ONBOARDING&pageId=ONBOARDING_DASHBOARD_PAGE&pageQualifier=DASHBOARD&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0167, requestHost0167, requestPort0167, requestHeader0167, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0167 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [168] <- WEB ADMIN Index 168 ---
		String requestProt0168 = "https";
		String requestHost0168 = "hcm4preview.sapsf.com";
		int    requestPort0168 = 443;
		String requestFile0168 = "/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		requestFile0168 = Lib.replaceTextPattern(requestFile0168, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod2' on all occurrences
		requestFile0168 = Lib.replaceTextPattern(requestFile0168, "3A280", C_UIres, 0);		// search and replace request file fragment "3A280" with variable 'C_UIres' on all occurrences
		requestFile0168 = Lib.replaceTextPattern(requestFile0168, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences
		requestFile0168 = Lib.replaceTextPattern(requestFile0168, "255f54321=252d2", C_Name, 0);		// search and replace request file fragment "255f54321=252d2" with variable 'C_Name' on all occurrences
		requestFile0168 = Lib.replaceTextPattern(requestFile0168, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!" with variable 'C_belieze1' on all occurrences
		requestFile0168 = Lib.replaceTextPattern(requestFile0168, "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2, 0);		// search and replace request file fragment "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_href2' on all occurrences

		String requestHeader0168 = "GET " + requestFile0168 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0168, requestHost0168, requestPort0168, requestHeader0168, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3A280", C_UIres);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FD3E69DB8103A603EC04DBBA1D636582", C_Merge1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("255f54321=252d2", C_Name);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0168 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [169] <- WEB ADMIN Index 169 ---
		String requestProt0169 = "https";
		String requestHost0169 = "hcm4preview.sapsf.com";
		int    requestPort0169 = 443;
		String requestFile0169 = "/ui/sapui5/main_1.65.5/sap/ui/commons/MenuItemBase.js";
		String requestHeader0169 = "GET " + requestFile0169 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500018288621a-1852-479f-8d28-2f352221ab2229820909-1501-babe-face-00000000000393e2c248-3b92-4062-a624-2a5c25746b23HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145529-789039\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=ONBOARDING&pageId=ONBOARDING_DASHBOARD_PAGE&pageQualifier=DASHBOARD&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0169, requestHost0169, requestPort0169, requestHeader0169, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0169 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [170] <- WEB ADMIN Index 170 ---
		String requestProt0170 = "https";
		String requestHost0170 = "hcm4preview.sapsf.com";
		int    requestPort0170 = 443;
		String requestFile0170 = "/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/unified/themes/sap_belize/library.css";
		requestFile0170 = Lib.replaceTextPattern(requestFile0170, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod2' on all occurrences
		requestFile0170 = Lib.replaceTextPattern(requestFile0170, "3A280", C_UIres, 0);		// search and replace request file fragment "3A280" with variable 'C_UIres' on all occurrences
		requestFile0170 = Lib.replaceTextPattern(requestFile0170, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences
		requestFile0170 = Lib.replaceTextPattern(requestFile0170, "255f54321=252d2", C_Name, 0);		// search and replace request file fragment "255f54321=252d2" with variable 'C_Name' on all occurrences
		requestFile0170 = Lib.replaceTextPattern(requestFile0170, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!" with variable 'C_belieze1' on all occurrences
		requestFile0170 = Lib.replaceTextPattern(requestFile0170, "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2, 0);		// search and replace request file fragment "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_href2' on all occurrences

		String requestHeader0170 = "GET " + requestFile0170 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0170, requestHost0170, requestPort0170, requestHeader0170, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0170 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [171] <- WEB ADMIN Index 171 ---
		String requestProt0171 = "https";
		String requestHost0171 = "hcm4preview.sapsf.com";
		int    requestPort0171 = 443;
		String requestFile0171 = "/ui/sapui5/main_1.65.5/sap/ui/commons/MenuRenderer.js";
		String requestHeader0171 = "GET " + requestFile0171 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001daf2728b-e102-4b4f-aa29-533d2f7efc2229820909-1501-babe-face-0000000000034fa76268-e1e2-4662-9928-ff34222e852dHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145529-789039\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=ONBOARDING&pageId=ONBOARDING_DASHBOARD_PAGE&pageQualifier=DASHBOARD&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0171, requestHost0171, requestPort0171, requestHeader0171, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0171 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [172] <- WEB ADMIN Index 172 ---
		String requestProt0172 = "https";
		String requestHost0172 = "hcm4preview.sapsf.com";
		int    requestPort0172 = 443;
		String requestFile0172 = "/ui/sapui5/main_1.65.5/sap/ui/commons/MenuItem.js";
		String requestHeader0172 = "GET " + requestFile0172 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500011a22e20b-6982-4035-a722-b62b2ca8222829820909-1501-babe-face-00000000000306fcb230-8432-4c78-ac29-fd022d84e72eHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145529-789039\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=ONBOARDING&pageId=ONBOARDING_DASHBOARD_PAGE&pageQualifier=DASHBOARD&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0172, requestHost0172, requestPort0172, requestHeader0172, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0172 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [173] <- WEB ADMIN Index 173 ---
		String requestProt0173 = "https";
		String requestHost0173 = "hcm4preview.sapsf.com";
		int    requestPort0173 = 443;
		String requestFile0173 = "/sf/idp-init/sso/KMS" +
				"?RelayState=dashboard" +
				"&AdditionalParams=https%3A%2F%2Fhcm4preview.sapsf.com%2Fxi%2Fui%2Fonboarding%2Fpages%2Fdashboard.xhtml%3Fbplte_company%3Dtctest%26_s.crb%3DFK05mfUV36Wcy5%25252bZimXHrpVkGUE%25253d" +
				"&locale=en_US";
		String requestHeader0173 = "GET " + requestFile0173 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0173, requestHost0173, requestPort0173, requestHeader0173, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0173 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 7727
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "We found the following Knowledge Base Articles related to this error:");		// Test [173] <- Index 173
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLResponse'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0173_1 = new BoundaryBasedExtractorItem( "name=\"SAMLResponse\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0173_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLResponse'
			C_SAMLResponse = boundaryBasedContentExtractorItem0173_1.getResultText();
			log("<<< C_SAMLResponse = " + C_SAMLResponse);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLResponse!= null && C_SAMLResponse.trim().length() == 0)
			{
				C_SAMLResponse = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLResponse' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLResponse = " + C_SAMLResponse);
			}
		}
		catch (Exception e) { C_SAMLResponse = null; log(e); }
		if (C_SAMLResponse == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLResponse' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [174] <- WEB ADMIN Index 174 ---
		String requestProt0174 = "https";
		String requestHost0174 = "hcm4preview.sapsf.com";
		int    requestPort0174 = 443;
		String requestFile0174 = "/perfLogServlet" +
				"?callId=9803645313-0" +
				"&moduleId=ONBOARDING" +
				"&pageId=ONBOARDING_DASHBOARD_PAGE" +
				"&pageQualifier=DASHBOARD" +
				"&ST=1571770529018" +
				"&MEM=90118" +
				"&NRE=118" +
				"&NWR=110" +
				"&SCPU=10" +
				"&SQLC=47" +
				"&SQLT=56" +
				"&SVT=540" +
				"&UCPU=240" +
				"&CPU=250" +
				"&FRE=2" +
				"&FWR=0" +
				"&jsNum=44" +
				"&cssNum=15" +
				"&renderTime=886" +
				"&TTB=8" +
				"&RSR=745" +
				"&DIA=1685";
		String requestContent0174 = 
				"OPTR_INFO=81de4260-b152-4126-8e26-36b32c365128!1571770530706!1571770530735!0" +
				"&OPTR_INFO=98cd52f5-faf2-40bf-ab2a-bbe92528022d!1571770530775!1571770530791!0" +
				"&OPTR_INFO=505bf248-6c42-4b4f-a327-0a712a318825!1571770530821!1571770530874!0" +
				"&OPTR_INFO=8288621a-1852-479f-8d28-2f352221ab22!1571770530876!1571770530941!0" +
				"&OPTR_INFO=daf2728b-e102-4b4f-aa29-533d2f7efc22!1571770530980!1571770531036!0" +
				"&OPTR_INFO=1a22e20b-6982-4035-a722-b62b2ca82228!1571770531038!1571770531075!0" +
				"&OPTR_INFO=840257de-f4fd-11e9-a9d0-5927ca99197e!1571770529418!1571770531101!1" +
				"&OPTR_INFO=5c4e02b8-78f2-4ee5-9520-15c32236ad2d!1571770531135!1571770531145!0";
		String requestHeader0174 = "POST " + requestFile0174 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145529-789039\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=ONBOARDING&pageId=ONBOARDING_DASHBOARD_PAGE&pageQualifier=DASHBOARD&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0174.length() + "\r\n" + 		// Content-Length: 615
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0174, requestHost0174, requestPort0174, requestHeader0174, requestContent0174.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0174 = null;		// support garbage collector to reduce memory
		requestContent0174 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [174] <- Index 174
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [175] <- WEB ADMIN Index 175 ---
		String requestProt0175 = "https";
		String requestHost0175 = "hcm4preview.sapsf.com";
		int    requestPort0175 = 443;
		String requestFile0175 = "/ui/uicore/css/xi_d41d8cd98f00b204e9800998ecf8427e.css";
		String requestHeader0175 = "GET " + requestFile0175 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp-init/sso/KMS?RelayState=dashboard&AdditionalParams=https%3A%2F%2Fhcm4preview.sapsf.com%2Fxi%2Fui%2Fonboarding%2Fpages%2Fdashboard.xhtml%3Fbplte_company%3Dtctest%26_s.crb%3DFK05mfUV36Wcy5%25252bZimXHrpVkGUE%25253d&locale=en_US\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0175, requestHost0175, requestPort0175, requestHeader0175, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%25252bZimXHrpVkGUE%25253d", VScrb_Enc);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0175 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [176] <- WEB ADMIN Index 176 ---
		String requestProt0176 = "https";
		String requestHost0176 = "hcm4preview.sapsf.com";
		int    requestPort0176 = 443;
		String requestFile0176 = "/ui/uicore/css/xicommon_b2ba91d0973e2f2b556d59b67dfd2bc1.css";
		String requestHeader0176 = "GET " + requestFile0176 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp-init/sso/KMS?RelayState=dashboard&AdditionalParams=https%3A%2F%2Fhcm4preview.sapsf.com%2Fxi%2Fui%2Fonboarding%2Fpages%2Fdashboard.xhtml%3Fbplte_company%3Dtctest%26_s.crb%3DFK05mfUV36Wcy5%25252bZimXHrpVkGUE%25253d&locale=en_US\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0176, requestHost0176, requestPort0176, requestHeader0176, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%25252bZimXHrpVkGUE%25253d", VScrb_Enc);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0176 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;



		// all http requests of page #3_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 3 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [177] <- WEB ADMIN Index 177 ---
		String requestProt0177 = "https";
		String requestHost0177 = "hcm4preview.sapsf.com";
		int    requestPort0177 = 443;
		String requestFile0177 = "/ui/uicore/css/ext-custom_473ff6a53c9327806cfe3e6a15f6f177.css";
		String requestHeader0177 = "GET " + requestFile0177 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp-init/sso/KMS?RelayState=dashboard&AdditionalParams=https%3A%2F%2Fhcm4preview.sapsf.com%2Fxi%2Fui%2Fonboarding%2Fpages%2Fdashboard.xhtml%3Fbplte_company%3Dtctest%26_s.crb%3DFK05mfUV36Wcy5%25252bZimXHrpVkGUE%25253d&locale=en_US\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0177, requestHost0177, requestPort0177, requestHeader0177, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%25252bZimXHrpVkGUE%25253d", VScrb_Enc);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0177 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [178] <- WEB ADMIN Index 178 ---
		String requestProt0178 = "https";
		String requestHost0178 = "hcm4preview.sapsf.com";
		int    requestPort0178 = 443;
		String requestFile0178 = "/ui/uicore/css/sysmsg_e5ae6c5bedbc0e4cac2f1ec64ce11153.css";
		String requestHeader0178 = "GET " + requestFile0178 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp-init/sso/KMS?RelayState=dashboard&AdditionalParams=https%3A%2F%2Fhcm4preview.sapsf.com%2Fxi%2Fui%2Fonboarding%2Fpages%2Fdashboard.xhtml%3Fbplte_company%3Dtctest%26_s.crb%3DFK05mfUV36Wcy5%25252bZimXHrpVkGUE%25253d&locale=en_US\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0178, requestHost0178, requestPort0178, requestHeader0178, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%25252bZimXHrpVkGUE%25253d", VScrb_Enc);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0178 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [179] <- WEB ADMIN Index 179 ---
		String requestProt0179 = "https";
		String requestHost0179 = "hcm4preview.sapsf.com";
		int    requestPort0179 = 443;
		String requestFile0179 = "/xi/ajax/remoting/call/plaincall/globalNotificationControllerProxy.getNumberOfNewNotifications.dwr";
		String requestContent0179 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42372" + "\r\n" + 
				"c0-scriptName=globalNotificationControllerProxy" + "\r\n" + 
				"c0-methodName=getNumberOfNewNotifications" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"batchId=0";
		requestContent0179 = Lib.replaceTextPattern(requestContent0179, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences

		byte[] binarySearchPattern0179_0 = Base64Decoder.decodeToBytes("RkswNW1mVVYzNldjeTUlMjUyYlppbVhIcnBWa0dVRSUyNTNk");		// note: the search pattern value is base 64 encoded. decoded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestContent0179 = new String(Lib.binaryReplace(requestContent0179.getBytes(), binarySearchPattern0179_0, java.net.URLEncoder.encode(C_AjaxToken).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0179 = "POST " + requestFile0179 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/onboarding/pages/dashboard.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 010005000173e0b211-e322-4f17-8325-da4e2d11fe2429820909-1501-babe-face-000000000003f8cfa243-93f2-4b45-a928-48742b83c422HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145529-789039-1\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=ONBOARDING&pageId=ONBOARDING_DASHBOARD_PAGE&pageQualifier=DASHBOARD&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0179.length() + "\r\n" + 		// Content-Length: 322
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0179, requestHost0179, requestPort0179, requestHeader0179, requestContent0179.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0179 = null;		// support garbage collector to reduce memory
		requestContent0179 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 114
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [179] <- Index 179
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [180] <- WEB ADMIN Index 180 ---
		String requestProt0180 = "https";
		String requestHost0180 = "hcm4preview.sapsf.com";
		int    requestPort0180 = 443;
		String requestFile0180 = "/xi/ajax/remoting/call/plaincall/showMeControllerProxy.signAPIUrl.dwr";
		String requestContent0180 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42372" + "\r\n" + 
				"c0-scriptName=showMeControllerProxy" + "\r\n" + 
				"c0-methodName=signAPIUrl" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:%2Fmedia%2Fshowme_597075b7_0dbc_491c_b3d1_f9fc838ee8e9%2FONBOARDING_DASHBOARD_PAGE%2Fstatus" + "\r\n" + 
				"c0-param1=string:ONBOARDING_DASHBOARD_PAGE" + "\r\n" + 
				"c0-param2=string:4d8d069a7263145039918984ca857a36" + "\r\n" + 
				"batchId=1";
		requestContent0180 = Lib.replaceTextPattern(requestContent0180, "597075b7_0dbc_491c_b3d1_f9fc838ee8e9", C_Showme1, 0);		// search and replace content fragment "597075b7_0dbc_491c_b3d1_f9fc838ee8e9" with variable 'C_Showme1' on all occurrences

		byte[] binarySearchPattern0180_0 = Base64Decoder.decodeToBytes("RkswNW1mVVYzNldjeTUlMjUyYlppbVhIcnBWa0dVRSUyNTNk");		// note: the search pattern value is base 64 encoded. decoded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestContent0180 = new String(Lib.binaryReplace(requestContent0180.getBytes(), binarySearchPattern0180_0, java.net.URLEncoder.encode(C_AjaxToken).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0180 = "POST " + requestFile0180 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/onboarding/pages/dashboard.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500017cfad28f-fef2-44ad-ac2f-cadf22f0102129820909-1501-babe-face-0000000000038c3aa298-a142-4b3b-b120-609f2be1f323HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145529-789039-1\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=ONBOARDING&pageId=ONBOARDING_DASHBOARD_PAGE&pageQualifier=DASHBOARD&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0180.length() + "\r\n" + 		// Content-Length: 469
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0180, requestHost0180, requestPort0180, requestHeader0180, requestContent0180.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0180 = null;		// support garbage collector to reduce memory
		requestContent0180 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 437
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [180] <- Index 180
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Token1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0180_1 = new BoundaryBasedExtractorItem( "token=" , "\"",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0180_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Token1'
			C_Token1 = boundaryBasedContentExtractorItem0180_1.getResultText();
			log("<<< C_Token1 = " + C_Token1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Token1!= null && C_Token1.trim().length() == 0)
			{
				C_Token1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Token1' ends up with an empty string - a substitute value was set");
				log("<<< C_Token1 = " + C_Token1);
			}
		}
		catch (Exception e) { C_Token1 = null; log(e); }
		if (C_Token1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Token1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [181] <- WEB ADMIN Index 181 ---
		String requestProt0181 = "https";
		String requestHost0181 = "hcm4preview.sapsf.com";
		int    requestPort0181 = 443;
		String requestFile0181 = "/public/ui-resource/tctest/280;mod=ea5a9eb6367aa95e7fa782bea1b0faef%22";
		String requestHeader0181 = "GET " + requestFile0181 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0181, requestHost0181, requestPort0181, requestHeader0181, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0181 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [182] <- WEB ADMIN Index 182 ---
		String requestProt0182 = "https";
		String requestHost0182 = "hcm4preview.sapsf.com";
		int    requestPort0182 = 443;
		String requestFile0182 = "/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Bold.woff2";
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod2' on all occurrences
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "3A280", C_UIres, 0);		// search and replace request file fragment "3A280" with variable 'C_UIres' on all occurrences
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "255f54321=252d2", C_Name, 0);		// search and replace request file fragment "255f54321=252d2" with variable 'C_Name' on all occurrences
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!" with variable 'C_belieze1' on all occurrences
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2, 0);		// search and replace request file fragment "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_href2' on all occurrences

		String requestHeader0182 = "GET " + requestFile0182 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0182, requestHost0182, requestPort0182, requestHeader0182, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3A280", C_UIres);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FD3E69DB8103A603EC04DBBA1D636582", C_Merge1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("255f54321=252d2", C_Name);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0182 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [183] <- WEB ADMIN Index 183 ---
		String requestProt0183 = "https";
		String requestHost0183 = "hcm4preview.sapsf.com";
		int    requestPort0183 = 443;
		String requestFile0183 = "/eduPhoto/view" +
				"?companyId=tctest" +
				"&photo_type=liveProfile" +
				"&user_id=SIT20018" +
				"&mod=";
		requestFile0183 = Lib.replaceTextPattern(requestFile0183, "SIT20018", P_UserID, 0);		// search and replace request file fragment "SIT20018" with variable 'P_UserID' on all occurrences

		String requestHeader0183 = "GET " + requestFile0183 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0183, requestHost0183, requestPort0183, requestHeader0183, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0183 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [184] <- WEB ADMIN Index 184 ---
		String requestProt0184 = "https";
		String requestHost0184 = "hcm4preview.sapsf.com";
		int    requestPort0184 = 443;
		String requestFile0184 = "/public/ui-resource/tctest/280;mod=ea5a9eb6367aa95e7fa782bea1b0faef";
		String requestHeader0184 = "GET " + requestFile0184 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0184, requestHost0184, requestPort0184, requestHeader0184, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0184 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [185] <- WEB ADMIN Index 185 ---
		String requestProt0185 = "https";
		String requestHost0185 = "ds-aksb-a.akamaihd.net";
		int    requestPort0185 = 443;
		String requestFile0185 = "/2/492962/b" +
				"?dE=0" +
				"&cS=1" +
				"&cE=2" +
				"&rqS=2" +
				"&rsS=5" +
				"&rsE=155" +
				"&sS=-3" +
				"&dl=172" +
				"&di=785" +
				"&fp=" +
				"&dlS=786" +
				"&dlE=788" +
				"&dc=792" +
				"&leS=792" +
				"&leE=801" +
				"&to=" +
				"&ol=0" +
				"&cr=22" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/sf/idp-init/sso/KMS" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A69.0%29%20Gecko/20100101%20Firefox/69.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=24.244.17.176" +
				"&t=" +
				"&rid=1a9a5eb3" +
				"&r=11746" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=6037fc00" +
				"&akTX=1" +
				"&akTI=1a9a5eb3" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0185 = "GET " + requestFile0185 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp-init/sso/KMS?RelayState=dashboard&AdditionalParams=https%3A%2F%2Fhcm4preview.sapsf.com%2Fxi%2Fui%2Fonboarding%2Fpages%2Fdashboard.xhtml%3Fbplte_company%3Dtctest%26_s.crb%3DFK05mfUV36Wcy5%25252bZimXHrpVkGUE%25253d&locale=en_US\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0185, requestHost0185, requestPort0185, requestHeader0185, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%25252bZimXHrpVkGUE%25253d", VScrb_Enc);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0185 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [186] <- WEB ADMIN Index 186 ---
		String requestProt0186 = "https";
		String requestHost0186 = "mediaservicesfmsprod.ms.successfactors.com";
		int    requestPort0186 = 443;
		String requestFile0186 = "/mediaservice/api/v2/media/showme_597075b7_0dbc_491c_b3d1_f9fc838ee8e9/ONBOARDING_DASHBOARD_PAGE/status" +
				"?token=" + C_Token1 +		// recorded value = 73c3fe2eb90ba3bfcdbd9124b0bcb8ebf78913a8aa6187ae3e958d8f65a133235425f919632b3b9e84cc5c0f9698430cbdbf0da6ab55463102934fad49bf9765,-8318723551546216615,1571772331,1
				"&callback=sfDeferredUtilCallback0";
		requestFile0186 = Lib.replaceTextPattern(requestFile0186, "73c3fe2eb90ba3bfcdbd9124b0bcb8ebf78913a8aa6187ae3e958d8f65a133235425f919632b3b9e84cc5c0f9698430cbdbf0da6ab55463102934fad49bf9765,-8318723551546216615,1571772331,1", C_Token1, 0);		// search and replace request file fragment "73c3fe2eb90ba3bfcdbd9124b0bcb8ebf78913a8aa6187ae3e958d8f65a133235425f919632b3b9e84cc5c0f9698430cbdbf0da6ab55463102934fad49bf9765,-8318723551546216615,1571772331,1" with variable 'C_Token1' on all occurrences
		requestFile0186 = Lib.replaceTextPattern(requestFile0186, "597075b7_0dbc_491c_b3d1_f9fc838ee8e9", C_Showme1, 0);		// search and replace request file fragment "597075b7_0dbc_491c_b3d1_f9fc838ee8e9" with variable 'C_Showme1' on all occurrences

		String requestHeader0186 = "GET " + requestFile0186 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mediaservicesfmsprod.ms.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0186, requestHost0186, requestPort0186, requestHeader0186, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0186 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 145
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [186] <- Index 186
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [187] <- WEB ADMIN Index 187 ---
		String requestProt0187 = "https";
		String requestHost0187 = "hcm4preview.sapsf.com";
		int    requestPort0187 = 443;
		String requestFile0187 = "/perfLogServlet" +
				"?callId=9803645313-1" +
				"&moduleId=ONBOARDING" +
				"&pageId=ONBOARDING_DASHBOARD_PAGE" +
				"&pageQualifier=DASHBOARD" +
				"&ST=1571770531299" +
				"&ET=1571770532258" +
				"&MEM=881" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=4" +
				"&UCPU=0" +
				"&CPU=0" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=45" +
				"&cssNum=15" +
				"&renderTime=855";
		String requestContent0187 = 
				"OPTR_INFO=b7bb725b-46a2-498c-8e21-9c8927669420!1571770531300!1571770531320!0" +
				"&OPTR_INFO=656cf2ae-1cf2-4ba8-a92f-5c2d2c7e9528!1571770531376!1571770531415!0" +
				"&OPTR_INFO=7dfdd2c8-21b2-417f-9321-16762f27072e!1571770531548!1571770531556!0" +
				"&OPTR_INFO=6d3b2259-6582-4b3b-a828-bfd32993ca20!1571770531563!1571770531567!0" +
				"&OPTR_INFO=beeae210-42c2-4254-a22c-f3482cd32f28!1571770531571!1571770531707!0" +
				"&OPTR_INFO=1303c263-f0c2-4a30-ad23-0cf62f31862e!1571770531744!1571770531748!0" +
				"&OPTR_INFO=73e0b211-e322-4f17-8325-da4e2d11fe24!1571770531797!1571770532023!0" +
				"&OPTR_INFO=7cfad28f-fef2-44ad-ac2f-cadf22f01021!1571770531799!1571770532155!0";
		String requestHeader0187 = "POST " + requestFile0187 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe13s-20191022145529-789039-1\r\n" + 
				"X-Ajax-Token: FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=ONBOARDING&pageId=ONBOARDING_DASHBOARD_PAGE&pageQualifier=DASHBOARD&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0187.length() + "\r\n" + 		// Content-Length: 615
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0187, requestHost0187, requestPort0187, requestHeader0187, requestContent0187.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0187 = null;		// support garbage collector to reduce memory
		requestContent0187 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [187] <- Index 187
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [188] <- WEB ADMIN Index 188 ---
		log();
		log("# title: Object moved");
		String requestProt0188 = "https";
		String requestHost0188 = "onboarding4preview.sapsf.com";
		int    requestPort0188 = 443;
		String requestFile0188 = "/ONB/SSO/SAML20/AssertionConsumerService.aspx";
		String requestContent0188 = 
				"SAMLResponse=" + java.net.URLEncoder.encode(C_SAMLResponse) +		// recorded value = PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9vbmJvYXJkaW5nNHByZXZpZXcuc2Fwc2YuY29tL09OQi9TU08vU0FNTDIwL0Fzc2VydGlvbkNvbnN1bWVyU2VydmljZS5hc3B4IiBJRD0iXzc5MDNlYWMyLTFlMDEtNDJhZi04ZGVjLWU0OWFjODI4YTMxNSIgSXNzdWVJbnN0YW50PSIyMDE5LTEwLTIyVDE4OjU1OjMwLjczNFoiIFZlcnNpb249IjIuMCI%2BPHNhbWwyOklzc3VlciB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2Bd3d3LnN1Y2Nlc3NmYWN0b3JzLmNvbTwvc2FtbDI6SXNzdWVyPjxzYW1sMnA6U3RhdHVzPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8%2BPC9zYW1sMnA6U3RhdHVzPjxzYW1sMjpBc3NlcnRpb24geG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIElEPSJTRl9TQU1MMi4wXzg1MmYzMWU0LTU4Y2YtNGE3My04YzgwLTU4YTBkYWU0MmQyOSIgSXNzdWVJbnN0YW50PSIyMDE5LTEwLTIyVDE4OjU1OjMwLjczNFoiIFZlcnNpb249IjIuMCIgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIj48c2FtbDI6SXNzdWVyPnd3dy5zdWNjZXNzZmFjdG9ycy5jb208L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlNpZ25lZEluZm8geG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiLz4KPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiLz4KPGRzOlJlZmVyZW5jZSBVUkk9IiNTRl9TQU1MMi4wXzg1MmYzMWU0LTU4Y2YtNGE3My04YzgwLTU4YTBkYWU0MmQyOSIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6VHJhbnNmb3JtcyB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BCjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiLz4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVjPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIFByZWZpeExpc3Q9InhzIi8%2BPC9kczpUcmFuc2Zvcm0%2BCjwvZHM6VHJhbnNmb3Jtcz4KPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIvPgo8ZHM6RGlnZXN0VmFsdWUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPlVxYVZEaEtVK2JLdlFjMVprZlZYVnlDb0dlaz08L2RzOkRpZ2VzdFZhbHVlPgo8L2RzOlJlZmVyZW5jZT4KPC9kczpTaWduZWRJbmZvPgo8ZHM6U2lnbmF0dXJlVmFsdWUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgpXL1NaS1h2U3NkRlhpV1IwTmZZN0grVHY3SklyTVdNTnlRUFZUS1pWaEZEbmsyZkM1OW1vREJ0aStGVE9GbWxjZGk3d3BtMnlKaXd5CmhrUS9CajFEQzF0a21UbXpLeFMzNi9ZQXVZelV2OHR5NkFTaU5DVmM4ZEJ4WnFGOHlLaWJvUGlkbGIvYlNSZjBYdWZndElETllYN3QKL2M3bGY1WXEzUXdBd01McFA1Zz0KPC9kczpTaWduYXR1cmVWYWx1ZT4KPGRzOktleUluZm8%2BPGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU%2BTUlJQ0RUQ0NBWGFnQXdJQkFnSUVUSmo5TGpBTkJna3Foa2lHOXcwQkFRVUZBREJMTVFzd0NRWURWUVFHRXdKVlV6RWJNQmtHQTFVRQpDaE1TVTNWalkyVnpjMlpoWTNSdmNuTXVZMjl0TVF3d0NnWURWUVFMRXdOUGNITXhFVEFQQmdOVkJBTVRDRk5HSUVGa2JXbHVNQjRYCkRURXdNRGt5TVRFNE5EVXdNbG9YRFRJMU1Ea3hPVEU0TkRVd01sb3dTekVMTUFrR0ExVUVCaE1DVlZNeEd6QVpCZ05WQkFvVEVsTjEKWTJObGMzTm1ZV04wYjNKekxtTnZiVEVNTUFvR0ExVUVDeE1EVDNCek1SRXdEd1lEVlFRREV3aFRSaUJCWkcxcGJqQ0JuekFOQmdrcQpoa2lHOXcwQkFRRUZBQU9CalFBd2dZa0NnWUVBckE5UkxObkw5UHQ2eHluRmZZZmE4VlhBWEZERzlZOHhrZ3MzbGhJT2xzanFFWXdiClNvZ2hpcUpJSnZmWU00NWt4M2FCN1pyTjk2dEFSNXVVdXBFc3UvR2NTNkFDeGhmcnVXK0JZNnV3OHY2L3cydlhoQmRmRmpCb08rS2UKTHg0azNsbGxlVmdLc21ObGY4MW9rT1h2MXJlZTh3RXJmWjNzc25OeGt1UWdHQjBDQXdFQUFUQU5CZ2txaGtpRzl3MEJBUVVGQUFPQgpnUUJlQkNTTUZuWThUQjZqdFdvU1AvbG9yQnVkaHB0Z3ZPNy8zcitsL1FLMGhkazZDVnYrVlFtU2lsTlBnV1ZnVTlrdFpHYk5rWmh3Cklnd25xSVFIQWk2NjMxdWZrWVFKQis0OFlVZTFxL3B2NkVXYWVJd0d2Y0dZU1hacC9FL2FHWlB0Y2VUSVhGUGZxT3lIUW9GdGIwbnEKTU1GV29EaHBYVUhtbHJveVRjOXNKZz09PC9kczpYNTA5Q2VydGlmaWNhdGU%2BPC9kczpYNTA5RGF0YT48L2RzOktleUluZm8%2BPC9kczpTaWduYXR1cmU%2BPHNhbWwyOlN1YmplY3Q%2BPHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OnVuc3BlY2lmaWVkIj5TSVQyMDAxODwvc2FtbDI6TmFtZUlEPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI%2BPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIE5vdE9uT3JBZnRlcj0iMjAxOS0xMC0yMlQxOTowNTozMC43MzRaIiBSZWNpcGllbnQ9Imh0dHBzOi8vb25ib2FyZGluZzRwcmV2aWV3LnNhcHNmLmNvbS9PTkIvU1NPL1NBTUwyMC9Bc3NlcnRpb25Db25zdW1lclNlcnZpY2UuYXNweCIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q%2BPHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDE5LTEwLTIyVDE4OjQ1OjMwLjczNFoiIE5vdE9uT3JBZnRlcj0iMjAxOS0xMC0yMlQxOTowNTozMC43MzRaIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U%2BaHR0cHM6Ly9vbmJvYXJkaW5nNHByZXZpZXcuc2Fwc2YuY29tL09OQi9TU08vU0FNTDIwL0Fzc2VydGlvbkNvbnN1bWVyU2VydmljZS5hc3B4PC9zYW1sMjpBdWRpZW5jZT48L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BPC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTktMTAtMjJUMTg6NTU6MzAuNzM0WiIgU2Vzc2lvbkluZGV4PSJzblhyUEE1Nmxub1YyUEV2cnVWK21pTENtS2VVOFU5Z3l0RkptM1hJSnM4bU5GeWxEMHRLemdoOWZicW1YTTlVWUN2aTdBL2UwUXRKUitaZzFmdDZwUT09Ij48c2FtbDI6QXV0aG5Db250ZXh0PjxzYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZFByb3RlY3RlZFRyYW5zcG9ydDwvc2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BPC9zYW1sMjpBdXRobkNvbnRleHQ%2BPC9zYW1sMjpBdXRoblN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0iY29tcGFueWlkIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BdGN0ZXN0PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImxvY2FsZSI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciPmVuX1VTPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImNvbXBhbnl1dWlkIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BNTk3MDc1YjdfMGRiY180OTFjX2IzZDFfZjlmYzgzOGVlOGU5PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImxvZ2dlZGludXNlcmlkIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BU0lUMjAwMTg8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0ibG9nZ2VkaW5wZXJzb25ndWlkIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyIvPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0iZW5hYmxlZ2FjZSI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciPmZhbHNlPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9InBlcnNvbmd1aWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIi8%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJ0ZW5hbnR1cmwiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIi8%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJzZWNvbmRhcnlMb2dpblByb3Zpc2lvbmVySWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIi8%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJzZWNvbmRhcnlMb2dpblByb3Zpc2lvbmVyRW1haWwiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIi8%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJleHRfdXNlcmlkX3NmIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BU0lUMjAwMTg8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0iem9uZXNlc3Npb25pZCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciPmUwNGUyMDEwLTliMDYtNDNmZS1hNWYyLTBiN2QwMTY2ZTkwMDwvc2FtbDI6QXR0cmlidXRlVmFsdWU%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJBY2NvdW50Ij48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BdGN0ZXN0PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9IlVJRCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciPlNJVDIwMDE4PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwyOkFzc2VydGlvbj48L3NhbWwycDpSZXNwb25zZT4%3D
				"&RelayState=dashboard" +
				"&TARGET=dashboard" +
				"&bizxHomeURL=https%3A%2F%2Fhcm4preview.sapsf.com%2Fsf%2Fhome";
		byte[] binarySearchPattern0188_0 = Base64Decoder.decodeToBytes("");		// note: the search pattern value is base 64 encoded. decoded value = PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9vbmJvYXJkaW5nNHByZXZpZXcuc2Fwc2YuY29tL09OQi9TU08vU0FNTDIwL0Fzc2VydGlvbkNvbnN1bWVyU2VydmljZS5hc3B4IiBJRD0iXzc5MDNlYWMyLTFlMDEtNDJhZi04ZGVjLWU0OWFjODI4YTMxNSIgSXNzdWVJbnN0YW50PSIyMDE5LTEwLTIyVDE4OjU1OjMwLjczNFoiIFZlcnNpb249IjIuMCI%2BPHNhbWwyOklzc3VlciB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2Bd3d3LnN1Y2Nlc3NmYWN0b3JzLmNvbTwvc2FtbDI6SXNzdWVyPjxzYW1sMnA6U3RhdHVzPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8%2BPC9zYW1sMnA6U3RhdHVzPjxzYW1sMjpBc3NlcnRpb24geG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIElEPSJTRl9TQU1MMi4wXzg1MmYzMWU0LTU4Y2YtNGE3My04YzgwLTU4YTBkYWU0MmQyOSIgSXNzdWVJbnN0YW50PSIyMDE5LTEwLTIyVDE4OjU1OjMwLjczNFoiIFZlcnNpb249IjIuMCIgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIj48c2FtbDI6SXNzdWVyPnd3dy5zdWNjZXNzZmFjdG9ycy5jb208L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlNpZ25lZEluZm8geG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiLz4KPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiLz4KPGRzOlJlZmVyZW5jZSBVUkk9IiNTRl9TQU1MMi4wXzg1MmYzMWU0LTU4Y2YtNGE3My04YzgwLTU4YTBkYWU0MmQyOSIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6VHJhbnNmb3JtcyB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BCjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiLz4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVjPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIFByZWZpeExpc3Q9InhzIi8%2BPC9kczpUcmFuc2Zvcm0%2BCjwvZHM6VHJhbnNmb3Jtcz4KPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIvPgo8ZHM6RGlnZXN0VmFsdWUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPlVxYVZEaEtVK2JLdlFjMVprZlZYVnlDb0dlaz08L2RzOkRpZ2VzdFZhbHVlPgo8L2RzOlJlZmVyZW5jZT4KPC9kczpTaWduZWRJbmZvPgo8ZHM6U2lnbmF0dXJlVmFsdWUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgpXL1NaS1h2U3NkRlhpV1IwTmZZN0grVHY3SklyTVdNTnlRUFZUS1pWaEZEbmsyZkM1OW1vREJ0aStGVE9GbWxjZGk3d3BtMnlKaXd5CmhrUS9CajFEQzF0a21UbXpLeFMzNi9ZQXVZelV2OHR5NkFTaU5DVmM4ZEJ4WnFGOHlLaWJvUGlkbGIvYlNSZjBYdWZndElETllYN3QKL2M3bGY1WXEzUXdBd01McFA1Zz0KPC9kczpTaWduYXR1cmVWYWx1ZT4KPGRzOktleUluZm8%2BPGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU%2BTUlJQ0RUQ0NBWGFnQXdJQkFnSUVUSmo5TGpBTkJna3Foa2lHOXcwQkFRVUZBREJMTVFzd0NRWURWUVFHRXdKVlV6RWJNQmtHQTFVRQpDaE1TVTNWalkyVnpjMlpoWTNSdmNuTXVZMjl0TVF3d0NnWURWUVFMRXdOUGNITXhFVEFQQmdOVkJBTVRDRk5HSUVGa2JXbHVNQjRYCkRURXdNRGt5TVRFNE5EVXdNbG9YRFRJMU1Ea3hPVEU0TkRVd01sb3dTekVMTUFrR0ExVUVCaE1DVlZNeEd6QVpCZ05WQkFvVEVsTjEKWTJObGMzTm1ZV04wYjNKekxtTnZiVEVNTUFvR0ExVUVDeE1EVDNCek1SRXdEd1lEVlFRREV3aFRSaUJCWkcxcGJqQ0JuekFOQmdrcQpoa2lHOXcwQkFRRUZBQU9CalFBd2dZa0NnWUVBckE5UkxObkw5UHQ2eHluRmZZZmE4VlhBWEZERzlZOHhrZ3MzbGhJT2xzanFFWXdiClNvZ2hpcUpJSnZmWU00NWt4M2FCN1pyTjk2dEFSNXVVdXBFc3UvR2NTNkFDeGhmcnVXK0JZNnV3OHY2L3cydlhoQmRmRmpCb08rS2UKTHg0azNsbGxlVmdLc21ObGY4MW9rT1h2MXJlZTh3RXJmWjNzc25OeGt1UWdHQjBDQXdFQUFUQU5CZ2txaGtpRzl3MEJBUVVGQUFPQgpnUUJlQkNTTUZuWThUQjZqdFdvU1AvbG9yQnVkaHB0Z3ZPNy8zcitsL1FLMGhkazZDVnYrVlFtU2lsTlBnV1ZnVTlrdFpHYk5rWmh3Cklnd25xSVFIQWk2NjMxdWZrWVFKQis0OFlVZTFxL3B2NkVXYWVJd0d2Y0dZU1hacC9FL2FHWlB0Y2VUSVhGUGZxT3lIUW9GdGIwbnEKTU1GV29EaHBYVUhtbHJveVRjOXNKZz09PC9kczpYNTA5Q2VydGlmaWNhdGU%2BPC9kczpYNTA5RGF0YT48L2RzOktleUluZm8%2BPC9kczpTaWduYXR1cmU%2BPHNhbWwyOlN1YmplY3Q%2BPHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OnVuc3BlY2lmaWVkIj5TSVQyMDAxODwvc2FtbDI6TmFtZUlEPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI%2BPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIE5vdE9uT3JBZnRlcj0iMjAxOS0xMC0yMlQxOTowNTozMC43MzRaIiBSZWNpcGllbnQ9Imh0dHBzOi8vb25ib2FyZGluZzRwcmV2aWV3LnNhcHNmLmNvbS9PTkIvU1NPL1NBTUwyMC9Bc3NlcnRpb25Db25zdW1lclNlcnZpY2UuYXNweCIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q%2BPHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDE5LTEwLTIyVDE4OjQ1OjMwLjczNFoiIE5vdE9uT3JBZnRlcj0iMjAxOS0xMC0yMlQxOTowNTozMC43MzRaIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U%2BaHR0cHM6Ly9vbmJvYXJkaW5nNHByZXZpZXcuc2Fwc2YuY29tL09OQi9TU08vU0FNTDIwL0Fzc2VydGlvbkNvbnN1bWVyU2VydmljZS5hc3B4PC9zYW1sMjpBdWRpZW5jZT48L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BPC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTktMTAtMjJUMTg6NTU6MzAuNzM0WiIgU2Vzc2lvbkluZGV4PSJzblhyUEE1Nmxub1YyUEV2cnVWK21pTENtS2VVOFU5Z3l0RkptM1hJSnM4bU5GeWxEMHRLemdoOWZicW1YTTlVWUN2aTdBL2UwUXRKUitaZzFmdDZwUT09Ij48c2FtbDI6QXV0aG5Db250ZXh0PjxzYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZFByb3RlY3RlZFRyYW5zcG9ydDwvc2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BPC9zYW1sMjpBdXRobkNvbnRleHQ%2BPC9zYW1sMjpBdXRoblN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0iY29tcGFueWlkIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BdGN0ZXN0PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImxvY2FsZSI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciPmVuX1VTPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImNvbXBhbnl1dWlkIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BNTk3MDc1YjdfMGRiY180OTFjX2IzZDFfZjlmYzgzOGVlOGU5PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImxvZ2dlZGludXNlcmlkIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BU0lUMjAwMTg8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0ibG9nZ2VkaW5wZXJzb25ndWlkIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyIvPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0iZW5hYmxlZ2FjZSI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciPmZhbHNlPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9InBlcnNvbmd1aWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIi8%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJ0ZW5hbnR1cmwiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIi8%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJzZWNvbmRhcnlMb2dpblByb3Zpc2lvbmVySWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIi8%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJzZWNvbmRhcnlMb2dpblByb3Zpc2lvbmVyRW1haWwiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIi8%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJleHRfdXNlcmlkX3NmIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BU0lUMjAwMTg8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0iem9uZXNlc3Npb25pZCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciPmUwNGUyMDEwLTliMDYtNDNmZS1hNWYyLTBiN2QwMTY2ZTkwMDwvc2FtbDI6QXR0cmlidXRlVmFsdWU%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJBY2NvdW50Ij48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BdGN0ZXN0PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9IlVJRCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciPlNJVDIwMDE4PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwyOkFzc2VydGlvbj48L3NhbWwycDpSZXNwb25zZT4%3D
		requestContent0188 = new String(Lib.binaryReplace(requestContent0188.getBytes(), binarySearchPattern0188_0, java.net.URLEncoder.encode(C_SAMLResponse).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0188 = "POST " + requestFile0188 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0188.length() + "\r\n" + 		// Content-Length: 8091
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp-init/sso/KMS?RelayState=dashboard&AdditionalParams=https%3A%2F%2Fhcm4preview.sapsf.com%2Fxi%2Fui%2Fonboarding%2Fpages%2Fdashboard.xhtml%3Fbplte_company%3Dtctest%26_s.crb%3DFK05mfUV36Wcy5%25252bZimXHrpVkGUE%25253d&locale=en_US\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0188, requestHost0188, requestPort0188, requestHeader0188, requestContent0188.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%25252bZimXHrpVkGUE%25253d", VScrb_Enc);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0188 = null;		// support garbage collector to reduce memory
		requestContent0188 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 159
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [188] <- Index 188
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'C_LoginDetails'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0188_1 = new BoundaryBasedExtractorItem( "LOGIN_DETAILS=" , ";",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0188_1);

		// setup var extractor for 'C_QASFONB'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0188_2 = new BoundaryBasedExtractorItem( "QASF_ONB=" , ";",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0188_2);

		// setup var extractor for 'C_SessionID'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0188_3 = new BoundaryBasedExtractorItem( "SessionId=" , ";",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0188_3);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_LoginDetails'
			C_LoginDetails = boundaryBasedHeaderExtractorItem0188_1.getResultText();
			log("<<< C_LoginDetails = " + C_LoginDetails);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_LoginDetails!= null && C_LoginDetails.trim().length() == 0)
			{
				C_LoginDetails = "";
				log("runtime note: the extraction of a new value for the variable 'C_LoginDetails' ends up with an empty string - a substitute value was set");
				log("<<< C_LoginDetails = " + C_LoginDetails);
			}
		}
		catch (Exception e) { C_LoginDetails = null; log(e); }
		if (C_LoginDetails == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_LoginDetails' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_QASFONB'
			C_QASFONB = boundaryBasedHeaderExtractorItem0188_2.getResultText();
			log("<<< C_QASFONB = " + C_QASFONB);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_QASFONB!= null && C_QASFONB.trim().length() == 0)
			{
				C_QASFONB = "";
				log("runtime note: the extraction of a new value for the variable 'C_QASFONB' ends up with an empty string - a substitute value was set");
				log("<<< C_QASFONB = " + C_QASFONB);
			}
		}
		catch (Exception e) { C_QASFONB = null; log(e); }
		if (C_QASFONB == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_QASFONB' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_SessionID'
			C_SessionID = boundaryBasedHeaderExtractorItem0188_3.getResultText();
			log("<<< C_SessionID = " + C_SessionID);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SessionID!= null && C_SessionID.trim().length() == 0)
			{
				C_SessionID = "";
				log("runtime note: the extraction of a new value for the variable 'C_SessionID' ends up with an empty string - a substitute value was set");
				log("<<< C_SessionID = " + C_SessionID);
			}
		}
		catch (Exception e) { C_SessionID = null; log(e); }
		if (C_SessionID == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SessionID' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [189] <- WEB ADMIN Index 189 ---
		log();
		log("# title: XpressHR Onboarding");
		String requestProt0189 = "https";
		String requestHost0189 = "onboarding4preview.sapsf.com";
		int    requestPort0189 = 443;
		String requestFile0189 = "/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx";
		String requestHeader0189 = "GET " + requestFile0189 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp-init/sso/KMS?RelayState=dashboard&AdditionalParams=https%3A%2F%2Fhcm4preview.sapsf.com%2Fxi%2Fui%2Fonboarding%2Fpages%2Fdashboard.xhtml%3Fbplte_company%3Dtctest%26_s.crb%3DFK05mfUV36Wcy5%25252bZimXHrpVkGUE%25253d&locale=en_US\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0189, requestHost0189, requestPort0189, requestHeader0189, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%25252bZimXHrpVkGUE%25253d", VScrb_Enc);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0189 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 4652
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "XpressHR Onboarding");		// Test [189] <- Index 189
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SiteVersion'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0189_1 = new BoundaryBasedExtractorItem( "SITE_VERSION: \"" , "\",",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0189_1);

		// setup var extractor for 'SAPUI_Version'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0189_2 = new BoundaryBasedExtractorItem( "/ONB/ui/lib/" , "\";",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0189_2);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'C_AspxRoles'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0189_1 = new BoundaryBasedExtractorItem( "ASPXROLES=" , ";",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0189_1);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SiteVersion'
			C_SiteVersion = boundaryBasedContentExtractorItem0189_1.getResultText();
			log("<<< C_SiteVersion = " + C_SiteVersion);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SiteVersion!= null && C_SiteVersion.trim().length() == 0)
			{
				C_SiteVersion = "";
				log("runtime note: the extraction of a new value for the variable 'C_SiteVersion' ends up with an empty string - a substitute value was set");
				log("<<< C_SiteVersion = " + C_SiteVersion);
			}
		}
		catch (Exception e) { C_SiteVersion = null; log(e); }
		if (C_SiteVersion == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SiteVersion' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_AspxRoles'
			C_AspxRoles = boundaryBasedHeaderExtractorItem0189_1.getResultText();
			log("<<< C_AspxRoles = " + C_AspxRoles);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_AspxRoles!= null && C_AspxRoles.trim().length() == 0)
			{
				C_AspxRoles = "";
				log("runtime note: the extraction of a new value for the variable 'C_AspxRoles' ends up with an empty string - a substitute value was set");
				log("<<< C_AspxRoles = " + C_AspxRoles);
			}
		}
		catch (Exception e) { C_AspxRoles = null; log(e); }
		if (C_AspxRoles == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_AspxRoles' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'SAPUI_Version'
			SAPUI_Version = boundaryBasedContentExtractorItem0189_2.getResultText();
			log("<<< SAPUI_Version = " + SAPUI_Version);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && SAPUI_Version!= null && SAPUI_Version.trim().length() == 0)
			{
				SAPUI_Version = "";
				log("runtime note: the extraction of a new value for the variable 'SAPUI_Version' ends up with an empty string - a substitute value was set");
				log("<<< SAPUI_Version = " + SAPUI_Version);
			}
		}
		catch (Exception e) { SAPUI_Version = null; log(e); }
		if (SAPUI_Version == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'SAPUI_Version' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [190] <- WEB ADMIN Index 190 ---
		String requestProt0190 = "https";
		String requestHost0190 = "onboarding4preview.sapsf.com";
		int    requestPort0190 = 443;
		String requestFile0190 = "/ONB/ui/1908.10.22.0/common/css/preloader.css";
		requestFile0190 = Lib.replaceTextPattern(requestFile0190, "1908.10.22.0", C_SiteVersion, 0);		// search and replace request file fragment "1908.10.22.0" with variable 'C_SiteVersion' on all occurrences

		String requestHeader0190 = "GET " + requestFile0190 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0190, requestHost0190, requestPort0190, requestHeader0190, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0190 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2411
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [190] <- Index 190
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [191] <- WEB ADMIN Index 191 ---
		String requestProt0191 = "https";
		String requestHost0191 = "hcm4preview.sapsf.com";
		int    requestPort0191 = 443;
		String requestFile0191 = "/public/theme-api/info/tctest";
		String requestHeader0191 = "GET " + requestFile0191 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0191, requestHost0191, requestPort0191, requestHeader0191, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0191 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [192] <- WEB ADMIN Index 192 ---
		String requestProt0192 = "https";
		String requestHost0192 = "hcm4preview.sapsf.com";
		int    requestPort0192 = 443;
		String requestFile0192 = "/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/merge_b1908.20191010120924/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css";
		requestFile0192 = Lib.replaceTextPattern(requestFile0192, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod2' on all occurrences
		requestFile0192 = Lib.replaceTextPattern(requestFile0192, "3A280", C_UIres, 0);		// search and replace request file fragment "3A280" with variable 'C_UIres' on all occurrences
		requestFile0192 = Lib.replaceTextPattern(requestFile0192, "255f54321=252d2", C_Name, 0);		// search and replace request file fragment "255f54321=252d2" with variable 'C_Name' on all occurrences
		requestFile0192 = Lib.replaceTextPattern(requestFile0192, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!" with variable 'C_belieze1' on all occurrences
		requestFile0192 = Lib.replaceTextPattern(requestFile0192, "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2, 0);		// search and replace request file fragment "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_href2' on all occurrences

		String requestHeader0192 = "GET " + requestFile0192 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0192, requestHost0192, requestPort0192, requestHeader0192, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0192 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [193] <- WEB ADMIN Index 193 ---
		String requestProt0193 = "https";
		String requestHost0193 = "hcm4preview.sapsf.com";
		int    requestPort0193 = 443;
		String requestFile0193 = "/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/merge_b1908.20191010120924/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/unified/themes/sap_belize/library.css";
		requestFile0193 = Lib.replaceTextPattern(requestFile0193, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod2' on all occurrences
		requestFile0193 = Lib.replaceTextPattern(requestFile0193, "3A280", C_UIres, 0);		// search and replace request file fragment "3A280" with variable 'C_UIres' on all occurrences
		requestFile0193 = Lib.replaceTextPattern(requestFile0193, "255f54321=252d2", C_Name, 0);		// search and replace request file fragment "255f54321=252d2" with variable 'C_Name' on all occurrences
		requestFile0193 = Lib.replaceTextPattern(requestFile0193, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!" with variable 'C_belieze1' on all occurrences
		requestFile0193 = Lib.replaceTextPattern(requestFile0193, "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2, 0);		// search and replace request file fragment "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_href2' on all occurrences

		String requestHeader0193 = "GET " + requestFile0193 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0193, requestHost0193, requestPort0193, requestHeader0193, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0193 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [194] <- WEB ADMIN Index 194 ---
		String requestProt0194 = "https";
		String requestHost0194 = "hcm4preview.sapsf.com";
		int    requestPort0194 = 443;
		String requestFile0194 = "/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/merge_b1908.20191010120924/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/layout/themes/sap_belize/library.css";
		requestFile0194 = Lib.replaceTextPattern(requestFile0194, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod2' on all occurrences
		requestFile0194 = Lib.replaceTextPattern(requestFile0194, "3A280", C_UIres, 0);		// search and replace request file fragment "3A280" with variable 'C_UIres' on all occurrences
		requestFile0194 = Lib.replaceTextPattern(requestFile0194, "255f54321=252d2", C_Name, 0);		// search and replace request file fragment "255f54321=252d2" with variable 'C_Name' on all occurrences
		requestFile0194 = Lib.replaceTextPattern(requestFile0194, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!" with variable 'C_belieze1' on all occurrences
		requestFile0194 = Lib.replaceTextPattern(requestFile0194, "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2, 0);		// search and replace request file fragment "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_href2' on all occurrences

		String requestHeader0194 = "GET " + requestFile0194 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0194, requestHost0194, requestPort0194, requestHeader0194, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0194 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [195] <- WEB ADMIN Index 195 ---
		String requestProt0195 = "https";
		String requestHost0195 = "hcm4preview.sapsf.com";
		int    requestPort0195 = 443;
		String requestFile0195 = "/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/merge_b1908.20191010120924/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library.css";
		requestFile0195 = Lib.replaceTextPattern(requestFile0195, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod2' on all occurrences
		requestFile0195 = Lib.replaceTextPattern(requestFile0195, "3A280", C_UIres, 0);		// search and replace request file fragment "3A280" with variable 'C_UIres' on all occurrences
		requestFile0195 = Lib.replaceTextPattern(requestFile0195, "255f54321=252d2", C_Name, 0);		// search and replace request file fragment "255f54321=252d2" with variable 'C_Name' on all occurrences
		requestFile0195 = Lib.replaceTextPattern(requestFile0195, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!" with variable 'C_belieze1' on all occurrences
		requestFile0195 = Lib.replaceTextPattern(requestFile0195, "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2, 0);		// search and replace request file fragment "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_href2' on all occurrences

		String requestHeader0195 = "GET " + requestFile0195 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0195, requestHost0195, requestPort0195, requestHeader0195, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0195 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [196] <- WEB ADMIN Index 196 ---
		String requestProt0196 = "https";
		String requestHost0196 = "onboarding4preview.sapsf.com";
		int    requestPort0196 = 443;
		String requestFile0196 = "/ONB/ui/lib/sapui5_1.65.1/sap-ui-core.js";
		requestFile0196 = Lib.replaceTextPattern(requestFile0196, "sapui5_1.65.1", SAPUI_Version, 0);		// search and replace request file fragment "sapui5_1.65.1" with variable 'SAPUI_Version' on all occurrences

		String requestHeader0196 = "GET " + requestFile0196 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0196, requestHost0196, requestPort0196, requestHeader0196, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0196 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 279870
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [196] <- Index 196
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 4 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [197] <- WEB ADMIN Index 197 ---
		String requestProt0197 = "https";
		String requestHost0197 = "hcm4preview.sapsf.com";
		int    requestPort0197 = 443;
		String requestFile0197 = "/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/merge_b1908.20191010120924/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		requestFile0197 = Lib.replaceTextPattern(requestFile0197, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod2' on all occurrences
		requestFile0197 = Lib.replaceTextPattern(requestFile0197, "3A280", C_UIres, 0);		// search and replace request file fragment "3A280" with variable 'C_UIres' on all occurrences
		requestFile0197 = Lib.replaceTextPattern(requestFile0197, "255f54321=252d2", C_Name, 0);		// search and replace request file fragment "255f54321=252d2" with variable 'C_Name' on all occurrences
		requestFile0197 = Lib.replaceTextPattern(requestFile0197, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!" with variable 'C_belieze1' on all occurrences
		requestFile0197 = Lib.replaceTextPattern(requestFile0197, "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2, 0);		// search and replace request file fragment "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_href2' on all occurrences

		String requestHeader0197 = "GET " + requestFile0197 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Origin: https://onboarding4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/merge_b1908.20191010120924/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0197, requestHost0197, requestPort0197, requestHeader0197, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3A280", C_UIres);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("255f54321=252d2", C_Name);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0197 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [198] <- WEB ADMIN Index 198 ---
		String requestProt0198 = "https";
		String requestHost0198 = "onboarding4preview.sapsf.com";
		int    requestPort0198 = 443;
		String requestFile0198 = "/ONB/ui/lib/sapui5_1.65.1/sap/ui/core/library-preload.js";
		requestFile0198 = Lib.replaceTextPattern(requestFile0198, "sapui5_1.65.1", SAPUI_Version, 0);		// search and replace request file fragment "sapui5_1.65.1" with variable 'SAPUI_Version' on all occurrences

		String requestHeader0198 = "GET " + requestFile0198 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0198, requestHost0198, requestPort0198, requestHeader0198, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0198 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 567486
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [198] <- Index 198
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [199] <- WEB ADMIN Index 199 ---
		String requestProt0199 = "https";
		String requestHost0199 = "onboarding4preview.sapsf.com";
		int    requestPort0199 = 443;
		String requestFile0199 = "/ONB/ui/lib/sapui5_1.65.1/sap/m/library-preload.js";
		requestFile0199 = Lib.replaceTextPattern(requestFile0199, "sapui5_1.65.1", SAPUI_Version, 0);		// search and replace request file fragment "sapui5_1.65.1" with variable 'SAPUI_Version' on all occurrences

		String requestHeader0199 = "GET " + requestFile0199 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0199, requestHost0199, requestPort0199, requestHeader0199, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0199 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 710333
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [199] <- Index 199
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [200] <- WEB ADMIN Index 200 ---
		String requestProt0200 = "https";
		String requestHost0200 = "onboarding4preview.sapsf.com";
		int    requestPort0200 = 443;
		String requestFile0200 = "/ONB/ui/lib/sapui5_1.65.1/sap/ui/layout/library-preload.js";
		requestFile0200 = Lib.replaceTextPattern(requestFile0200, "sapui5_1.65.1", SAPUI_Version, 0);		// search and replace request file fragment "sapui5_1.65.1" with variable 'SAPUI_Version' on all occurrences

		String requestHeader0200 = "GET " + requestFile0200 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0200, requestHost0200, requestPort0200, requestHeader0200, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0200 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 82730
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [200] <- Index 200
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [201] <- WEB ADMIN Index 201 ---
		String requestProt0201 = "https";
		String requestHost0201 = "onboarding4preview.sapsf.com";
		int    requestPort0201 = 443;
		String requestFile0201 = "/ONB/ui/lib/sapui5_1.65.1/sap/ui/unified/library-preload.js";
		requestFile0201 = Lib.replaceTextPattern(requestFile0201, "sapui5_1.65.1", SAPUI_Version, 0);		// search and replace request file fragment "sapui5_1.65.1" with variable 'SAPUI_Version' on all occurrences

		String requestHeader0201 = "GET " + requestFile0201 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0201, requestHost0201, requestPort0201, requestHeader0201, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0201 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 138561
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [201] <- Index 201
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [202] <- WEB ADMIN Index 202 ---
		String requestProt0202 = "https";
		String requestHost0202 = "onboarding4preview.sapsf.com";
		int    requestPort0202 = 443;
		String requestFile0202 = "/ONB/ui/lib/sapui5_1.65.1/sap/ui/layout/messagebundle_en.properties";
		requestFile0202 = Lib.replaceTextPattern(requestFile0202, "sapui5_1.65.1", SAPUI_Version, 0);		// search and replace request file fragment "sapui5_1.65.1" with variable 'SAPUI_Version' on all occurrences

		String requestHeader0202 = "GET " + requestFile0202 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0202, requestHost0202, requestPort0202, requestHeader0202, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0202 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 556
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, null, null, null);		// Test [202] <- Index 202
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [203] <- WEB ADMIN Index 203 ---
		String requestProt0203 = "https";
		String requestHost0203 = "onboarding4preview.sapsf.com";
		int    requestPort0203 = 443;
		String requestFile0203 = "/ONB/ui/lib/sapui5_1.65.1/sap/ui/unified/messagebundle_en.properties";
		requestFile0203 = Lib.replaceTextPattern(requestFile0203, "sapui5_1.65.1", SAPUI_Version, 0);		// search and replace request file fragment "sapui5_1.65.1" with variable 'SAPUI_Version' on all occurrences

		String requestHeader0203 = "GET " + requestFile0203 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0203, requestHost0203, requestPort0203, requestHeader0203, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0203 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 1793
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, null, null, null);		// Test [203] <- Index 203
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [204] <- WEB ADMIN Index 204 ---
		String requestProt0204 = "https";
		String requestHost0204 = "onboarding4preview.sapsf.com";
		int    requestPort0204 = 443;
		String requestFile0204 = "/ONB/ui/lib/sapui5_1.65.1/sap/ui/core/messagebundle_en.properties";
		requestFile0204 = Lib.replaceTextPattern(requestFile0204, "sapui5_1.65.1", SAPUI_Version, 0);		// search and replace request file fragment "sapui5_1.65.1" with variable 'SAPUI_Version' on all occurrences

		String requestHeader0204 = "GET " + requestFile0204 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0204, requestHost0204, requestPort0204, requestHeader0204, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0204 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 5085
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, null, null, null);		// Test [204] <- Index 204
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [205] <- WEB ADMIN Index 205 ---
		String requestProt0205 = "https";
		String requestHost0205 = "onboarding4preview.sapsf.com";
		int    requestPort0205 = 443;
		String requestFile0205 = "/ONB/ui/lib/sapui5_1.65.1/sap/m/messagebundle_en.properties";
		requestFile0205 = Lib.replaceTextPattern(requestFile0205, "sapui5_1.65.1", SAPUI_Version, 0);		// search and replace request file fragment "sapui5_1.65.1" with variable 'SAPUI_Version' on all occurrences

		String requestHeader0205 = "GET " + requestFile0205 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0205, requestHost0205, requestPort0205, requestHeader0205, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0205 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 17204
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, null, null, null);		// Test [205] <- Index 205
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [206] <- WEB ADMIN Index 206 ---
		String requestProt0206 = "https";
		String requestHost0206 = "ds-aksb-a.akamaihd.net";
		int    requestPort0206 = 443;
		String requestFile0206 = "/2/492962/b" +
				"?dE=0" +
				"&cS=0" +
				"&cE=1" +
				"&rqS=2" +
				"&rsS=4" +
				"&rsE=733" +
				"&sS=-10" +
				"&dl=735" +
				"&di=1675" +
				"&fp=" +
				"&dlS=1675" +
				"&dlE=1722" +
				"&dc=6252" +
				"&leS=6252" +
				"&leE=6252" +
				"&to=" +
				"&ol=0" +
				"&cr=28" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A69.0%29%20Gecko/20100101%20Firefox/69.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=24.244.17.176" +
				"&t=" +
				"&rid=1a9a06c6" +
				"&r=11746" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=6037fc00" +
				"&akTX=1" +
				"&akTI=1a9a06c6" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0206 = "GET " + requestFile0206 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0206, requestHost0206, requestPort0206, requestHeader0206, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0206 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [207] <- WEB ADMIN Index 207 ---
		String requestProt0207 = "https";
		String requestHost0207 = "onboarding4preview.sapsf.com";
		int    requestPort0207 = 443;
		String requestFile0207 = "/ONB/ui/1908.10.22.0/app/Component-preload.js";
		requestFile0207 = Lib.replaceTextPattern(requestFile0207, "1908.10.22.0", C_SiteVersion, 0);		// search and replace request file fragment "1908.10.22.0" with variable 'C_SiteVersion' on all occurrences

		String requestHeader0207 = "GET " + requestFile0207 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0207, requestHost0207, requestPort0207, requestHeader0207, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0207 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 26478
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [207] <- Index 207
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [208] <- WEB ADMIN Index 208 ---
		String requestProt0208 = "https";
		String requestHost0208 = "onboarding4preview.sapsf.com";
		int    requestPort0208 = 443;
		String requestFile0208 = "/ONB/ui/1908.10.22.0/app/manifest.json";
		requestFile0208 = Lib.replaceTextPattern(requestFile0208, "1908.10.22.0", C_SiteVersion, 0);		// search and replace request file fragment "1908.10.22.0" with variable 'C_SiteVersion' on all occurrences

		String requestHeader0208 = "GET " + requestFile0208 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0208, requestHost0208, requestPort0208, requestHeader0208, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0208 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 696
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"dependencies\": {");		// Test [208] <- Index 208
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [209] <- WEB ADMIN Index 209 ---
		String requestProt0209 = "https";
		String requestHost0209 = "onboarding4preview.sapsf.com";
		int    requestPort0209 = 443;
		String requestFile0209 = "/ONB/ui/1908.10.22.0/app/css/style.css";
		requestFile0209 = Lib.replaceTextPattern(requestFile0209, "1908.10.22.0", C_SiteVersion, 0);		// search and replace request file fragment "1908.10.22.0" with variable 'C_SiteVersion' on all occurrences

		String requestHeader0209 = "GET " + requestFile0209 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0209, requestHost0209, requestPort0209, requestHeader0209, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0209 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 682
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [209] <- Index 209
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [210] <- WEB ADMIN Index 210 ---
		String requestProt0210 = "https";
		String requestHost0210 = "onboarding4preview.sapsf.com";
		int    requestPort0210 = 443;
		String requestFile0210 = "/ONB/App_SAPUI5Properties/GlobalResources/GlobalResources_en_US.properties";
		String requestHeader0210 = "GET " + requestFile0210 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0210, requestHost0210, requestPort0210, requestHeader0210, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0210 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 12668
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [210] <- Index 210
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [211] <- WEB ADMIN Index 211 ---
		String requestProt0211 = "https";
		String requestHost0211 = "onboarding4preview.sapsf.com";
		int    requestPort0211 = 443;
		String requestFile0211 = "/ONB/App_SAPUI5Properties/LocalResources/WQ43_en_US.properties";
		String requestHeader0211 = "GET " + requestFile0211 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0211, requestHost0211, requestPort0211, requestHeader0211, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0211 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 770
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [211] <- Index 211
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [212] <- WEB ADMIN Index 212 ---
		String requestProt0212 = "https";
		String requestHost0212 = "onboarding4preview.sapsf.com";
		int    requestPort0212 = 443;
		String requestFile0212 = "/ONB/ui/lib/sapui5_1.65.1/sap/ui/thirdparty/datajs.js";
		requestFile0212 = Lib.replaceTextPattern(requestFile0212, "sapui5_1.65.1", SAPUI_Version, 0);		// search and replace request file fragment "sapui5_1.65.1" with variable 'SAPUI_Version' on all occurrences

		String requestHeader0212 = "GET " + requestFile0212 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0212, requestHost0212, requestPort0212, requestHeader0212, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0212 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 36330
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [212] <- Index 212
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [213] <- WEB ADMIN Index 213 ---
		String requestProt0213 = "https";
		String requestHost0213 = "onboarding4preview.sapsf.com";
		int    requestPort0213 = 443;
		String requestFile0213 = "/ONB/odata/v2/workqueue/$metadata";
		String requestHeader0213 = "GET " + requestFile0213 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/xml\r\n" + 
				"Accept-Language: en\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"sap-cancel-on-close: true\r\n" + 
				"MaxDataServiceVersion: 3.0\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0213, requestHost0213, requestPort0213, requestHeader0213, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0213 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/XML", header text fragment = [verification disabled], recorded content size = 11690
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/XML", null, "EntityType Name=\"ProcessSummaryDTO\"");		// Test [213] <- Index 213
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [214] <- WEB ADMIN Index 214 ---
		String requestProt0214 = "https";
		String requestHost0214 = "onboarding4preview.sapsf.com";
		int    requestPort0214 = 443;
		String requestFile0214 = "/ONB/odata/v2/workqueue/Processes" +
				"?$skip=0" +
				"&$top=100" +
				"&$expand=NavSteps" +
				"&$inlinecount=allpages";
		String requestHeader0214 = "GET " + requestFile0214 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json\r\n" + 
				"Accept-Language: en\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"MaxDataServiceVersion: 2.0\r\n" + 
				"DataServiceVersion: 2.0\r\n" + 
				"Content-Type: application/json\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0214, requestHost0214, requestPort0214, requestHeader0214, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0214 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1215
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "processName\":\"Onboarding\",\"count\"");		// Test [214] <- Index 214
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [215] <- WEB ADMIN Index 215 ---
		String requestProt0215 = "https";
		String requestHost0215 = "onboarding4preview.sapsf.com";
		int    requestPort0215 = 443;
		String requestFile0215 = "/ONB/ui/lib/sapui5_1.65.1/sap/ui/core/themes/base/fonts/SAP-icons.woff2";
		requestFile0215 = Lib.replaceTextPattern(requestFile0215, "sapui5_1.65.1", SAPUI_Version, 0);		// search and replace request file fragment "sapui5_1.65.1" with variable 'SAPUI_Version' on all occurrences

		String requestHeader0215 = "GET " + requestFile0215 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0215, requestHost0215, requestPort0215, requestHeader0215, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0215 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "FONT/WOFF2", header text fragment = [verification disabled], recorded content size = 92820
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "FONT/WOFF2", null, null);		// Test [215] <- Index 215
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [216] <- WEB ADMIN Index 216 ---
		String requestProt0216 = "https";
		String requestHost0216 = "hcm4preview.sapsf.com";
		int    requestPort0216 = 443;
		String requestFile0216 = "/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/merge_b1908.20191010120924/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Bold.woff2";
		requestFile0216 = Lib.replaceTextPattern(requestFile0216, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod2' on all occurrences
		requestFile0216 = Lib.replaceTextPattern(requestFile0216, "3A280", C_UIres, 0);		// search and replace request file fragment "3A280" with variable 'C_UIres' on all occurrences
		requestFile0216 = Lib.replaceTextPattern(requestFile0216, "255f54321=252d2", C_Name, 0);		// search and replace request file fragment "255f54321=252d2" with variable 'C_Name' on all occurrences
		requestFile0216 = Lib.replaceTextPattern(requestFile0216, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!" with variable 'C_belieze1' on all occurrences
		requestFile0216 = Lib.replaceTextPattern(requestFile0216, "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2, 0);		// search and replace request file fragment "3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_href2' on all occurrences

		String requestHeader0216 = "GET " + requestFile0216 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Origin: https://onboarding4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/public/ui-dcss/tctest/_/3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!/merge_b1908.20191010120924/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0216, requestHost0216, requestPort0216, requestHeader0216, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod2);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3A280", C_UIres);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("255f54321=252d2", C_Name);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3E6Gn3!", C_belieze1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3l!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_href2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0216 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;



		// all http requests of page #3_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 5 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [217] <- WEB ADMIN Index 217 ---
		String requestProt0217 = "https";
		String requestHost0217 = "onboarding4preview.sapsf.com";
		int    requestPort0217 = 443;
		String requestFile0217 = "/ONB/ui/lib/sapui5_1.65.1/sap/ui/core/cldr/en.json";
		requestFile0217 = Lib.replaceTextPattern(requestFile0217, "sapui5_1.65.1", SAPUI_Version, 0);		// search and replace request file fragment "sapui5_1.65.1" with variable 'SAPUI_Version' on all occurrences

		String requestHeader0217 = "GET " + requestFile0217 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0217, requestHost0217, requestPort0217, requestHeader0217, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0217 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 25252
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"Cans\": \"Unified Canadian Aboriginal Syllabics\",");		// Test [217] <- Index 217
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [218] <- WEB ADMIN Index 218 ---
		String requestProt0218 = "https";
		String requestHost0218 = "onboarding4preview.sapsf.com";
		int    requestPort0218 = 443;
		String requestFile0218 = "/ONB/odata/v2/workqueue/Indices" +
				"?$skip=0" +
				"&$top=100" +
				"&$filter=processName%20eq%20%27Onboarding%27" +
				"&$inlinecount=allpages";
		String requestHeader0218 = "GET " + requestFile0218 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json\r\n" + 
				"Accept-Language: en\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"MaxDataServiceVersion: 2.0\r\n" + 
				"DataServiceVersion: 2.0\r\n" + 
				"Content-Type: application/json\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0218, requestHost0218, requestPort0218, requestHeader0218, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0218 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 667
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"results\":[");		// Test [218] <- Index 218
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [219] <- WEB ADMIN Index 219 ---
		String requestProt0219 = "https";
		String requestHost0219 = "onboarding4preview.sapsf.com";
		int    requestPort0219 = 443;
		String requestFile0219 = "/ONB/odata/v2/workqueue/Processes(1)";
		String requestHeader0219 = "GET " + requestFile0219 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json\r\n" + 
				"Accept-Language: en\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"MaxDataServiceVersion: 2.0\r\n" + 
				"DataServiceVersion: 2.0\r\n" + 
				"Content-Type: application/json\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0219, requestHost0219, requestPort0219, requestHeader0219, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0219 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 664
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"name\":\"US Onboarding Process\",\"totalCount");		// Test [219] <- Index 219
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [220] <- WEB ADMIN Index 220 ---
		String requestProt0220 = "https";
		String requestHost0220 = "onboarding4preview.sapsf.com";
		int    requestPort0220 = 443;
		String requestFile0220 = "/ONB/odata/v2/workqueue/Activities" +
				"?$skip=0" +
				"&$top=4" +
				"&$orderby=createDate%20desc" +
				"&$filter=process%20eq%20%27Onboarding%27%20and%20isCompleted%20eq%20false" +
				"&$inlinecount=allpages";
		String requestHeader0220 = "GET " + requestFile0220 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json\r\n" + 
				"Accept-Language: en\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"MaxDataServiceVersion: 2.0\r\n" + 
				"DataServiceVersion: 2.0\r\n" + 
				"Content-Type: application/json\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Pages/WorkQueue/WorkQueueRefresh.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0220, requestHost0220, requestPort0220, requestHeader0220, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0220 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 171
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"d\":{");		// Test [220] <- Index 220
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #4: Reports
		// # ----------------



		// --- HTTP REQUEST: Test [222] <- WEB ADMIN Index 222 ---
		log();
		log("# title: XpressHR Onboarding");
		String requestProt0222 = "https";
		String requestHost0222 = "onboarding4preview.sapsf.com";
		int    requestPort0222 = 443;
		String requestFile0222 = "/ONB/Reports.aspx";
		String requestHeader0222 = "GET " + requestFile0222 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0222, requestHost0222, requestPort0222, requestHeader0222, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0222 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 16943
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "XpressHR Onboarding");		// Test [222] <- Index 222
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [223] <- WEB ADMIN Index 223 ---
		String requestProt0223 = "https";
		String requestHost0223 = "onboarding4preview.sapsf.com";
		int    requestPort0223 = 443;
		String requestFile0223 = "/ONB/bundles/scripts.ashx" +
				"?v=AtCioOdbgFuT9dOlZTazX28j01MriMRgEIEIuzjNnaQ1";
		String requestHeader0223 = "GET " + requestFile0223 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0223, requestHost0223, requestPort0223, requestHeader0223, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0223 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [224] <- WEB ADMIN Index 224 ---
		String requestProt0224 = "https";
		String requestHost0224 = "onboarding4preview.sapsf.com";
		int    requestPort0224 = 443;
		String requestFile0224 = "/ONB/bundles/scripts_nominify.ashx" +
				"?v=1pTp1QQB_-x2E7S0JWPySN4_RfAT4fgRB88nhbvjOQk1";
		String requestHeader0224 = "GET " + requestFile0224 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0224, requestHost0224, requestPort0224, requestHeader0224, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0224 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [225] <- WEB ADMIN Index 225 ---
		String requestProt0225 = "https";
		String requestHost0225 = "onboarding4preview.sapsf.com";
		int    requestPort0225 = 443;
		String requestFile0225 = "/ONB/App_Themes/BizX/js/theme.js" +
				"?v=220";
		String requestHeader0225 = "GET " + requestFile0225 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0225, requestHost0225, requestPort0225, requestHeader0225, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0225 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [226] <- WEB ADMIN Index 226 ---
		String requestProt0226 = "https";
		String requestHost0226 = "onboarding4preview.sapsf.com";
		int    requestPort0226 = 443;
		String requestFile0226 = "/ONB/App_Themes/BizX/js/getBizxCss.js" +
				"?v=220";
		String requestHeader0226 = "GET " + requestFile0226 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0226, requestHost0226, requestPort0226, requestHeader0226, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0226 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [227] <- WEB ADMIN Index 227 ---
		String requestProt0227 = "https";
		String requestHost0227 = "onboarding4preview.sapsf.com";
		int    requestPort0227 = 443;
		String requestFile0227 = "/ONB/WebResource.axd" +
				"?d=4EYDwG-iLMqMGZLDAlhqZTo4iSLmJbGfuGr-lsywvvzrBOhUV5i_U6HNA18GItgbb6fnH3l-WfzwCVkVY8N_fnvTh3M1" +
				"&t=636765215060000000";
		String requestHeader0227 = "GET " + requestFile0227 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0227, requestHost0227, requestPort0227, requestHeader0227, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0227 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [228] <- WEB ADMIN Index 228 ---
		String requestProt0228 = "https";
		String requestHost0228 = "onboarding4preview.sapsf.com";
		int    requestPort0228 = 443;
		String requestFile0228 = "/ONB/WebResource.axd" +
				"?d=5dsZy5qSddUcP-EsPIpxwCyHXgsD45N9vO3wsKcHqjVt204ydOhvKOTvFHnCcMZj-EG11aVEMb17BdehYTyuaBhDkLs1" +
				"&t=636765215060000000";
		String requestHeader0228 = "GET " + requestFile0228 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0228, requestHost0228, requestPort0228, requestHeader0228, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0228 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [229] <- WEB ADMIN Index 229 ---
		String requestProt0229 = "https";
		String requestHost0229 = "onboarding4preview.sapsf.com";
		int    requestPort0229 = 443;
		String requestFile0229 = "/ONB/App_Themes/inputToSAPUI5.css";
		String requestHeader0229 = "GET " + requestFile0229 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0229, requestHost0229, requestPort0229, requestHeader0229, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0229 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [230] <- WEB ADMIN Index 230 ---
		String requestProt0230 = "https";
		String requestHost0230 = "onboarding4preview.sapsf.com";
		int    requestPort0230 = 443;
		String requestFile0230 = "/ONB/App_Themes/BizX/Theme.ashx" +
				"?v=CvpofzC_FJbaYUgXwsGKxXKrXhIrvJ18xBXBDHRHeVs1";
		String requestHeader0230 = "GET " + requestFile0230 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0230, requestHost0230, requestPort0230, requestHeader0230, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0230 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [231] <- WEB ADMIN Index 231 ---
		String requestProt0231 = "https";
		String requestHost0231 = "onboarding4preview.sapsf.com";
		int    requestPort0231 = 443;
		String requestFile0231 = "/ONB/App_Themes/BizX/images/transparentpixel.gif";
		String requestHeader0231 = "GET " + requestFile0231 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0231, requestHost0231, requestPort0231, requestHeader0231, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0231 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [232] <- WEB ADMIN Index 232 ---
		String requestProt0232 = "https";
		String requestHost0232 = "onboarding4preview.sapsf.com";
		int    requestPort0232 = 443;
		String requestFile0232 = "/ONB/WebResource.axd" +
				"?d=BCkMnv5TLIpIrZBcRugPTeexgjCSE5VpRPKnCtEfKe7WouKwO2ISZ_49E4aAXJ-FzDKFqHh4yFuS_THSTcbUOqRr3gc1" +
				"&t=636765215060000000";
		String requestHeader0232 = "GET " + requestFile0232 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0232, requestHost0232, requestPort0232, requestHeader0232, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0232 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [233] <- WEB ADMIN Index 233 ---
		String requestProt0233 = "https";
		String requestHost0233 = "onboarding4preview.sapsf.com";
		int    requestPort0233 = 443;
		String requestFile0233 = "/ONB/WebResource.axd" +
				"?d=Fsk6KKvyz2s0jloPW3FC9BGp8nPg5IffxMgDypJnaZcJXOhvlFU-V4hP5o0vFCHz9Ibe6ZMDD8tendvS8LXFus8GFoI1" +
				"&t=636765215060000000";
		String requestHeader0233 = "GET " + requestFile0233 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0233, requestHost0233, requestPort0233, requestHeader0233, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0233 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [234] <- WEB ADMIN Index 234 ---
		String requestProt0234 = "https";
		String requestHost0234 = "onboarding4preview.sapsf.com";
		int    requestPort0234 = 443;
		String requestFile0234 = "/ONB/WebResource.axd" +
				"?d=ibC6T7rZ8Q7ChVPYkmhWSuWaVuMzy5IGhhku0duwWKeIY4wpLjfxnnVq4NdwDJQVq0UGJMvtDhlfdI_E1UvWDTgrCQU1" +
				"&t=636765215060000000";
		String requestHeader0234 = "GET " + requestFile0234 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0234, requestHost0234, requestPort0234, requestHeader0234, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0234 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [235] <- WEB ADMIN Index 235 ---
		String requestProt0235 = "https";
		String requestHost0235 = "onboarding4preview.sapsf.com";
		int    requestPort0235 = 443;
		String requestFile0235 = "/ONB/Logo.aspx" +
				"?AccountName=tctest" +
				"&Type=Dashboard" +
				"&User=f769359f-43c1-4212-9deb-a0804c18d1e5";
		String requestHeader0235 = "GET " + requestFile0235 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0235, requestHost0235, requestPort0235, requestHeader0235, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0235 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [236] <- WEB ADMIN Index 236 ---
		String requestProt0236 = "https";
		String requestHost0236 = "onboarding4preview.sapsf.com";
		int    requestPort0236 = 443;
		String requestFile0236 = "/ONB/FrameReports.aspx";
		String requestHeader0236 = "GET " + requestFile0236 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0236, requestHost0236, requestPort0236, requestHeader0236, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0236 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [237] <- WEB ADMIN Index 237 ---
		String requestProt0237 = "https";
		String requestHost0237 = "hcm4preview.sapsf.com";
		int    requestPort0237 = 443;
		String requestFile0237 = "/public/theme-api/info/tctest;jsonp=loadThemeInfo";
		String requestHeader0237 = "GET " + requestFile0237 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0237, requestHost0237, requestPort0237, requestHeader0237, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0237 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [238] <- WEB ADMIN Index 238 ---
		String requestProt0238 = "https";
		String requestHost0238 = "onboarding4preview.sapsf.com";
		int    requestPort0238 = 443;
		String requestFile0238 = "/ONB/images/spinner.gif";
		String requestHeader0238 = "GET " + requestFile0238 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/Reports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0238, requestHost0238, requestPort0238, requestHeader0238, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0238 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [239] <- WEB ADMIN Index 239 ---
		String requestProt0239 = "https";
		String requestHost0239 = "onboarding4preview.sapsf.com";
		int    requestPort0239 = 443;
		String requestFile0239 = "/ONB/scripts/Jquery.ui.datepicker.aspx" +
				"?Account=tctest" +
				"&locale=en-US";
		String requestHeader0239 = "GET " + requestFile0239 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0239, requestHost0239, requestPort0239, requestHeader0239, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0239 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [240] <- WEB ADMIN Index 240 ---
		String requestProt0240 = "https";
		String requestHost0240 = "onboarding4preview.sapsf.com";
		int    requestPort0240 = 443;
		String requestFile0240 = "/ONB/images/calendar.gif";
		String requestHeader0240 = "GET " + requestFile0240 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0240, requestHost0240, requestPort0240, requestHeader0240, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0240 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [241] <- WEB ADMIN Index 241 ---
		String requestProt0241 = "https";
		String requestHost0241 = "onboarding4preview.sapsf.com";
		int    requestPort0241 = 443;
		String requestFile0241 = "/ONB/Images/OfficeIcons/Excel.gif";
		String requestHeader0241 = "GET " + requestFile0241 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0241, requestHost0241, requestPort0241, requestHeader0241, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0241 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;



		// all http requests of page #4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 2 of 2)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [242] <- WEB ADMIN Index 242 ---
		String requestProt0242 = "https";
		String requestHost0242 = "onboarding4preview.sapsf.com";
		int    requestPort0242 = 443;
		String requestFile0242 = "/ONB/Images/print.gif";
		String requestHeader0242 = "GET " + requestFile0242 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0242, requestHost0242, requestPort0242, requestHeader0242, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0242 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [243] <- WEB ADMIN Index 243 ---
		String requestProt0243 = "https";
		String requestHost0243 = "hcm4preview.sapsf.com";
		int    requestPort0243 = 443;
		String requestFile0243 = "/public/theme-api/info/tctest;jsonp=loadThemeInfo";
		String requestHeader0243 = "GET " + requestFile0243 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0243, requestHost0243, requestPort0243, requestHeader0243, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0243 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [244] <- WEB ADMIN Index 244 ---
		String requestProt0244 = "https";
		String requestHost0244 = "onboarding4preview.sapsf.com";
		int    requestPort0244 = 443;
		String requestFile0244 = "/ONB/App_Themes/BizX/images/btn/buttonDefaultGradient.png";
		String requestHeader0244 = "GET " + requestFile0244 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/App_Themes/BizX/Theme.ashx?v=CvpofzC_FJbaYUgXwsGKxXKrXhIrvJ18xBXBDHRHeVs1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0244, requestHost0244, requestPort0244, requestHeader0244, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0244 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [245] <- WEB ADMIN Index 245 ---
		log();
		log("# title: Action Completed");
		String requestProt0245 = "https";
		String requestHost0245 = "onboarding4preview.sapsf.com";
		int    requestPort0245 = 443;
		String requestFile0245 = "/ONB/FrameReportsList.aspx";
		String requestHeader0245 = "GET " + requestFile0245 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReports.aspx\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0245, requestHost0245, requestPort0245, requestHeader0245, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0245 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [246] <- WEB ADMIN Index 246 ---
		String requestProt0246 = "https";
		String requestHost0246 = "hcm4preview.sapsf.com";
		int    requestPort0246 = 443;
		String requestFile0246 = "/public/theme-api/info/tctest;jsonp=loadThemeInfo";
		String requestHeader0246 = "GET " + requestFile0246 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReportsList.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0246, requestHost0246, requestPort0246, requestHeader0246, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0246 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;



		// all http requests of page #4_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #5: GlobalOnboarding
		// # -------------------------



		// --- HTTP REQUEST: Test [248] <- WEB ADMIN Index 248 ---
		log();
		log("# title: Reports");
		String requestProt0248 = "https";
		String requestHost0248 = "onboarding4preview.sapsf.com";
		int    requestPort0248 = 443;
		String requestFile0248 = "/ONB/FrameReports.aspx";
		String requestContent0248 = 
				"__EVENTTARGET=ucSearchReport%24ucReportCondition%24ddlProcess" +
				"&__EVENTARGUMENT=" +
				"&__LASTFOCUS=" +
				"&__VIEWSTATE=" + java.net.URLEncoder.encode(C_Viewstate1) +		// recorded value = FG7S9TKgDR6JoycgiI86v6e0M%2FVGi31%2Bfk281QTXLby7O3zUsusjl6SdbVvwD7dhYH7O0SgpQmcdKRr9wlbFsHLh0dPRBRtzfrkbhBx7bPkQLQxgsh0ZUqLZhp6ZeIbe4cOHbSVdVYLzIuNWf8HKs%2F80B8n4%2Bv3FFOAksQs%2BzXZv26am1rRaoQchFAZg%2FlBbeZHN9L7QBS5ayu2B0u7q8HXOtOSmnQ0cWymCnHsILfCbDU%2Bhnk8bvUIFVB9zX68CQGIpZDPA%2FmEeT8gmjl3ZvMxDxWng6b9RaOkH18m6VwkfVD4PoD5Y6Vw9qinm0pwJOlunV3%2FFq87rc%2BpZZMlcKgDv%2Fgcxd6INtkzYGIIEgj9mjMAPcxemUgrNraiQFpn%2BvFDmwTkRpG%2Bi9cGLsrB0net0k4odZuj7sUPL4JOXpK5rx%2F9i1ZrkwxqMSuw%2BPmLnHvgM%2F939zmwTpPJVg0UCkIjXk5VH4L0qkJIzfZwDZw%2BRYiE6t%2B%2FKHedbafeb3aTfvAeBW56NamRXYxdOchZJSIR8Oz52h4y%2Fb%2BaYjrZ2rfKYwiTk4qXX4xupme2A0YVhCVCp2pBajeZsa9uS4mpe4TgCAwtTR9Ikbkgyv3nTlZOsXTK45kgwNLyCyBAf8aCrm%2BXgtob7GIFlos5X2iCo%2Ffc48FnkzK70e7SiqVotep%2FgplBn6Ri0Mpl39L7m5v%2BanBao8%2BoZ%2FIvr7CDsMo5Tl0vTygZbXlqeMblhKmWeE2KVqHG6l4uAt5IRDm%2BqdFZ34D3LCqzaQxFR3HZpHRZU1s26dSwI1A%2BWZ347C4ure8YTVxY7dItP5YB4izsODtwjwfxOu%2FvhLDHEzd4%2F6gO7YCAvnJxCQoxMUD%2F8zT%2FKmdbrAG39EA50wS04JtV9V7GtgHCl6pMUxkGOFz20rvX%2F%2BxT9pL3Eww7Ahwi7GAdNu%2BzBMduexpl1jfUNIGmdC8m2PTGPf0AaQBbx9KaguQhFN%2FRv4p2tBidvPPmpIijURO0ohUCD17%2FhBrWhqU7s2xL%2BDNWeHNygJ6fIu8q9gMDncYLg7M9bpV0f2IZ82wJKKxvs11vSpIOf18f57z7LNFFpHltvcDxrgtXWFTsVAXseuVB3%2F%2B7Se1cA463H6OeG12%2BaciGWTs0fL77%2Fc%2BB18377HJ%2BqdPHJmRXd8Z1nHn5pCj%2BVNn73icrU%2FL92aceCf2A3IroTmdd6ah1YeoR5XGirIwN9DX6%2BxEnE2J4CRbGflWbvHGEM0K4wzhB4yHtSNJ%2FJi4DfxQsBCUfupJqVkfiU0sg1weAxLEkMakcLUwVSbg6wZKhRkE7vT8saIpN%2BHqhsfj3yBsEfa66ldNV0UkmHG6elPrzd%2F43oFJ6aZWD9IyXVK5durcRGN7YU2NXBUesfx7T5lrgA%2Fli2VXsyN%2BMklMSlkusGIr6ONkJSVTCUnPRurBJtvm0IIUZTFrZcBPLy%2Bkq1pIi4jOeizzKE%2FuvdI5mit5k3HyTZzcsFWGoPfc6LEjm3lA%2B0SRWeZ6ByR74eLrG9%2BJVh5UMYIrDrbAOjZseRxRWd5j%2BI7kDyVCiwpm3eMkcD%2FqTEctjHtTiGxuMjhh7GHYl5AbOmyPeEAOHSefLDPc%2FuOkaH9y3H0yqImQlpJMD3EY35ZIMbk3cmUAQ3jk1f9LZCunTMCruV7xlftx1ndtlZNRnDmKyg5zXGbCSJeoTKTXEUDCURZwijFHjH8nEylO5%2BdKdRwaAWHO8oi4izWrEbGnV3ZsJjCTEbln22LmiFefeXOZMOODkGOaV4flit0W4K7LV4eD6D%2FCffdWWp2haP8iJK%2FllbxIDP2Vnv8hPymRRXISc68NEtu9LNntFj7gl%2Be1U0SJqF%2BtTqGpk6oX3Kj81VgW6fz%2FpJraYDTb4Z5H7yeFh8xNmr2u1%2BbkLXXm8EekK9FSQ8BKsFudDrZMH%2F%2BFKFU5XXXIpcFoDCSTfyH2%2BwYIWT%2Bg05aK4Mx3y4UNZi890L4BAkwoWGISFQxRp7sszR7eii%2Fpv1bIddKby%2F70dJYKVe6qpiwyJoW9bicmrwyEUn%2Bqb2GyRNEtZGd7fONRRE5%2BipZlKXpteV0FjScfEJdk1RsIhH2LKoDq6OSFixmCWG0E5NN5cB4Tg5Lg7kk3X0fTRLOvszkZacoOXdTXWaLcDL9NYb%2B4HUxczzJcr8iVdlUAur3Hqw2MNz2bpml0VjRip%2BrCeH8jsnMogOTeoSxB3wni95HoC6j9UE8uMkhDCGmvMu6fZz3RQ8AFptWQCs8Kyf0%2FVEYhfpSLovzxONOiXX%2BslQOEk0cgV8Gu6I4juJMu%2BdI0QLMosR%2FsTP%2F575LixmSajmw8sPxmmxILRQSb7ho15%2F3L6s2aVTWShMYj2P9KpE1xwByC7KLnXiMVk1Z%2F2GAnzd0oDjNiEm5WL2WohXv%2BtPojcN3gmeDXK1Y%2BGjXS5x%2BFMm8ZPP%2FlkvrimohmwQoO7VHOEtUTj3G%2B8WXRwLly97j%2FhJF0pfWyPHDnIOX5vGIsXhFUEChHsszsb2e2oISKn7SS3p7certKAgwxoroN316tjTN923x%2BxMU7z1FYVhdTIiVWGWHPTHtrhcNU7wGCRGb%2F8Jf3HI0vJG2m89cTnF8nAOaIUVK9az6H%2Fj6dV5z%2B5oPJSIdSfX%2B5gD9qHCp1iVgdVTte3%2F0rvNNCR%2Bbag8BHlY7cUtdKrsx9sPBvaKW4ra8MASiSpytWDbVBPg1hrQbeSkpwYmG298VNCPhtPtLy4ot4d5v27cmR%2FFxDJap3Wde%2BoNgoc%2Bk2xGCE1c%2BIG%2BxnVmj5vx6mQR%2FlgCVEahHybjVGGNlnF2PRnirEqg4B7CRfefT1yI6R5D2GVfvuY4YciFJQXOVl3KM3mqxpt%2BXtV%2BMeb7qKC4UwzaSLFrhM%2BgTQnLJtLP%2BF8f%2B4hKxZQYC5yELC%2BURR7YlMOoKnZhI6AcHpmRzq%2Bw4bg3STJOmfDReizAGa4ZEnjFFLcV2bKWBY5n4p7qhwnlqZZzKJvbRmofznmxRkjYX35vjv4RijgZZLA%2Fv7V5U9tpq%2FB7cyfnlLbT%2BYr1A4fVjE285E2do%2BlqBEloybfXJtevXWRdvDMo%2B65Syc9NEVfpdqv87p82nNl93wmngFz7fwqJQ%2BuiwfVeVB5nO4Yy6md%2B7ibCoqUWuM8X5bMS8l4nQM%2B8FKwy%2FgkxSXOmVWXtRlMd8PL0BjNzLWCZgQHxwNVKkcDThlnTtOfk4vttZZXPw%2F7k84wqD12PoiDQU9FkFbt9lO2kgJDSPHJNLMyC46w2EeUCzYs%2FJ7LZv9ej973SifZrfkfGIFunso%2FbPuQiD11saCfSVP0J8OSZMbTn%2BVkwfCe8KYNRN7%2BHVkF1VawZfuk56Ciutpzkiu7AUHwXdSoclOoWnWCUykh7DOqfBJrjht2XIrg4bYUVcxkOlUZw0a8Yi0ZFYKQsSVNBSD3dQp4rElFPo9AQ2hEmTNgGCstzhWJSLttJ3hXGEB49T9JGwbXuT%2FMT8fx%2BomFAzzqfkFECmZY1sKyiEcHh8XRDsKNXs7Y7qIiEgw%2FtrMhqwxkflWly0I%2BVIMyKWeSYUNhrnwn0wHewV%2FhXxA55zc989KbDzYDVmjaKo83VVPCko5glYl4XcfpR9k%2Bh%2FiQ8rHaf4lZ40wDjie72PtL7bK62yAsvdqxWlS%2FMt4gaC0ODzzzeUHFdaLs0n5dZf1ekb%2BVISOLEfzBbiRN%2Fsr%2FtiDsd2LV%2BLIQjuTqpvCMfsakhOQn%2Fd4mC2IoTI67hEA6qN0utpFjhXWZ1N%2F3QrTcXKy2Ya3iiz1dSaufiCgqtgqIEnGMMm1oXypteO2HyiFw2ULMRNHNIZGLC%2B9L%2Fkt2j7dSi7dNhXt9Gsr9L9E4VUFbe3JimQ72wMYtN0y8%2BxknejreLjXLXvlrWxHseqkx4kK%2BLnVUA7tsAbM4M6H7W%2Bq6WA2ABxD%2F1nPFZf3w17Ix8o6fQnIOyE6uMU5kDQj2GXrh7%2BbtxBZXaxnGOpGyHmkK9gg2i7h4jUcrOd9fxl5hA0YVY58tZJm79yyvhcqUuOcDp2eBbm8H4xwe%2BWw6EfN%2BiB8WnMho57BCmYTTY5GyfvQwLePT3JRLNn5stbJn342g1hdirvjgHvLfxP3U1yFO8Pgh5DyQXgT6I%2BgiE3vFyEkPQawfmi%2BSSy586eyihwN0HG2%2FZUoVCTo%2FQx%2FZyG389HXNK1r%2Fq9JXdWnILSrv2EEMR2q%2FvWt4M0QqUu21ggbB9eBnOMEiRY5NJY8nkc7zrzxYJoJuTYsHECpVsmAgyjgJ3jUNiu3uUx5C8Eu1xnYq84lvDdOqQ%2FR1IcCU3RkbhgYJNEUzVlJRaoYCjYso6n8lInCglTzPEyC%2BMWPBSaTFczS5FBkgxr6pNSCGGj0N5ApitoS3aXyo%2FnaPrkwC%2FFDPcNpsDz6nomNgn7NFjcfNPpCwVEbwWolA573%2FWoaJ%2F%2BlSGgkGJR6bC%2F82GZ2vxnZGrzX9cuMqjZtOeAN0eBzRV6BX8C%2B4ue9jTIanAYaUwUStRyjIuHL5pM9n61HfUSwDvO1l6Gas6t87GLDfGtFeXuDGOndbgwjxKtF4VDw9Gs597GnEHFt01NTBDCxgle%2BbMp8BRyP3%2FeR7NvrkfBL2nHiTXNfrX%2FBKAD8bHrbuUxhmKJzW7MmAhlqgQ5kHD0qCX8Hz1JFLPe4DXUaf2%2BCGIjAfKMyzau1qm6vTxQHIvfs%2BkJvF11q%2FvC4%2BF%2FqIiKOOizifXxxPFGDblTcdNxKtjgtJmWWWAy20FXN%2F4EX2Qmr01bkRCYjxIRBjDeI%2FwDb8p4Ft24ZFkEhGfG7Zsj9B8W9FjLsiWciJNjnOHJB1ZBburydL0LC0AoEMeXdwyJyxoIKqBLM00dpfS9TQPiBU9oF%2By5IJcc%2BMwCb%2FGndoZJOCXAk1g5DxUQsFSeaLyTxLtP6%2BUwDCTwsvX11W1XcpCyMs5yqTc5CCrxtvrMjiozLEOUqXv3%2FFOSrG%2BTG3BJbGc6bzCc9qHWbYVyKd4sFw26o%2BpRF4rbAywyGfYTPb7NlFSq9gfsTJakNLGqo1bBy8hqq1%2BflJV6jHLDa3%2BQEXfCN26NJ5yPH3yApUy7710kPhhaXXRMlR8Q%2F4lj6BzgXWaFz%2BGz9f24ZXTqPezRKh3yqDp9iebZpbasR1csGG%2BI9NdLpgXDZKUTJ6hpIEq1HVL%2BlOmMSLo%2B1ns%2F%2B5nGXrCPJkGidj4gZjkl%2FVtVa9jkvz2%2F2cHpbrxqJNa1Qw7g10DcuL0gjlnz1opWInF97B503bLnVOm0e985WcyfsxP0QttyNljrEbx4W%2BUHFaqbSCp0m3g%2B16shAeXHtmDlWbS%2BshGyKMABqEcjeXtKRfpaUf30VqY0k%2BWPV2CrYPq0LKKYcnkOc7pEuC8ztHCU%2FU15r%2BAGonR8kbgqEiPl7kM%2Bv0ob76w3cUtn0MZp1jF1%2FhtshYcOOIGWqsNBzVG71NnEvu%2BRJXIRDQSk9ciU2%2BsSLzJUZDdLC5FGEcqMXjDjWP9zH44i1jcMu%2FRytBz4j7LHTdnhlMqWaG2BtZ9fpNjjmpq%2FY4Ch9uqcVjHaou29BIlfAE63l7O1%2FgBCqCYgQucCd0Qd5atrKzZZBDa8bbAurABULzT%2F36xON%2FL5TWXfokkC175w6sMnhPHKpxQzn2cwXf4nnGq7lxtIwQZL8hJ4zpp0bPHBVFVhCICxnj85rN5z3Rm6bbDUmYrg5hLU1LDWiv6hWB3mxF8SuUvXBvC3Iy6rsou%2Bt8ISzB7Cuej9QRUjtjTfIt4%2BzWoLKLa0zt%2B9QqFvnXiE598uyOhiahHFxFBi6yJub6xc%2F1W238beZqMFy2LxOBLngXm41VWocJIohyPg5BnG%2FJyuv%2Bk3bjbPNssEU5BKjF0NXbcAwx%2FGncUgJCxWujAhLb1YWSKaUgO6QHoRnK5cUsxAQnPnBHzcDLLPjbdo7SgSeMaUCE%2F473V1yTBEo00n%2BqbpYSct1DL2VLlC%2FfUfO%2Beuq08YVMZ2zAoAaD%2B5a%2BH80KAok9qVDLWXRIIltREOg4bd%2Fa%2FZKnc5VN8J%2F9WjZNviX5tqQ%3D%3D
				"&__VIEWSTATEGENERATOR=" + C_Vsgen1 +		// recorded value = 684F7B59
				"&__VIEWSTATEENCRYPTED=" +
				"&__EVENTVALIDATION=" + java.net.URLEncoder.encode(C_Eventval1) +		// recorded value = i404GEOmv2HQVmMFbQtW9CHDnvsAVvTw17vvv%2FsZD%2BDlAVhLGb7ZToCYUJNb0uwX8T5JkpqiGqTQihfjt9%2Fn9MprRMOWnZodMcSNkSLMhNbp0miGUwdCtQcMF5gQlObLfTBjmplP%2F5MpMYvEPqec4Aq8PfkIIeO3waA8x0NCk%2B%2B%2BD38RleA8%2FPJ%2BjDH44FnsPCDdLgG9VFD4jczgd72WlzEs5%2BpVoHXxTvtplJfosmhcyXzSoOby0T465icWXBm2ascfUoBBmICBuwP9%2FaXdNH9RippTbec3nD4wYl7%2BdGcdcPVpMQfMBp1LVOVjM5KBLQOfa78UiCjn1ayYrbDmnK%2FnG58R%2BzNgSOtCUD65oyVgOAZ%2BJ7VFPq1idu%2FZzathmCKj3ovXPB0boOJ54zpzJyjjN7S24lIHpqpbdybNikToEAe8%2FeL45aa3QYk3KFHBS8eTSygT29JHxzGuCi8Th%2B%2F4LsimnfEhj3ZqK4npI8qT3R9BZHimGH6UtDHPaLZ%2BkrU%2BXrh6w3OTxxqbtgeyF8sZuoQAidGKtERRy9n8DNa1AdnMLvL2I12pSbwXT%2FeN2g97U063%2FDONbwDa7g2VudMbxmOugLBnB4DH7h0ws7OU0WQ05AoUQCqsU1RjISPJ4HwPvniaTUdvc1JRhTBs2pJr8J98RaDOC0C1Ps9hvgFu37K2q69rIoMb53aghdONX2voFkt5qgyiHxaMimfmPA3wCBhXgIVvNQT8w3zKndfDsezAMjiHnf3n%2FYtb6xHfIsF6GWbhK04MURqjg4CIhIVgqlY6ENzha%2BvTBlVAeZ6YOsTD%2BIyhFjdnsUmYkhh1YsDzhB3NtgKLeIZteBf3zlRLjarPbuW3GjK9%2FwsSYcoW60sswrjORPOjrh7bWRb2v4ZoNRqVmlDiJHH7j9o8gGI1LxiLYMCXE0gLAYTK9GvHCnjeYeYQUjzhphWtW%2FQyNZEGXAsk%2FcIboVk3yoDcOtel3luAWGIujzfdGKyFxg0uY43x8wMjJEm9lOMLYcGOk8Tm9lbXvfnWeGYP%2FSOjzgWikUmCHpdAP1XlDClnAhrttxaBgqMJNsQC3Ow0m5Da1vw73v%2FUZRrtQsxhv4xhhCHd9yGMISM%2Fvv5RSoeK4JVYrLny62cJLKy8s5%2Bcwb4lSPPOUeFbXwv3uLh9Ty5gFl%2FfzV9ONbun1yotNu7316u3gNP2fGBa98yRbzG02vpkWsex%2FySy0VIhbdYnvsAWIE5jQc4p6npZyThDF7%2BHKcVRlatG1IRNRR%2FSgKb%2BIZ84gSY33q4P2fyU6vJsFOJIs3y1Bans23CpW96KWZ5VYg7pY925SuhG1hLdoKehfW60%2FY1TNtysWDVSL4p6levX%2BnXa%2B1r48QxOPC7wreErZkQ8KMeuxCTL2eWW%2FrFMdspqV5t0Zt6uBYuqs%2BAynphjbXeyJyzKmaoldljcLlCM6%2FS%2BMMasgSAA4SUj1EiJwm1YGOtnb9gQAucM4Atpk%2B%2BSyIZV%2F%2Bc6aBws%2Fo2GV4MlJ23GfcQaSJNQoelks%2BoMIe5hSZo6IOi%2FVITri9C9KHilQcU7L4B3yqe4StqqvQ%2BpiZqGPEnBosiJXhiFFh5T4fKuPoLK1%2F4q570SLFSgJ4W8CLNgDS7J1BfC88nuGCCsB2cwVRtq0FnHdu5T5ExG%2BWxKTzsRue%2BC6nrwvUU4hS7LZycQcfJWnuTEROFn%2BSYZCocLFDnOd2t7U70Wk5mvm3ploSJRvy3gBtOEPQXvTjXcn4ZAkSOVVaUNU8zHnFQQFkuvt%2FvG2xz4f5258qkpFtdIV5MU3FHCV5gSqu6w5OEHSXHxBP1Co15ATJv55jKr08iEOOyJT%2FJy%2FLc%2B3cRvP9PvTLomE7748o2YnQNjg0Fj8%2BNH%2BQ4qzt3LdMLnXlijr%2BmEZYRZ%2FSaFaNqc18S6PmvapBQqCG7WBmnTVq2eX2oaZsYZJv75vMzjFPfm486%2FjqMmCfboeu406Eeslv7BUWW1dY3z%2F6KeDKrVwsV96mryI9mAd31%2BlH4io3Jt1cM%2By15nlibAjbun08bIwA3SQlmdHbdTtplYnclZ07m1rtliD%2F6tzWtBppdCxHKkohtic6a%2FqbFzPTT8zOMJg1YO8EbpO61LPKf5JsKmYbO9%2FGbZi1gs3WnAQm16jhozkaSwjirWYMe0IMM4IpJ6%2FuzXPXRaIdrEsV128rGIcVSTFJDgWzUfI8tX0SQvl7JSOH7tGkhSrC3HdfnOzZ4FZzdoszbc9Nb3sMuyYTb6QWfuUSmxyB8Vo6c%3D
				"&ucSearchReport%24ucReportCondition%24ddlProcess=Onboarding+Standard+Global+Process" +
				"&ucSearchReport%24ucReportCondition%24ddlFilterBy=ucSearchReport_ucReportCondition_trFilterActivity%2CActivity" +
				"&ucSearchReport%24ucReportCondition%24ddlSavedReportSettings=" +
				"&ucSearchReport%24ucReportCondition%24txtAssignedToFirstName=" +
				"&ucSearchReport%24ucReportCondition%24txtAssignedToLastName=" +
				"&ucSearchReport%24ucReportCondition%24txtAssociateFirstName=" +
				"&ucSearchReport%24ucReportCondition%24txtAssociateLastName=" +
				"&ucSearchReport%24ucReportCondition%24ddlActivity=UNCOMPLETED_SECTION1" +
				"&ucSearchReport%24ucReportCondition%24txtPJCode=" +
				"&ucSearchReport%24ucReportCondition%24txtI9AlienWorkUntilDate=" +
				"&ucSearchReport%24ucReportCondition%24txtManagerLoginName=" +
				"&ucSearchReport%24ucReportCondition%24txtAssociateUserId=" +
				"&ucSearchReport%24ucReportCondition%24txtBackgroundType=" +
				"&ucSearchReport%24ucReportCondition%24txtDivision=" +
				"&ucSearchReport%24ucReportCondition%24txtDivCode=" +
				"&ucSearchReport%24ucReportCondition%24txtCountry=" +
				"&ucSearchReport%24ucReportCondition%24txtActivityCreateDate=" +
				"&ucSearchReport%24ucReportCondition%24txtDateOfBirth=" +
				"&ucSearchReport%24ucReportCondition%24txtDepartment=" +
				"&ucSearchReport%24ucReportCondition%24txtDeptCode=" +
				"&ucSearchReport%24ucReportCondition%24txtDepartmentType=" +
				"&ucSearchReport%24ucReportCondition%24txtDistrictCode=" +
				"&ucSearchReport%24ucReportCondition%24txtProcessDueDate=" +
				"&ucSearchReport%24ucReportCondition%24txtSSN=" +
				"&ucSearchReport%24ucReportCondition%24txtEmployeeId=" +
				"&ucSearchReport%24ucReportCondition%24txtEthnicGroup=" +
				"&ucSearchReport%24ucReportCondition%24txtFirstName=" +
				"&ucSearchReport%24ucReportCondition%24txtGender=" +
				"&ucSearchReport%24ucReportCondition%24txtActivityHireDate=" +
				"&ucSearchReport%24ucReportCondition%24txtHiringManagerLogin=" +
				"&ucSearchReport%24ucReportCondition%24txtJobCode=" +
				"&ucSearchReport%24ucReportCondition%24txtJobTitle=" +
				"&ucSearchReport%24ucReportCondition%24txtLastName=" +
				"&ucSearchReport%24ucReportCondition%24txtLocation=" +
				"&ucSearchReport%24ucReportCondition%24txtLocNumber=" +
				"&ucSearchReport%24ucReportCondition%24txtMiddleName=" +
				"&ucSearchReport%24ucReportCondition%24txtOrientationDate=" +
				"&ucSearchReport%24ucReportCondition%24txtReasonMessage=" +
				"&ucSearchReport%24ucReportCondition%24txtRecruiterLogin=" +
				"&ucSearchReport%24ucReportCondition%24txtStartDate=" +
				"&ucSearchReport%24ucReportCondition%24txtState=" +
				"&ucSearchReport%24ucReportCondition%24txtUnassignedFlag=" +
				"&ucSearchReport%24ucReportCondition%24dpReportStartDate%24txtDateValue=" +
				"&ucSearchReport%24ucReportCondition%24dpReportStartDate%24hidDateValue=" +
				"&ucSearchReport%24ucReportCondition%24dpReportEndDate%24txtDateValue=" +
				"&ucSearchReport%24ucReportCondition%24dpReportEndDate%24hidDateValue=" +
				"&ucSearchReport%24ucReportCondition%24ShowActivities=rdbShowAll" +
				"&ucSearchReport%24ucReportCondition%24hidIndexFields=ucSearchReport_ucReportCondition_trPJCode%3BucSearchReport_ucReportCondition_trI9AlienWorkUntilDate%3BucSearchReport_ucReportCondition_trManagerLoginName%3BucSearchReport_ucReportCondition_trAssociateUserId%3BucSearchReport_ucReportCondition_trBackgroundType%3BucSearchReport_ucReportCondition_trDivision%3BucSearchReport_ucReportCondition_trDivCode%3BucSearchReport_ucReportCondition_trCountry%3BucSearchReport_ucReportCondition_trActivityCreateDate%3BucSearchReport_ucReportCondition_trDateOfBirth%3BucSearchReport_ucReportCondition_trDepartment%3BucSearchReport_ucReportCondition_trDeptCode%3BucSearchReport_ucReportCondition_trDepartmentType%3BucSearchReport_ucReportCondition_trDistrictCode%3BucSearchReport_ucReportCondition_trProcessDueDate%3BucSearchReport_ucReportCondition_trSSN%3BucSearchReport_ucReportCondition_trEmployeeId%3BucSearchReport_ucReportCondition_trEthnicGroup%3BucSearchReport_ucReportCondition_trFirstName%3BucSearchReport_ucReportCondition_trGender%3BucSearchReport_ucReportCondition_trActivityHireDate%3BucSearchReport_ucReportCondition_trHiringManagerLogin%3BucSearchReport_ucReportCondition_trJobCode%3BucSearchReport_ucReportCondition_trJobTitle%3BucSearchReport_ucReportCondition_trLastName%3BucSearchReport_ucReportCondition_trLocation%3BucSearchReport_ucReportCondition_trLocNumber%3BucSearchReport_ucReportCondition_trMiddleName%3BucSearchReport_ucReportCondition_trOrientationDate%3BucSearchReport_ucReportCondition_trReasonMessage%3BucSearchReport_ucReportCondition_trRecruiterLogin%3BucSearchReport_ucReportCondition_trStartDate%3BucSearchReport_ucReportCondition_trState%3BucSearchReport_ucReportCondition_trUnassignedFlag%3B" +
				"&ucSearchReport%24ucReportCondition%24hidSelectedField=" +
				"&ucSearchReport%24ucReportCondition%24hidSelectedFieldValue=";
		byte[] binarySearchPattern0248_0 = Base64Decoder.decodeToBytes("Rkc3UzlUS2dEUjZKb3ljZ2lJODZ2NmUwTSUyRlZHaTMxJTJCZmsyODFRVFhMYnk3TzN6VXN1c2psNlNkYlZ2d0Q3ZGhZSDdPMFNncFFtY2RLUnI5d2xiRnNITGgwZFBSQlJ0emZya2JoQng3YlBrUUxReGdzaDBaVXFMWmhwNlplSWJlNGNPSGJTVmRWWUx6SXVOV2Y4SEtzJTJGODBCOG40JTJCdjNGRk9Ba3NRcyUyQnpYWnYyNmFtMXJSYW9RY2hGQVpnJTJGbEJiZVpITjlMN1FCUzVheXUyQjB1N3E4SFhPdE9TbW5RMGNXeW1DbkhzSUxmQ2JEVSUyQmhuazhidlVJRlZCOXpYNjhDUUdJcFpEUEElMkZtRWVUOGdtamwzWnZNeER4V25nNmI5UmFPa0gxOG02VndrZlZENFBvRDVZNlZ3OXFpbm0wcHdKT2x1blYzJTJGRnE4N3JjJTJCcFpaTWxjS2dEdiUyRmdjeGQ2SU50a3pZR0lJRWdqOW1qTUFQY3hlbVVnck5yYWlRRnBuJTJCdkZEbXdUa1JwRyUyQmk5Y0dMc3JCMG5ldDBrNG9kWnVqN3NVUEw0Sk9YcEs1cnglMkY5aTFacmt3eHFNU3V3JTJCUG1Mbkh2Z00lMkY5Mzl6bXdUcFBKVmcwVUNrSWpYazVWSDRMMHFrSkl6Zlp3RFp3JTJCUllpRTZ0JTJCJTJGS0hlZGJhZmViM2FUZnZBZUJXNTZOYW1SWFl4ZE9jaFpKU0lSOE96NTJoNHklMkZiJTJCYVlqcloycmZLWXdpVGs0cVhYNHh1cG1lMkEwWVZoQ1ZDcDJwQmFqZVpzYTl1UzRtcGU0VGdDQXd0VFI5SWtia2d5djNuVGxaT3NYVEs0NWtnd05MeUN5QkFmOGFDcm0lMkJYZ3RvYjdHSUZsb3M1WDJpQ28lMkZmYzQ4Rm5reks3MGU3U2lxVm90ZXAlMkZncGxCbjZSaTBNcGwzOUw3bTV2JTJCYW5CYW84JTJCb1olMkZJdnI3Q0RzTW81VGwwdlR5Z1piWGxxZU1ibGhLbVdlRTJLVnFIRzZsNHVBdDVJUkRtJTJCcWRGWjM0RDNMQ3F6YVF4RlIzSFpwSFJaVTFzMjZkU3dJMUElMkJXWjM0N0M0dXJlOFlUVnhZN2RJdFA1WUI0aXpzT0R0d2p3ZnhPdSUyRnZoTERIRXpkNCUyRjZnTzdZQ0F2bkp4Q1FveE1VRCUyRjh6VCUyRkttZGJyQUczOUVBNTB3UzA0SnRWOVY3R3RnSENsNnBNVXhrR09GejIwcnZYJTJGJTJCeFQ5cEwzRXd3N0Fod2k3R0FkTnUlMkJ6Qk1kdWV4cGwxamZVTklHbWRDOG0yUFRHUGYwQWFRQmJ4OUthZ3VRaEZOJTJGUnY0cDJ0QmlkdlBQbXBJaWpVUk8wb2hVQ0QxNyUyRmhCcldocVU3czJ4TCUyQkROV2VITnlnSjZmSXU4cTlnTURuY1lMZzdNOWJwVjBmMklaODJ3SktLeHZzMTF2U3BJT2YxOGY1N3o3TE5GRnBIbHR2Y0R4cmd0WFdGVHNWQVhzZXVWQjMlMkYlMkI3U2UxY0E0NjNINk9lRzEyJTJCYWNpR1dUczBmTDc3JTJGYyUyQkIxODM3N0hKJTJCcWRQSEptUlhkOFoxbkhuNXBDaiUyQlZObjczaWNyVSUyRkw5MmFjZUNmMkEzSXJvVG1kZDZhaDFZZW9SNVhHaXJJd045RFg2JTJCeEVuRTJKNENSYkdmbFdidkhHRU0wSzR3emhCNHlIdFNOSiUyRkppNERmeFFzQkNVZnVwSnFWa2ZpVTBzZzF3ZUF4TEVrTWFrY0xVd1ZTYmc2d1pLaFJrRTd2VDhzYUlwTiUyQkhxaHNmajN5QnNFZmE2NmxkTlYwVWttSEc2ZWxQcnpkJTJGNDNvRko2YVpXRDlJeVhWSzVkdXJjUkdON1lVMk5YQlVlc2Z4N1Q1bHJnQSUyRmxpMlZYc3lOJTJCTWtsTVNsa3VzR0lyNk9Oa0pTVlRDVW5QUnVyQkp0dm0wSUlVWlRGclpjQlBMeSUyQmtxMXBJaTRqT2VpenpLRSUyRnV2ZEk1bWl0NWszSHlUWnpjc0ZXR29QZmM2TEVqbTNsQSUyQjBTUldlWjZCeVI3NGVMckc5JTJCSlZoNVVNWUlyRHJiQU9qWnNlUnhSV2Q1aiUyQkk3a0R5VkNpd3BtM2VNa2NEJTJGcVRFY3RqSHRUaUd4dU1qaGg3R0hZbDVBYk9teVBlRUFPSFNlZkxEUGMlMkZ1T2thSDl5M0gweXFJbVFscEpNRDNFWTM1WklNYmszY21VQVEzamsxZjlMWkN1blRNQ3J1Vjd4bGZ0eDFuZHRsWk5SbkRtS3lnNXpYR2JDU0plb1RLVFhFVURDVVJad2lqRkhqSDhuRXlsTzUlMkJkS2RSd2FBV0hPOG9pNGl6V3JFYkduVjNac0pqQ1RFYmxuMjJMbWlGZWZlWE9aTU9PRGtHT2FWNGZsaXQwVzRLN0xWNGVENkQlMkZDZmZkV1dwMmhhUDhpSkslMkZsbGJ4SURQMlZudjhoUHltUlJYSVNjNjhORXR1OUxObnRGajdnbCUyQmUxVTBTSnFGJTJCdFRxR3BrNm9YM0tqODFWZ1c2ZnolMkZwSnJhWURUYjRaNUg3eWVGaDh4Tm1yMnUxJTJCYmtMWFhtOEVla0s5RlNROEJLc0Z1ZERyWk1IJTJGJTJCRktGVTVYWFhJcGNGb0RDU1RmeUgyJTJCd1lJV1QlMkJnMDVhSzRNeDN5NFVOWmk4OTBMNEJBa3dvV0dJU0ZReFJwN3NzelI3ZWlpJTJGcHYxYklkZEtieSUyRjcwZEpZS1ZlNnFwaXd5Sm9XOWJpY21yd3lFVW4lMkJxYjJHeVJORXRaR2Q3Zk9OUlJFNSUyQmlwWmxLWHB0ZVYwRmpTY2ZFSmRrMVJzSWhIMkxLb0RxNk9TRml4bUNXRzBFNU5ONWNCNFRnNUxnN2trM1gwZlRSTE92c3prWmFjb09YZFRYV2FMY0RMOU5ZYiUyQjRIVXhjenpKY3I4aVZkbFVBdXIzSHF3Mk1OejJicG1sMFZqUmlwJTJCckNlSDhqc25Nb2dPVGVvU3hCM3duaTk1SG9DNmo5VUU4dU1raERDR212TXU2Zlp6M1JROEFGcHRXUUNzOEt5ZjAlMkZWRVloZnBTTG92enhPTk9pWFglMkJzbFFPRWswY2dWOEd1Nkk0anVKTXUlMkJkSTBRTE1vc1IlMkZzVFAlMkY1NzVMaXhtU2FqbXc4c1B4bW14SUxSUVNiN2hvMTUlMkYzTDZzMmFWVFdTaE1ZajJQOUtwRTF4d0J5QzdLTG5YaU1WazFaJTJGMkdBbnpkMG9Eak5pRW01V0wyV29oWHYlMkJ0UG9qY04zZ21lRFhLMVklMkJHalhTNXglMkJGTW04WlBQJTJGbGt2cmltb2htd1FvTzdWSE9FdFVUajNHJTJCOFdYUndMbHk5N2olMkZoSkYwcGZXeVBIRG5JT1g1dkdJc1hoRlVFQ2hIc3N6c2IyZTJvSVNLbjdTUzNwN2NlcnRLQWd3eG9yb04zMTZ0alROOTIzeCUyQnhNVTd6MUZZVmhkVElpVldHV0hQVEh0cmhjTlU3d0dDUkdiJTJGOEpmM0hJMHZKRzJtODljVG5GOG5BT2FJVVZLOWF6NkglMkZqNmRWNXolMkI1b1BKU0lkU2ZYJTJCNWdEOXFIQ3AxaVZnZFZUdGUzJTJGMHJ2Tk5DUiUyQmJhZzhCSGxZN2NVdGRLcnN4OXNQQnZhS1c0cmE4TUFTaVNweXRXRGJWQlBnMWhyUWJlU2twd1ltRzI5OFZOQ1BodFB0THk0b3Q0ZDV2MjdjbVIlMkZGeERKYXAzV2RlJTJCb05nb2MlMkJrMnhHQ0UxYyUyQklHJTJCeG5WbWo1dng2bVFSJTJGbGdDVkVhaEh5YmpWR0dObG5GMlBSbmlyRXFnNEI3Q1JmZWZUMXlJNlI1RDJHVmZ2dVk0WWNpRkpRWE9WbDNLTTNtcXhwdCUyQlh0ViUyQk1lYjdxS0M0VXd6YVNMRnJoTSUyQmdUUW5MSnRMUCUyQkY4ZiUyQjRoS3haUVlDNXlFTEMlMkJVUlI3WWxNT29LblpoSTZBY0hwbVJ6cSUyQnc0YmczU1RKT21mRFJlaXpBR2E0WkVuakZGTGNWMmJLV0JZNW40cDdxaHdubHFaWnpLSnZiUm1vZnpubXhSa2pZWDM1dmp2NFJpamdaWkxBJTJGdjdWNVU5dHBxJTJGQjdjeWZubExiVCUyQllyMUE0ZlZqRTI4NUUyZG8lMkJscUJFbG95YmZYSnRldlhXUmR2RE1vJTJCNjVTeWM5TkVWZnBkcXY4N3A4Mm5ObDkzd21uZ0Z6N2Z3cUpRJTJCdWl3ZlZlVkI1bk80WXk2bWQlMkI3aWJDb3FVV3VNOFg1Yk1TOGw0blFNJTJCOEZLd3klMkZna3hTWE9tVldYdFJsTWQ4UEwwQmpOekxXQ1pnUUh4d05WS2tjRFRobG5UdE9mazR2dHRaWlhQdyUyRjdrODR3cUQxMlBvaURRVTlGa0ZidDlsTzJrZ0pEU1BISk5MTXlDNDZ3MkVlVUN6WXMlMkZKN0xadjllajk3M1NpZlpyZmtmR0lGdW5zbyUyRmJQdVFpRDExc2FDZlNWUDBKOE9TWk1iVG4lMkJWa3dmQ2U4S1lOUk43JTJCSFZrRjFWYXdaZnVrNTZDaXV0cHpraXU3QVVId1hkU29jbE9vV25XQ1V5a2g3RE9xZkJKcmpodDJYSXJnNGJZVVZjeGtPbFVadzBhOFlpMFpGWUtRc1NWTkJTRDNkUXA0ckVsRlBvOUFRMmhFbVROZ0dDc3R6aFdKU0x0dEozaFhHRUI0OVQ5Skd3Ylh1VCUyRk1UOGZ4JTJCb21GQXp6cWZrRkVDbVpZMXNLeWlFY0hoOFhSRHNLTlhzN1k3cUlpRWd3JTJGdHJNaHF3eGtmbFdseTBJJTJCVklNeUtXZVNZVU5ocm53bjB3SGV3ViUyRmhYeEE1NXpjOTg5S2JEellEVm1qYUtvODNWVlBDa281Z2xZbDRYY2ZwUjlrJTJCaCUyRmlROHJIYWY0bFo0MHdEamllNzJQdEw3Yks2MnlBc3ZkcXhXbFMlMkZNdDRnYUMwT0R6enplVUhGZGFMczBuNWRaZjFla2IlMkJWSVNPTEVmekJiaVJOJTJGc3IlMkZ0aURzZDJMViUyQkxJUWp1VHFwdkNNZnNha2hPUW4lMkZkNG1DMklvVEk2N2hFQTZxTjB1dHBGamhYV1oxTiUyRjNRclRjWEt5MllhM2lpejFkU2F1ZmlDZ3F0Z3FJRW5HTU1tMW9YeXB0ZU8ySHlpRncyVUxNUk5ITklaR0xDJTJCOUwlMkZrdDJqN2RTaTdkTmhYdDlHc3I5TDlFNFZVRmJlM0ppbVE3MndNWXROMHk4JTJCeGtuZWpyZUxqWExYdmxyV3hIc2Vxa3g0a0slMkJMblZVQTd0c0FiTTRNNkg3VyUyQnE2V0EyQUJ4RCUyRjFuUEZaZjN3MTdJeDhvNmZRbklPeUU2dU1VNWtEUWoyR1hyaDclMkJidHhCWlhheG5HT3BHeUhta0s5Z2cyaTdoNGpVY3JPZDlmeGw1aEEwWVZZNTh0WkptNzl5eXZoY3FVdU9jRHAyZUJibThINHh3ZSUyQld3NkVmTiUyQmlCOFduTWhvNTdCQ21ZVFRZNUd5ZnZRd0xlUFQzSlJMTm41c3RiSm4zNDJnMWhkaXJ2amdIdkxmeFAzVTF5Rk84UGdoNUR5UVhnVDZJJTJCZ2lFM3ZGeUVrUFFhd2ZtaSUyQlNTeTU4NmV5aWh3TjBIRzIlMkZaVW9WQ1RvJTJGUXglMkZaeUczODlIWE5LMXIlMkZxOUpYZFduSUxTcnYyRUVNUjJxJTJGdld0NE0wUXFVdTIxZ2diQjllQm5PTUVpUlk1TkpZOG5rYzd6cnp4WUpvSnVUWXNIRUNwVnNtQWd5amdKM2pVTml1M3VVeDVDOEV1MXhuWXE4NGx2RGRPcVElMkZSMUljQ1UzUmtiaGdZSk5FVXpWbEpSYW9ZQ2pZc282bjhsSW5DZ2xUelBFeUMlMkJNV1BCU2FURmN6UzVGQmtneHI2cE5TQ0dHajBONUFwaXRvUzNhWHlvJTJGbmFQcmt3QyUyRkZEUGNOcHNEejZub21OZ243TkZqY2ZOUHBDd1ZFYndXb2xBNTczJTJGV29hSiUyRiUyQmxTR2drR0pSNmJDJTJGODJHWjJ2eG5aR3J6WDljdU1xalp0T2VBTjBlQnpSVjZCWDhDJTJCNHVlOWpUSWFuQVlhVXdVU3RSeWpJdUhMNXBNOW42MUhmVVN3RHZPMWw2R2FzNnQ4N0dMRGZHdEZlWHVER09uZGJnd2p4S3RGNFZEdzlHczU5N0duRUhGdDAxTlRCREN4Z2xlJTJCYk1wOEJSeVAzJTJGZVI3TnZya2ZCTDJuSGlUWE5mclglMkZCS0FEOGJIcmJ1VXhobUtKelc3TW1BaGxxZ1E1a0hEMHFDWDhIejFKRkxQZTREWFVhZjIlMkJDR0lqQWZLTXl6YXUxcW02dlR4UUhJdmZzJTJCa0p2RjExcSUyRnZDNCUyQkYlMkZxSWlLT09pemlmWHh4UEZHRGJsVGNkTnhLdGpndEptV1dXQXkyMEZYTiUyRjRFWDJRbXIwMWJrUkNZanhJUkJqRGVJJTJGd0RiOHA0RnQyNFpGa0VoR2ZHN1pzajlCOFc5RmpMc2lXY2lKTmpuT0hKQjFaQmJ1cnlkTDBMQzBBb0VNZVhkd3lKeXhvSUtxQkxNMDBkcGZTOVRRUGlCVTlvRiUyQnk1SUpjYyUyQk13Q2IlMkZHbmRvWkpPQ1hBazFnNUR4VVFzRlNlYUx5VHhMdFA2JTJCVXdEQ1R3c3ZYMTFXMVhjcEN5TXM1eXFUYzVDQ3J4dHZyTWppb3pMRU9VcVh2MyUyRkZPU3JHJTJCVEczQkpiR2M2YnpDYzlxSFdiWVZ5S2Q0c0Z3MjZvJTJCcFJGNHJiQXl3eUdmWVRQYjdObEZTcTlnZnNUSmFrTkxHcW8xYkJ5OGhxcTElMkJmbEpWNmpITERhMyUyQlFFWGZDTjI2Tko1eVBIM3lBcFV5NzcxMGtQaGhhWFhSTWxSOFElMkY0bGo2QnpnWFdhRnolMkJHejlmMjRaWFRxUGV6UktoM3lxRHA5aWViWnBiYXNSMWNzR0clMkJJOU5kTHBnWERaS1VUSjZocElFcTFIVkwlMkJsT21NU0xvJTJCMW5zJTJGJTJCNW5HWHJDUEprR2lkajRnWmprbCUyRlZ0VmE5amt2ejIlMkYyY0hwYnJ4cUpOYTFRdzdnMTBEY3VMMGdqbG56MW9wV0luRjk3QjUwM2JMblZPbTBlOTg1V2N5ZnN4UDBRdHR5TmxqckVieDRXJTJCVUhGYXFiU0NwMG0zZyUyQjE2c2hBZVhIdG1EbFdiUyUyQnNoR3lLTUFCcUVjamVYdEtSZnBhVWYzMFZxWTBrJTJCV1BWMkNyWVBxMExLS1ljbmtPYzdwRXVDOHp0SENVJTJGVTE1ciUyQkFHb25SOGtiZ3FFaVBsN2tNJTJCdjBvYjc2dzNjVXRuME1acDFqRjElMkZodHNoWWNPT0lHV3FzTkJ6Vkc3MU5uRXZ1JTJCUkpYSVJEUVNrOWNpVTIlMkJzU0x6SlVaRGRMQzVGR0VjcU1YakRqV1A5ekg0NGkxamNNdSUyRlJ5dEJ6NGo3TEhUZG5obE1xV2FHMkJ0WjlmcE5qam1wcSUyRlk0Q2g5dXFjVmpIYW91MjlCSWxmQUU2M2w3TzElMkZnQkNxQ1lnUXVjQ2QwUWQ1YXRyS3paWkJEYThiYkF1ckFCVUx6VCUyRjM2eE9OJTJGTDVUV1hmb2trQzE3NXc2c01uaFBIS3B4UXpuMmN3WGY0bm5HcTdseHRJd1FaTDhoSjR6cHAwYlBIQlZGVmhDSUN4bmo4NXJONXozUm02YmJEVW1Zcmc1aExVMUxEV2l2NmhXQjNteEY4U3VVdlhCdkMzSXk2cnNvdSUyQnQ4SVN6QjdDdWVqOVFSVWp0alRmSXQ0JTJCeldvTEtMYTB6dCUyQjlRcUZ2blhpRTU5OHV5T2hpYWhIRnhGQmk2eUp1YjZ4YyUyRjFXMjM4YmVacU1GeTJMeE9CTG5nWG00MVZXb2NKSW9oeVBnNUJuRyUyRkp5dXYlMkJrM2JqYlBOc3NFVTVCS2pGME5YYmNBd3glMkZHbmNVZ0pDeFd1akFoTGIxWVdTS2FVZ082UUhvUm5LNWNVc3hBUW5QbkJIemNETExQamJkbzdTZ1NlTWFVQ0UlMkY0NzNWMXlUQkVvMDBuJTJCcWJwWVNjdDFETDJWTGxDJTJGZlVmTyUyQmV1cTA4WVZNWjJ6QW9BYUQlMkI1YSUyQkg4MEtBb2s5cVZETFdYUklJbHRSRU9nNGJkJTJGYSUyRlpLbmM1Vk44SiUyRjlXalpOdmlYNXRxUSUzRCUzRA==");		// note: the search pattern value is base 64 encoded. decoded value = FG7S9TKgDR6JoycgiI86v6e0M%2FVGi31%2Bfk281QTXLby7O3zUsusjl6SdbVvwD7dhYH7O0SgpQmcdKRr9wlbFsHLh0dPRBRtzfrkbhBx7bPkQLQxgsh0ZUqLZhp6ZeIbe4cOHbSVdVYLzIuNWf8HKs%2F80B8n4%2Bv3FFOAksQs%2BzXZv26am1rRaoQchFAZg%2FlBbeZHN9L7QBS5ayu2B0u7q8HXOtOSmnQ0cWymCnHsILfCbDU%2Bhnk8bvUIFVB9zX68CQGIpZDPA%2FmEeT8gmjl3ZvMxDxWng6b9RaOkH18m6VwkfVD4PoD5Y6Vw9qinm0pwJOlunV3%2FFq87rc%2BpZZMlcKgDv%2Fgcxd6INtkzYGIIEgj9mjMAPcxemUgrNraiQFpn%2BvFDmwTkRpG%2Bi9cGLsrB0net0k4odZuj7sUPL4JOXpK5rx%2F9i1ZrkwxqMSuw%2BPmLnHvgM%2F939zmwTpPJVg0UCkIjXk5VH4L0qkJIzfZwDZw%2BRYiE6t%2B%2FKHedbafeb3aTfvAeBW56NamRXYxdOchZJSIR8Oz52h4y%2Fb%2BaYjrZ2rfKYwiTk4qXX4xupme2A0YVhCVCp2pBajeZsa9uS4mpe4TgCAwtTR9Ikbkgyv3nTlZOsXTK45kgwNLyCyBAf8aCrm%2BXgtob7GIFlos5X2iCo%2Ffc48FnkzK70e7SiqVotep%2FgplBn6Ri0Mpl39L7m5v%2BanBao8%2BoZ%2FIvr7CDsMo5Tl0vTygZbXlqeMblhKmWeE2KVqHG6l4uAt5IRDm%2BqdFZ34D3LCqzaQxFR3HZpHRZU1s26dSwI1A%2BWZ347C4ure8YTVxY7dItP5YB4izsODtwjwfxOu%2FvhLDHEzd4%2F6gO7YCAvnJxCQoxMUD%2F8zT%2FKmdbrAG39EA50wS04JtV9V7GtgHCl6pMUxkGOFz20rvX%2F%2BxT9pL3Eww7Ahwi7GAdNu%2BzBMduexpl1jfUNIGmdC8m2PTGPf0AaQBbx9KaguQhFN%2FRv4p2tBidvPPmpIijURO0ohUCD17%2FhBrWhqU7s2xL%2BDNWeHNygJ6fIu8q9gMDncYLg7M9bpV0f2IZ82wJKKxvs11vSpIOf18f57z7LNFFpHltvcDxrgtXWFTsVAXseuVB3%2F%2B7Se1cA463H6OeG12%2BaciGWTs0fL77%2Fc%2BB18377HJ%2BqdPHJmRXd8Z1nHn5pCj%2BVNn73icrU%2FL92aceCf2A3IroTmdd6ah1YeoR5XGirIwN9DX6%2BxEnE2J4CRbGflWbvHGEM0K4wzhB4yHtSNJ%2FJi4DfxQsBCUfupJqVkfiU0sg1weAxLEkMakcLUwVSbg6wZKhRkE7vT8saIpN%2BHqhsfj3yBsEfa66ldNV0UkmHG6elPrzd%2F43oFJ6aZWD9IyXVK5durcRGN7YU2NXBUesfx7T5lrgA%2Fli2VXsyN%2BMklMSlkusGIr6ONkJSVTCUnPRurBJtvm0IIUZTFrZcBPLy%2Bkq1pIi4jOeizzKE%2FuvdI5mit5k3HyTZzcsFWGoPfc6LEjm3lA%2B0SRWeZ6ByR74eLrG9%2BJVh5UMYIrDrbAOjZseRxRWd5j%2BI7kDyVCiwpm3eMkcD%2FqTEctjHtTiGxuMjhh7GHYl5AbOmyPeEAOHSefLDPc%2FuOkaH9y3H0yqImQlpJMD3EY35ZIMbk3cmUAQ3jk1f9LZCunTMCruV7xlftx1ndtlZNRnDmKyg5zXGbCSJeoTKTXEUDCURZwijFHjH8nEylO5%2BdKdRwaAWHO8oi4izWrEbGnV3ZsJjCTEbln22LmiFefeXOZMOODkGOaV4flit0W4K7LV4eD6D%2FCffdWWp2haP8iJK%2FllbxIDP2Vnv8hPymRRXISc68NEtu9LNntFj7gl%2Be1U0SJqF%2BtTqGpk6oX3Kj81VgW6fz%2FpJraYDTb4Z5H7yeFh8xNmr2u1%2BbkLXXm8EekK9FSQ8BKsFudDrZMH%2F%2BFKFU5XXXIpcFoDCSTfyH2%2BwYIWT%2Bg05aK4Mx3y4UNZi890L4BAkwoWGISFQxRp7sszR7eii%2Fpv1bIddKby%2F70dJYKVe6qpiwyJoW9bicmrwyEUn%2Bqb2GyRNEtZGd7fONRRE5%2BipZlKXpteV0FjScfEJdk1RsIhH2LKoDq6OSFixmCWG0E5NN5cB4Tg5Lg7kk3X0fTRLOvszkZacoOXdTXWaLcDL9NYb%2B4HUxczzJcr8iVdlUAur3Hqw2MNz2bpml0VjRip%2BrCeH8jsnMogOTeoSxB3wni95HoC6j9UE8uMkhDCGmvMu6fZz3RQ8AFptWQCs8Kyf0%2FVEYhfpSLovzxONOiXX%2BslQOEk0cgV8Gu6I4juJMu%2BdI0QLMosR%2FsTP%2F575LixmSajmw8sPxmmxILRQSb7ho15%2F3L6s2aVTWShMYj2P9KpE1xwByC7KLnXiMVk1Z%2F2GAnzd0oDjNiEm5WL2WohXv%2BtPojcN3gmeDXK1Y%2BGjXS5x%2BFMm8ZPP%2FlkvrimohmwQoO7VHOEtUTj3G%2B8WXRwLly97j%2FhJF0pfWyPHDnIOX5vGIsXhFUEChHsszsb2e2oISKn7SS3p7certKAgwxoroN316tjTN923x%2BxMU7z1FYVhdTIiVWGWHPTHtrhcNU7wGCRGb%2F8Jf3HI0vJG2m89cTnF8nAOaIUVK9az6H%2Fj6dV5z%2B5oPJSIdSfX%2B5gD9qHCp1iVgdVTte3%2F0rvNNCR%2Bbag8BHlY7cUtdKrsx9sPBvaKW4ra8MASiSpytWDbVBPg1hrQbeSkpwYmG298VNCPhtPtLy4ot4d5v27cmR%2FFxDJap3Wde%2BoNgoc%2Bk2xGCE1c%2BIG%2BxnVmj5vx6mQR%2FlgCVEahHybjVGGNlnF2PRnirEqg4B7CRfefT1yI6R5D2GVfvuY4YciFJQXOVl3KM3mqxpt%2BXtV%2BMeb7qKC4UwzaSLFrhM%2BgTQnLJtLP%2BF8f%2B4hKxZQYC5yELC%2BURR7YlMOoKnZhI6AcHpmRzq%2Bw4bg3STJOmfDReizAGa4ZEnjFFLcV2bKWBY5n4p7qhwnlqZZzKJvbRmofznmxRkjYX35vjv4RijgZZLA%2Fv7V5U9tpq%2FB7cyfnlLbT%2BYr1A4fVjE285E2do%2BlqBEloybfXJtevXWRdvDMo%2B65Syc9NEVfpdqv87p82nNl93wmngFz7fwqJQ%2BuiwfVeVB5nO4Yy6md%2B7ibCoqUWuM8X5bMS8l4nQM%2B8FKwy%2FgkxSXOmVWXtRlMd8PL0BjNzLWCZgQHxwNVKkcDThlnTtOfk4vttZZXPw%2F7k84wqD12PoiDQU9FkFbt9lO2kgJDSPHJNLMyC46w2EeUCzYs%2FJ7LZv9ej973SifZrfkfGIFunso%2FbPuQiD11saCfSVP0J8OSZMbTn%2BVkwfCe8KYNRN7%2BHVkF1VawZfuk56Ciutpzkiu7AUHwXdSoclOoWnWCUykh7DOqfBJrjht2XIrg4bYUVcxkOlUZw0a8Yi0ZFYKQsSVNBSD3dQp4rElFPo9AQ2hEmTNgGCstzhWJSLttJ3hXGEB49T9JGwbXuT%2FMT8fx%2BomFAzzqfkFECmZY1sKyiEcHh8XRDsKNXs7Y7qIiEgw%2FtrMhqwxkflWly0I%2BVIMyKWeSYUNhrnwn0wHewV%2FhXxA55zc989KbDzYDVmjaKo83VVPCko5glYl4XcfpR9k%2Bh%2FiQ8rHaf4lZ40wDjie72PtL7bK62yAsvdqxWlS%2FMt4gaC0ODzzzeUHFdaLs0n5dZf1ekb%2BVISOLEfzBbiRN%2Fsr%2FtiDsd2LV%2BLIQjuTqpvCMfsakhOQn%2Fd4mC2IoTI67hEA6qN0utpFjhXWZ1N%2F3QrTcXKy2Ya3iiz1dSaufiCgqtgqIEnGMMm1oXypteO2HyiFw2ULMRNHNIZGLC%2B9L%2Fkt2j7dSi7dNhXt9Gsr9L9E4VUFbe3JimQ72wMYtN0y8%2BxknejreLjXLXvlrWxHseqkx4kK%2BLnVUA7tsAbM4M6H7W%2Bq6WA2ABxD%2F1nPFZf3w17Ix8o6fQnIOyE6uMU5kDQj2GXrh7%2BbtxBZXaxnGOpGyHmkK9gg2i7h4jUcrOd9fxl5hA0YVY58tZJm79yyvhcqUuOcDp2eBbm8H4xwe%2BWw6EfN%2BiB8WnMho57BCmYTTY5GyfvQwLePT3JRLNn5stbJn342g1hdirvjgHvLfxP3U1yFO8Pgh5DyQXgT6I%2BgiE3vFyEkPQawfmi%2BSSy586eyihwN0HG2%2FZUoVCTo%2FQx%2FZyG389HXNK1r%2Fq9JXdWnILSrv2EEMR2q%2FvWt4M0QqUu21ggbB9eBnOMEiRY5NJY8nkc7zrzxYJoJuTYsHECpVsmAgyjgJ3jUNiu3uUx5C8Eu1xnYq84lvDdOqQ%2FR1IcCU3RkbhgYJNEUzVlJRaoYCjYso6n8lInCglTzPEyC%2BMWPBSaTFczS5FBkgxr6pNSCGGj0N5ApitoS3aXyo%2FnaPrkwC%2FFDPcNpsDz6nomNgn7NFjcfNPpCwVEbwWolA573%2FWoaJ%2F%2BlSGgkGJR6bC%2F82GZ2vxnZGrzX9cuMqjZtOeAN0eBzRV6BX8C%2B4ue9jTIanAYaUwUStRyjIuHL5pM9n61HfUSwDvO1l6Gas6t87GLDfGtFeXuDGOndbgwjxKtF4VDw9Gs597GnEHFt01NTBDCxgle%2BbMp8BRyP3%2FeR7NvrkfBL2nHiTXNfrX%2FBKAD8bHrbuUxhmKJzW7MmAhlqgQ5kHD0qCX8Hz1JFLPe4DXUaf2%2BCGIjAfKMyzau1qm6vTxQHIvfs%2BkJvF11q%2FvC4%2BF%2FqIiKOOizifXxxPFGDblTcdNxKtjgtJmWWWAy20FXN%2F4EX2Qmr01bkRCYjxIRBjDeI%2FwDb8p4Ft24ZFkEhGfG7Zsj9B8W9FjLsiWciJNjnOHJB1ZBburydL0LC0AoEMeXdwyJyxoIKqBLM00dpfS9TQPiBU9oF%2By5IJcc%2BMwCb%2FGndoZJOCXAk1g5DxUQsFSeaLyTxLtP6%2BUwDCTwsvX11W1XcpCyMs5yqTc5CCrxtvrMjiozLEOUqXv3%2FFOSrG%2BTG3BJbGc6bzCc9qHWbYVyKd4sFw26o%2BpRF4rbAywyGfYTPb7NlFSq9gfsTJakNLGqo1bBy8hqq1%2BflJV6jHLDa3%2BQEXfCN26NJ5yPH3yApUy7710kPhhaXXRMlR8Q%2F4lj6BzgXWaFz%2BGz9f24ZXTqPezRKh3yqDp9iebZpbasR1csGG%2BI9NdLpgXDZKUTJ6hpIEq1HVL%2BlOmMSLo%2B1ns%2F%2B5nGXrCPJkGidj4gZjkl%2FVtVa9jkvz2%2F2cHpbrxqJNa1Qw7g10DcuL0gjlnz1opWInF97B503bLnVOm0e985WcyfsxP0QttyNljrEbx4W%2BUHFaqbSCp0m3g%2B16shAeXHtmDlWbS%2BshGyKMABqEcjeXtKRfpaUf30VqY0k%2BWPV2CrYPq0LKKYcnkOc7pEuC8ztHCU%2FU15r%2BAGonR8kbgqEiPl7kM%2Bv0ob76w3cUtn0MZp1jF1%2FhtshYcOOIGWqsNBzVG71NnEvu%2BRJXIRDQSk9ciU2%2BsSLzJUZDdLC5FGEcqMXjDjWP9zH44i1jcMu%2FRytBz4j7LHTdnhlMqWaG2BtZ9fpNjjmpq%2FY4Ch9uqcVjHaou29BIlfAE63l7O1%2FgBCqCYgQucCd0Qd5atrKzZZBDa8bbAurABULzT%2F36xON%2FL5TWXfokkC175w6sMnhPHKpxQzn2cwXf4nnGq7lxtIwQZL8hJ4zpp0bPHBVFVhCICxnj85rN5z3Rm6bbDUmYrg5hLU1LDWiv6hWB3mxF8SuUvXBvC3Iy6rsou%2Bt8ISzB7Cuej9QRUjtjTfIt4%2BzWoLKLa0zt%2B9QqFvnXiE598uyOhiahHFxFBi6yJub6xc%2F1W238beZqMFy2LxOBLngXm41VWocJIohyPg5BnG%2FJyuv%2Bk3bjbPNssEU5BKjF0NXbcAwx%2FGncUgJCxWujAhLb1YWSKaUgO6QHoRnK5cUsxAQnPnBHzcDLLPjbdo7SgSeMaUCE%2F473V1yTBEo00n%2BqbpYSct1DL2VLlC%2FfUfO%2Beuq08YVMZ2zAoAaD%2B5a%2BH80KAok9qVDLWXRIIltREOg4bd%2Fa%2FZKnc5VN8J%2F9WjZNviX5tqQ%3D%3D
		requestContent0248 = new String(Lib.binaryReplace(requestContent0248.getBytes(), binarySearchPattern0248_0, java.net.URLEncoder.encode(C_Viewstate1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[] binarySearchPattern0248_1 = Base64Decoder.decodeToBytes("aTQwNEdFT212MkhRVm1NRmJRdFc5Q0hEbnZzQVZ2VHcxN3Z2diUyRnNaRCUyQkRsQVZoTEdiN1pUb0NZVUpOYjB1d1g4VDVKa3BxaUdxVFFpaGZqdDklMkZuOU1wclJNT1duWm9kTWNTTmtTTE1oTmJwMG1pR1V3ZEN0UWNNRjVnUWxPYkxmVEJqbXBsUCUyRjVNcE1ZdkVQcWVjNEFxOFBma0lJZU8zd2FBOHgwTkNrJTJCJTJCJTJCRDM4UmxlQTglMkZQSiUyQmpESDQ0Rm5zUENEZExnRzlWRkQ0amN6Z2Q3MldsekVzNSUyQnBWb0hYeFR2dHBsSmZvc21oY3lYelNvT2J5MFQ0NjVpY1dYQm0yYXNjZlVvQkJtSUNCdXdQOSUyRmFYZE5IOVJpcHBUYmVjM25ENHdZbDclMkJkR2NkY1BWcE1RZk1CcDFMVk9Wak01S0JMUU9mYTc4VWlDam4xYXlZcmJEbW5LJTJGbkc1OFIlMkJ6TmdTT3RDVUQ2NW95VmdPQVolMkJKN1ZGUHExaWR1JTJGWnphdGhtQ0tqM292WFBCMGJvT0o1NHpwekp5ampON1MyNGxJSHBxcGJkeWJOaWtUb0VBZTglMkZlTDQ1YWEzUVlrM0tGSEJTOGVUU3lnVDI5Skh4ekd1Q2k4VGglMkIlMkY0THNpbW5mRWhqM1pxSzRucEk4cVQzUjlCWkhpbUdINlV0REhQYUxaJTJCa3JVJTJCWHJoNnczT1R4eHFidGdleUY4c1p1b1FBaWRHS3RFUlJ5OW44RE5hMUFkbk1MdkwySTEycFNid1hUJTJGZU4yZzk3VTA2MyUyRkRPTmJ3RGE3ZzJWdWRNYnhtT3VnTEJuQjRESDdoMHdzN09VMFdRMDVBb1VRQ3FzVTFSaklTUEo0SHdQdm5pYVRVZHZjMUpSaFRCczJwSnI4Sjk4UmFET0MwQzFQczlodmdGdTM3SzJxNjlySW9NYjUzYWdoZE9OWDJ2b0ZrdDVxZ3lpSHhhTWltZm1QQTN3Q0JoWGdJVnZOUVQ4dzN6S25kZkRzZXpBTWppSG5mM24lMkZZdGI2eEhmSXNGNkdXYmhLMDRNVVJxamc0Q0loSVZncWxZNkVOemhhJTJCdlRCbFZBZVo2WU9zVEQlMkJJeWhGamRuc1VtWWtoaDFZc0R6aEIzTnRnS0xlSVp0ZUJmM3psUkxqYXJQYnVXM0dqSzklMkZ3c1NZY29XNjBzc3dyak9SUE9qcmg3YldSYjJ2NFpvTlJxVm1sRGlKSEg3ajlvOGdHSTFMeGlMWU1DWEUwZ0xBWVRLOUd2SENuamVZZVlRVWp6aHBoV3RXJTJGUXlOWkVHWEFzayUyRmNJYm9WazN5b0RjT3RlbDNsdUFXR0l1anpmZEdLeUZ4ZzB1WTQzeDh3TWpKRW05bE9NTFljR09rOFRtOWxiWHZmbldlR1lQJTJGU09qemdXaWtVbUNIcGRBUDFYbERDbG5BaHJ0dHhhQmdxTUpOc1FDM093MG01RGExdnc3M3YlMkZVWlJydFFzeGh2NHhoaENIZDl5R01JU00lMkZ2djVSU29lSzRKVllyTG55NjJjSkxLeThzNSUyQmN3YjRsU1BQT1VlRmJYd3YzdUxoOVR5NWdGbCUyRmZ6VjlPTmJ1bjF5b3ROdTczMTZ1M2dOUDJmR0JhOTh5UmJ6RzAydnBrV3NleCUyRnlTeTBWSWhiZFludnNBV0lFNWpRYzRwNm5wWnlUaERGNyUyQkhLY1ZSbGF0RzFJUk5SUiUyRlNnS2IlMkJJWjg0Z1NZMzNxNFAyZnlVNnZKc0ZPSklzM3kxQmFuczIzQ3BXOTZLV1o1VllnN3BZOTI1U3VoRzFoTGRvS2VoZlc2MCUyRlkxVE50eXNXRFZTTDRwNmxldlglMkJuWGElMkIxcjQ4UXhPUEM3d3JlRXJaa1E4S01ldXhDVEwyZVdXJTJGckZNZHNwcVY1dDBadDZ1Qll1cXMlMkJBeW5waGpiWGV5Snl6S21hb2xkbGpjTGxDTTYlMkZTJTJCTU1hc2dTQUE0U1VqMUVpSndtMVlHT3RuYjlnUUF1Y000QXRwayUyQiUyQlN5SVpWJTJGJTJCYzZhQndzJTJGbzJHVjRNbEoyM0dmY1FhU0pOUW9lbGtzJTJCb01JZTVoU1pvNklPaSUyRlZJVHJpOUM5S0hpbFFjVTdMNEIzeXFlNFN0cXF2USUyQnBpWnFHUEVuQm9zaUpYaGlGRmg1VDRmS3VQb0xLMSUyRjRxNTcwU0xGU2dKNFc4Q0xOZ0RTN0oxQmZDODhudUdDQ3NCMmN3VlJ0cTBGbkhkdTVUNUV4RyUyQld4S1R6c1J1ZSUyQkM2bnJ3dlVVNGhTN0xaeWNRY2ZKV251VEVST0ZuJTJCU1laQ29jTEZEbk9kMnQ3VTcwV2s1bXZtM3Bsb1NKUnZ5M2dCdE9FUFFYdlRqWGNuNFpBa1NPVlZhVU5VOHpIbkZRUUZrdXZ0JTJGdkcyeHo0ZjUyNThxa3BGdGRJVjVNVTNGSENWNWdTcXU2dzVPRUhTWEh4QlAxQ28xNUFUSnY1NWpLcjA4aUVPT3lKVCUyRkp5JTJGTGMlMkIzY1J2UDlQdlRMb21FNzc0OG8yWW5RTmpnMEZqOCUyQk5IJTJCUTRxenQzTGRNTG5YbGlqciUyQm1FWllSWiUyRlNhRmFOcWMxOFM2UG12YXBCUXFDRzdXQm1uVFZxMmVYMm9hWnNZWkp2NzV2TXpqRlBmbTQ4NiUyRmpxTW1DZmJvZXU0MDZFZXNsdjdCVVdXMWRZM3olMkY2S2VES3JWd3NWOTZtcnlJOW1BZDMxJTJCbEg0aW8zSnQxY00lMkJ5MTVubGliQWpidW4wOGJJd0EzU1FsbWRIYmRUdHBsWW5jbFowN20xcnRsaUQlMkY2dHpXdEJwcGRDeEhLa29odGljNmElMkZxYkZ6UFRUOHpPTUpnMVlPOEVicE82MUxQS2Y1SnNLbVliTzklMkZHYlppMWdzM1duQVFtMTZqaG96a2FTd2ppcldZTWUwSU1NNElwSjYlMkZ1elhQWFJhSWRyRXNWMTI4ckdJY1ZTVEZKRGdXelVmSTh0WDBTUXZsN0pTT0g3dEdraFNyQzNIZGZuT3paNEZaemRvc3piYzlOYjNzTXV5WVRiNlFXZnVVU214eUI4Vm82YyUzRA==");		// note: the search pattern value is base 64 encoded. decoded value = i404GEOmv2HQVmMFbQtW9CHDnvsAVvTw17vvv%2FsZD%2BDlAVhLGb7ZToCYUJNb0uwX8T5JkpqiGqTQihfjt9%2Fn9MprRMOWnZodMcSNkSLMhNbp0miGUwdCtQcMF5gQlObLfTBjmplP%2F5MpMYvEPqec4Aq8PfkIIeO3waA8x0NCk%2B%2B%2BD38RleA8%2FPJ%2BjDH44FnsPCDdLgG9VFD4jczgd72WlzEs5%2BpVoHXxTvtplJfosmhcyXzSoOby0T465icWXBm2ascfUoBBmICBuwP9%2FaXdNH9RippTbec3nD4wYl7%2BdGcdcPVpMQfMBp1LVOVjM5KBLQOfa78UiCjn1ayYrbDmnK%2FnG58R%2BzNgSOtCUD65oyVgOAZ%2BJ7VFPq1idu%2FZzathmCKj3ovXPB0boOJ54zpzJyjjN7S24lIHpqpbdybNikToEAe8%2FeL45aa3QYk3KFHBS8eTSygT29JHxzGuCi8Th%2B%2F4LsimnfEhj3ZqK4npI8qT3R9BZHimGH6UtDHPaLZ%2BkrU%2BXrh6w3OTxxqbtgeyF8sZuoQAidGKtERRy9n8DNa1AdnMLvL2I12pSbwXT%2FeN2g97U063%2FDONbwDa7g2VudMbxmOugLBnB4DH7h0ws7OU0WQ05AoUQCqsU1RjISPJ4HwPvniaTUdvc1JRhTBs2pJr8J98RaDOC0C1Ps9hvgFu37K2q69rIoMb53aghdONX2voFkt5qgyiHxaMimfmPA3wCBhXgIVvNQT8w3zKndfDsezAMjiHnf3n%2FYtb6xHfIsF6GWbhK04MURqjg4CIhIVgqlY6ENzha%2BvTBlVAeZ6YOsTD%2BIyhFjdnsUmYkhh1YsDzhB3NtgKLeIZteBf3zlRLjarPbuW3GjK9%2FwsSYcoW60sswrjORPOjrh7bWRb2v4ZoNRqVmlDiJHH7j9o8gGI1LxiLYMCXE0gLAYTK9GvHCnjeYeYQUjzhphWtW%2FQyNZEGXAsk%2FcIboVk3yoDcOtel3luAWGIujzfdGKyFxg0uY43x8wMjJEm9lOMLYcGOk8Tm9lbXvfnWeGYP%2FSOjzgWikUmCHpdAP1XlDClnAhrttxaBgqMJNsQC3Ow0m5Da1vw73v%2FUZRrtQsxhv4xhhCHd9yGMISM%2Fvv5RSoeK4JVYrLny62cJLKy8s5%2Bcwb4lSPPOUeFbXwv3uLh9Ty5gFl%2FfzV9ONbun1yotNu7316u3gNP2fGBa98yRbzG02vpkWsex%2FySy0VIhbdYnvsAWIE5jQc4p6npZyThDF7%2BHKcVRlatG1IRNRR%2FSgKb%2BIZ84gSY33q4P2fyU6vJsFOJIs3y1Bans23CpW96KWZ5VYg7pY925SuhG1hLdoKehfW60%2FY1TNtysWDVSL4p6levX%2BnXa%2B1r48QxOPC7wreErZkQ8KMeuxCTL2eWW%2FrFMdspqV5t0Zt6uBYuqs%2BAynphjbXeyJyzKmaoldljcLlCM6%2FS%2BMMasgSAA4SUj1EiJwm1YGOtnb9gQAucM4Atpk%2B%2BSyIZV%2F%2Bc6aBws%2Fo2GV4MlJ23GfcQaSJNQoelks%2BoMIe5hSZo6IOi%2FVITri9C9KHilQcU7L4B3yqe4StqqvQ%2BpiZqGPEnBosiJXhiFFh5T4fKuPoLK1%2F4q570SLFSgJ4W8CLNgDS7J1BfC88nuGCCsB2cwVRtq0FnHdu5T5ExG%2BWxKTzsRue%2BC6nrwvUU4hS7LZycQcfJWnuTEROFn%2BSYZCocLFDnOd2t7U70Wk5mvm3ploSJRvy3gBtOEPQXvTjXcn4ZAkSOVVaUNU8zHnFQQFkuvt%2FvG2xz4f5258qkpFtdIV5MU3FHCV5gSqu6w5OEHSXHxBP1Co15ATJv55jKr08iEOOyJT%2FJy%2FLc%2B3cRvP9PvTLomE7748o2YnQNjg0Fj8%2BNH%2BQ4qzt3LdMLnXlijr%2BmEZYRZ%2FSaFaNqc18S6PmvapBQqCG7WBmnTVq2eX2oaZsYZJv75vMzjFPfm486%2FjqMmCfboeu406Eeslv7BUWW1dY3z%2F6KeDKrVwsV96mryI9mAd31%2BlH4io3Jt1cM%2By15nlibAjbun08bIwA3SQlmdHbdTtplYnclZ07m1rtliD%2F6tzWtBppdCxHKkohtic6a%2FqbFzPTT8zOMJg1YO8EbpO61LPKf5JsKmYbO9%2FGbZi1gs3WnAQm16jhozkaSwjirWYMe0IMM4IpJ6%2FuzXPXRaIdrEsV128rGIcVSTFJDgWzUfI8tX0SQvl7JSOH7tGkhSrC3HdfnOzZ4FZzdoszbc9Nb3sMuyYTb6QWfuUSmxyB8Vo6c%3D
		requestContent0248 = new String(Lib.binaryReplace(requestContent0248.getBytes(), binarySearchPattern0248_1, java.net.URLEncoder.encode(C_Eventval1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0248 = Lib.replaceTextPattern(requestContent0248, "684F7B59", C_Vsgen1, 0);		// search and replace content fragment "684F7B59" with variable 'C_Vsgen1' on all occurrences

		String requestHeader0248 = "POST " + requestFile0248 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0248.length() + "\r\n" + 		// Content-Length: 13604
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReports.aspx\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0248, requestHost0248, requestPort0248, requestHeader0248, requestContent0248.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0248 = null;		// support garbage collector to reduce memory
		requestContent0248 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 12550
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Global Onboarding Process");		// Test [248] <- Index 248
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		regExpBasedExtractor = new RegExpBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Viewstate2'
		RegExpBasedExtractorItem regExpBasedContentExtractorItem0248_1 = new RegExpBasedExtractorItem( "id=\"__VIEWSTATE\" value=\"(.*?)\" />" ,1,1,false,false,0,false);
		regExpBasedExtractor.addRegExpBasedExtractorItem(regExpBasedContentExtractorItem0248_1);

		// setup var extractor for 'C_Eventval2'
		RegExpBasedExtractorItem regExpBasedContentExtractorItem0248_2 = new RegExpBasedExtractorItem( "id=\"__EVENTVALIDATION\" value=\"(.*?)\" />" ,1,1,false,false,0,false);
		regExpBasedExtractor.addRegExpBasedExtractorItem(regExpBasedContentExtractorItem0248_2);

		regExpBasedExtractor.extractText();
		regExpBasedExtractor = new RegExpBasedExtractor(testURL.getHeaderString());

		regExpBasedExtractor.extractText();
		try
		{
			// extract var 'C_Viewstate2'
			C_Viewstate2 = regExpBasedContentExtractorItem0248_1.getResultText();
			log("<<< C_Viewstate2 = " + C_Viewstate2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Viewstate2!= null && C_Viewstate2.trim().length() == 0)
			{
				C_Viewstate2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Viewstate2' ends up with an empty string - a substitute value was set");
				log("<<< C_Viewstate2 = " + C_Viewstate2);
			}
		}
		catch (Exception e) { C_Viewstate2 = null; log(e); }
		if (C_Viewstate2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Viewstate2' from regexp based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Eventval2'
			C_Eventval2 = regExpBasedContentExtractorItem0248_2.getResultText();
			log("<<< C_Eventval2 = " + C_Eventval2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Eventval2!= null && C_Eventval2.trim().length() == 0)
			{
				C_Eventval2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Eventval2' ends up with an empty string - a substitute value was set");
				log("<<< C_Eventval2 = " + C_Eventval2);
			}
		}
		catch (Exception e) { C_Eventval2 = null; log(e); }
		if (C_Eventval2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Eventval2' from regexp based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [249] <- WEB ADMIN Index 249 ---
		String requestProt0249 = "https";
		String requestHost0249 = "onboarding4preview.sapsf.com";
		int    requestPort0249 = 443;
		String requestFile0249 = "/ONB/WebResource.axd" +
				"?d=fybBd7khtgSslZUddm0l53Hj_nf5KMKCn7ie35zzf6aAsjlRlnAwkrTX5SPYUDB-IR_2DdKdPFWYsmPfHCM05PUqdP81" +
				"&t=636765215060000000";
		String requestHeader0249 = "GET " + requestFile0249 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0249, requestHost0249, requestPort0249, requestHeader0249, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0249 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [250] <- WEB ADMIN Index 250 ---
		log();
		log("# title: Action Completed");
		String requestProt0250 = "https";
		String requestHost0250 = "onboarding4preview.sapsf.com";
		int    requestPort0250 = 443;
		String requestFile0250 = "/ONB/FrameReportsList.aspx";
		String requestHeader0250 = "GET " + requestFile0250 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReports.aspx\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0250, requestHost0250, requestPort0250, requestHeader0250, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0250 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2741
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Action Completed");		// Test [250] <- Index 250
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [251] <- WEB ADMIN Index 251 ---
		String requestProt0251 = "https";
		String requestHost0251 = "hcm4preview.sapsf.com";
		int    requestPort0251 = 443;
		String requestFile0251 = "/public/theme-api/info/tctest;jsonp=loadThemeInfo";
		String requestHeader0251 = "GET " + requestFile0251 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0251, requestHost0251, requestPort0251, requestHeader0251, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0251 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [252] <- WEB ADMIN Index 252 ---
		String requestProt0252 = "https";
		String requestHost0252 = "hcm4preview.sapsf.com";
		int    requestPort0252 = 443;
		String requestFile0252 = "/public/theme-api/info/tctest;jsonp=loadThemeInfo";
		String requestHeader0252 = "GET " + requestFile0252 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReportsList.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0252, requestHost0252, requestPort0252, requestHeader0252, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0252 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;



		// all http requests of page #5 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #6.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #6: SubmitSearch
		// # ---------------------



		// --- HTTP REQUEST: Test [254] <- WEB ADMIN Index 254 ---
		log();
		log("# title: Reports");
		String requestProt0254 = "https";
		String requestHost0254 = "onboarding4preview.sapsf.com";
		int    requestPort0254 = 443;
		String requestFile0254 = "/ONB/FrameReports.aspx";
		String requestContent0254 = 
				"__LASTFOCUS=" +
				"&__EVENTTARGET=" +
				"&__EVENTARGUMENT=" +
				"&__VIEWSTATE=" + java.net.URLEncoder.encode(C_Viewstate2) +		// recorded value = k4YmCJ02qHl3Hbur8gdU2ZXvTpZyM90xsNPuBKFyyL%2F2VgsU38%2BUgrDrD%2F1Hu1LpAmYaDlJfZD5bGV1CHTDpqvsb5otroXc8dvzIosoyG9HmRMSbsTYmsbhVbYrN6QkLydnDtjvHw5cDoOFb%2FIqE2TwZbxi1mVr3eQxb%2BD6OpQ3Zq49s8f9BMPlVGi7sqYYt0Hcey6aaad4MB8I4%2FdyvavZEPl9TEOtNpC316E2xyxuALCpdJSCIxk%2FqrNzpkzwAD5nEQzDXbRSqkDPCxiGhGWeMSaM8MZHFoBmbn9XxzqJdkJ9s%2Fi7TvjULlvSFXaKWverTFPf6Ao8uauU0PaYSsupLgGCJCdyeP7Pk2r8pbRJaM2zsDszOGf%2F5EXIKDBMAdrJpBv2r4LvQj%2B9WTqy%2BtIULioDETh9Wmp9wO4BVttHyunQKBhsQhl6U3gualE%2F2eihD%2F5NbYTJ%2BcNGaHs7qRUOPwFr88fl2Y%2FKkqdmIpt0pp%2BoV3SBf6TcwTFevG0ft7e9NPQMGgqTWOAPOtLtE5f%2B7mUgDQ08So4GJFYVzNaQjKonaKSo0v12DXDhDv5lggZFyHVPWLIaHVpjyzcdmZSx9f7DiEcubaFCxxtyFcWxKPT%2FSemWcSmTcyFR8LNtU6hIGx7TKdkWDNrfPzqvZ7ZkHqfwMD55nB4GDQ2DGAp4lHBdM2sd%2Ba%2B9BvKN%2F%2Bu0OYq9rtmFyag0SwLGgAgeb4CZKWOfkzho6HMZYE91rTjlTrByaII3bym1pL27wZx64Iv6qHaMyzoJuT3AqUyb5S19pfjetyiLTb1YVhtG%2FgxitAL21B5bNEBv%2FCCHDoj5r%2B91mm2fONMKDXer5UyAy4w3ozhBaUBuY3iR%2BLFN9Gbh0JiLBjmVQ%2F5qb1%2F2bNOtxzq0ZO6z8p6X5TA1jhcLKJN1ZSuqaFUkb%2BT%2B%2FIBQQRxnli3aFkIRwa6ch70TZqzIxSg81iz0rTr%2B%2FIpQdu8E6vOaMDN2B0KT%2FQG0Ya9zoC%2BekSLbU9CeKyndZ9RIYyNq6dSDSySirUp5eh3EeDBki3NChkhgK8VjNLK3w2bswVoP6GvoOJ1sQe%2FLFpzlzxE%2FBRpNHaI4C5MLY9iaKUg5zWRIFziy1EeprEFgKLCQ6qG7GaWztutt1pqCzQ7IZf4NPkOvAtzZ%2BAYyhPyxOhrZHa%2BXukcO%2BQ%2FRQcqtBvjHpWzZFNpTdx%2BELTF2KKEa2hIi4Z0cG0eiDhtBk%2FK%2B522erbIafuhUJeRoCNcGrGEecnJf1XZeB9zT1hF5G4bxBkKeAHqutbs7GCW6aGoDzVV97AuJFP%2FTK8YOohNm3Mi1pi1Snu1EdjF%2FOdghO0y6fXDJSYky15%2Bde0R%2BagBQYQWP9UGyukoqo5fFbEvDLnGhM8JzCua6trHLgy%2FrnEAmJrvPOXvo%2BcyGOQr%2FSKxjJvSy9%2Buis4LQOZuSv2wVCh7ej4jsNJ3h1bIaxppVrBmqYfeJbPuhektLKxay9sBF8g%2Fjzs%2Bc29Tznfz861JTNKhMeWKyPYHE02Km2wHc3Pdt%2BWaAGpghgtB5ZK0676QTO7Coig1p7fvJm5mShomVMg8N5%2BuBtfUbFuwXg7h3avYF91LT7D5EJxFkBjbi3kUe%2BENdNnkfLJi6EHqSmdl%2FMIT%2BbxK%2FVO3W9wHoeIve11o5qwvmmtH62%2BHaVe0zSbM6PfZyTvXQWKocCXxQF%2B1Zsc4qcxd%2FnYCv1UjqF3RkHh2fvDa6Nxb%2F7UkV7FjM%2FoYVYuCFpA6%2FzYsyaRssERsvtwxouJRDa86xJ7pNKVlRSPyvc1z6g88DcelaCkh%2BCharvz1FYvoTvg4eNea90SIfhshWwHrOXGV4U2SBPyCtdaIii9AttsNJoG8vXi%2FGke2skXYReXg3bHWLrVG7VA97UW7Fvm9pPv3u9Cc%2FrZbpv%2BLc%2Fo1IGOfdN%2Bubmorxfb50KwLHDJ4w8i9kd47f3jXHyBUVY4ds1aBZ6sKuun7VXrKCFKknyKEdp0YtTyd9LPAMaJhhpvFq9jBfgWcrHAD7qce0T9nF9XZCX5hla5cQs3OWEpfmTYUvr8XH5KefCEMiZtcZim9hph6IXce2azjjg2T7fDhn1qOhXeRq0Ln8U7nd3KnmoE0ByeSjGilTe3rQIGEL1tkK0lbxNTWzZrmAanrnJru0RFiL6%2F6jv17wIbfuLxLVnw%2B9bKBdjXfdqkl80OG7cGukEtbZnV1f%2Fpte61%2FaFLoGXUUZ14x2gB4uH9ABDmHCDRxl1fqQSQAr6cPcMEGc1oq1RsoixBi9hTAgSU7AseBsnlWlqym8Ki%2BVhu6NQInd9h0pC9adYjTPjpPNlBkXzn1c8G0%2BWkhKU8m7evVkmekH52G3jRO%2BoUT9OXebf8uRTa83WQFJIykqotLGw1KTaTRk3NVVbE8EAqNh0oY%2BqfSKTNDJSxuVM9RtKUOY7xXcmUMPiLhv0%2Floy1z2fCXN9FoPFJ0rQ9fk7qdf0tZnPPuEzcPMHaKRPgs4hWGDJPpvGw9tL%2F2PfgNZhAboQIPVjyBBL3rDEFbpM0%2FuI7dzdhYlbswR4bXFP33uRTcbUu4HhwW26KT59KhTqFIQuIG2oLLqH%2FQanEihNXUY44sa464ZC%2Fn52kkIvaQWVJz26U%2FKKf4Dilje5O1%2F%2FKNnzOZ3PVX795uvetNazrpVAHtCUyR1R8m4uDII0zcflTL6nW3phc0cNsfOTLpF5r1aZIHYL07PfwnvPQmDH5kEhTPx4fRjW9upIhC7spbWwpZEoywrLpHMxF5F50s%2F%2BHiiDl5jeI3Cfi0VaMvhZ2Kgca3ZzBlnppxgEBZyWF%2BGESsZHJ63OgQP61h5sjulknPl2BvwReWXWIploxd4mWKUMxMBUv9AayTQMsjDe5mFeoKANam%2FoCZHJNBemqCkrmP5poYkrrYWGdAMYzMynqVniqQHm1BDjgRycpyPqjIltCJ1Xwm%2BwTNwRQULss%2F2LHPYfE6K823sT34pUl6t2WDuns5e08KZMcI2SsMRvhz%2ByGOP%2FkeyYewcNURUbMn9nTI3LkwZx5N3hrosuE7ejH1XtEkDZBjKJIxc%2FkrkBaCh0UJ3wFcWP8JKiAvOC4rkUwtHeySl6D1g0CMRRoidUfBzOwE%2FbYSskBk43KIIh8F32bWh%2Fh8zZ2KOquHYBYpWhQmW7gcuVmmplS0E%3D
				"&__VIEWSTATEGENERATOR=" + C_Vsgen1 +		// recorded value = 684F7B59
				"&__VIEWSTATEENCRYPTED=" +
				"&__EVENTVALIDATION=" + java.net.URLEncoder.encode(C_Eventval2) +		// recorded value = zNPjFfFcm22Y45ah3j6VUJImr3B4tKwmfgxl%2BbOdZEDv6Q2y4FXMg%2B9QZT5BUN5ZyMrK3Hsv77b01gIcAvGCAYt0vQ7H89SX1S3tkaaE5pufn0zywiel%2FIw%2FmZ9e%2BcUq3l1RSssRhz96L0KVL357WjRfoQL%2FKsOqoV9u0Ra91tqe6ZoYx0Vq%2Fo1Vbkx0oM5rFnKapEAMBVCc%2Ff%2B32FEZ7hF%2BSSgxvQqczvVNEHGkUMnS8lFVSc368TF7lL6kxck7CqHzx1hi9EDkYGP5qmFUyv%2B4VJgjPmZRIDEox1prFd67IaBdtM%2FCig0ME3Ti9iIEfXzyRhtyNGcXL7nm%2B%2FISNDkxwrc9xGcetFlS24B%2B66TpWtYlI31c0OD2SbqAuzYQ8a%2BfMnh2iXSQihf9yNG3uPfHuMVlSRM34bYojkwbXduSPJUwCWj7fJS1qdTpuOAri%2BYFW%2BBPRT7QgsLfdoDkgp9FnLoZw53vzp%2BskwlazSZ7JUYlbnP5xYaoHity8ehbRYUq2m3P42HIranOFzO9pHVMQmT2jLsIdjnx30xgR5R7%2FzVTg5onZKEgjwtO%2BgJ9vg8ZyqYSoTJYssXfG3SkxxLDJKrnHUJY73COST8%2B3Eh4huRSSk35vbiQkx4tvmNLNTUKgwBfGOJ0VCmgOC7FKr%2Fe5OPSm1hYrHDKbDiMrDtfajz0GQAsRwIkp7UB77iRjNx%2FOsjEzTvn8dDJD1cwddbxLRwdsEXKH%2FkX97hocbNWN3oply9ElMp%2BnI2dpCXxL6KNrnHnTn2gtMD%2BSE0dZV1yY8ggUStiFECFa%2FgxDUbUfypfhqmao0uLXp2fR32eqSq1%2Fzx8oR6YrMWpyyzGfcg8Mo8STu9wM%2BLJYbdbIMs2HLK%2B0tkmQl9XUU4XfpFZBcYGT7JIDAvtEr0U9zAlVFv0%2FysgBD%2FP0%2BvPmkTMCC8Kz85lSVUySlCd0iXTPH3CQN4cokGWvVpW8jWNTrKZNgYI%2FpQ%3D
				"&ucSearchReport%24ucReportCondition%24ddlProcess=Onboarding+Standard+Global+Process" +
				"&ucSearchReport%24ucReportCondition%24ddlFilterBy=ucSearchReport_ucReportCondition_trFilterActivity%2CActivity" +
				"&ucSearchReport%24ucReportCondition%24ddlSavedReportSettings=" +
				"&ucSearchReport%24ucReportCondition%24txtAssignedToFirstName=" +
				"&ucSearchReport%24ucReportCondition%24txtAssignedToLastName=" +
				"&ucSearchReport%24ucReportCondition%24txtAssociateFirstName=" +
				"&ucSearchReport%24ucReportCondition%24txtAssociateLastName=" +
				"&ucSearchReport%24ucReportCondition%24ddlActivity=UNCOMPLETED_SECTION2" +
				"&ucSearchReport%24ucReportCondition%24txtFirstName=" +
				"&ucSearchReport%24ucReportCondition%24txtLastName=" +
				"&ucSearchReport%24ucReportCondition%24txtOrientationDate=" +
				"&ucSearchReport%24ucReportCondition%24txtStartDate=" +
				"&ucSearchReport%24ucReportCondition%24dpReportStartDate%24txtDateValue=" +
				"&ucSearchReport%24ucReportCondition%24dpReportStartDate%24hidDateValue=" +
				"&ucSearchReport%24ucReportCondition%24dpReportEndDate%24txtDateValue=" +
				"&ucSearchReport%24ucReportCondition%24dpReportEndDate%24hidDateValue=" +
				"&ucSearchReport%24ucReportCondition%24ShowActivities=rdbShowAll" +
				"&ucSearchReport%24ucReportCondition%24hidIndexFields=ucSearchReport_ucReportCondition_trFirstName%3BucSearchReport_ucReportCondition_trLastName%3BucSearchReport_ucReportCondition_trOrientationDate%3BucSearchReport_ucReportCondition_trStartDate%3B" +
				"&ucSearchReport%24ucReportCondition%24hidSelectedField=Activity" +
				"&ucSearchReport%24ucReportCondition%24hidSelectedFieldValue=undefined" +
				"&ucSearchReport%24btnStartReport=Submit";
		byte[] binarySearchPattern0254_0 = Base64Decoder.decodeToBytes("azRZbUNKMDJxSGwzSGJ1cjhnZFUyWlh2VHBaeU05MHhzTlB1QktGeXlMJTJGMlZnc1UzOCUyQlVnckRyRCUyRjFIdTFMcEFtWWFEbEpmWkQ1YkdWMUNIVERwcXZzYjVvdHJvWGM4ZHZ6SW9zb3lHOUhtUk1TYnNUWW1zYmhWYllyTjZRa0x5ZG5EdGp2SHc1Y0RvT0ZiJTJGSXFFMlR3WmJ4aTFtVnIzZVF4YiUyQkQ2T3BRM1pxNDlzOGY5Qk1QbFZHaTdzcVlZdDBIY2V5NmFhYWQ0TUI4STQlMkZkeXZhdlpFUGw5VEVPdE5wQzMxNkUyeHl4dUFMQ3BkSlNDSXhrJTJGcXJOenBrendBRDVuRVF6RFhiUlNxa0RQQ3hpR2hHV2VNU2FNOE1aSEZvQm1ibjlYeHpxSmRrSjlzJTJGaTdUdmpVTGx2U0ZYYUtXdmVyVEZQZjZBbzh1YXVVMFBhWVNzdXBMZ0dDSkNkeWVQN1BrMnI4cGJSSmFNMnpzRHN6T0dmJTJGNUVYSUtEQk1BZHJKcEJ2MnI0THZRaiUyQjlXVHF5JTJCdElVTGlvREVUaDlXbXA5d080QlZ0dEh5dW5RS0Joc1FobDZVM2d1YWxFJTJGMmVpaEQlMkY1TmJZVEolMkJjTkdhSHM3cVJVT1B3RnI4OGZsMlklMkZLa3FkbUlwdDBwcCUyQm9WM1NCZjZUY3dURmV2RzBmdDdlOU5QUU1HZ3FUV09BUE90THRFNWYlMkI3bVVnRFEwOFNvNEdKRllWek5hUWpLb25hS1NvMHYxMkRYRGhEdjVsZ2daRnlIVlBXTElhSFZwanl6Y2RtWlN4OWY3RGlFY3ViYUZDeHh0eUZjV3hLUFQlMkZTZW1XY1NtVGN5RlI4TE50VTZoSUd4N1RLZGtXRE5yZlB6cXZaN1prSHFmd01ENTVuQjRHRFEyREdBcDRsSEJkTTJzZCUyQmElMkI5QnZLTiUyRiUyQnUwT1lxOXJ0bUZ5YWcwU3dMR2dBZ2ViNENaS1dPZmt6aG82SE1aWUU5MXJUamxUckJ5YUlJM2J5bTFwTDI3d1p4NjRJdjZxSGFNeXpvSnVUM0FxVXliNVMxOXBmamV0eWlMVGIxWVZodEclMkZneGl0QUwyMUI1Yk5FQnYlMkZDQ0hEb2o1ciUyQjkxbW0yZk9OTUtEWGVyNVV5QXk0dzNvemhCYVVCdVkzaVIlMkJMRk45R2JoMEppTEJqbVZRJTJGNXFiMSUyRjJiTk90eHpxMFpPNno4cDZYNVRBMWpoY0xLSk4xWlN1cWFGVWtiJTJCVCUyQiUyRklCUVFSeG5saTNhRmtJUndhNmNoNzBUWnF6SXhTZzgxaXowclRyJTJCJTJGSXBRZHU4RTZ2T2FNRE4yQjBLVCUyRlFHMFlhOXpvQyUyQmVrU0xiVTlDZUt5bmRaOVJJWXlOcTZkU0RTeVNpclVwNWVoM0VlREJraTNOQ2hraGdLOFZqTkxLM3cyYnN3Vm9QNkd2b09KMXNRZSUyRkxGcHpsenhFJTJGQlJwTkhhSTRDNU1MWTlpYUtVZzV6V1JJRnppeTFFZXByRUZnS0xDUTZxRzdHYVd6dHV0dDFwcUN6UTdJWmY0TlBrT3ZBdHpaJTJCQVl5aFB5eE9oclpIYSUyQlh1a2NPJTJCUSUyRlJRY3F0QnZqSHBXelpGTnBUZHglMkJFTFRGMktLRWEyaElpNFowY0cwZWlEaHRCayUyRkslMkI1MjJlcmJJYWZ1aFVKZVJvQ05jR3JHRWVjbkpmMVhaZUI5elQxaEY1RzRieEJrS2VBSHF1dGJzN0dDVzZhR29EelZWOTdBdUpGUCUyRlRLOFlPb2hObTNNaTFwaTFTbnUxRWRqRiUyRk9kZ2hPMHk2ZlhESlNZa3kxNSUyQmRlMFIlMkJhZ0JRWVFXUDlVR3l1a29xbzVmRmJFdkRMbkdoTThKekN1YTZ0ckhMZ3klMkZybkVBbUpydlBPWHZvJTJCY3lHT1FyJTJGU0t4akp2U3k5JTJCdWlzNExRT1p1U3Yyd1ZDaDdlajRqc05KM2gxYklheHBwVnJCbXFZZmVKYlB1aGVrdExLeGF5OXNCRjhnJTJGanpzJTJCYzI5VHpuZno4NjFKVE5LaE1lV0t5UFlIRTAyS20yd0hjM1BkdCUyQldhQUdwZ2hndEI1WkswNjc2UVRPN0NvaWcxcDdmdkptNW1TaG9tVk1nOE41JTJCdUJ0ZlViRnV3WGc3aDNhdllGOTFMVDdENUVKeEZrQmpiaTNrVWUlMkJFTmRObmtmTEppNkVIcVNtZGwlMkZNSVQlMkJieEslMkZWTzNXOXdIb2VJdmUxMW81cXd2bW10SDYyJTJCSGFWZTB6U2JNNlBmWnlUdlhRV0tvY0NYeFFGJTJCMVpzYzRxY3hkJTJGbllDdjFVanFGM1JrSGgyZnZEYTZOeGIlMkY3VWtWN0ZqTSUyRm9ZVll1Q0ZwQTYlMkZ6WXN5YVJzc0VSc3Z0d3hvdUpSRGE4NnhKN3BOS1ZsUlNQeXZjMXo2Zzg4RGNlbGFDa2glMkJDaGFydnoxRll2b1R2ZzRlTmVhOTBTSWZoc2hXd0hyT1hHVjRVMlNCUHlDdGRhSWlpOUF0dHNOSm9HOHZYaSUyRkdrZTJza1hZUmVYZzNiSFdMclZHN1ZBOTdVVzdGdm05cFB2M3U5Q2MlMkZyWmJwdiUyQkxjJTJGbzFJR09mZE4lMkJ1Ym1vcnhmYjUwS3dMSERKNHc4aTlrZDQ3ZjNqWEh5QlVWWTRkczFhQlo2c0t1dW43VlhyS0NGS2tueUtFZHAwWXRUeWQ5TFBBTWFKaGhwdkZxOWpCZmdXY3JIQUQ3cWNlMFQ5bkY5WFpDWDVobGE1Y1FzM09XRXBmbVRZVXZyOFhINUtlZkNFTWladGNaaW05aHBoNklYY2UyYXpqamcyVDdmRGhuMXFPaFhlUnEwTG44VTduZDNLbm1vRTBCeWVTakdpbFRlM3JRSUdFTDF0a0swbGJ4TlRXelpybUFhbnJuSnJ1MFJGaUw2JTJGNmp2MTd3SWJmdUx4TFZudyUyQjliS0JkalhmZHFrbDgwT0c3Y0d1a0V0YlpuVjFmJTJGcHRlNjElMkZhRkxvR1hVVVoxNHgyZ0I0dUg5QUJEbUhDRFJ4bDFmcVFTUUFyNmNQY01FR2Mxb3ExUnNvaXhCaTloVEFnU1U3QXNlQnNubFdscXltOEtpJTJCVmh1Nk5RSW5kOWgwcEM5YWRZalRQanBQTmxCa1h6bjFjOEcwJTJCV2toS1U4bTdldlZrbWVrSDUyRzNqUk8lMkJvVVQ5T1hlYmY4dVJUYTgzV1FGSkl5a3FvdExHdzFLVGFUUmszTlZWYkU4RUFxTmgwb1klMkJxZlNLVE5ESlN4dVZNOVJ0S1VPWTd4WGNtVU1QaUxodjAlMkZsb3kxejJmQ1hOOUZvUEZKMHJROWZrN3FkZjB0Wm5QUHVFemNQTUhhS1JQZ3M0aFdHREpQcHZHdzl0TCUyRjJQZmdOWmhBYm9RSVBWanlCQkwzckRFRmJwTTAlMkZ1STdkemRoWWxic3dSNGJYRlAzM3VSVGNiVXU0SGh3VzI2S1Q1OUtoVHFGSVF1SUcyb0xMcUglMkZRYW5FaWhOWFVZNDRzYTQ2NFpDJTJGbjUya2tJdmFRV1ZKejI2VSUyRktLZjREaWxqZTVPMSUyRiUyRktObnpPWjNQVlg3OTV1dmV0TmF6cnBWQUh0Q1V5UjFSOG00dURJSTB6Y2ZsVEw2blczcGhjMGNOc2ZPVExwRjVyMWFaSUhZTDA3UGZ3bnZQUW1ESDVrRWhUUHg0ZlJqVzl1cEloQzdzcGJXd3BaRW95d3JMcEhNeEY1RjUwcyUyRiUyQkhpaURsNWplSTNDZmkwVmFNdmhaMktnY2EzWnpCbG5wcHhnRUJaeVdGJTJCR0VTc1pISjYzT2dRUDYxaDVzanVsa25QbDJCdndSZVdYV0lwbG94ZDRtV0tVTXhNQlV2OUFheVRRTXNqRGU1bUZlb0tBTmFtJTJGb0NaSEpOQmVtcUNrcm1QNXBvWWtycllXR2RBTVl6TXlucVZuaXFRSG0xQkRqZ1J5Y3B5UHFqSWx0Q0oxWHdtJTJCd1ROd1JRVUxzcyUyRjJMSFBZZkU2SzgyM3NUMzRwVWw2dDJXRHVuczVlMDhLWk1jSTJTc01Sdmh6JTJCeUdPUCUyRmtleVlld2NOVVJVYk1uOW5USTNMa3daeDVOM2hyb3N1RTdlakgxWHRFa0RaQmpLSkl4YyUyRmtya0JhQ2gwVUozd0ZjV1A4SktpQXZPQzRya1V3dEhleVNsNkQxZzBDTVJSb2lkVWZCek93RSUyRmJZU3NrQms0M0tJSWg4RjMyYldoJTJGaDh6WjJLT3F1SFlCWXBXaFFtVzdnY3VWbW1wbFMwRSUzRA==");		// note: the search pattern value is base 64 encoded. decoded value = k4YmCJ02qHl3Hbur8gdU2ZXvTpZyM90xsNPuBKFyyL%2F2VgsU38%2BUgrDrD%2F1Hu1LpAmYaDlJfZD5bGV1CHTDpqvsb5otroXc8dvzIosoyG9HmRMSbsTYmsbhVbYrN6QkLydnDtjvHw5cDoOFb%2FIqE2TwZbxi1mVr3eQxb%2BD6OpQ3Zq49s8f9BMPlVGi7sqYYt0Hcey6aaad4MB8I4%2FdyvavZEPl9TEOtNpC316E2xyxuALCpdJSCIxk%2FqrNzpkzwAD5nEQzDXbRSqkDPCxiGhGWeMSaM8MZHFoBmbn9XxzqJdkJ9s%2Fi7TvjULlvSFXaKWverTFPf6Ao8uauU0PaYSsupLgGCJCdyeP7Pk2r8pbRJaM2zsDszOGf%2F5EXIKDBMAdrJpBv2r4LvQj%2B9WTqy%2BtIULioDETh9Wmp9wO4BVttHyunQKBhsQhl6U3gualE%2F2eihD%2F5NbYTJ%2BcNGaHs7qRUOPwFr88fl2Y%2FKkqdmIpt0pp%2BoV3SBf6TcwTFevG0ft7e9NPQMGgqTWOAPOtLtE5f%2B7mUgDQ08So4GJFYVzNaQjKonaKSo0v12DXDhDv5lggZFyHVPWLIaHVpjyzcdmZSx9f7DiEcubaFCxxtyFcWxKPT%2FSemWcSmTcyFR8LNtU6hIGx7TKdkWDNrfPzqvZ7ZkHqfwMD55nB4GDQ2DGAp4lHBdM2sd%2Ba%2B9BvKN%2F%2Bu0OYq9rtmFyag0SwLGgAgeb4CZKWOfkzho6HMZYE91rTjlTrByaII3bym1pL27wZx64Iv6qHaMyzoJuT3AqUyb5S19pfjetyiLTb1YVhtG%2FgxitAL21B5bNEBv%2FCCHDoj5r%2B91mm2fONMKDXer5UyAy4w3ozhBaUBuY3iR%2BLFN9Gbh0JiLBjmVQ%2F5qb1%2F2bNOtxzq0ZO6z8p6X5TA1jhcLKJN1ZSuqaFUkb%2BT%2B%2FIBQQRxnli3aFkIRwa6ch70TZqzIxSg81iz0rTr%2B%2FIpQdu8E6vOaMDN2B0KT%2FQG0Ya9zoC%2BekSLbU9CeKyndZ9RIYyNq6dSDSySirUp5eh3EeDBki3NChkhgK8VjNLK3w2bswVoP6GvoOJ1sQe%2FLFpzlzxE%2FBRpNHaI4C5MLY9iaKUg5zWRIFziy1EeprEFgKLCQ6qG7GaWztutt1pqCzQ7IZf4NPkOvAtzZ%2BAYyhPyxOhrZHa%2BXukcO%2BQ%2FRQcqtBvjHpWzZFNpTdx%2BELTF2KKEa2hIi4Z0cG0eiDhtBk%2FK%2B522erbIafuhUJeRoCNcGrGEecnJf1XZeB9zT1hF5G4bxBkKeAHqutbs7GCW6aGoDzVV97AuJFP%2FTK8YOohNm3Mi1pi1Snu1EdjF%2FOdghO0y6fXDJSYky15%2Bde0R%2BagBQYQWP9UGyukoqo5fFbEvDLnGhM8JzCua6trHLgy%2FrnEAmJrvPOXvo%2BcyGOQr%2FSKxjJvSy9%2Buis4LQOZuSv2wVCh7ej4jsNJ3h1bIaxppVrBmqYfeJbPuhektLKxay9sBF8g%2Fjzs%2Bc29Tznfz861JTNKhMeWKyPYHE02Km2wHc3Pdt%2BWaAGpghgtB5ZK0676QTO7Coig1p7fvJm5mShomVMg8N5%2BuBtfUbFuwXg7h3avYF91LT7D5EJxFkBjbi3kUe%2BENdNnkfLJi6EHqSmdl%2FMIT%2BbxK%2FVO3W9wHoeIve11o5qwvmmtH62%2BHaVe0zSbM6PfZyTvXQWKocCXxQF%2B1Zsc4qcxd%2FnYCv1UjqF3RkHh2fvDa6Nxb%2F7UkV7FjM%2FoYVYuCFpA6%2FzYsyaRssERsvtwxouJRDa86xJ7pNKVlRSPyvc1z6g88DcelaCkh%2BCharvz1FYvoTvg4eNea90SIfhshWwHrOXGV4U2SBPyCtdaIii9AttsNJoG8vXi%2FGke2skXYReXg3bHWLrVG7VA97UW7Fvm9pPv3u9Cc%2FrZbpv%2BLc%2Fo1IGOfdN%2Bubmorxfb50KwLHDJ4w8i9kd47f3jXHyBUVY4ds1aBZ6sKuun7VXrKCFKknyKEdp0YtTyd9LPAMaJhhpvFq9jBfgWcrHAD7qce0T9nF9XZCX5hla5cQs3OWEpfmTYUvr8XH5KefCEMiZtcZim9hph6IXce2azjjg2T7fDhn1qOhXeRq0Ln8U7nd3KnmoE0ByeSjGilTe3rQIGEL1tkK0lbxNTWzZrmAanrnJru0RFiL6%2F6jv17wIbfuLxLVnw%2B9bKBdjXfdqkl80OG7cGukEtbZnV1f%2Fpte61%2FaFLoGXUUZ14x2gB4uH9ABDmHCDRxl1fqQSQAr6cPcMEGc1oq1RsoixBi9hTAgSU7AseBsnlWlqym8Ki%2BVhu6NQInd9h0pC9adYjTPjpPNlBkXzn1c8G0%2BWkhKU8m7evVkmekH52G3jRO%2BoUT9OXebf8uRTa83WQFJIykqotLGw1KTaTRk3NVVbE8EAqNh0oY%2BqfSKTNDJSxuVM9RtKUOY7xXcmUMPiLhv0%2Floy1z2fCXN9FoPFJ0rQ9fk7qdf0tZnPPuEzcPMHaKRPgs4hWGDJPpvGw9tL%2F2PfgNZhAboQIPVjyBBL3rDEFbpM0%2FuI7dzdhYlbswR4bXFP33uRTcbUu4HhwW26KT59KhTqFIQuIG2oLLqH%2FQanEihNXUY44sa464ZC%2Fn52kkIvaQWVJz26U%2FKKf4Dilje5O1%2F%2FKNnzOZ3PVX795uvetNazrpVAHtCUyR1R8m4uDII0zcflTL6nW3phc0cNsfOTLpF5r1aZIHYL07PfwnvPQmDH5kEhTPx4fRjW9upIhC7spbWwpZEoywrLpHMxF5F50s%2F%2BHiiDl5jeI3Cfi0VaMvhZ2Kgca3ZzBlnppxgEBZyWF%2BGESsZHJ63OgQP61h5sjulknPl2BvwReWXWIploxd4mWKUMxMBUv9AayTQMsjDe5mFeoKANam%2FoCZHJNBemqCkrmP5poYkrrYWGdAMYzMynqVniqQHm1BDjgRycpyPqjIltCJ1Xwm%2BwTNwRQULss%2F2LHPYfE6K823sT34pUl6t2WDuns5e08KZMcI2SsMRvhz%2ByGOP%2FkeyYewcNURUbMn9nTI3LkwZx5N3hrosuE7ejH1XtEkDZBjKJIxc%2FkrkBaCh0UJ3wFcWP8JKiAvOC4rkUwtHeySl6D1g0CMRRoidUfBzOwE%2FbYSskBk43KIIh8F32bWh%2Fh8zZ2KOquHYBYpWhQmW7gcuVmmplS0E%3D
		requestContent0254 = new String(Lib.binaryReplace(requestContent0254.getBytes(), binarySearchPattern0254_0, java.net.URLEncoder.encode(C_Viewstate2).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[] binarySearchPattern0254_1 = Base64Decoder.decodeToBytes("ek5QakZmRmNtMjJZNDVhaDNqNlZVSkltcjNCNHRLd21mZ3hsJTJCYk9kWkVEdjZRMnk0RlhNZyUyQjlRWlQ1QlVONVp5TXJLM0hzdjc3YjAxZ0ljQXZHQ0FZdDB2UTdIODlTWDFTM3RrYWFFNXB1Zm4wenl3aWVsJTJGSXclMkZtWjllJTJCY1VxM2wxUlNzc1Joejk2TDBLVkwzNTdXalJmb1FMJTJGS3NPcW9WOXUwUmE5MXRxZTZab1l4MFZxJTJGbzFWYmt4MG9NNXJGbkthcEVBTUJWQ2MlMkZmJTJCMzJGRVo3aEYlMkJTU2d4dlFxY3p2Vk5FSEdrVU1uUzhsRlZTYzM2OFRGN2xMNmt4Y2s3Q3FIengxaGk5RURrWUdQNXFtRlV5diUyQjRWSmdqUG1aUklERW94MXByRmQ2N0lhQmR0TSUyRkNpZzBNRTNUaTlpSUVmWHp5Umh0eU5HY1hMN25tJTJCJTJGSVNORGt4d3JjOXhHY2V0RmxTMjRCJTJCNjZUcFd0WWxJMzFjME9EMlNicUF1ellROGElMkJmTW5oMmlYU1FpaGY5eU5HM3VQZkh1TVZsU1JNMzRiWW9qa3diWGR1U1BKVXdDV2o3ZkpTMXFkVHB1T0FyaSUyQllGVyUyQkJQUlQ3UWdzTGZkb0RrZ3A5Rm5Mb1p3NTN2enAlMkJza3dsYXpTWjdKVVlsYm5QNXhZYW9IaXR5OGVoYlJZVXEybTNQNDJISXJhbk9Gek85cEhWTVFtVDJqTHNJZGpueDMweGdSNVI3JTJGelZUZzVvblpLRWdqd3RPJTJCZ0o5dmc4WnlxWVNvVEpZc3NYZkczU2t4eExESktybkhVSlk3M0NPU1Q4JTJCM0VoNGh1UlNTazM1dmJpUWt4NHR2bU5MTlRVS2d3QmZHT0owVkNtZ09DN0ZLciUyRmU1T1BTbTFoWXJIREtiRGlNckR0ZmFqejBHUUFzUndJa3A3VUI3N2lSak54JTJGT3NqRXpUdm44ZERKRDFjd2RkYnhMUndkc0VYS0glMkZrWDk3aG9jYk5XTjNvcGx5OUVsTXAlMkJuSTJkcENYeEw2S05ybkhuVG4yZ3RNRCUyQlNFMGRaVjF5WThnZ1VTdGlGRUNGYSUyRmd4RFViVWZ5cGZocW1hbzB1TFhwMmZSMzJlcVNxMSUyRnp4OG9SNllyTVdweXl6R2ZjZzhNbzhTVHU5d00lMkJMSlliZGJJTXMySExLJTJCMHRrbVFsOVhVVTRYZnBGWkJjWUdUN0pJREF2dEVyMFU5ekFsVkZ2MCUyRnlzZ0JEJTJGUDAlMkJ2UG1rVE1DQzhLejg1bFNWVXlTbENkMGlYVFBIM0NRTjRjb2tHV3ZWcFc4aldOVHJLWk5nWUklMkZwUSUzRA==");		// note: the search pattern value is base 64 encoded. decoded value = zNPjFfFcm22Y45ah3j6VUJImr3B4tKwmfgxl%2BbOdZEDv6Q2y4FXMg%2B9QZT5BUN5ZyMrK3Hsv77b01gIcAvGCAYt0vQ7H89SX1S3tkaaE5pufn0zywiel%2FIw%2FmZ9e%2BcUq3l1RSssRhz96L0KVL357WjRfoQL%2FKsOqoV9u0Ra91tqe6ZoYx0Vq%2Fo1Vbkx0oM5rFnKapEAMBVCc%2Ff%2B32FEZ7hF%2BSSgxvQqczvVNEHGkUMnS8lFVSc368TF7lL6kxck7CqHzx1hi9EDkYGP5qmFUyv%2B4VJgjPmZRIDEox1prFd67IaBdtM%2FCig0ME3Ti9iIEfXzyRhtyNGcXL7nm%2B%2FISNDkxwrc9xGcetFlS24B%2B66TpWtYlI31c0OD2SbqAuzYQ8a%2BfMnh2iXSQihf9yNG3uPfHuMVlSRM34bYojkwbXduSPJUwCWj7fJS1qdTpuOAri%2BYFW%2BBPRT7QgsLfdoDkgp9FnLoZw53vzp%2BskwlazSZ7JUYlbnP5xYaoHity8ehbRYUq2m3P42HIranOFzO9pHVMQmT2jLsIdjnx30xgR5R7%2FzVTg5onZKEgjwtO%2BgJ9vg8ZyqYSoTJYssXfG3SkxxLDJKrnHUJY73COST8%2B3Eh4huRSSk35vbiQkx4tvmNLNTUKgwBfGOJ0VCmgOC7FKr%2Fe5OPSm1hYrHDKbDiMrDtfajz0GQAsRwIkp7UB77iRjNx%2FOsjEzTvn8dDJD1cwddbxLRwdsEXKH%2FkX97hocbNWN3oply9ElMp%2BnI2dpCXxL6KNrnHnTn2gtMD%2BSE0dZV1yY8ggUStiFECFa%2FgxDUbUfypfhqmao0uLXp2fR32eqSq1%2Fzx8oR6YrMWpyyzGfcg8Mo8STu9wM%2BLJYbdbIMs2HLK%2B0tkmQl9XUU4XfpFZBcYGT7JIDAvtEr0U9zAlVFv0%2FysgBD%2FP0%2BvPmkTMCC8Kz85lSVUySlCd0iXTPH3CQN4cokGWvVpW8jWNTrKZNgYI%2FpQ%3D
		requestContent0254 = new String(Lib.binaryReplace(requestContent0254.getBytes(), binarySearchPattern0254_1, java.net.URLEncoder.encode(C_Eventval2).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0254 = Lib.replaceTextPattern(requestContent0254, "684F7B59", C_Vsgen1, 0);		// search and replace content fragment "684F7B59" with variable 'C_Vsgen1' on all occurrences

		String requestHeader0254 = "POST " + requestFile0254 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0254.length() + "\r\n" + 		// Content-Length: 6085
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReports.aspx\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0254, requestHost0254, requestPort0254, requestHeader0254, requestContent0254.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0254 = null;		// support garbage collector to reduce memory
		requestContent0254 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 12274
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Report Results");		// Test [254] <- Index 254
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [255] <- WEB ADMIN Index 255 ---
		log();
		log("# title: Action Completed");
		String requestProt0255 = "https";
		String requestHost0255 = "onboarding4preview.sapsf.com";
		int    requestPort0255 = 443;
		String requestFile0255 = "/ONB/FrameReportsList.aspx";
		String requestHeader0255 = "GET " + requestFile0255 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReports.aspx\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0255, requestHost0255, requestPort0255, requestHeader0255, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0255 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 4464
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Test001");		// Test [255] <- Index 255
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [256] <- WEB ADMIN Index 256 ---
		String requestProt0256 = "https";
		String requestHost0256 = "hcm4preview.sapsf.com";
		int    requestPort0256 = 443;
		String requestFile0256 = "/public/theme-api/info/tctest;jsonp=loadThemeInfo";
		String requestHeader0256 = "GET " + requestFile0256 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReports.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0256, requestHost0256, requestPort0256, requestHeader0256, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0256 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [257] <- WEB ADMIN Index 257 ---
		String requestProt0257 = "https";
		String requestHost0257 = "hcm4preview.sapsf.com";
		int    requestPort0257 = 443;
		String requestFile0257 = "/public/theme-api/info/tctest;jsonp=loadThemeInfo";
		String requestHeader0257 = "GET " + requestFile0257 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/FrameReportsList.aspx\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0257, requestHost0257, requestPort0257, requestHeader0257, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0257 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;



		// all http requests of page #6 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #7: LogOut
		// # ---------------



		// --- HTTP REQUEST: Test [259] <- WEB ADMIN Index 259 ---
		String requestProt0259 = "https";
		String requestHost0259 = "hcm4preview.sapsf.com";
		int    requestPort0259 = 443;
		String requestFile0259 = "/eduPhoto/view" +
				"?companyId=tctest" +
				"&photo_type=liveProfile" +
				"&user_id=SIT20018" +
				"&mod=";
		requestFile0259 = Lib.replaceTextPattern(requestFile0259, "SIT20018", P_UserID, 0);		// search and replace request file fragment "SIT20018" with variable 'P_UserID' on all occurrences

		String requestHeader0259 = "GET " + requestFile0259 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0259, requestHost0259, requestPort0259, requestHeader0259, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0259 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [259] <- Index 259
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [260] <- WEB ADMIN Index 260 ---
		String requestProt0260 = "https";
		String requestHost0260 = "hcm4preview.sapsf.com";
		int    requestPort0260 = 443;
		String requestFile0260 = "/sf/idp/SAML2/slo" +
				"?_s.crb=" + C_AjaxToken;		// recorded value = FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d
		requestFile0260 = Lib.replaceTextPattern(requestFile0260, "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken, 0);		// search and replace request file fragment "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d" with variable 'C_AjaxToken' on all occurrences

		String requestContent0260 = 
				"LogoutUrl=https%3A%2F%2Ftctest-stage.plateau.com%2Flearning%2Fsaml%2FSSO" +
				"&company=tctest";
		String requestHeader0260 = "POST " + requestFile0260 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0260.length() + "\r\n" + 		// Content-Length: 87
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0260, requestHost0260, requestPort0260, requestHeader0260, requestContent0260.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0260 = null;		// support garbage collector to reduce memory
		requestContent0260 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2408
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [260] <- Index 260
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [261] <- WEB ADMIN Index 261 ---
		String requestProt0261 = "https";
		String requestHost0261 = "hcm4preview.sapsf.com";
		int    requestPort0261 = 443;
		String requestFile0261 = "/sf/idp/SAML2/slo" +
				"?_s.crb=" + C_AjaxToken;		// recorded value = FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d
		requestFile0261 = Lib.replaceTextPattern(requestFile0261, "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken, 0);		// search and replace request file fragment "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d" with variable 'C_AjaxToken' on all occurrences

		String requestContent0261 = 
				"LogoutUrl=https%3A%2F%2Fmy030333.payroll.ondemand.com%2Fsap%2Fsaml2%2Fsp%2Fslo%2F200" +
				"&company=tctest";
		String requestHeader0261 = "POST " + requestFile0261 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0261.length() + "\r\n" + 		// Content-Length: 99
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0261, requestHost0261, requestPort0261, requestHeader0261, requestContent0261.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0261 = null;		// support garbage collector to reduce memory
		requestContent0261 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2419
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [261] <- Index 261
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [262] <- WEB ADMIN Index 262 ---
		String requestProt0262 = "https";
		String requestHost0262 = "hcm4preview.sapsf.com";
		int    requestPort0262 = 443;
		String requestFile0262 = "/sf/idp/SAML2/slo" +
				"?_s.crb=" + C_AjaxToken;		// recorded value = FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d
		requestFile0262 = Lib.replaceTextPattern(requestFile0262, "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken, 0);		// search and replace request file fragment "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d" with variable 'C_AjaxToken' on all occurrences

		String requestContent0262 = 
				"LogoutUrl=https%3A%2F%2Fonboarding4preview.sapsf.com%2FONB%2FSSO%2FSAML20%2FSingleLogoutService.aspx" +
				"&company=tctest";
		String requestHeader0262 = "POST " + requestFile0262 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0262.length() + "\r\n" + 		// Content-Length: 115
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0262, requestHost0262, requestPort0262, requestHeader0262, requestContent0262.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0262 = null;		// support garbage collector to reduce memory
		requestContent0262 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2438
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [262] <- Index 262
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		htmlContentParser = new HtmlContentParser(testURL, this);
		try
		{
			// extract var 'vSAMLRequest'
			vSAMLRequest = htmlContentParser.getFormTable().getForm(0).getFormItemValue("SAMLRequest");		// recorded value = nZJfb9owFMW/SuTXKvGfUUgsQsXKkEIpbQkg1pfJGAcsxXZqOxT26RegVN209WGv9557z7k/3e7NXpXBTlgnjU4BjhAIhOZmLfUmBfPZMIzBTa/rmCpJRcdmY2o/FS+1cD5oJrWj51YKaqupYU46qpkSjnpO8/79mJII0coab7gpQTBoBqVm/uS29b5yFEKjV4bZo2WrsmInxWvkWOWKiBsFHyZfYZ4/wOMygmDeqEpxDpILu5NcRMxVexBkgxT8aLU55h0Rh+2Ek7CFUREyViShaCFMYrLi8apopM7VItPOM+1TQBBOQoxCQmY4ptcdSpIoTtAzCKaCuWPQz24rT1Fo7YQFweICsumAN2z05GY/4vp8I3PNriMh0LsQ2nL1FzSugHJdncnAplAxfYCe+4ZxF370viSZNF7Z4H+SBENjFfP/luMInypyHRYnKa21qwSXhRRr0MuzGUEIx5dc5yTvj5ULd+SW6bXY95xe2sf+dbvUZkEev+1svbhScnyr7sQ8niebgx+O1JdlNnKxmgwP5QD5u5+bbVKsXtTyPpl/v93JTh8K9ORH06vnDS58u3pK0zfvP9zeq789d+8X
			log("<<< vSAMLRequest = " + vSAMLRequest);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && vSAMLRequest!= null && vSAMLRequest.trim().length() == 0)
			{
				vSAMLRequest = "";
				log("runtime note: the extraction of a new value for the variable 'vSAMLRequest' ends up with an empty string - a substitute value was set");
				log("<<< vSAMLRequest = " + vSAMLRequest);
			}
		}
		catch (Exception e) { vSAMLRequest = null; log(e); }
		if (vSAMLRequest == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'vSAMLRequest' from html form parameter";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'vSignature'
			vSignature = htmlContentParser.getFormTable().getForm(0).getFormItemValue("Signature");		// recorded value = IXQAJGN9jAOZhox2/s3zcBPFltAOzEseGoblunOr7vk6XW36u01qENl7dsuCyEY99ulNpmHZrQ6zipJwbC7LBm04VvgbUHzkQIT8UqLMN18xOkpJa7S4+SYLlzCjDxFEbn9bn/OfmcTIUO+TZSE/Ef7gEVsAIRPl0EdchfZ5wmA=
			log("<<< vSignature = " + vSignature);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && vSignature!= null && vSignature.trim().length() == 0)
			{
				vSignature = "";
				log("runtime note: the extraction of a new value for the variable 'vSignature' ends up with an empty string - a substitute value was set");
				log("<<< vSignature = " + vSignature);
			}
		}
		catch (Exception e) { vSignature = null; log(e); }
		if (vSignature == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'vSignature' from html form parameter";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [263] <- WEB ADMIN Index 263 ---
		String requestProt0263 = "https";
		String requestHost0263 = "hcm4preview.sapsf.com";
		int    requestPort0263 = 443;
		String requestFile0263 = "/sf/idp/SAML2/slo" +
				"?_s.crb=" + C_AjaxToken;		// recorded value = FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d
		requestFile0263 = Lib.replaceTextPattern(requestFile0263, "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken, 0);		// search and replace request file fragment "FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d" with variable 'C_AjaxToken' on all occurrences

		String requestContent0263 = 
				"LogoutUrl=https%3A%2F%2Fanalytics4preview.sapsf.com%2FProduction%2FHrmlLogout.aspx" +
				"&company=tctest";
		String requestHeader0263 = "POST " + requestFile0263 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0263.length() + "\r\n" + 		// Content-Length: 97
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0263, requestHost0263, requestPort0263, requestHeader0263, requestContent0263.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0263 = null;		// support garbage collector to reduce memory
		requestContent0263 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2414
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "document.forms[0].submit();");		// Test [263] <- Index 263
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [264] <- WEB ADMIN Index 264 ---
		String requestProt0264 = "https";
		String requestHost0264 = "onboarding4preview.sapsf.com";
		int    requestPort0264 = 443;
		String requestFile0264 = "/ONB/SSO/SAML20/SingleLogoutService.aspx" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(vSAMLRequest) +		// recorded value = nZJfb9owFMW%2FSuTXKvGfUUgsQsXKkEIpbQkg1pfJGAcsxXZqOxT26RegVN209WGv9557z7k%2F3e7NXpXBTlgnjU4BjhAIhOZmLfUmBfPZMIzBTa%2FrmCpJRcdmY2o%2FFS%2B1cD5oJrWj51YKaqupYU46qpkSjnpO8%2F79mJII0coab7gpQTBoBqVm%2FuS29b5yFEKjV4bZo2WrsmInxWvkWOWKiBsFHyZfYZ4%2FwOMygmDeqEpxDpILu5NcRMxVexBkgxT8aLU55h0Rh%2B2Ek7CFUREyViShaCFMYrLi8apopM7VItPOM%2B1TQBBOQoxCQmY4ptcdSpIoTtAzCKaCuWPQz24rT1Fo7YQFweICsumAN2z05GY%2F4vp8I3PNriMh0LsQ2nL1FzSugHJdncnAplAxfYCe%2B4ZxF370viSZNF7Z4H%2BSBENjFfP%2FluMInypyHRYnKa21qwSXhRRr0MuzGUEIx5dc5yTvj5ULd%2BSW6bXY95xe2sf%2BdbvUZkEev%2B1svbhScnyr7sQ8niebgx%2BO1JdlNnKxmgwP5QD5u5%2BbbVKsXtTyPpl%2Fv93JTh8K9ORH06vnDS58u3pK0zfvP9zeq789d%2B8X
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=" + java.net.URLEncoder.encode(vSignature);		// recorded value = IXQAJGN9jAOZhox2%2Fs3zcBPFltAOzEseGoblunOr7vk6XW36u01qENl7dsuCyEY99ulNpmHZrQ6zipJwbC7LBm04VvgbUHzkQIT8UqLMN18xOkpJa7S4%2BSYLlzCjDxFEbn9bn%2FOfmcTIUO%2BTZSE%2FEf7gEVsAIRPl0EdchfZ5wmA%3D
		String requestHeader0264 = "GET " + requestFile0264 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0264, requestHost0264, requestPort0264, requestHeader0264, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("nfXxES57cZatSuZ0lNslqtjpvSOL8wGjdaQpgSJhlDiflNtQI9vC+GHFTZ54zIgoyd8emyonpbVC31UKG7ArrbhYSR4ASKkEK1FgcJzj32pzjrChQOf5g4opgWZNBsWqpe6wLPvtw4/beDBxf7r5ID/l+r13J1iJh0c1zCDTWbA/1SMv3HfgvYD2EAkPTqUs1Y7rIzHJzKQP0P76sUOz/JE67/KmzHscS5Ahiw7c84XVeqts5xXILmo2Ls6ae96GccMfaGq/S2AKYpcie9kJfw==", C_LoginDetails);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("WbMVPqJDotOA3GeZ9te6DryoIU80lHmXLuaSj5SJbXUDquWAHPqZx46VyASGeU_P_EqJ4bjtOJhEhadiFqQAqkmjKhiY9LXZSBlegE6rwtZdoraz295-vZU2pob-LvMcphR6r0mrY2CgGgHwk7ZtvZBzs6_HfvXyOB_r2c_dLnVzYs1bjgKo1wJF9INj9N_7w8RLL4n_tCScvDutt8DL6QLLTEOAOp9JjbB_PY5fgaVdZui16wPKOQ2xVndhXbAeR9zsEOIeeG82n72ivNrpIOPG2MmHynW5HpjOcCfTM6ViIBQTEvsf7wLjarb3Bx6t_foZLEVTLIXY1BIqzi0nSsesoimncIkWwlbvr8vUurV29CTnlpbcMSfClOSut1D1xKzvYAiR5yPuxcZ_P65tXF2LDoe33j-E7Xb4e4_MXejZA1J2tgq9vbj5YUG91G_lpC-UzTZxcT1cEu_gvS40nTkhFx-gBBskSuoDhnl6RW8P-y50jrRM0B3rD5O7maGho1jSEAlBK_NMlwAy7nAGbhAv41EFp6NaDZRHJyD9OXG-bfzM0", C_AspxRoles);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FF03BDCA5D0F7D616B829CA70918053F6ADDF7A911C94E9E865FD1258CC5FC8157BF1B87EA1FCDC98A65DD0827BA027A1F85669C9696CE5DAB1C0D02B51661C9592CC220DDF76D266EA5C972F44AA497221493E0711C4F0A1185AC5C49342BE701FC2D226710FDB31EC4C3A5B6084FDECEFF032390205EE8A9F942CE5EC5D25D8C70188092867844468FACCC64B24C8DDAD461D62A0C61C3735A0705E2103B79334603FA08D591F4D1150630B45BBE7472D588F202306DA08D8EF721D1D19832EF17ACEB", C_QASFONB);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("234bj4hrg3faw0nwb0tcvlm4", C_SessionID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0264 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [265] <- WEB ADMIN Index 265 ---
		String requestProt0265 = "https";
		String requestHost0265 = "ds-aksb-a.akamaihd.net";
		int    requestPort0265 = 443;
		String requestFile0265 = "/2/492962/b" +
				"?dE=1" +
				"&cS=1" +
				"&cE=2" +
				"&rqS=2" +
				"&rsS=5" +
				"&rsE=122" +
				"&sS=-5" +
				"&dl=124" +
				"&di=220" +
				"&fp=" +
				"&dlS=228" +
				"&dlE=229" +
				"&dc=241" +
				"&leS=241" +
				"&leE=244" +
				"&to=" +
				"&ol=0" +
				"&cr=15" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/sf/idp/SAML2/slo" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A69.0%29%20Gecko/20100101%20Firefox/69.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=24.244.17.176" +
				"&t=" +
				"&rid=1a9b27d5" +
				"&r=11746" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=6037fc00" +
				"&akTX=1" +
				"&akTI=1a9b27d5" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0265 = "GET " + requestFile0265 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0265, requestHost0265, requestPort0265, requestHeader0265, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0265 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [266] <- WEB ADMIN Index 266 ---
		String requestProt0266 = "https";
		String requestHost0266 = "ds-aksb-a.akamaihd.net";
		int    requestPort0266 = 443;
		String requestFile0266 = "/2/492962/b" +
				"?dE=0" +
				"&cS=0" +
				"&cE=2" +
				"&rqS=2" +
				"&rsS=5" +
				"&rsE=134" +
				"&sS=-6" +
				"&dl=142" +
				"&di=248" +
				"&fp=" +
				"&dlS=249" +
				"&dlE=250" +
				"&dc=253" +
				"&leS=253" +
				"&leE=257" +
				"&to=" +
				"&ol=0" +
				"&cr=23" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/sf/idp/SAML2/slo" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A69.0%29%20Gecko/20100101%20Firefox/69.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=24.244.17.176" +
				"&t=" +
				"&rid=1a9c1b08" +
				"&r=11746" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=6037fc00" +
				"&akTX=1" +
				"&akTI=1a9c1b08" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0266 = "GET " + requestFile0266 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0266, requestHost0266, requestPort0266, requestHeader0266, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0266 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [267] <- WEB ADMIN Index 267 ---
		String requestProt0267 = "https";
		String requestHost0267 = "ds-aksb-a.akamaihd.net";
		int    requestPort0267 = 443;
		String requestFile0267 = "/2/492962/b" +
				"?dE=1" +
				"&cS=1" +
				"&cE=2" +
				"&rqS=2" +
				"&rsS=5" +
				"&rsE=234" +
				"&sS=-22" +
				"&dl=238" +
				"&di=300" +
				"&fp=" +
				"&dlS=301" +
				"&dlE=302" +
				"&dc=321" +
				"&leS=321" +
				"&leE=324" +
				"&to=" +
				"&ol=0" +
				"&cr=15" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/sf/idp/SAML2/slo" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A69.0%29%20Gecko/20100101%20Firefox/69.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=24.244.17.176" +
				"&t=" +
				"&rid=1a9c2ad8" +
				"&r=11746" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=6037fc00" +
				"&akTX=1" +
				"&akTI=1a9c2ad8" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0267 = "GET " + requestFile0267 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0267, requestHost0267, requestPort0267, requestHeader0267, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0267 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [268] <- WEB ADMIN Index 268 ---
		String requestProt0268 = "https";
		String requestHost0268 = "ds-aksb-a.akamaihd.net";
		int    requestPort0268 = 443;
		String requestFile0268 = "/2/492962/b" +
				"?dE=0" +
				"&cS=0" +
				"&cE=1" +
				"&rqS=1" +
				"&rsS=4" +
				"&rsE=246" +
				"&sS=-21" +
				"&dl=254" +
				"&di=331" +
				"&fp=" +
				"&dlS=334" +
				"&dlE=335" +
				"&dc=336" +
				"&leS=336" +
				"&leE=341" +
				"&to=" +
				"&ol=0" +
				"&cr=15" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/sf/idp/SAML2/slo" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A69.0%29%20Gecko/20100101%20Firefox/69.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=24.244.17.176" +
				"&t=" +
				"&rid=1a9c2ad9" +
				"&r=11746" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=6037fc00" +
				"&akTX=1" +
				"&akTI=1a9c2ad9" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0268 = "GET " + requestFile0268 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0268, requestHost0268, requestPort0268, requestHeader0268, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0268 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [269] <- WEB ADMIN Index 269 ---
		log();
		log("# title: Login");
		String requestProt0269 = "https";
		String requestHost0269 = "tctest-stage.plateau.com";
		int    requestPort0269 = 443;
		String requestFile0269 = "/learning/saml/SSO" +
				"?SAMLRequest=nZJdb5swFIb%2FCvJtxWdCACtQRc0ikaZdG5Io683kGkMsYZtyTNrs1w9oUnWT1ovdvufjfc%2BjM71%2BE5VxZA1wJWPkWg4ymKQq57KM0XazMEN0nUyBiMqr8UqVqtVr9tIy0EY3KQG%2Fl2LUNhIrAhywJIIB1hRns7sV9iwH143SiqoKGfNukEuiB7eD1jVg29ZUd7IJmpTMqiuiGWktqoRdMdLILondm9hZ9h0Z6TxGP2nAXD8ixKQjJzTH%2FpiaoT95Nic0GAWBk7thQLpWgJalslsrdYw8x41M1zE9b%2BOG2A%2BwF1nBOHhCxpoR6ON8dUE1XI5bYA0ydhdcXQWd4eDBrfkM5euNBLpdPQeUXDgcqBjXDTty9moBqaEYIEBh87y2%2B0HP7oSayNMZ2dT%2B7H1Jct95pfP%2FSWIsVCOI%2Fne7a7mDwnOzGFpxK6FmlBec5SjJ0o3nOG54yfWe5ON9MgY9t1Tm7C0BuW8eZv6kkmrnPXw7Nu3uSvDVjbhl23AblSe9WIrRPl1CKO4Xp2ru6Ntf5SEqnl%2FE%2Fi7a%2Frg58mBmM%2BdRL9dXT6Vb6En9GMdn77%2FcPtQ%2FXjj5DQ%3D%3D" +
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=E0YD0DTJNara7dCxVjS1KZJ7hT67bIbrLHRPcXp9q0chV%2BE3APyA9B6cXsBYmvt%2BjDkp18oAMqyP%2Ffkv%2B0BEaOB4kxAKWw0Ie4gAVmnCOK27IaOQIxJEbbG65pYBP%2B6EaCahTnEr%2F%2BRFh6EgJgsLIuY4v64mYQyiQAI21N45cGM%3D";
		String requestHeader0269 = "GET " + requestFile0269 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: tctest-stage.plateau.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0269, requestHost0269, requestPort0269, requestHeader0269, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0269 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [270] <- WEB ADMIN Index 270 ---
		String requestProt0270 = "https";
		String requestHost0270 = "my030333.payroll.ondemand.com";
		int    requestPort0270 = 443;
		String requestFile0270 = "/sap/saml2/sp/slo/200" +
				"?SAMLRequest=nZJdb5swFIb%2FCvJtBbYhJMEKVFGzSKRp1eZLWW8mBwyxhG2KTVb26%2BeQpuomrRe7s87X%2B57neHL7JirnxBrNlYwB9hBwmMxUzmUZg%2B1m7o7BbTLRVFR%2BTZaqVK1ZsdeWaePYTqnJJRWDtpFEUc01kVQwTUxG1tOHJfE9ROpGGZWpCjgz28glNb3a0ZhaEwhFhwIUBIFX065RVeUpmTNBZe5lSkBNa9iLQG0flYI%2BsibTWQx%2BZKwIceYHbo6KgTsIGHIjfAjdoMgxDQ8ootnQlmrdslRqQ6WJgY9w5GLk%2Bv4Gj0k4In7kjUL8ApwVo%2Fps66tNqp4AaTVrgLO7YrMZ8A6J9GrNZzhfT6TazjrzAMmVxzETg7phJ85%2BenZ7XVw4FJDnNTw3%2BtAGaio7aDJjiU7gZ%2B2rk0erlc7%2Bx4kzV42g5t%2Fl2MN9hOdu0ZeSVuqaZbzgLAfJOt3YI%2BHx1dfFycc3WjN95pbaK78lWu6bp2k4rKTa%2BU%2FfTk27uxF8eSfu2Xa8jcrOzBci2KcLPRaP866aIXP%2FqzxGxeFV7B%2Bi7fe7Ex9NIUPPZrG6eSlxYYb1cxy%2Fa%2F%2Bl9hH94ysnvwE%3D" +
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=S3H0pzAB0%2FWs2fOFsaXx7MB17%2BHoXs1qYRdGMN%2BrtJLTn%2Fpq%2BfKITzEZ%2BF%2FAZ9iDPjSmT0HZmfpPUhjPwhW6SeaKSKHehf4VJf4l%2FMXpGEmxTdU0en%2FmpJOprg03a53oGN1RtTy%2BTojZsrppCpJSM79S%2BxMFefkxETgDROt8PGI%3D";
		String requestHeader0270 = "GET " + requestFile0270 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: my030333.payroll.ondemand.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0270, requestHost0270, requestPort0270, requestHeader0270, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0270 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [271] <- WEB ADMIN Index 271 ---
		log();
		log("# title: Object moved");
		String requestProt0271 = "https";
		String requestHost0271 = "analytics4preview.sapsf.com";
		int    requestPort0271 = 443;
		String requestFile0271 = "/Production/HrmlLogout.aspx" +
				"?SAMLRequest=nZJfb9owFMW%2FSuTXKokTCDgWoUJlaKG0ovwT68vkJQ5Yiu3U16GwT78QStVNWx%2F2eu%2B59%2Fzu0R3cHmXpHLgBoVWCAg8jh6tM50LtErReTVyCbocDYLIMKzrTO13bBX%2BpOVinmVRAL60E1UZRzUAAVUxyoDajy9HDjIYeppXRVme6RM64GRSK2dZtb20F1PeZYuXJigy6leEHwV89YBUUXqalPzc6r7Oz3v9qZHkh8BhUR%2BSk4wR9z4OcRb2o4%2BJuL3K7rNN3CYsjFzOS4U6HkG4vb6QANU8VWKZsgkIcxG6A3TBcBYRGfRrGHiHRM3IWnMEZ7bNrypaB1sANcjbX6JoOeguKtm7mY0Cfb2TQ7DrfiIbXTPaZ%2FEsaUPgir%2FzzYOg3hYqpk28z26Q68D96X0keG690%2FD8kzkQbyey%2F5YEXtBWRu0UrpbWCimeiEDxHw2W6CjEOyJXrQvL%2BSksO59xSlfPjENTWzEdRr1R6E86%2FHEy9uZFidifv%2BZqs493JTqays02nQOTj5FSOsb3%2FudvHxY8XuX2I19%2FuDqI%2F8jl%2BstPFzfMuKGyvekqSN%2B8%2F3N6rv73z8Bc%3D" +
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=Jt4QTbpqIx2mvFeB48CQJhq3ZmAA41PXsdOCQ8aIo3XD2eWr5CRn5cvTOm63epbynI2SXulJvcmQ9JCEJ7UqAnqM6aOh7j7R7n6LW5XtC4Re4dqkVUcuN0vVtPkxFXe8x4eWf4nZbAd840ACCXnezFsYsvcZ4Bm4aWVaK%2BJFUTo%3D";
		String requestHeader0271 = "GET " + requestFile0271 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0271, requestHost0271, requestPort0271, requestHeader0271, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0271 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [272] <- WEB ADMIN Index 272 ---
		String requestProt0272 = "https";
		String requestHost0272 = "tctest-stage.plateau.com";
		int    requestPort0272 = 443;
		String requestFile0272 = "/learning/user/css/styles.css;mod=c09d4043";
		String requestHeader0272 = "GET " + requestFile0272 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: tctest-stage.plateau.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://tctest-stage.plateau.com/learning/saml/SSO?SAMLRequest=nZJdb5swFIb%2FCvJtxWdCACtQRc0ikaZdG5Io683kGkMsYZtyTNrs1w9oUnWT1ovdvufjfc%2BjM71%2BE5VxZA1wJWPkWg4ymKQq57KM0XazMEN0nUyBiMqr8UqVqtVr9tIy0EY3KQG%2Fl2LUNhIrAhywJIIB1hRns7sV9iwH143SiqoKGfNukEuiB7eD1jVg29ZUd7IJmpTMqiuiGWktqoRdMdLILondm9hZ9h0Z6TxGP2nAXD8ixKQjJzTH%2FpiaoT95Nic0GAWBk7thQLpWgJalslsrdYw8x41M1zE9b%2BOG2A%2BwF1nBOHhCxpoR6ON8dUE1XI5bYA0ydhdcXQWd4eDBrfkM5euNBLpdPQeUXDgcqBjXDTty9moBqaEYIEBh87y2%2B0HP7oSayNMZ2dT%2B7H1Jct95pfP%2FSWIsVCOI%2Fne7a7mDwnOzGFpxK6FmlBec5SjJ0o3nOG54yfWe5ON9MgY9t1Tm7C0BuW8eZv6kkmrnPXw7Nu3uSvDVjbhl23AblSe9WIrRPl1CKO4Xp2ru6Ntf5SEqnl%2FE%2Fi7a%2Frg58mBmM%2BdRL9dXT6Vb6En9GMdn77%2FcPtQ%2FXjj5DQ%3D%3D&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1&Signature=E0YD0DTJNara7dCxVjS1KZJ7hT67bIbrLHRPcXp9q0chV%2BE3APyA9B6cXsBYmvt%2BjDkp18oAMqyP%2Ffkv%2B0BEaOB4kxAKWw0Ie4gAVmnCOK27IaOQIxJEbbG65pYBP%2B6EaCahTnEr%2F%2BRFh6EgJgsLIuY4v64mYQyiQAI21N45cGM%3D\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0272, requestHost0272, requestPort0272, requestHeader0272, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0272 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [273] <- WEB ADMIN Index 273 ---
		String requestProt0273 = "https";
		String requestHost0273 = "hcm4preview.sapsf.com";
		int    requestPort0273 = 443;
		String requestFile0273 = "/sf/idp/SAML2/slo/POST";
		String requestContent0273 = 
				"SAMLResponse=PHNhbWxwOkxvZ291dFJlc3BvbnNlIElEPSJTMDAxNjNlNmMtNTE4OC0xZWQ5LWJkOWYtYjk3MTQ4YTRmNDUyIiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAxOS0xMC0yMlQxODo1NzozMFoiIEluUmVzcG9uc2VUbz0iX2NlZjUxYzIzLWQwZjQtNDNlMC05MWI1LTNmZDFhNWIwOWFjNiIgRGVzdGluYXRpb249Imh0dHBzOi8vaGNtNHByZXZpZXcuc2Fwc2YuY29tL3NmL2lkcC9TQU1MMi9zbG8vUE9TVCIgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCI%2BPHNhbWw6SXNzdWVyIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPlhPQ0NMMjAwPC9zYW1sOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI1MwMDE2M2U2Yy01MTg4LTFlZDktYmQ5Zi1iOTcxNDhhNGY0NTIiPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybXM%2BPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8%2BPGRzOkRpZ2VzdFZhbHVlPjRaaE9rK1NBMHcrRmE4aHh6MnhieVkxNGgyWT08L2RzOkRpZ2VzdFZhbHVlPjwvZHM6UmVmZXJlbmNlPjwvZHM6U2lnbmVkSW5mbz48ZHM6U2lnbmF0dXJlVmFsdWU%2BR2E5amtTczRqVVdsVmlXN3dFV1ovMEgrU2VscU1FZ20yaHBXQ2pEKzdQeFNacXFoOGdMcWx2Z0h2NW54d3NpdlhsbkFBRXAvSkd2MQpxak5iM0pLdzhDVU41aHJvVTE2dURUWU55OGIvRGVwU1BvNU40TU1WZEhNTU03Ky93b1k2RXlQQmFRaEpUOWZhUzM5SytFQnVtWEtrCnQzZXRRQ1hxODE3d0RLVUY0KzVjMHl5azd6eVplczJwQXZNdXhrTjRHaFJIc3NJeXpTQXlPQStqYnB4VTZxcVEyRk8vTHZ2ekNEVEgKYlVNdERDcU5hVnJlenVwcnE2TkZ0L3NMQzlONHY1R0dabm83TnFRSzdkeGovaFRQc01kN1Vya2U0M3orMFluZ01jSkRBeUpGdStJbApZRXdrd2dxUTFiT2xkdzg3RHJ6b0JRYTk5WVdjUzJKRkRXYzBPdz09PC9kczpTaWduYXR1cmVWYWx1ZT48L2RzOlNpZ25hdHVyZT48c2FtbHA6U3RhdHVzPjxzYW1scDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlJlc3BvbmRlciIvPjxzYW1scDpTdGF0dXNNZXNzYWdlPkFuIGV4Y2VwdGlvbiB3YXMgcmFpc2VkPC9zYW1scDpTdGF0dXNNZXNzYWdlPjwvc2FtbHA6U3RhdHVzPjwvc2FtbHA6TG9nb3V0UmVzcG9uc2U%2B";
		String requestHeader0273 = "POST " + requestFile0273 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0273.length() + "\r\n" + 		// Content-Length: 2147
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://my030333.payroll.ondemand.com/sap/saml2/sp/slo/200?SAMLRequest=nZJdb5swFIb%2FCvJtBbYhJMEKVFGzSKRp1eZLWW8mBwyxhG2KTVb26%2BeQpuomrRe7s87X%2B57neHL7JirnxBrNlYwB9hBwmMxUzmUZg%2B1m7o7BbTLRVFR%2BTZaqVK1ZsdeWaePYTqnJJRWDtpFEUc01kVQwTUxG1tOHJfE9ROpGGZWpCjgz28glNb3a0ZhaEwhFhwIUBIFX065RVeUpmTNBZe5lSkBNa9iLQG0flYI%2BsibTWQx%2BZKwIceYHbo6KgTsIGHIjfAjdoMgxDQ8ootnQlmrdslRqQ6WJgY9w5GLk%2Bv4Gj0k4In7kjUL8ApwVo%2Fps66tNqp4AaTVrgLO7YrMZ8A6J9GrNZzhfT6TazjrzAMmVxzETg7phJ85%2BenZ7XVw4FJDnNTw3%2BtAGaio7aDJjiU7gZ%2B2rk0erlc7%2Bx4kzV42g5t%2Fl2MN9hOdu0ZeSVuqaZbzgLAfJOt3YI%2BHx1dfFycc3WjN95pbaK78lWu6bp2k4rKTa%2BU%2FfTk27uxF8eSfu2Xa8jcrOzBci2KcLPRaP866aIXP%2FqzxGxeFV7B%2Bi7fe7Ex9NIUPPZrG6eSlxYYb1cxy%2Fa%2F%2Bl9hH94ysnvwE%3D&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1&Signature=S3H0pzAB0%2FWs2fOFsaXx7MB17%2BHoXs1qYRdGMN%2BrtJLTn%2Fpq%2BfKITzEZ%2BF%2FAZ9iDPjSmT0HZmfpPUhjPwhW6SeaKSKHehf4VJf4l%2FMXpGEmxTdU0en%2FmpJOprg03a53oGN1RtTy%2BTojZsrppCpJSM79S%2BxMFefkxETgDROt8PGI%3D\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0273, requestHost0273, requestPort0273, requestHeader0273, requestContent0273.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0273 = null;		// support garbage collector to reduce memory
		requestContent0273 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1650
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "TopNavLogout = window.parent.TopNavLogout;");		// Test [273] <- Index 273
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [274] <- WEB ADMIN Index 274 ---
		log();
		log("# title: Object moved");
		String requestProt0274 = "https";
		String requestHost0274 = "analytics4preview.sapsf.com";
		int    requestPort0274 = 443;
		String requestFile0274 = "/Production/Login.aspx" +
				"?ReturnUrl=%2fProduction%2fHrmlLogout.aspx%3fSAMLRequest%3dnZJfb9owFMW%252FSuTXKokTCDgWoUJlaKG0ovwT68vkJQ5Yiu3U16GwT78QStVNWx%252F2eu%252B59%252Fzu0R3cHmXpHLgBoVWCAg8jh6tM50LtErReTVyCbocDYLIMKzrTO13bBX%252BpOVinmVRAL60E1UZRzUAAVUxyoDajy9HDjIYeppXRVme6RM64GRSK2dZtb20F1PeZYuXJigy6leEHwV89YBUUXqalPzc6r7Oz3v9qZHkh8BhUR%252BSk4wR9z4OcRb2o4%252BJuL3K7rNN3CYsjFzOS4U6HkG4vb6QANU8VWKZsgkIcxG6A3TBcBYRGfRrGHiHRM3IWnMEZ7bNrypaB1sANcjbX6JoOeguKtm7mY0Cfb2TQ7DrfiIbXTPaZ%252FEsaUPgir%252FzzYOg3hYqpk28z26Q68D96X0keG690%252FD8kzkQbyey%252F5YEXtBWRu0UrpbWCimeiEDxHw2W6CjEOyJXrQvL%252BSksO59xSlfPjENTWzEdRr1R6E86%252FHEy9uZFidifv%252BZqs493JTqays02nQOTj5FSOsb3%252FudvHxY8XuX2I19%252FuDqI%252F8jl%252BstPFzfMuKGyvekqSN%252B8%252F3N6rv73z8Bc%253D%26SigAlg%3dhttp%253A%252F%252Fwww.w3.org%252F2000%252F09%252Fxmldsig%2523rsa-sha1%26Signature%3dJt4QTbpqIx2mvFeB48CQJhq3ZmAA41PXsdOCQ8aIo3XD2eWr5CRn5cvTOm63epbynI2SXulJvcmQ9JCEJ7UqAnqM6aOh7j7R7n6LW5XtC4Re4dqkVUcuN0vVtPkxFXe8x4eWf4nZbAd840ACCXnezFsYsvcZ4Bm4aWVaK%252BJFUTo%253D" +
				"&SAMLRequest=nZJfb9owFMW%2FSuTXKokTCDgWoUJlaKG0ovwT68vkJQ5Yiu3U16GwT78QStVNWx%2F2eu%2B59%2Fzu0R3cHmXpHLgBoVWCAg8jh6tM50LtErReTVyCbocDYLIMKzrTO13bBX%2BpOVinmVRAL60E1UZRzUAAVUxyoDajy9HDjIYeppXRVme6RM64GRSK2dZtb20F1PeZYuXJigy6leEHwV89YBUUXqalPzc6r7Oz3v9qZHkh8BhUR%2BSk4wR9z4OcRb2o4%2BJuL3K7rNN3CYsjFzOS4U6HkG4vb6QANU8VWKZsgkIcxG6A3TBcBYRGfRrGHiHRM3IWnMEZ7bNrypaB1sANcjbX6JoOeguKtm7mY0Cfb2TQ7DrfiIbXTPaZ%2FEsaUPgir%2FzzYOg3hYqpk28z26Q68D96X0keG690%2FD8kzkQbyey%2F5YEXtBWRu0UrpbWCimeiEDxHw2W6CjEOyJXrQvL%2BSksO59xSlfPjENTWzEdRr1R6E86%2FHEy9uZFidifv%2BZqs493JTqays02nQOTj5FSOsb3%2FudvHxY8XuX2I19%2FuDqI%2F8jl%2BstPFzfMuKGyvekqSN%2B8%2F3N6rv73z8Bc%3D" +
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=Jt4QTbpqIx2mvFeB48CQJhq3ZmAA41PXsdOCQ8aIo3XD2eWr5CRn5cvTOm63epbynI2SXulJvcmQ9JCEJ7UqAnqM6aOh7j7R7n6LW5XtC4Re4dqkVUcuN0vVtPkxFXe8x4eWf4nZbAd840ACCXnezFsYsvcZ4Bm4aWVaK%2BJFUTo%3D";
		String requestHeader0274 = "GET " + requestFile0274 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0274, requestHost0274, requestPort0274, requestHeader0274, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("FK05mfUV36Wcy5%2bZimXHrpVkGUE%3d", C_AjaxToken);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0274 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [275] <- WEB ADMIN Index 275 ---
		String requestProt0275 = "https";
		String requestHost0275 = "hcm4preview.sapsf.com";
		int    requestPort0275 = 443;
		String requestFile0275 = "/sf/logout" +
				"?bplte_company=tctest" +
				"&_s.crb=" + vScrb;		// recorded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestFile0275 = Lib.replaceTextPattern(requestFile0275, "FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d", java.net.URLEncoder.encode(C_AjaxToken), 0);		// search and replace request file fragment "FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" with variable 'C_AjaxToken' on all occurrences

		String requestHeader0275 = "GET " + requestFile0275 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0275, requestHost0275, requestPort0275, requestHeader0275, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0275 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [276] <- WEB ADMIN Index 276 ---
		String requestProt0276 = "https";
		String requestHost0276 = "hcm4preview.sapsf.com";
		int    requestPort0276 = 443;
		String requestFile0276 = "/login" +
				"?company=tctest" +
				"&bplte_logout=1" +
				"&username=SIT20018" +
				"&_s.crb=" + vScrb;		// recorded value = FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d
		requestFile0276 = Lib.replaceTextPattern(requestFile0276, "SIT20018", P_UserID, 0);		// search and replace request file fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestFile0276 = Lib.replaceTextPattern(requestFile0276, "FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d", java.net.URLEncoder.encode(C_AjaxToken), 0);		// search and replace request file fragment "FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d" with variable 'C_AjaxToken' on all occurrences

		String requestHeader0276 = "GET " + requestFile0276 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/onboarding/pages/dashboard.xhtml?bplte_company=tctest&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0276, requestHost0276, requestPort0276, requestHeader0276, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0276 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [277] <- WEB ADMIN Index 277 ---
		String requestProt0277 = "https";
		String requestHost0277 = "hcm4preview.sapsf.com";
		int    requestPort0277 = 443;
		String requestFile0277 = "/ui/surj/js/core/config-util_1f1411d7d63c13c9fff25c556f656cd6.js";
		String requestHeader0277 = "GET " + requestFile0277 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/login?company=tctest&bplte_logout=1&username=SIT20018&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0277, requestHost0277, requestPort0277, requestHeader0277, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0277 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;





		// --- HTTP REQUEST: Test [278] <- WEB ADMIN Index 278 ---
		String requestProt0278 = "https";
		String requestHost0278 = "hcm4preview.sapsf.com";
		int    requestPort0278 = 443;
		String requestFile0278 = "/public/theme-api/css/tctest/3eybd488sn/ui/login/css/bizx/BizXLoginTheme.dcss";
		String requestHeader0278 = "GET " + requestFile0278 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/login?company=tctest&bplte_logout=1&username=SIT20018&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0278, requestHost0278, requestPort0278, requestHeader0278, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0278 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;



		// all http requests of page #7 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #7 (fragment 2 of 2)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [279] <- WEB ADMIN Index 279 ---
		String requestProt0279 = "https";
		String requestHost0279 = "hcm4preview.sapsf.com";
		int    requestPort0279 = 443;
		String requestFile0279 = "/perfLogServlet" +
				"?callId=8390495852-0" +
				"&eventId=EVENT-PLT-LOGINPAGE-rb3abe13s-20191022145816-789302" +
				"&ST=1571770696647" +
				"&MEM=10200" +
				"&NRE=15" +
				"&NWR=20" +
				"&SCPU=10" +
				"&SQLC=31" +
				"&SQLT=14" +
				"&SVT=55" +
				"&UCPU=30" +
				"&CPU=40" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=19" +
				"&cssNum=8" +
				"&renderTime=652" +
				"&RED=1" +
				"&TTB=20" +
				"&RSR=42096" +
				"&DIA=42511";
		String requestContent0279 = 
				"OPTR_INFO=beb1622e-9f22-4293-ae28-3c502ebbc82c!1571770697444!1571770697451!0" +
				"&OPTR_INFO=dd34c2eb-88c2-4e30-8324-59e725186328!1571770697486!1571770697499!0" +
				"&OPTR_INFO=e7ead1ea-f4fd-11e9-a9d0-5927ca99197e!0!1571770697533!1" +
				"&OPTR_INFO=c97a7285-f742-4111-ba2e-658c25d95329!1571770697543!1571770697561!0" +
				"&OPTR_INFO=a0491252-4a72-4c35-8b22-2cba29a48a2f!1571770697582!1571770697587!0" +
				"&OPTR_INFO=beb552dd-e932-42f6-a92c-73cf2c6a5c2f!1571770697628!1571770697639!0" +
				"&OPTR_INFO=864122a6-9c72-4140-8426-068f20130e23!1571770697643!1571770697650!0" +
				"&OPTR_INFO=57b13266-8f12-44f9-b72c-00a421ad2a29!1571770697653!1571770697655!0" +
				"&OPTR_INFO=7b77d2c5-3432-439d-b829-e550229e5721!1571770697660!1571770697665!0" +
				"&OPTR_INFO=65f552bf-2b52-4ad3-ab2a-96542b0ea42c!1571770697666!1571770697671!0";
		String requestHeader0279 = "POST " + requestFile0279 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-PLT-LOGINPAGE-rb3abe13s-20191022145816-789302\r\n" + 
				"X-Ajax-Token: rMF9kJJ4yeThMjkvfWXI7DtMXlg%3d\r\n" + 
				"Content-Length: " + requestContent0279.length() + "\r\n" + 		// Content-Length: 757
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/login?company=tctest&bplte_logout=1&username=SIT20018&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0279, requestHost0279, requestPort0279, requestHeader0279, requestContent0279.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0279 = null;		// support garbage collector to reduce memory
		requestContent0279 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: check size +/- 5%, defined content size = 0
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, 0, 5);		// Test [279] <- Index 279
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [280] <- WEB ADMIN Index 280 ---
		String requestProt0280 = "https";
		String requestHost0280 = "ds-aksb-a.akamaihd.net";
		int    requestPort0280 = 443;
		String requestFile0280 = "/2/492962/b" +
				"?dE=1" +
				"&cS=1" +
				"&cE=3" +
				"&rqS=4" +
				"&rsS=11" +
				"&rsE=198" +
				"&sS=-41889" +
				"&dl=207" +
				"&di=622" +
				"&fp=" +
				"&dlS=628" +
				"&dlE=913" +
				"&dc=1077" +
				"&leS=1077" +
				"&leE=1077" +
				"&to=" +
				"&ol=0" +
				"&cr=21" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/login" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A69.0%29%20Gecko/20100101%20Firefox/69.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=24.244.17.176" +
				"&t=" +
				"&rid=1a9cef96" +
				"&r=11746" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=6037fc00" +
				"&akTX=1" +
				"&akTI=1a9cef96" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0280 = "GET " + requestFile0280 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/login?company=tctest&bplte_logout=1&username=SIT20018&_s.crb=FK05mfUV36Wcy5%252bZimXHrpVkGUE%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0280, requestHost0280, requestPort0280, requestHeader0280, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		pageThreadHandler.insertInExecutionQueue(testURL, threadStep);
		requestHeader0280 = null;		// support garbage collector to reduce memory
		threadStep = threadStep + 1;



		// all http requests of page #7_1 successful done
		return true;
	}



	boolean synchResponsesParallelRequestsPage_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 1 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		
		threadStep = pageThreadHandler.getFirstThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2738
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [2] <- Index 2
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 771
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [3] <- Index 3
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3038
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [4] <- Index 4
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2403
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [5] <- Index 5
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 32669
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [6] <- Index 6
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [7] <- Index 7
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 910
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [8] <- Index 8
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 672
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [9] <- Index 9
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10044
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [10] <- Index 10
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3099
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [11] <- Index 11
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2880
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [12] <- Index 12
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 187353
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [13] <- Index 13
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 67
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [14] <- Index 14
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 168081
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [15] <- Index 15
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 184333
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [16] <- Index 16
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 183921
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [17] <- Index 17
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2466
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [18] <- Index 18
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8011
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [19] <- Index 19
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1497
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [20] <- Index 20
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 2621
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [21] <- Index 21
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 90261
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [22] <- Index 22
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		if (!writeHttpAsyncResponseTabOutput_1(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_1 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 15759
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [23] <- Index 23
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4826
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [24] <- Index 24
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 111119
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [25] <- Index 25
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 53795
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [26] <- Index 26
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 11330
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [27] <- Index 27
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 7945
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [28] <- Index 28
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 26547
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [29] <- Index 29
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 361
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [30] <- Index 30
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/X-ICON", header text fragment = [verification disabled], recorded content size = 1406
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/X-ICON", null, null);		// Test [31] <- Index 31
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 1084
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [32] <- Index 32
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 9361
		// content test algorithm: check size +/- 5%, defined content size = 9361
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, 9361, 5);		// Test [33] <- Index 33
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 3156
		// content test algorithm: check size +/- 5%, defined content size = 3156
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, 3156, 5);		// Test [34] <- Index 34
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 268
		// content test algorithm: check size +/- 5%, defined content size = 268
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, 268, 5);		// Test [35] <- Index 35
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 57
		// content test algorithm: check size +/- 5%, defined content size = 57
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, 57, 5);		// Test [36] <- Index 36
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1116
		// content test algorithm: check size +/- 5%, defined content size = 1116
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, 1116, 5);		// Test [37] <- Index 37
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 92820
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [38] <- Index 38
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [39] <- Index 39
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-TTF", header text fragment = [verification disabled], recorded content size = 42072
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-TTF", null, null);		// Test [40] <- Index 40
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 26732
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [41] <- Index 41
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 1808
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [44] <- Index 44
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/JPEG", header text fragment = [verification disabled], recorded content size = 2178
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/JPEG", null, null);		// Test [48] <- Index 48
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: check size +/- 5%, defined content size = 0
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, 0, 5);		// Test [49] <- Index 49
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 2 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		
		threadStep = pageThreadHandler.getFirstThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 8313
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [54] <- Index 54
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2693
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [55] <- Index 55
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 3765
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [56] <- Index 56
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 307699
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [57] <- Index 57
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5610
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [58] <- Index 58
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4452
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [60] <- Index 60
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 11383
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [61] <- Index 61
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 9286
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [62] <- Index 62
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 234
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [63] <- Index 63
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 346
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [64] <- Index 64
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2514
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [65] <- Index 65
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 83333
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [66] <- Index 66
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 55724
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [67] <- Index 67
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2581
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [68] <- Index 68
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [69] <- Index 69
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [70] <- Index 70
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 34396
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [72] <- Index 72
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 3516
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [73] <- Index 73
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 9348
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [74] <- Index 74
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 1652
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [75] <- Index 75
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [76] <- Index 76
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [77] <- Index 77
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3957
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "We found the following Knowledge Base Articles related to this error:");		// Test [78] <- Index 78
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, null);		// Test [79] <- Index 79
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 7294
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [80] <- Index 80
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1655
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [81] <- Index 81
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 649
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [82] <- Index 82
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 1473
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [83] <- Index 83
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 3036
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [84] <- Index 84
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 4078
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [86] <- Index 86
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 876
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [89] <- Index 89
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [90] <- Index 90
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2079
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [91] <- Index 91
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		if (!writeHttpAsyncResponseTabOutput_2(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_2 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 343
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [92] <- Index 92
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 12186
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [93] <- Index 93
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 342
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [94] <- Index 94
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 405
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [95] <- Index 95
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [96] <- Index 96
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 347
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [97] <- Index 97
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 2510
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [98] <- Index 98
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 17094
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"Cans\": \"Unified Canadian Aboriginal Syllabics\",");		// Test [101] <- Index 101
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 820
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [103] <- Index 103
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/JPEG", header text fragment = [verification disabled], recorded content size = 258027
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/JPEG", null, null);		// Test [105] <- Index 105
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 26732
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [106] <- Index 106
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 47
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"results\" : [");		// Test [107] <- Index 107
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 38500
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "All Direct Reports\";");		// Test [108] <- Index 108
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6276
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [110] <- Index 110
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 21
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, "0");		// Test [111] <- Index 111
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 21
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [114] <- Index 114
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 47
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"results\" : [");		// Test [115] <- Index 115
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3105
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [116] <- Index 116
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 65
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "getInternalJobPostingCount");		// Test [117] <- Index 117
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/JPEG", header text fragment = [verification disabled], recorded content size = 123168
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/JPEG", null, null);		// Test [118] <- Index 118
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 21391
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Report Name\";");		// Test [119] <- Index 119
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 27169
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [120] <- Index 120
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [122] <- Index 122
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 3363
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [123] <- Index 123
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1662
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [124] <- Index 124
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1273
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [125] <- Index 125
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1539
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [126] <- Index 126
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 16242
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [127] <- Index 127
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 816
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [128] <- Index 128
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Mod4'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0128_1 = new BoundaryBasedExtractorItem( "dcss;mod=" , "\",\"",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0128_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Mod4'
			C_Mod4 = boundaryBasedContentExtractorItem0128_1.getResultText();
			log("<<< C_Mod4 = " + C_Mod4);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod4!= null && C_Mod4.trim().length() == 0)
			{
				C_Mod4 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod4' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod4 = " + C_Mod4);
			}
		}
		catch (Exception e) { C_Mod4 = null; log(e); }
		if (C_Mod4 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod4' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2463
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [129] <- Index 129
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1932
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [131] <- Index 131
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [132] <- Index 132
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 23097
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [134] <- Index 134
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 3 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		
		threadStep = pageThreadHandler.getFirstThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2384
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [139] <- Index 139
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1425
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [140] <- Index 140
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 14241
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [141] <- Index 141
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 8384
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [142] <- Index 142
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 184
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [143] <- Index 143
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 720
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [144] <- Index 144
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 105
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [145] <- Index 145
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 957
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [146] <- Index 146
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 13255
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [147] <- Index 147
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4887
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [148] <- Index 148
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4707
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [149] <- Index 149
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15497
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [150] <- Index 150
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6530
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [151] <- Index 151
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2947
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [152] <- Index 152
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 418
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [153] <- Index 153
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 353
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [154] <- Index 154
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1407
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [155] <- Index 155
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 428
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [156] <- Index 156
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1928
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [157] <- Index 157
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 373
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [158] <- Index 158
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 703
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [159] <- Index 159
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 331
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [160] <- Index 160
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 832
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [161] <- Index 161
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2387
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [162] <- Index 162
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 31782
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [163] <- Index 163
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		if (!writeHttpAsyncResponseTabOutput_3(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_3 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 205
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [164] <- Index 164
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 11377
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [165] <- Index 165
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 83331
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [166] <- Index 166
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 313
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [167] <- Index 167
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, null, null, null);		// Test [168] <- Index 168
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 343
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [169] <- Index 169
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 23182
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [170] <- Index 170
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 241
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [171] <- Index 171
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 282
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [172] <- Index 172
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [175] <- Index 175
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 11785
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [176] <- Index 176
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2075
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [177] <- Index 177
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1136
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [178] <- Index 178
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [181] <- Index 181
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 26732
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [182] <- Index 182
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [183] <- Index 183
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/JPEG", header text fragment = [verification disabled], recorded content size = 2178
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/JPEG", null, null);		// Test [184] <- Index 184
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, null);		// Test [185] <- Index 185
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 812
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [191] <- Index 191
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 11377
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [192] <- Index 192
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 23182
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [193] <- Index 193
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 25250
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [194] <- Index 194
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 83331
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [195] <- Index 195
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [197] <- Index 197
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, null);		// Test [206] <- Index 206
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 26732
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [216] <- Index 216
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 4 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		
		threadStep = pageThreadHandler.getFirstThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 159031
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [223] <- Index 223
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4700
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [224] <- Index 224
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 461
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [225] <- Index 225
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1112
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [226] <- Index 226
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6007
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [227] <- Index 227
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8128
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [228] <- Index 228
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 4886
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [229] <- Index 229
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 27295
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [230] <- Index 230
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [231] <- Index 231
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 61
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [232] <- Index 232
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 60
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [233] <- Index 233
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 64
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [234] <- Index 234
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		if (!writeHttpAsyncResponseTabOutput_4(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_4 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 2137
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [235] <- Index 235
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 26129
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Report Results");		// Test [236] <- Index 236
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		regExpBasedExtractor = new RegExpBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Viewstate1'
		RegExpBasedExtractorItem regExpBasedContentExtractorItem0236_1 = new RegExpBasedExtractorItem( "id=\"__VIEWSTATE\" value=\"(.*?)\" />" ,1,1,false,false,0,false);
		regExpBasedExtractor.addRegExpBasedExtractorItem(regExpBasedContentExtractorItem0236_1);

		// setup var extractor for 'C_Eventval1'
		RegExpBasedExtractorItem regExpBasedContentExtractorItem0236_2 = new RegExpBasedExtractorItem( "id=\"__EVENTVALIDATION\" value=\"(.*?)\" />" ,1,1,false,false,0,false);
		regExpBasedExtractor.addRegExpBasedExtractorItem(regExpBasedContentExtractorItem0236_2);

		// setup var extractor for 'C_Vsgen1'
		RegExpBasedExtractorItem regExpBasedContentExtractorItem0236_3 = new RegExpBasedExtractorItem( "id=\"__VIEWSTATEGENERATOR\" value=\"(.*?)\" />" ,1,1,false,false,0,false);
		regExpBasedExtractor.addRegExpBasedExtractorItem(regExpBasedContentExtractorItem0236_3);

		regExpBasedExtractor.extractText();
		regExpBasedExtractor = new RegExpBasedExtractor(testURL.getHeaderString());

		regExpBasedExtractor.extractText();
		try
		{
			// extract var 'C_Viewstate1'
			C_Viewstate1 = regExpBasedContentExtractorItem0236_1.getResultText();
			log("<<< C_Viewstate1 = " + C_Viewstate1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Viewstate1!= null && C_Viewstate1.trim().length() == 0)
			{
				C_Viewstate1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Viewstate1' ends up with an empty string - a substitute value was set");
				log("<<< C_Viewstate1 = " + C_Viewstate1);
			}
		}
		catch (Exception e) { C_Viewstate1 = null; log(e); }
		if (C_Viewstate1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Viewstate1' from regexp based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Eventval1'
			C_Eventval1 = regExpBasedContentExtractorItem0236_2.getResultText();
			log("<<< C_Eventval1 = " + C_Eventval1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Eventval1!= null && C_Eventval1.trim().length() == 0)
			{
				C_Eventval1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Eventval1' ends up with an empty string - a substitute value was set");
				log("<<< C_Eventval1 = " + C_Eventval1);
			}
		}
		catch (Exception e) { C_Eventval1 = null; log(e); }
		if (C_Eventval1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Eventval1' from regexp based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Vsgen1'
			C_Vsgen1 = regExpBasedContentExtractorItem0236_3.getResultText();
			log("<<< C_Vsgen1 = " + C_Vsgen1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Vsgen1!= null && C_Vsgen1.trim().length() == 0)
			{
				C_Vsgen1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Vsgen1' ends up with an empty string - a substitute value was set");
				log("<<< C_Vsgen1 = " + C_Vsgen1);
			}
		}
		catch (Exception e) { C_Vsgen1 = null; log(e); }
		if (C_Vsgen1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Vsgen1' from regexp based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 812
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [237] <- Index 237
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 1569
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [238] <- Index 238
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 696
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [239] <- Index 239
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 268
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [240] <- Index 240
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 1350
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [241] <- Index 241
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 495
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [242] <- Index 242
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 812
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [243] <- Index 243
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 165
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [244] <- Index 244
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2749
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Action Completed");		// Test [245] <- Index 245
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 812
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [246] <- Index 246
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 5 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		
		threadStep = pageThreadHandler.getFirstThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 978
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [249] <- Index 249
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		if (!writeHttpAsyncResponseTabOutput_5(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_5 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 812
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [251] <- Index 251
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 812
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [252] <- Index 252
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 6 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		
		threadStep = pageThreadHandler.getFirstThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 812
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [256] <- Index 256
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		if (!writeHttpAsyncResponseTabOutput_6(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_6 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 812
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [257] <- Index 257
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_7(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 7 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		
		threadStep = pageThreadHandler.getFirstThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 119
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [264] <- Index 264
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, null);		// Test [265] <- Index 265
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, null);		// Test [266] <- Index 266
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, null);		// Test [267] <- Index 267
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, null);		// Test [268] <- Index 268
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 525
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "You must correct the following error(s) before proceeding:");		// Test [269] <- Index 269
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2672
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Since your browser does notsupport JavaScript, you must press the Continuebutton once to");		// Test [270] <- Index 270
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		if (!writeHttpAsyncResponseTabOutput_7(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_7 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 2053
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [271] <- Index 271
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 29551
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [272] <- Index 272
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 139
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [274] <- Index 274
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, null, null, null);		// Test [275] <- Index 275
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 6825
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors Log in");		// Test [276] <- Index 276
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 771
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [277] <- Index 277
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [278] <- Index 278
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		threadStep = pageThreadHandler.getNextThreadStep();
		if (threadStep == -1)
		{
			log("[" + threadStep + "] asynch request not executed - loop aborted by checking the result of previous request");
			threadStep = lastThreadStepInMainThread;		// restore last executed thread step
			return true;
		}
		testURL = pageThreadHandler.getHttpTestURL(threadStep);
		log("[" + threadStep + "] check response of asynch request " + testURL.getRequestInfoText() + " ...");
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: check size +/- 5%, defined content size = 0
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, 0, 5);		// Test [280] <- Index 280
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated


		
		return true;		// end of asynch response checks for this page
	}



	/**
	 * implement GetRealTimeUserInputFieldsInterface: get the definition and the value of all real-time user input fields.
	 */
	public ArrayList<RealTimeUserInputField> getRealTimeUserInputFields()
	{
		try
		{
			ArrayList<RealTimeUserInputField> realTimeUserInputFieldList = new ArrayList<RealTimeUserInputField>();
			return realTimeUserInputFieldList;
		}
		catch (Exception e)
		{
			log(e);
			return null;
		}
	}



	/**
	 * implement ThreadStepInterface: get the current execution step (current URL call or page break) of a simulated user.
	 */
	public int getExecutionStep()
	{
		return threadStep;
	}



	/**
	 * implement SetThreadStepInterface: set the current execution step (current URL call or page break) of a simulated user.
	 */
	public void setExecutionStep(int threadStep)
	{
		this.threadStep = threadStep;
	}



	/**
	 * implement SSLSessionCacheStatisticInterface: get statistic data about the SSL session cache behavior of a simulated user.
	 */
	public SSLSessionCacheStatistic getSSLSessionCacheStatistic()
	{
		return sslStatistic;
	}



	/**
	 * implement VaryingTestDurationInterface: support to extend or to reduce the planned test duration.
	 */
	public int getPlannedTestDuration()
	{
		return plannedTestDuration;
	}
	
	public void setExtendTestDuration(int deltaSeconds)
	{
		if (plannedTestDuration == 0)
		{
			plannedTestDuration = deltaSeconds;		// the old planned test duration was unlimited but is now limited
			return;
		}
		if (deltaSeconds == 0)
		{
			plannedTestDuration = 0;		// the new planned test duration is now unlimited
			return;
		}
		plannedTestDuration = plannedTestDuration + deltaSeconds;
	}



	/**
	 * implement SuspendResumeInterface: support to suspend and to resume the test execution.
	 */
	public int getPlannedStartupDelay()
	{
		return plannedStartupDelay;
	}
	
	public void setUserResumeStartWaitDelay(int millis)
	{
		userResumeStartWaitDelay = millis;
	}



	/**
	 * implement VaryingLoadInterface: support to decrement the number of simulated users at runtime.
	 */
	public void setDecrementEndOfLoopFlag(boolean decrementEndOfLoopFlag)
	{
		this.decrementEndOfLoopFlag = decrementEndOfLoopFlag;
	}

	public boolean isDecrementEndOfLoopFlag()
	{
		return decrementEndOfLoopFlag;
	}



	/**
	 * internal method: execute the loops for one simulated user as a thread.
	 * controls the thread and displays the (thread-)log if one loop has been completed.
	 */
	public void run()
	{
		// user terminated by inline script, at start of user ?
		if (isTerminateUser())
		{
			System.out.println("# --- thread " + Thread.currentThread().getName() + " aborted --- " + ZoneTime.dateToShortString() + " ---");
			return;
		}
		try
		{
			while (true)
			{
				threadStep = ThreadStepInterface.THREAD_NO_STEP;
				clearLog();
				
				// execute loop
				log("--- loop started --- " + ZoneTime.dateToShortString() + " ---");
				boolean loopPassed = this.execute(totalLoopCounter.getAndIncrement());
				performanceData.addUserTransactionMeasuredSamples(transactionHandler.getPendingTransactions());
				ArrayList<UserTransactionContext> nonExecutedTransactions = transactionHandler.getNotExecutedTransactions();

				for (UserTransactionContext nonExecutedTransaction : new ArrayList<>(nonExecutedTransactions))
				{
					if(transactionContextMap.containsKey(nonExecutedTransaction.getTransactionId()+"") && transactionContextMap.get(nonExecutedTransaction.getTransactionId()+"") == null)
					{
						transactionContextMap.remove(nonExecutedTransaction.getTransactionId()+"");
						nonExecutedTransactions.remove(nonExecutedTransaction);
					}
				}

				performanceData.addUserTransactionNotExecutedSamples(nonExecutedTransactions);
				performanceData.addSocktPoolStatistic(socketPool);
				socketPool.closePool();
				performanceData.addSSLCacheStatistic(sslStatistic.getSSLSessionCacheStatisticResult());
				sslStatistic.reset();
				
				// eof of input file ?
				if (abortedByEofInputFile())
					return;		// endOfRun() not called in such a case
				
				// check loop result
				String remainingLoopInfo = "";
				if (checkLoopCount)
					remainingLoopInfo = " [remaining loops = " + (remainingLoops - 1) + "]";
				if (loopPassed)
				{
					performanceData.addPassedLoop();
					log("--- loop passed ---  " + ZoneTime.dateToShortString() + " ---" + remainingLoopInfo);
				}
				else
				{
					performanceData.addFailedLoop();
					log("--- loop failed ---  " + ZoneTime.dateToShortString() + " ---" + remainingLoopInfo);
				}
				threadStep = ThreadStepInterface.THREAD_NO_STEP;
				
				// display thread log to standard output
				if (debugLoops || (debugFailedLoops && (!loopPassed)))
				{
					synchronized (dumpLock)
					{
						dumpLog(System.out);				// full log
					}
				}
				
				// check if max loops reached
				if (checkLoopCount)
				{
					// all done ?
					remainingLoops--;
					if (remainingLoops <= 0)
					{
						endOfRun();
						return;
					}
				}
				
				// check if simulated user must be decremented
				if (decrementEndOfLoopFlag && (getOwnLoadTestUserContext().getDecrementEndOfLoopPointInTime() <= System.currentTimeMillis()))
				{
					return;
				}
				
				// check if max test duration reached
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				{
					endOfRun();
					return;
				}
				
				// check if this specific user is terminated earlier than planned by a HTTP content verification or by a plug-in
				if (isTerminateUser())
				{
					endOfRun();
					System.out.println("# --- thread " + Thread.currentThread().getName() + " terminate failed user --- " + ZoneTime.dateToShortString() + " ---");
					return;
				}
				
				// check if load test execution is temporary suspended
				boolean wasSuspended = false;
				while (isSuspend())
				{
					wasSuspended = true;
					try { Thread.currentThread().sleep(20); } catch (InterruptedException ie) {}
					if (abortedByRemote() || abortedByEofInputFile())
					{
						endOfRun();
						return;
					}
					
					// check if max test duration reached during suspend
					if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
					{
						endOfRun();
						return;
					}
				}
				// check if load test execution is resumed
				if (wasSuspended)
				{
					try { sleepRemoteInterruptable(userResumeStartWaitDelay); } catch (InterruptedException ie) {}
				}
				
				// wait 20 milliseconds if loop has failed
				if (!loopPassed)
					try { Thread.currentThread().sleep(loopErrorDelay); } catch (InterruptedException ie) {}
				
				// execute next loop
				threadLoopCounter++;
			}	// end: while (true)
		}
		catch (Throwable tex)
		{
			log("*** INTERNAL ERROR / LOAD TEST ABORTED ***");
			log(tex);
			log();
			synchronized (dumpLock)
			{
				dumpLog(System.out);				// full log
				System.err.println("*** INTERNAL ERROR / LOAD TEST ABORTED ***");
				tex.printStackTrace(System.err);
				System.exit(-2);
			}
		}
		finally
		{
			// remove the reference to this load test instance and the reference to the thread that runs this instance
			try
			{
				if (!decrementEndOfLoopFlag)
				{
					getUserContextTable().getWriteLock().lock();
					getOwnLoadTestUserContext().setLoadTestUserFinallyEnded();
					getUserContextTable().getWriteLock().unlock();
				}
				else
					decrementEndOfLoopFlag = false;
			}
			catch (Throwable texFinal)
			{
				System.err.println("*** INTERNAL FINALLY ERROR / LOAD TEST ABORTED ***");
				texFinal.printStackTrace(System.err);
				System.exit(-2);
			}
		}
	}



	/**
	 * internal method: called when a user has completed the test-run.
	 */
	public void endOfRun()
	{
		clearLog();
		
		if (debugLoops && (getLog().size() > 0))
		{
			synchronized (dumpLock)
			{
				dumpLog(System.out);		// dump log of inline scripts and load test plug-ins which are executed at end of user
			}
		}
	}



	/**
	 * Main program. Starts the test and waits until all have been done.
	 */
	public static void main(String[] args)
	{
		// check command line argument -h or -help
		if ((ParseArgs.hasOption(args, "-h")) || (ParseArgs.hasOption(args, "-help")))
		{
			System.out.println();
			System.out.println("Help - Proxy Sniffer Load Test Program:");
			System.out.println();
			System.out.println("-u <number>              ->> required argument: number of concurrent users");
			System.out.println("-d <seconds>             ->> required argument: planned test duration in seconds (default: 30, 0 = unlimited)");
			System.out.println("-t <seconds>             ->> required argument: request timeout per url in seconds");
			System.out.println();
			System.out.println("-tconnect <seconds>      ->> TCP/IP socket connect timeout in seconds (default: use value of -t <seconds>)");
			System.out.println();
			System.out.println("-sdelay <milliseconds>   ->> startup delay time between concurrent users in milliseconds (default: 200)");
			System.out.println("-mtpu <number>           ->> maximum number of parallel threads per user (default: " + MAX_PARALLEL_THREADS_PER_USER + ")");
			System.out.println("-maxloops <number>       ->> maximum number of loops per user (default: 0 = unlimited)");
			System.out.println("-downlink <kbps>         ->> maximum downlink network bandwidth per user in kilobits per second (default: 0 = unlimited)");
			System.out.println("-uplink <kbps>           ->> maximum uplink network bandwidth per user in kilobits per second (default: 0 = unlimited)");
			System.out.println("-multihomed <filename>   ->> use serveral client ip addresses - file format: <addr1>, <addr2>, ... (all on the same line)");
			System.out.println("-sampling <seconds>      ->> statistic sampling interval in seconds (default: 15)");
			System.out.println("-percpage <percent>      ->> additional sampling rate per web page call in percent (default: 100)");
			System.out.println("-percurl <percent>       ->> additional sampling rate per url call in percent (default: 0)");
			System.out.println("-percurlopt <level>      ->> extended sampling level per url call, see application reference manual (default: 0 = disabled)");
			System.out.println("-maxerrsnap <number>     ->> maximum number of error snapshots per url (default: 0 = unlimited)");
			System.out.println("-maxerrmem <megabytes>   ->> maximum size of memory in megabytes which can be used for error snapshots (default: 20, -1 = unlimited)");
			System.out.println("-nosdelayCluster         ->> apply startup delay time between concurrent users per exec agent, but not per cluster job (default: apply per cluster job)");
			System.out.println("-setuseragent \"<text>\"   ->> replace the recorded value of the HTTP request header field User-Agent with a new value");
			System.out.println("-collect <host>[:<port>] ->> collect additional data from external measuring agents (data collectors)");
			System.out.println("-res <filename>          ->> overrides the default name of the binary output file");
			System.out.println("-nores                   ->> disables to create the binary output file");
			System.out.println();
			System.out.println("-ssl <version>           ->> set SSL version: possible options are \"all\" (default), \"v3\", \"tls\", \"tls11\" or \"tls12\"");
			System.out.println("-sslcache <seconds>      ->> timeout of user-related SSL session cache (default: 300, 0 = cache disabled)");
			System.out.println("-sslrandom <type>        ->> set the type of the random generator used for SSL handshakes: possible options are \"fast\", \"iaik\" (default) or \"java\"");
			System.out.println("-sslcmode                ->> apply SSL/HTTPS compatibility workarounds for deficient SSL servers");
			System.out.println("-ecc                     ->> enable support of elliptic curve cryptography (ECC)");
			System.out.println("-nosni                   ->> disable support of server name indication (SNI)");
			System.out.println("-snicritical             ->> set the TLS SNI extension as critical (default: non-critical)");
			System.out.println("-tlssessiontickets       ->> set the TLS to use Session Tickets (non-critical)");
			System.out.println("-iaikLast                ->> adds the IAIK security provider at the last position (instead of default: IAIK at first position)");
			System.out.println();
			System.out.println("-dnssrv <IP-1>[,IP-N])   ->> use specific DNS server(s) to resolve DNS host names (default: use OS to resolve host names)");
			System.out.println("-dnshosts <filename>     ->> use specific DNS hosts file (default: use OS to resolve host names)");
			System.out.println("-dnstranslation <filename> ->> use a DNS translation file that converts DNS names. It might be needed to disable TLS SNI if this option is used");
			System.out.println("-dnsenattl               ->> enable consideration of DNS TTL by using the received TTL-values from the DNS Server(s) (default: TTL disabled)");
			System.out.println("-dnsfixttl <seconds>     ->> enable DNS TTL by using a fixed TTL-value of seconds for all DNS resolves");
			System.out.println("-dnsperloop              ->> perform new DNS resolves for each executed loop. All resolves are stable within the same loop (no consideration of DNS TTL within a loop)");
			System.out.println("-dnsstatistic            ->> collect statistical data about DNS resolutions. Note: use this option only if not any other, more specific DNS option is enabled");
			System.out.println("-dnsdebug                ->> debug DNS resolves and the DNS cache");
			System.out.println("-enableIPv6 <networkinterface-name>  ->> enable only IPv6 support for recording, also can provide the IPv6 network interface of the load generator");
			System.out.println("-enableIPv6v4 <networkinterface-name> ->> enable both IPv6 and IPv4 (first will try with IPv6 ,if fails will try with IPv4 support for recording),also can provide the IPv6 network interface of the load generator");
			System.out.println();
			System.out.println("-dfl                     ->> debug execution steps of all failed loops to standard output");
			System.out.println("-dl                      ->> debug execution steps of all loops to standard output");
			System.out.println("-dh                      ->> debug HTTP protocol headers to standard output, includes the -dl option");
			System.out.println("-dc                      ->> debug HTTP content data to standard output, includes the -dl option");
			System.out.println("-dhc                     ->> debug HTTP protocol headers and HTTP content data to standard output, includes the -dl option");
			System.out.println("-dC                      ->> debug cookies to standard output, includes the -dl option");
			System.out.println("-dK                      ->> debug keep-alive (socket pool) to standard output, includes the -dl option");
			System.out.println("-dssl                    ->> debug SSL handshake (https) to standard output, includes the -dl and the -dK option");
			System.out.println();
			System.out.println("-tz <timezone>           ->> set time zone (see Application Reference Manual: supported time zones)");
			System.out.println("-dgs a|c                 ->> set number format (decimal group separator) a = '  c = ,");
			System.out.println("-annotation <text>       ->> adds an annotation for this test run");
			System.out.println();
			System.out.println("-execAgentHost <ip address or dns name>      ->> set the ip address or the dns name of the exec agent from which the license is used (default: 127.0.0.1)");
			System.out.println("-execAgentPort <port>                        ->> set the tcp/ip port of the exec agent (default: 7993)");
			System.out.println("-execAgentProtocol <plain | http | https>    ->> set the protocol of the exec agent (default: plain)");
			System.out.println("-execAgentUsername <string>                  ->> set the auth. username for the exec agent (default: [no username])");
			System.out.println("-execAgentPassword <string>                  ->> set the auth. password for the exec agent (default: [no password])");
			System.out.println();
			System.out.println("-h                       ->> display this help text");
			System.out.println("-help                    ->> display this help text");
			System.out.println();
			System.exit(-1);
		}
		
		System.out.println("+----------------------------------------------------------------+");
		System.out.println("| Welcome to the ZebraTester Load Test Program.                  |");
		System.out.println("| Additional help available with program argument \"-help\"        |");
		System.out.println("| Procedure Copyright by Ingenieurbuero David Fischer AG,        |");
		System.out.println("| a company of the Apica group. All rights reserved.             |");
		System.out.println("+----------------------------------------------------------------+");
		
		
		if (commonNextProxyConfig != null)
		{
			System.out.println();
			System.out.println("*** Warning: Loadtest over HTTP(S) Proxy ***");
		}
		
		// check command line argument -ecc
		sslECC = (ParseArgs.hasOption(args, "-ecc"));       // enable ssl ecc ?
		
		// initialize ssl/https support
		SSLInit.execute(!ParseArgs.hasOption(args, "-iaikLast"), true);
		if (sslECC)
			SSLInit.enableECC();
		
		// check command line argument -nosni
		if (ParseArgs.hasOption(args, "-nosni"))            // disable ssl sni ?
			sslSNI = false;
		
		// check command line argument -snicritical
		if (ParseArgs.hasOption(args, "-snicritical"))      // set ssl sni as critical tls extension ?
			sslSNICirical = true;
		
		// check command line argument -tlssessiontickets
		if (ParseArgs.hasOption(args, "-tlssessiontickets"))      // set tls extension session tickets?
			useTlsSessionTickets = true;
		
		// set default character set for response content tests
		setCharEncoding(prxCharEncoding);
		
		// check command line argument -tz <timezone>
		String timeZoneString = ParseArgs.getString(args, "-tz");
		if (timeZoneString != null)
			defaultTimeZone = timeZoneString.toUpperCase(); // set time zone?
		ZoneTime.setDefaultTimeZone(defaultTimeZone);
		
		// check command line argument -dgs a|c
		String dgs = ParseArgs.getString(args, "-dgs");
		if (dgs != null)
		{
			if (dgs.equalsIgnoreCase("a"))
				defaultNumberGroupingSeparator = '\'';
			if (dgs.equalsIgnoreCase("c"))
				defaultNumberGroupingSeparator = ',';
		}
		Lib.setDefaultNumberGroupingSeparator(defaultNumberGroupingSeparator);
		
		// check command line argument -annotation <text>
		String testRunAnnotation = ParseArgs.getString(args, "-annotation");
		if (testRunAnnotation != null)
		{
			if (testRunAnnotation.startsWith("\"") && testRunAnnotation.endsWith("\""))
				testRunAnnotation = testRunAnnotation.substring(1, testRunAnnotation.length() - 1);
		}
		
		// check command line argument -ssl
		String newSslProtocolVersion = ParseArgs.getString(args, "-ssl");
		if (newSslProtocolVersion != null)
		{
			if (newSslProtocolVersion.equalsIgnoreCase("v2"))
				sslProtocolVersion = "v2";
			if (newSslProtocolVersion.equalsIgnoreCase("v3"))
				sslProtocolVersion = "v3";
			if (newSslProtocolVersion.equalsIgnoreCase("tls"))
				sslProtocolVersion = "tls";
			if (newSslProtocolVersion.equalsIgnoreCase("tls11"))
				sslProtocolVersion = "tls11";
			if (newSslProtocolVersion.equalsIgnoreCase("tls12"))
				sslProtocolVersion = "tls12";
		}
		
		// check command line argument -sslcache <seconds>
		Integer newSslSessionCacheTimeout = ParseArgs.getInteger(args, "-sslcache");
		if (newSslSessionCacheTimeout != null)
			sslSessionCacheTimeout = newSslSessionCacheTimeout.intValue();
		
		// check command line argument -sslrandom
		String sslHandshakeRandomGeneratorTypeStr = ParseArgs.getString(args, "-sslrandom");
		if (sslHandshakeRandomGeneratorTypeStr != null)
		{
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("java"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_JAVA_DEFAULT;
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("iaik"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_IAIK_DEFAULT;
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("fast"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_FAST;
		}
		
		// check command line argument -sslcmode
		sslcmode = ParseArgs.hasOption(args, "-sslcmode");  // enable ssl/https compatibility workarounds?
		
		// check command line argument -dfl
		debugFailedLoops = ParseArgs.hasOption(args, "-dfl"); // debug failed loops?
		
		// check command line argument -dl
		debugLoops = ParseArgs.hasOption(args, "-dl");      // debug loops?
		
		// check command line argument -dh
		debugHttp = ParseArgs.hasOption(args, "-dh");       // debug http?
		if (debugHttp)
			debugLoops = true;
		
		// check command line argument -dc
		debugContent = ParseArgs.hasOption(args, "-dc");    // debug content?
		if (debugContent)
			debugLoops = true;
		
		// check command line argument -dhc
		if (ParseArgs.hasOption(args, "-dhc"))				// debug http and content
		{
			debugLoops = true;
			debugHttp = true;
			debugContent = true;
		}
		
		// check command line argument -dC
		debugCookies = ParseArgs.hasOption(args, "-dC");    // debug cookies?
		if (debugCookies)
			debugLoops = true;
		
		// check command line argument -dK
		debugKeepAlive = ParseArgs.hasOption(args, "-dK");  // debug keep.alive (socket pool)?
		if (debugKeepAlive)
			debugLoops = true;
		
		// check command line argument -dssl
		debugSsl = ParseArgs.hasOption(args, "-dssl");      // debug keep.alive (socket pool)?
		if (debugSsl)
		{
			debugLoops = true;
			debugKeepAlive = true;
		}
		
		// get startup delay
		Integer newStartupDelay = ParseArgs.getInteger(args, "-sdelay");
		if (newStartupDelay != null)
			plannedStartupDelay = newStartupDelay.intValue();
		
		// get max. parallel threads per user - note: only valid if CONTAINS_PARALLEL_EXECUTED_URLS = true
		Integer newMaxParallelThreadsPerUser = ParseArgs.getInteger(args, "-mtpu");
		if (newMaxParallelThreadsPerUser != null)
		{
			if (newMaxParallelThreadsPerUser.intValue() > 0)
				maxParallelThreadsPerUser = newMaxParallelThreadsPerUser.intValue();
		}
		// get maximum number of loops per user
		maxPlannedLoops = 0;  // maximum loops per user, 0 = unlimited
		Integer newLoops = ParseArgs.getInteger(args, "-maxloops");
		if (newLoops != null)
			maxPlannedLoops = newLoops.intValue();
		
		// get maximum downlink network bandwidth per user (default = unlimited)
		Integer newDownlinkBandwidth = ParseArgs.getInteger(args, "-downlink");
		if (newDownlinkBandwidth != null)
			downlinkBandwidth = newDownlinkBandwidth.intValue();
		
		// get maximum uplink network bandwidth per user (default = unlimited)
		Integer newUplinkBandwidth = ParseArgs.getInteger(args, "-uplink");
		if (newUplinkBandwidth != null)
			uplinkBandwidth = newUplinkBandwidth.intValue();
		
		// get statistic sampling interval
		int samplingInterval = 15;  // statistic sampling interval in seconds
		Integer newSamplingInterval = ParseArgs.getInteger(args, "-sampling");
		if (newSamplingInterval != null)
			samplingInterval = newSamplingInterval.intValue();
		
		// get additional sampling rate per web page call
		int percentilePageSampling = 100;  // additional sampling rate per web page call in percent
		Integer newPercentilePageSampling = ParseArgs.getInteger(args, "-percpage");
		if (newPercentilePageSampling != null)
			percentilePageSampling = newPercentilePageSampling.intValue();
		
		// get additional sampling rate per url call
		int percentileUrlSampling = 0;  // additional sampling rate per url call in percent
		Integer newPercentileUrlSampling = ParseArgs.getInteger(args, "-percurl");
		if (newPercentileUrlSampling != null)
			percentileUrlSampling = newPercentileUrlSampling.intValue();
		
		// get extended sampling level per url call
		int percentileUrlSamplingAddOption = 0;  // extended sampling level per url call, 0 = disabled
		Integer newPercentileUrlSamplingAddOption = ParseArgs.getInteger(args, "-percurlopt");
		if (newPercentileUrlSamplingAddOption != null)
			percentileUrlSamplingAddOption = newPercentileUrlSamplingAddOption.intValue();
		
		// get maximum number of error snapshots per URL (0 = unlimited)
		int maxErrorSnapshots = 0;
		Integer newMaxErrorSnapshots = ParseArgs.getInteger(args, "-maxerrsnap");
		if (newMaxErrorSnapshots != null)
			maxErrorSnapshots = newMaxErrorSnapshots.intValue();
		
		// get maximum memory in megabytes which can be used for error snapshots (-1 = unlimited, default = 10)
		long maxErrorSnapshotMemory = 20;
		Long newMaxErrorSnapshotMemory = ParseArgs.getLong(args, "-maxerrmem");
		if (newMaxErrorSnapshotMemory != null)
			maxErrorSnapshotMemory = newMaxErrorSnapshotMemory.longValue();
		
		// single user mode ?
		boolean singleUserMode = ParseArgs.hasOption(args, "-singleuser");
		
		// override value for http user agent field ?
		String setUserAgentStr = ParseArgs.getIgnoreCaseString(args, "-setuseragent");
		if (setUserAgentStr != null)
		{
			USER_AGENT_1 = setUserAgentStr;
		}
		// get required input arguments
		int concurrentUsers = 0;     // number of concurrent users
		plannedRequestTimeout = 0;   // request timeout in seconds
		
		System.out.println();
		
		// parse -u argument or ask --> <number of concurrent users>
		Integer i = ParseArgs.getIntegerOrAsk(args, "-u", "Concurrent Users, <RETURN>=1 : ", new Integer(1));
		if (i == null)
			System.exit(-1);
		else
			concurrentUsers = i.intValue();
		
		// parse -d argument or ask --> <test duration in seconds>
		i = ParseArgs.getIntegerOrAsk(args, "-d", "Test Duration in Seconds, <RETURN>=30 : ", new Integer(30));
		if (i == null)
			System.exit(-1);
		else
			plannedTestDuration = i.intValue();
		
		// parse -t argument or ask --> <request timeout in seconds>
		i = ParseArgs.getIntegerOrAsk(args, "-t", "HTTP Request Timeout per URL in Seconds, <RETURN>=60 : ", new Integer(60));
		if (i == null)
			System.exit(-1);
		else
			plannedRequestTimeout = i.intValue();
		
		// parse optional -tconnect argument (TCP/IP socket connect timeout in seconds)
		i = ParseArgs.getInteger(args, "-tconnect");
		if (i != null)
			plannedConnectTimeout = i.intValue();
		
		String genericFileName = PerformanceData.proposeFileName("SFGlobalOnboardingReportLT", concurrentUsers, ParseArgs.getString(args, "-executionPlan"));
		
		// auto-configure binary result file
		if (!ParseArgs.hasOption(args, "-nores"))
		{
			String newResultFile = ParseArgs.getString(args, "-res");
			if (newResultFile == null)
				resultFile = genericFileName + ".prxres";
			else
				resultFile = newResultFile;
			System.out.println("Result File : " + resultFile);
		}
		
		// display common arguments at console output
		System.out.println();
		System.out.println("# concurrent users = " + concurrentUsers);
		System.out.println("# max. parallel threads per user = " + maxParallelThreadsPerUser);
		System.out.print("# planned test duration = ");
		if (plannedTestDuration == 0)
			System.out.println("unlimited");
		else
			System.out.println("" + plannedTestDuration + " seconds");
		System.out.println("# http request timeout = " + plannedRequestTimeout + " seconds");
		if (plannedConnectTimeout != 0)
			System.out.println("# tcp/ip socket connect timeout = " + plannedConnectTimeout + " seconds");
		System.out.println("# startup delay = " + plannedStartupDelay + " milliseconds");
		System.out.println("# statistic sampling interval = " + samplingInterval + " seconds");
		System.out.println("# additional sampling rate per web page call = " + percentilePageSampling + " %");
		System.out.println("# additional sampling rate per url call = " + percentileUrlSampling + " %");
		System.out.println("# extended sampling per url call = " + PerformanceDataTickExtension.extTypeToString(percentileUrlSamplingAddOption).toLowerCase());
		System.out.print("# max loops per user = ");
		if (maxPlannedLoops == 0)
			System.out.println("unlimited");
		else
			System.out.println("" + maxPlannedLoops + " loops");
		if (downlinkBandwidth > 0)
			System.out.println("# max downlink bandwidth per user = " + downlinkBandwidth + " kbps");
		if (uplinkBandwidth > 0)
			System.out.println("# max uplink bandwidth per user = " + uplinkBandwidth + " kbps");
		System.out.println("# http protocol version = v" + httpProtocolVersion);
		System.out.println("# ssl protocol version = " + sslProtocolVersion);
		if (sslSessionCacheTimeout != 0)
			System.out.println("# ssl session cache timeout = " + sslSessionCacheTimeout + " seconds");
		else
			System.out.println("# ssl session cache disabled");
		if (resultFile != null)
			System.out.println("# result file = " + resultFile);
		else
			System.out.println("# no result file");
		if (debugFailedLoops)
			System.out.println("# debug failed loops");
		if (debugLoops)
			System.out.println("# debug loops");
		if (debugHttp)
			System.out.println("# debug http protocol headers");
		if (debugContent)
			System.out.println("# debug http content data");
		if (debugCookies)
			System.out.println("# debug cookies");
		if (debugKeepAlive)
			System.out.println("# debug keep-alive (socket pool)");
		if (debugSsl)
			System.out.println("# debug ssl (https)");
		
		
		// ----------------------------
		// *** initialize load test ***
		// ----------------------------
		
		
		// initialize performance data
		// ---------------------------
		final int PAGE_BREAKS = 7;  // number of page breaks in execute()  - modify this value if you add or delete some page breaks
		final int MAX_THREAD_STEPS = 274;  // number of URL requests in execute() - modify this value if you add or delete some requests
		performanceData = new PerformanceData(PAGE_BREAKS, MAX_THREAD_STEPS, concurrentUsers, maxParallelThreadsPerUser, plannedTestDuration, maxPlannedLoops, httpProtocolVersion, plannedStartupDelay, plannedRequestTimeout, samplingInterval, percentilePageSampling, percentileUrlSampling, percentileUrlSamplingAddOption);
		performanceData.setInfoText("SFGlobalOnboardingReportLT");
		performanceData.setExecutorsAnnotation(testRunAnnotation);
		if (commonNextProxyConfig != null)
		{
			performanceData.setProxyInfo(proxyHttpHost, proxyHttpPort, proxyHttpsHost, proxyHttpsPort);
			performanceData.addTestDescription("*** Warning: Load test executed via outbound proxy ***");
		}
		performanceData.setResultFileName(resultFile);
		performanceData.setDumpStream(System.out, "# ");
		performanceData.setMaxErrorSnapshots(maxErrorSnapshots);		// 0 = unlimited
		if (maxErrorSnapshotMemory >= 0)
			performanceData.setMaxErrorSnapshotsMemory(maxErrorSnapshotMemory * 1048576l);		// value in bytes
		
		if (sslECC)
			performanceData.addTestDescription("*** Warning: SSL/TLS option -ecc enabled ***");
		
		if ((downlinkBandwidth != 0) || (uplinkBandwidth != 0))
		{
			String downlinkBandwidthStr = "unlimited";
			String uplinkBandwidthStr = "unlimited";
			
			if (downlinkBandwidth != 0)
				downlinkBandwidthStr = "" + downlinkBandwidth + " kbps";
			if (uplinkBandwidth != 0)
				uplinkBandwidthStr = "" + uplinkBandwidth + " kbps";
			
			performanceData.addTestDescription("*** Warning: Max. network bandwidth per user limited. downlink = " + downlinkBandwidthStr + ", uplink = " + uplinkBandwidthStr + " ***");
		}
		
		if ((percentileUrlSamplingAddOption != PerformanceDataTickExtension.EXT_TYPE_NOTYPE) && (percentileUrlSampling > 0))
			performanceData.addTestDescription("*** Warning: Option \"" + PerformanceDataTickExtension.extTypeToString(percentileUrlSamplingAddOption).toLowerCase() + "\" enabled for additional sampling rate per URL call ***");
		if (debugFailedLoops)
			performanceData.addTestDescription("*** Warning: Debug failed loops enabled ***");
		if (debugLoops)
			performanceData.addTestDescription("*** Warning: Debug loops enabled ***");
		if (debugHttp)
			performanceData.addTestDescription("*** Warning: Debug HTTP protocol headers enabled ***");
		if (debugContent)
			performanceData.addTestDescription("*** Warning: Debug HTTP content data enabled ***");
		if (debugCookies)
			performanceData.addTestDescription("*** Warning: Debug cookies enabled ***");
		if (debugKeepAlive)
			performanceData.addTestDescription("*** Warning: Debug keep-alive enabled ***");
		if (debugSsl)
			performanceData.addTestDescription("*** Warning: Debug SSL/TLS enabled ***");
		if (!sslProtocolVersion.equalsIgnoreCase("all"))
			performanceData.addTestDescription("*** Warning: SSL/TLS protocol version fixed to " + sslProtocolVersion.toUpperCase() + " ***");
		if (sslSessionCacheTimeout == 0)
			performanceData.addTestDescription("*** Warning: SSL/TLS session cache disabled ***");
		if (singleUserMode)
		{
			String singleUserModeWarning = "*** Warning: Single user mode enabled ***";
			System.out.println(singleUserModeWarning);
			performanceData.addTestDescription(singleUserModeWarning);
		}
		if (setUserAgentStr != null)
		{
			String overrideUserAgentWarning = "*** Warning: User agent set to \"" + setUserAgentStr + "\" ***";
			System.out.println(overrideUserAgentWarning);
			performanceData.addTestDescription(overrideUserAgentWarning);
		}
		
		
		// ready to start load test...
		initNull(concurrentUsers);
		performanceData.setUserContextTable(getUserContextTable());
		
		// ... but init first remote interface ...
		initRemote(args);
		
		// ... and init plug-in class loader ...
		try
		{
			if (getPluginClassLoader() == null)
				setPluginClassLoader(new LoadtestPluginClassLoader(getSymmetricEncryptContext(), getEncryptedClasspathList()));
		}
		catch (Throwable pluginClassLoaderThrowable)
		{
			System.out.println("*** ERROR: Unable to load encrypted files ***");
			pluginClassLoaderThrowable.printStackTrace();
			System.exit(-1);
		}
		
		// ... and check multihomed option ...
		initMultihomed(args);
		
		// ... and add dynaTrace session ID to load test result - if available ...
		initDynaTrace();
		
		
		// use test-specific DNS hosts file (optional) ?
		String dnsHostsFile = ParseArgs.getIgnoreCaseString(args, "-dnshosts");
		if (dnsHostsFile != null)
		{
			try
			{
				dnsCache = new DNSCache(getSymmetricEncryptContext(), dnsHostsFile);
			}
			catch (IOException ie)
			{
				System.out.println("*** ERROR: unable to read DNS hosts file " + dnsHostsFile + " ***");
				System.out.println("*** Hint: you have to ZIP " + dnsHostsFile + " together with the compiled class of the load test program ***");
				ie.printStackTrace();
				System.exit(-1);
			}
		}
		
		// use test-specific DNS translation table (optional) ?
		String dnsTranslationTableFile = ParseArgs.getIgnoreCaseString(args, "-dnstranslation");
		if (dnsTranslationTableFile != null)
		{
			try
			{
				DNSTranslationTable dnsTranslationTable = new DNSTranslationTable(getSymmetricEncryptContext(), new File(dnsTranslationTableFile));
				if (dnsCache == null)
					dnsCache = new DNSCache();
				dnsCache.setDNSTranslationTable(dnsTranslationTable);
			}
			catch (IOException ie)
			{
				System.out.println("*** ERROR: unable to read DNS translation table file " + dnsTranslationTableFile + " ***");
				System.out.println("*** Hint: you have to ZIP " + dnsTranslationTableFile + " together with the compiled class of the load test program ***");
				ie.printStackTrace();
				System.exit(-1);
			}
		}
		
		// use test-specific DNS servers (optional) ?
		String dnsSrvStr = ParseArgs.getIgnoreCaseString(args, "-dnssrv");
		if (dnsSrvStr != null)
		{
			ArrayList<String> dnsSrvList = new ArrayList<String>();
			StringTokenizer dnsTok = new StringTokenizer(dnsSrvStr, ",;");
			while (dnsTok.hasMoreTokens())
				dnsSrvList.add(dnsTok.nextToken());
			if (dnsCache == null)
				dnsCache = new DNSCache(dnsSrvList);
			else
				dnsCache.setDnsServers(dnsSrvList);
		}
		
		// enable DNS TTL ?
		if (ParseArgs.hasOption(args, "-dnsenattl"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.enableTTL();
		}
		
		// set fixed DNS TTL ?
		Integer dnsFixTTL = ParseArgs.getInteger(args, "-dnsfixttl");
		{
			if (dnsFixTTL != null)
			{
				if (dnsCache == null)
					dnsCache = new DNSCache();
				dnsCache.setFixedTTL(dnsFixTTL.intValue());
			}
		}
		
		// enable DNS resolves per loop ?
		if (ParseArgs.hasOption(args, "-dnsperloop"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsPerLoop = true;
		}
		
		// enable DNS statistic ?   // note: use this option only if not any other, more specific DNS option is enabled.
		if (ParseArgs.hasOption(args, "-dnsstatistic"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
		}
		
		// debug DNS resolver ?
		if (ParseArgs.hasOption(args, "-dnsdebug"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setDebugToStdout(true);
		}
		
		// enable IPv6 
		if (ParseArgs.hasIgnoreCaseOption(args, "-enableIPv6"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setEnableIPv6(true);
			String networkInterfaceName = ParseArgs.getString(args, "-enableIPv6");
			if(null != networkInterfaceName && !networkInterfaceName.startsWith("-"))
				dnsCache.setNetworkInterfaceName(networkInterfaceName);
		}
		
		// enable IPv6 and V4 
		if (ParseArgs.hasIgnoreCaseOption(args, "-enableIPv6v4"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setEnableIPv6v4(true);
			String networkInterfaceName = ParseArgs.getString(args, "-enableIPv6v4");
			if(null != networkInterfaceName && !networkInterfaceName.startsWith("-"))
				dnsCache.setNetworkInterfaceName(networkInterfaceName);
		}
		
		if (dnsCache != null)
		{
			// update performance data with DNS settings
			performanceData.addDNSCacheStatistic(dnsCache.getCacheStatistic());
			performanceData.addTestDescription("*** Warning: OS-independent DNS access enabled. " + dnsCache.getConfigInfoText() + " ***");
			if (dnsPerLoop)
				performanceData.addTestDescription("*** Warning: DNS option -dnsperloop enabled ***");
			
			// log DNS settings
			System.out.println("# OS-independent DNS access enabled. " + dnsCache.getConfigInfoText());
			if (dnsPerLoop)
				System.out.println("# DNS option -dnsperloop enabled");
		}
		
		// initialize input files
		try
		{
			UserLogin_txt = new VarInputFileReader(getSymmetricEncryptContext(), "UserLogin.txt", "#", ",", AbstractInputFileReader.EOF_REOPEN_FILE, prxCharEncoding);
			UserLogin_txt.setTrimValues(true);
		}
		catch (IOException ie)
		{
			System.out.println("*** ERROR: UNABLE TO OPEN INPUT FILE ***");
			ie.printStackTrace();
			System.exit(-2);
		}
		
		// calculate sampling offset and virtual user startup offset for cluster jobs (time shift per cluster member)
		int samplingTimeshift = 0;	// value in seconds
		if (!ParseArgs.hasOption(args, "-nosdelayCluster"))
		{
			if ((getClusterTotalMemberCount() > 1) && (getClusterMemberLocalId() > 0))
			{
				samplingTimeshift = Math.round(((float) samplingInterval / (float) getClusterTotalMemberCount()) * (float) getClusterMemberLocalId());
				System.out.println("# samplingTimeshift = " + samplingTimeshift + " seconds");
				
				long startupDelayOffset = (plannedStartupDelay / ((long) getClusterTotalMemberCount())) * ((long) getClusterMemberLocalId());
				System.out.println("# startupDelayTimeshift = " + startupDelayOffset + " milliseconds");
				System.out.println();
				if (startupDelayOffset > 0)
				{
					try { sleepRemoteInterruptable(startupDelayOffset); } catch (InterruptedException ie) {}
				}
			}
		}
		
		
		// update performance data
		// -----------------------
		testDurationStart = System.currentTimeMillis();
		performanceData.setStartDate();
		performanceData.addSnapshot(getCpuUsagePercent());
		performanceData.setSnapshotsTimeshift(samplingTimeshift);
		performanceData.setEndDate();
		
		// initialize global context for plug-ins  
		LoadtestPluginContext globalPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, new SFGlobalOnboardingReportLT());
		
		
		// --------------------------
		// *** start of load test ***
		// ---------------------------
		
		
		// special case for execution plans - start test with zero virtual users
		// ---------------------------------------------------------------------
		if (hasExecutionPlan())
		{
			if (concurrentUsers != 0)
			{
				System.out.println("*** Fatal Error: Load test with execution plan must start with zero number of virtual users - Load test program aborted ***");
				System.exit(1);
			}
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				SFGlobalOnboardingReportLT simulatedUser = new SFGlobalOnboardingReportLT(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				
				HttpLoadTestUserContext userContext = new HttpLoadTestUserContext(simulatedUser, null);
				userContext.setLoadTestUserExecutionPlanPlaceholder();
				getUserContextTable().getUserContextList().add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
		}
		
		
		// start virtual users as threads (normal case)
		// --------------------------------------------
		usersToBeIncreasedAtStartupOffset.set(concurrentUsers);
		for (int x = 0; x < concurrentUsers; x++)
		{
			if (cancelIncrementDecrementUser || cancelInitialIncrementUser)
			{
				usersToBeIncreasedAtStartupOffset.set(0);
				break;
			}
			
			// start load test thread
			// ----------------------
			Thread t = null;
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				SFGlobalOnboardingReportLT simulatedUser = new SFGlobalOnboardingReportLT(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				t = new Thread(simulatedUser);
				String threadName = "" + getUserContextTable().getUserContextList().size();
				threadName = THREAD_NAME.substring(0, 7 - threadName.length()) + threadName;
				t.setName(threadName);
				if (debugLoops && (simulatedUser.getLog().size() > 0))
				{
					synchronized (dumpLock)
					{
						simulatedUser.dumpLog(threadName + " ", System.out);		// dump log of constructor
					}
				}
				HttpLoadTestUserContext userContext = new HttpLoadTestUserContext(simulatedUser, t);
				getUserContextTable().getUserContextList().add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
			t.start();
			usersToBeIncreasedAtStartupOffset.decrementAndGet();
			System.out.println("# --- thread " + t.getName() + " created --- " + ZoneTime.dateToShortString() + " ---");
			
			while (isSuspend())
			{
				try { Thread.currentThread().sleep(100); } catch (InterruptedException ie) { break; }
				if (abortedByRemote() || abortedByEofInputFile())
					break;
				
				// check if max test duration reached during suspend
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
					break;
				
				// display and sample temporary performance data all "sampling interval" seconds - also during suspend
				if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
				{
					performanceData.addSnapshot(getCpuUsagePercent());
					performanceData.setEndDate();
				}
			}
			
			if (abortedByRemote() || abortedByEofInputFile())
				break;
			
			if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				break;
			
			// startup delay for next thread
			// -----------------------------
			try
			{
				if (!singleUserMode)   // create concurrent users
				{
					if (plannedStartupDelay <= 3000)
						sleepRemoteInterruptable(plannedStartupDelay);
					else
					{
						long startupDelayStartTime = System.currentTimeMillis();
						while (true)
						{
							if (abortedByRemote() || abortedByEofInputFile())
								break;
							if ((System.currentTimeMillis() - startupDelayStartTime) >= plannedStartupDelay)
								break;
							
							Thread.currentThread().sleep(100);
							
							// display and sample temporary performance data all "sampling interval" seconds
							if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
							{
								performanceData.addSnapshot(getCpuUsagePercent());
								performanceData.setEndDate();
							}
						}
						while (isSuspend())
						{
							try { Thread.currentThread().sleep(100); } catch (InterruptedException ie) { break; }
							if (abortedByRemote() || abortedByEofInputFile())
								break;
							
							// check if max test duration reached during suspend
							if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
								break;
							
							// display and sample temporary performance data all "sampling interval" seconds - also during suspend
							if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
							{
								performanceData.addSnapshot(getCpuUsagePercent());
								performanceData.setEndDate();
							}
						}
						
					}
				}
				else
					t.join();   // single user mode
			}
			catch (InterruptedException ie) { break; }
			if (abortedByRemote() || abortedByEofInputFile())
				break;
			
			
			// display and sample temporary performance data all "sampling interval" seconds
			if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
			{
				performanceData.addSnapshot(getCpuUsagePercent());
				performanceData.setEndDate();
				if (!isRemote())
				{
					synchronized (dumpLock)
					{
						performanceData.dump(false);
					}
				}
			}
		}
		usersToBeIncreasedAtStartupOffset.set(0);	// just in case that a thread is not started for any reason
		
		
		// wait for test-end in a loop
		// ---------------------------
		boolean allDone = false;
		while (!allDone)
		{
			// test aborted ?
			if (abortedByRemote() || abortedByEofInputFile())
			{
				nearRemoteEnd();
				String abort = "";
				if (abortedByRemote())
					abort = "*** test aborted by remote command ***";
				if (abortedByEofInputFile())
				{
					abort = "*** test aborted at eof of input file ***";
					performanceData.addTestDescription(abort);
				}
				synchronized (dumpLock)
				{
					addSSLCacheStatistic();
					performanceData.addSnapshot(getCpuUsagePercent());
					performanceData.setEndDate();
					
					if (!isRemote())
						performanceData.dump(false);
					if (resultFile != null)
						try { performanceData.writeObjectToFile(getSymmetricEncryptContext(), resultFile); } catch (IOException ie) { ie.printStackTrace(); }
					
					System.out.println();
					System.out.println(abort);
					System.out.println();
					System.out.flush();
					try { Thread.currentThread().sleep(10000); } catch (InterruptedException ie) {}
					System.exit(0);
				}
			}
			
			// display and sample temporary performance data all "sampling interval" seconds
			if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
			{
				performanceData.addSnapshot(getCpuUsagePercent());
				performanceData.setEndDate();
				if (!isRemote())
				{
					synchronized (dumpLock)
					{
						performanceData.dump(false);
					}
				}
			}
			
			// check if test has been done in case of decrement users to zero
			if ((decrementUser) && (plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				decrementUser = false;
			// check if test has been done
			if (!hasExecutionPlan())
				allDone = isTestDone();
			else
			{
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				{
					performanceData.addTestDescription("*** Warning: Load test aborted. Execution plan time limit exceeded after " + plannedTestDuration + " seconds ***");
					triggerAbort();
				}
			}
			
			// if not all is done: sleep one second
			if (!allDone)
				try { sleepRemoteInterruptable(1000); } catch (InterruptedException ie) { break; }
		} // end of wait loop
		
		
		// mark near end of test - only if a remote interface has been used
		nearRemoteEnd();
		
		
		
		// final test result - test completed
		// ----------------------------------
		performanceData.addSnapshot(getCpuUsagePercent());
		performanceData.setEndDate();
		
		// save test result
		performanceData.dump(true);
		if (resultFile != null)
			try { performanceData.writeObjectToFile(getSymmetricEncryptContext(), resultFile); } catch (IOException ie) { ie.printStackTrace(); }
		
		// all done
		System.out.flush();
		
		// wait for official end of test - only if a remote interface has been used
		waitRemoteEnd();
		
		System.out.println();
		System.out.println("Result File: " + resultFile);
		
		// now dead
		System.exit(0);
	}


	/**
	 * implement VaryingLoadInterface: support to increment the number of simulated users at runtime.
	 */
	public void setIncrementUser(long startTime)
	{
		incrementUserStartTime = startTime;
		incrementUserFlag = true;
	}

	public boolean isIncrementUser()
	{
		return incrementUserFlag;
	}

	public long getIncrementUserStartTime()
	{
		return incrementUserStartTime;
	}

	public void setIncrementUserStartTime(long startTime)
	{
		incrementUserStartTime = startTime;
	}

	public void clearIncrementUser()
	{
		incrementUserFlag = false;
	}

	public int incrementUsers(int numAddUsers, long startupDelay)
	{
		if (startupDelay < 0)
			startupDelay = plannedStartupDelay;
		return incrementUsersImplementation(numAddUsers, startupDelay, this);
	}

	static int incrementUsersImplementation(int numAddUsers, long startupDelay, HttpLoadTest httpLoadTest)
	{
		long startupDelayOffset = 0;
		if ((getClusterTotalMemberCount() > 1) && (getClusterMemberLocalId() > 0))
			startupDelayOffset = (startupDelay / ((long) getClusterTotalMemberCount())) * ((long) getClusterMemberLocalId());
		
		ArrayList<HttpLoadTestUserContext> addUserContextList = new ArrayList<HttpLoadTestUserContext>(numAddUsers);
		for (int x = 0; x < numAddUsers; x++)
		{
			if (abortedByRemote() || abortedByEofInputFile())
				return x;
			
			// initialize load test thread
			// ---------------------------
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				SFGlobalOnboardingReportLT simulatedUser = new SFGlobalOnboardingReportLT(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				HttpLoadTestUserContext userContext = prepareIncrementUser(simulatedUser, System.currentTimeMillis() + startupDelayOffset + (x * startupDelay));
				addUserContextList.add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
				if (debugLoops && (simulatedUser.getLog().size() > 0))
				{
					synchronized (dumpLock)
					{
						simulatedUser.dumpLog(userContext.getLoadTestThread().getName() + " ", System.out);		// dump log of constructor
					}
				}
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
		}
		
		// start load test threads by a thread
		// -----------------------------------
		HttpLoadTestIncrementUserThread incrementUserThread = new HttpLoadTestIncrementUserThread(httpLoadTest, addUserContextList);
		incrementUserThread.start();
		return numAddUsers;
	}


	/**
	 * Internal method used to load and apply next proxy settings from ZBAProxySettings.properties file.
	 * Settings are applied only if file exists and nextProxyIsActive is set to true in the file.
	 * Note that settings stored with the session, will be ineffective.
	 *
	 * @since V5.5-D
	 */
	private void applyNextProxySettingsFromFileIfExists()
	{
		
		String filename = "ZBAProxySettings.properties";
		BufferedReader bin = null;
		SymmetricEncryptContext decryptContext = getSymmetricEncryptContext();
		File file = new File(filename);
		
		if (file.exists())
		// open input file
		try
		{
			if (decryptContext == null)
			{
				bin = new BufferedReader(new InputStreamReader(new FileInputStream(filename), Charset.forName("UTF-8")));
			}
			else
			{
				// create a reader stream that decrypts the data on the fly
				bin = new BufferedReader(new InputStreamReader(SymmetricEncrypt.getCipherInputStream(new FileInputStream(filename), decryptContext), Charset.forName("UTF-8")));
			}
			
			if (bin != null)
			{
				Properties nextProxyConfigProperties = new Properties();
				nextProxyConfigProperties.load(bin);
				NextProxyConfig nextProxyConfig = new NextProxyConfig();
				nextProxyConfig.setActive(Boolean.valueOf(nextProxyConfigProperties.getProperty("nextProxyIsActive")));
				proxyEnabled = nextProxyConfig.isActive();                             // if false: do not use a proxy server
				
				if (proxyEnabled)
				{
					nextProxyConfig.disableHttpProxyCache(Boolean.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpCacheDisabled")));
					proxyCacheDisabled = nextProxyConfig.isDisabledHttpProxyCache();
					nextProxyConfig.setHttpHost(nextProxyConfigProperties.getProperty("nextProxyHttpHost"));
					proxyHttpHost = nextProxyConfig.getHttpHost();
					nextProxyConfig.setHttpPort(Integer.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpPort")));
					proxyHttpPort = nextProxyConfig.getHttpPort();
					nextProxyConfig.setHttpsHost(nextProxyConfigProperties.getProperty("nextProxyHttpsHost"));
					proxyHttpsHost = nextProxyConfig.getHttpsHost();
					nextProxyConfig.setHttpsPort(Integer.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpsPort")));
					proxyHttpsPort = nextProxyConfig.getHttpsPort();
					nextProxyConfig.setAuthUsername(nextProxyConfigProperties.getProperty("nextProxyAuthUsername"));
					nextProxyConfig.setAuthPassword(nextProxyConfigProperties.getProperty("nextProxyAuthPassword"));
					nextProxyConfig.setNoNextProxy(nextProxyConfigProperties.getProperty("noNextProxy"));
					noProxyFor = nextProxyConfig.getNoNextProxy();
					
					String proxyAuth = "";
					
					if (nextProxyConfig.getAuthUsername() != null)
					{
						proxyAuth = nextProxyConfig.getAuthUsername() + ":";
						if (nextProxyConfig.getAuthPassword() != null)
							proxyAuth = proxyAuth + nextProxyConfig.getAuthPassword();
					}
					
					String  proxyAuthorization = null;
					
					if (proxyAuth.length() > 1)
						proxyAuthorization = Base64Encoder.encode(proxyAuth);		// Base 64 encoded - used for basic authentication only
					
					commonNextProxyConfig = new NextProxyConfig(proxyEnabled, proxyCacheDisabled, proxyHttpHost, proxyHttpPort, proxyHttpsHost, proxyHttpsPort, proxyAuthorization, noProxyFor);
					
					log("*** Warning: Applying proxy configuration from file " + filename + " ***");
				}
				
			}
		}
		catch (Throwable tr)
		{
			log("*** Unable to load proxy configuration from properties file " + filename + " ***");
			tr.printStackTrace();
		}
		finally
		{
			if (bin != null)
			{
				try { bin.close(); } catch (Exception e) {}
			}
		}
		
	}
		
	
	// source code of inline script "VscrbEncode"
	public static String getInlineScriptCode_1571858096671()
	{
		return "VScrb_Enc=urlEncode(vScrb)";
	}
	
	
	/**
	* Execute the inline script "VscrbEncode"
	* 
	* @param threadStep 	the current execution step of the simulated user (page break or URL call)
	* @param totalLoopCounter 	the total number of executed loops - counted overall simulated users
	* @param innerLoopContext 	the context of the current inner loop, or null if the inline script in not executed inside an inner loop
	*
	* @return the context of the inline script
	*/
	public LoadtestInlineScriptContext executeInlineScript_1571858096671(int threadStep, int totalLoopCounter, InnerLoopContext innerLoopContext)
	{
		LoadtestInlineScriptContext inlineScriptContext = new LoadtestInlineScriptContext("VscrbEncode", ProxySnifferVarSourceInlineScript.EXEC_SCOPE_LOOP_ITEM_START, "", this, LoadtestInlineScriptContext.RESULT_TYPE_SET_OUTPUT_VARS, 15, threadNumber, threadLoopCounter, socketPool, cookieHandler);
		inlineScriptContext.setThreadStep(threadStep);
		InlineScriptExecutor inlineScriptExecutor = new InlineScriptExecutor(getInlineScriptCode_1571858096671(), inlineScriptContext);
		log("Executing inline script \"" + inlineScriptContext.getScriptTitle() + "\"");
		LoadtestInlineScriptVar inputVar1 = new LoadtestInlineScriptVar("vScrb", Lib.nullToBlank(vScrb), 1);		// note: parameter no. 3 is the scope of the var
		inlineScriptContext.addInputVar(inputVar1);
		LoadtestInlineScriptVar inputVar2 = new LoadtestInlineScriptVar("VScrb_Enc", Lib.nullToBlank(VScrb_Enc), 1);		// note: parameter no. 3 is the scope of the var
		inlineScriptContext.addInputVar(inputVar2);
		LoadtestInlineScriptVar outputVar1 = new LoadtestInlineScriptVar("VScrb_Enc", Lib.nullToBlank(VScrb_Enc), 1);		// note: parameter no. 3 is the scope of the var
		inlineScriptContext.addOutputVar(outputVar1);
		inlineScriptExecutor.execute();		// execute inline script
		VScrb_Enc = inlineScriptContext.getOutputVar("VScrb_Enc").getVarValue();
		log("<<< VScrb_Enc = " + VScrb_Enc);
		for (String stdoutLine : inlineScriptContext.getOutputStreamData())
			log(inlineScriptContext.getScriptTitle() + ": " + stdoutLine);
		for (String stderrLine : inlineScriptContext.getErrorStreamData())
			System.err.println(inlineScriptContext.getScriptTitle() + ": " + stderrLine);
		if (!inlineScriptExecutor.wasSuccessFulExecution())
		{
			if (!inlineScriptContext.isScriptAbort())
				throw new InlineScriptExecutionException("*** Execution of inline script \"" + inlineScriptContext.getScriptTitle() + "\" failed ***");
		}
		return inlineScriptContext;
	}

}	// end of class

