
// *********************************************************************************************
//
// Automatically Generated Load Test Program
// -----------------------------------------
//
// Source: SFEditEmployeeProfileSM.java
// Date  : 03 Dec 2019 10:12:03 PST
// Author: Apica ZebraTester V5.5-F / automatically generated
//
// Procedure Copyright by Ingenieurbuero David Fischer AG  |  A Company of the Apica Group
// All Rights Reserved
//
// http://www.apicasystem.com                                         http://www.zebratester.com
// *********************************************************************************************


import java.io.*;
import java.nio.charset.Charset;
import java.util.*;
import java.util.concurrent.atomic.*;
import dfischer.utils.AbstractInputFileReader;
import dfischer.utils.Base64Decoder;
import dfischer.utils.Base64Encoder;
import dfischer.utils.ConvertToDoubleNumber;
import dfischer.utils.ContentTokenExtractor;
import dfischer.utils.ContentTokenExtractorItem;
import dfischer.utils.Cookie;
import dfischer.utils.CookieHandler;
import dfischer.utils.DigestAuthContext;
import dfischer.utils.DNSCache;
import dfischer.utils.DNSTranslationTable;
import dfischer.utils.DynamicProtobufContentParser;
import dfischer.utils.ExternalParamFile;
import dfischer.utils.FileCache;
import dfischer.utils.GenericPluginInterface;
import dfischer.utils.GetRealTimeUserInputFieldsInterface;
import dfischer.utils.HtmlContentParser;
import dfischer.utils.HtmlHeaderCookieExtractor;
import dfischer.utils.HttpLoadTest;
import dfischer.utils.HttpLoadTestIncrementUserThread;
import dfischer.utils.HttpLoadTestUserContext;
import dfischer.utils.HttpSocketPool;
import dfischer.utils.HttpTestURL;
import dfischer.utils.HttpTestURLDNSContext;
import dfischer.utils.HttpTestURLThreadHandler;
import dfischer.utils.InlineScriptExecutionException;
import dfischer.utils.InlineScriptExecutor;
import dfischer.utils.InnerLoopContext;
import dfischer.utils.JSONHtmlBasedExtractor;
import dfischer.utils.JSONPathBasedExtractor;
import dfischer.utils.JSONPathBasedExtractorItem;
import dfischer.utils.Lib;
import dfischer.utils.LoadtestInlineScriptContext;
import dfischer.utils.LoadtestInlineScriptVar;
import dfischer.utils.LoadtestPluginClassLoader;
import dfischer.utils.LoadtestPluginContext;
import dfischer.utils.NextProxyConfig;
import dfischer.utils.ParseArgs;
import dfischer.utils.ParseUrl;
import dfischer.utils.PerformanceData;
import dfischer.utils.PerformanceDataTickExtension;
import dfischer.utils.ProtobufFieldAndValueElement;
import dfischer.utils.ProtobufLib;
import dfischer.utils.RealTimeUserInputField;
import dfischer.utils.ScreenshotImage;
import dfischer.utils.SetThreadStepInterface;
import dfischer.utils.SSLInit;
import dfischer.utils.SSLSessionCacheStatistic;
import dfischer.utils.SSLSessionCacheStatisticInterface;
import dfischer.utils.SuspendResumeInterface;
import dfischer.utils.SymmetricEncrypt;
import dfischer.utils.SymmetricEncryptContext;
import dfischer.utils.TextLineTokenExtractor;
import dfischer.utils.TextLineTokenExtractorItem;
import dfischer.utils.ThreadStepInterface;
import dfischer.utils.UserInputField;
import dfischer.utils.UserTransactionContext;
import dfischer.utils.UserTransactionRuntimeHandler;
import dfischer.utils.VarInputFileReader;
import dfischer.utils.VarRandomInputFileReader;
import dfischer.utils.VaryingLoadInterface;
import dfischer.utils.VaryingTestDurationInterface;
import dfischer.utils.XmlContentParser;
import dfischer.utils.XmlDoctypeCommentParser;
import dfischer.utils.ZoneTime;
import dfischer.proxysniffer.ProxySnifferVarSourceInlineScript;
import dfischer.utils.WebSocketPluginInterface;
import dfischer.utils.BoundaryBasedExtractor;
import dfischer.utils.BoundaryBasedExtractorItem;
import dfischer.utils.RegExpBasedExtractor;
import dfischer.utils.RegExpBasedExtractorItem;
import dfischer.utils.XpathBasedExtractor;
import dfischer.utils.XpathBasedExtractorItem;
import dfischer.proxysniffer.WebSocketData;
import dfischer.utils.HttpTestWebsocketContext;
import dfischer.websocket.*;


/**
 * Automatically generated load test program.
 */
public class SFEditEmployeeProfileSM extends HttpLoadTest implements Runnable, ThreadStepInterface, SetThreadStepInterface, SSLSessionCacheStatisticInterface, VaryingLoadInterface, VaryingTestDurationInterface, SuspendResumeInterface, GetRealTimeUserInputFieldsInterface
{
	public static final String prxVersion = "V5.5-F";
	public static final int    prxCharEncoding = 3;                         // 1 = OS Default, 2 = ISO-8859-1, 3 = UTF-8
	public static final String testDescription = "ExternalCandidateProfile";

	public static String USER_AGENT_1 = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0";

	private static final boolean CONTAINS_PARALLEL_EXECUTED_URLS = false;
	private static final int MAX_PARALLEL_THREADS_PER_USER = 6;                       // default value for max. parallel executed URLs per user
	private static int maxParallelThreadsPerUser = MAX_PARALLEL_THREADS_PER_USER;     // configured value for max. parallel executed URLs per user

	private static final boolean CONTAINS_EXTERNAL_RESOURCES = false;       // note: external resources are typically additional Java library files (*.jar files) invoked by self-developed plug-ins. Consider that Input Files and the Main Class of Plug-Ins are NOT external resources in this context because ZebraTester knows already their declarations.

	// --- WebSocket Object ---
	WebSocketData webSocketData = null;                                     // WebSocket Object that contains data of recorded WebSocket frames.
	WebSocketPluginInterface[] webSocketPluginsForURL = null;               // all assiciated web socket plugins for specific URL.

	// --- proxy configuration ---
	private static boolean proxyEnabled = false;                             // if false: do not use a proxy server
	private static boolean proxyCacheDisabled = true;
	private static String  proxyHttpHost = "";
	private static int     proxyHttpPort = -1;
	private static String  proxyHttpsHost = "";
	private static int     proxyHttpsPort = -1;
	private static String  noProxyFor = "";
	private static String  proxyAuthorization = null;
	private static NextProxyConfig commonNextProxyConfig = null;
	private NextProxyConfig userNextProxyConfig = null;
	
	private static int plannedStartupDelay = 200;                           // startup delay between concurrent users in milliseconds, see main argument "-sdelay"
	private static int plannedTestDuration = -1;                            // planned load test duration in seconds, 0 = unlimited, see main argument "-d"
	private static int maxPlannedLoops = 0;  								   // maximum planned loops per user, 0 = unlimited, see main argument "-maxloops"
	private static int plannedRequestTimeout = 0;                           // planned request timeout in seconds, see main argument "-t"
	private static int plannedConnectTimeout = 0;                           // planned TCP/IP socket connect timeout in seconds (default = use plannedRequestTimeout), see main argument "-tconnect"
	
	private static String defaultTimeZone = "PST";                          // use main argument -tz <timezone> to alter
	private static char defaultNumberGroupingSeparator = '\'';              // use main argument -dgs a|c to alter
	private static String sslProtocolVersion = "all";                       // applied ssl protocol version: "all" = v3/tls/tls11/tls12, use main argument -ssl to set a fixed protocol version
	private static boolean sslcmode = false;                                // support of deficient ssl servers, use main argument -sslcmode to enable
	private static boolean sslECC = false;                                  // elliptic curve cryptography (ECC) is disabled by default, use main argument -ecc to enable
	private static boolean sslSNI = true;                                   // server name indication (SNI) is enabled by default, use main argument -nosni to disable
	private static boolean sslSNICirical = false;                           // the SNI TLS extension is by default set as non-critical, use main argument -snicritical to set as critical
	private static boolean useTlsSessionTickets = false;                    // Session Tickets can only be used with TLS, use main argument -tlssessiontickets to set to use
	private static final long loopErrorDelay = 20;                          // error delay (in milliseconds) applied if a loop of a virtual user has failed
	private static final String THREAD_NAME = "T000000";                    // internal
	private static Integer dumpLock = new Integer(0);                       // internal
	private static Integer inputFileLock = new Integer(0);                  // internal
	private volatile int threadStep = ThreadStepInterface.THREAD_NO_STEP;   // internal
	private boolean urlCallPassed = false;                                  // internal
	private String localIpAddress = null;                                   // internal
	private static long downlinkBandwidth = 0;                              // max. downlink bandwidth per user. 0 = unlimited. use main argument -downlink <kbps> to alter
	private static long uplinkBandwidth = 0;                                // max. uplink bandwidth per user. 0 = unlimited. use main argument -uplink <kbps> to alter
	private static boolean dnsPerLoop = false;								// true if main argument "-dnsperloop" is set = perform new DNS resolves for each executed loop. normally false
	private HttpTestURLDNSContext userDNSContext = null;                    // user specific DNS context - normally null when no special DNS servers are used
	
	private static volatile boolean debugFailedLoops = false;               // true if main argument "-dfl" is set
	private static volatile boolean debugLoops = false;                     // true if main argument "-dl" is set
	private static volatile boolean debugHttp = false;                      // true if main argument "-dh" is set
	private static volatile boolean debugContent = false;                   // true if main argument "-dc" is set
	private static volatile boolean debugCookies = false;                   // true if main argument "-dC" is set
	private static volatile boolean debugKeepAlive = false;                 // true if main argument "-dK" is set
	private static volatile boolean debugSsl = false;                       // true if main argument "-dssl" is set
	
	private static String resultFile = null;                                // name of binary test result file or null
	
	private final static String httpProtocolVersion = "1.1";      // applied HTTP protocol version V1.1
	
	private static ExternalParamFile externalParamFile = null;                              // used only for very large parameter values (commonly unused)
	private static final String EXTERNAL_PARAM_FILE = "SFEditEmployeeProfileSMExtParams.dat";// input file name for very large parameter values
	private static FileCache requestFileCache = new FileCache();  // file cache for large XML, SOAP and ASCII requests
	
	private int requestTimeout = -1;                              // thread input data from constructor, timeout per url request in seconds
	private int remainingLoops = -1;                              // thread input data from constructor, number of loops per thread (optional)
	private boolean checkLoopCount = false;                       // thread input data from constructor, number of loops per thread (optional)
	private int threadNumber = -1;                                // thread input data from constructor, internal thread number
	private int threadLoopCounter = 0;                            // internal loop counter per thread
	private volatile int userResumeStartWaitDelay = 0;            // internal, user specific delay when the load test execution is resumed
	private volatile boolean decrementEndOfLoopFlag = false;	  // internal flag to decrement the simulated user at runtime
	private volatile boolean incrementUserFlag = false;           // internal flag to increment the simulated user at runtime
	private volatile long incrementUserStartTime = -1;            // internal start time when increment the simulated user at runtime
	private static AtomicInteger totalLoopCounter = new AtomicInteger(0);    // internal overall loop counter

	private LoadtestPluginContext userPluginContext = null;       // plug-in context per user
	private LoadtestInlineScriptContext inlineScriptContext = null;          // re-used, scratch, the returned context of an inline script that runs at item or URL exec scope

	private Object sslSessionCache = null;                        // internal ssl session cache per thread
	private SSLSessionCacheStatistic sslStatistic = null;         // internal ssl session cache statistic per thread
	private static int sslSessionCacheTimeout = 300;              // timeout of ssl session cache in seconds, 0 = session cache disabled
	private static int sslHandshakeRandomGeneratorType = -1;      // invalid initial value, use the default secure random generator for SSL handshakes
	private HttpSocketPool socketPool = null;                     // re-used, scratch, internal socket pool per thread and loop
	private CookieHandler cookieHandler = null;                   // re-used, scratch, internal cookie handler per thread and loop

	private HttpTestURL testURL = null;                           // re-used, scratch, http request and response
	private HttpTestURLThreadHandler pageThreadHandler = null;    // re-used, scratch, support for parallel processing of http request within a page
	private int httpStatus = -1;                                  // re-used, scratch, http response status code from webserver
	private HtmlContentParser htmlContentParser = null;           // re-used, scratch, used to extract vars from http response
	private XmlContentParser xmlContentParser = null;             // re-used, scratch, used to extract vars from http response
	private JSONHtmlBasedExtractor jsonHtmlBasedExtractor = null; // re-used, scratch, used to extract vars from http response
	private DynamicProtobufContentParser protobufContentParser = null;  // re-used, scratch, used to extract vars from http response
	private TextLineTokenExtractor textLineTokenExtractor = null; // re-used, scratch, used to extract vars from http response
	private ContentTokenExtractor contentTokenExtractor = null;   // re-used, scratch, used to extract vars from http response
	private BoundaryBasedExtractor boundaryBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private RegExpBasedExtractor regExpBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private XpathBasedExtractor xpathBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private JSONPathBasedExtractor jsonPathBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	
	private static VarInputFileReader Login_txt = null;              // input file Login.txt, file scope: new line per user

	private volatile UserTransactionRuntimeHandler transactionHandler = new UserTransactionRuntimeHandler();		// re-used, support to manage user-defined transactions
	private Map<String,String> transactionContextMap = new HashMap<>();		// used to correctly measure the user-defined transactions

	private String P_Password = null;                                     // var declaration from web admin var handler: scope = per user
	private String P_UserID = null;                                       // var declaration from web admin var handler: scope = per user

	private String C_Mod2 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_SAMLReq2 = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_Mod1 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_SAMLReq1 = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_LastModified = null;                // var declaration from web admin var handler: scope = per loop
	private String C_Mod0 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_EID = null;                         // var declaration from web admin var handler: scope = per loop
	private String C_Token2 = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_Token1 = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_SAMLReq = null;                     // var declaration from web admin var handler: scope = per loop
	private String C_Merge0 = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_AjaxsecKey = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_Img0 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_belieze1 = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_belieze0 = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_Resource1 = null;                   // var declaration from web admin var handler: scope = per loop
	private String C_tctest0 = null;                     // var declaration from web admin var handler: scope = per loop
	private String C_docKey = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_Signature3 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_Signature2 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_TimeStamp = null;                   // var declaration from web admin var handler: scope = per loop
	private String C_Signature1 = null;                  // var declaration from web admin var handler: scope = per loop
	private String vScrb = null;                         // var declaration from web admin var handler: scope = per loop
	private String C_Signature = null;                   // var declaration from web admin var handler: scope = per loop
	private String C_Mod6 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_Mod5 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_Mod4 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_SAMLReq3 = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_Mod3 = null;                        // var declaration from web admin var handler: scope = per loop
	
	/**
	 * constructor: called from load test plug-ins (scope = global).
	 */
	public SFEditEmployeeProfileSM()
	{
		super();
	}


	/**
	 * constructor: called when a user is created (per user).
	 */
	public SFEditEmployeeProfileSM(int maxLoops, int requestTimeout, int threadNumber)
	{
		super();
		this.requestTimeout = requestTimeout;
		this.remainingLoops = maxLoops;
		this.checkLoopCount = (maxLoops > 0);
		this.threadNumber = threadNumber;
		this.sslSessionCache = SSLInit.getNewSslSessionCache(sslSessionCacheTimeout);
		this.sslStatistic = new SSLSessionCacheStatistic();
		if (isMultihomed() && (!ipPerLoop()))
			this.localIpAddress = getNextMultihomedIpAddress();
		if (dnsCache != null)
			userDNSContext = new HttpTestURLDNSContext(dnsCache, threadNumber);
		
		// read next line from input file: scope = per user
		try
		{
			synchronized (inputFileLock)
			{
				if (!Login_txt.getNextLine())
					abortByEofInputFile();
				// extract vars from input file: scope = per user
				P_Password = new String(Login_txt.getLineVar(2));
				P_UserID = new String(Login_txt.getLineVar(1));
			}
		}
		catch (Exception ie)
		{
			abortByEofInputFile();
		}
		
		applyNextProxySettingsFromFileIfExists();
		
		if (commonNextProxyConfig != null)
			// set proxy configuration data per user 
			userNextProxyConfig = new NextProxyConfig(commonNextProxyConfig);
		
		// initialize context for plug-ins which are executed per user
		userPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, this, threadNumber);
	}


	/**
	 * internal method: called when a user starts a loop.
	 * contains the recorded session which is called by users x loops.
	 * 
	 * @param totalLoopCounter total number of loops (0..n-1) counted overall threads. This value is unique per loop.
	 * 
	 * @return  true:  loop successful completed.
	 *          false: loop failed.
	 */
	private boolean execute(int totalLoopCounter) throws Exception
	{
		markStartOfLoop();
		threadStep = 0;                 // internal - start loop at thread step 0
		
		// enable DNS resolves per loop?
		if (dnsPerLoop)
			userDNSContext = new HttpTestURLDNSContext(dnsCache.clone(false), threadNumber);
		
		// debug http headers?
		Object httpLogVectorObject = null;
		if (debugHttp)
			httpLogVectorObject = this;
		
		// create socket pool per loop
		sslSessionCache = SSLInit.getNewSslSessionCache(sslSessionCacheTimeout);		// reset the SSL session cache to get new SSL session IDs for this loop
		socketPool = new HttpSocketPool(this, sslProtocolVersion, sslSessionCache, sslStatistic, sslcmode);
		if (plannedConnectTimeout > 0)
			socketPool.setConnectTimeout(plannedConnectTimeout);
		if (sslHandshakeRandomGeneratorType != -1)
			socketPool.setSslHandshakeRandomGeneratorType(sslHandshakeRandomGeneratorType);
		socketPool.setSupportEllipticCurves(sslECC);
		socketPool.setHintUseSNI(sslSNI);
		socketPool.setSniCritical(sslSNICirical);
		socketPool.setUseTlsSessionTickets(useTlsSessionTickets);
		if (debugKeepAlive)
		{
			socketPool.setlogVectorObject(this);
			if (debugSsl)
				socketPool.enableSslLog();
		}
		
		if (downlinkBandwidth > 0)
			socketPool.setDownlinkBandwidth(downlinkBandwidth);
		if (uplinkBandwidth > 0)
			socketPool.setUplinkBandwidth(uplinkBandwidth);
		
		if (isMultihomed())
		{
			if (ipPerLoop())
				localIpAddress = getNextMultihomedIpAddress();
			socketPool.setClientIpAddress(localIpAddress);
			log();
			log("multihomed client ip address = " + localIpAddress);
		}
		
		// setup cookie handler per loop
		cookieHandler = new CookieHandler();
		if (debugCookies)
			cookieHandler.setLogVectorInterface(this);
		
		// customised vars from web admin var handler: scope = per user
		log();
		log("<<< P_Password = " + P_Password);
		log("<<< P_UserID = " + P_UserID);
		
		// customised vars from web admin var handler: scope = per loop
		htmlContentParser = null;
		xmlContentParser = null;
		jsonHtmlBasedExtractor = null;
		protobufContentParser = null;
		C_Mod2 = null;
		C_SAMLReq2 = null;
		C_Mod1 = null;
		C_SAMLReq1 = null;
		C_LastModified = null;
		C_Mod0 = null;
		C_EID = null;
		C_Token2 = null;
		C_Token1 = null;
		C_SAMLReq = null;
		C_Merge0 = null;
		C_AjaxsecKey = null;
		C_Img0 = null;
		C_belieze1 = null;
		C_belieze0 = null;
		C_Resource1 = null;
		C_tctest0 = null;
		C_docKey = null;
		C_Signature3 = null;
		C_Signature2 = null;
		C_TimeStamp = null;
		C_Signature1 = null;
		vScrb = null;
		C_Signature = null;
		C_Mod6 = null;
		C_Mod5 = null;
		C_Mod4 = null;
		C_SAMLReq3 = null;
		C_Mod3 = null;
		log();
		log("<<< C_Mod2 = " + C_Mod2);
		log("<<< C_SAMLReq2 = " + C_SAMLReq2);
		log("<<< C_Mod1 = " + C_Mod1);
		log("<<< C_SAMLReq1 = " + C_SAMLReq1);
		log("<<< C_LastModified = " + C_LastModified);
		log("<<< C_Mod0 = " + C_Mod0);
		log("<<< C_EID = " + C_EID);
		log("<<< C_Token2 = " + C_Token2);
		log("<<< C_Token1 = " + C_Token1);
		log("<<< C_SAMLReq = " + C_SAMLReq);
		log("<<< C_Merge0 = " + C_Merge0);
		log("<<< C_AjaxsecKey = " + C_AjaxsecKey);
		log("<<< C_Img0 = " + C_Img0);
		log("<<< C_belieze1 = " + C_belieze1);
		log("<<< C_belieze0 = " + C_belieze0);
		log("<<< C_Resource1 = " + C_Resource1);
		log("<<< C_tctest0 = " + C_tctest0);
		log("<<< C_docKey = " + C_docKey);
		log("<<< C_Signature3 = " + C_Signature3);
		log("<<< C_Signature2 = " + C_Signature2);
		log("<<< C_TimeStamp = " + C_TimeStamp);
		log("<<< C_Signature1 = " + C_Signature1);
		log("<<< vScrb = " + vScrb);
		log("<<< C_Signature = " + C_Signature);
		log("<<< C_Mod6 = " + C_Mod6);
		log("<<< C_Mod5 = " + C_Mod5);
		log("<<< C_Mod4 = " + C_Mod4);
		log("<<< C_SAMLReq3 = " + C_SAMLReq3);
		log("<<< C_Mod3 = " + C_Mod3);
		
		// initialize context for plug-ins which are executed per loop
		LoadtestPluginContext loopPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, this, threadNumber, socketPool, cookieHandler);
		



		// --- VIRTUAL PAGE #0 ---
		if (!executePage_0(totalLoopCounter, loopPluginContext, new InnerLoopContext(), 0,0, httpLogVectorObject))
			return false;



		// --- PAGE BREAK: Test [0] ---
		log();
		log();
		log("# Page #1: LaunchPageURL");
		log("# ----------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #1: LaunchPageURL", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 1 failed
		
		// page 1 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [46] ---
		log();
		log();
		log("# Page #2: Login");
		log("# --------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #2: Login", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_2_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 2 failed
		
		// page 2 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [142] ---
		log();
		log();
		log("# Page #3: EmployeeProfile");
		log("# ------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #3: EmployeeProfile", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 3 failed
		
		// page 3 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [235] ---
		log();
		log();
		log("# Page #4: EditAddress");
		log("# --------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #4: EditAddress", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 4 failed
		
		// page 4 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [243] ---
		log();
		log();
		log("# Page #5: SelectCountry");
		log("# ----------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #5: SelectCountry", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 5 failed
		
		// page 5 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [249] ---
		log();
		log();
		log("# Page #6: Save");
		log("# -------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #6: Save", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 6 failed
			synchResponsesParallelRequestsPage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 6 failed
		
		// page 6 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [253] ---
		log();
		log();
		log("# Page #7: SelectAddressField");
		log("# ---------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #7: SelectAddressField", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 7 failed
		
		// page 7 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [261] ---
		log();
		log();
		log("# Page #8: Save Delete");
		log("# --------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #8: Save Delete", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_8(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 8 failed
			synchResponsesParallelRequestsPage_8(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_8(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 8 failed
		
		// page 8 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [265] ---
		log();
		log();
		log("# Page #9: SignOut");
		log("# ----------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #9: SignOut", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_9(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 9 failed
			synchResponsesParallelRequestsPage_9(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_9_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 9 failed
			synchResponsesParallelRequestsPage_9(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_9(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 9 failed
		
		// page 9 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);
		
		
		// loop successful done
		// --------------------
		
		markEndOfPage(performanceData);
		
		endOfExecuteLoop(true, null, -1, loopPluginContext);
		log();
		return true;
	}		// end of execute()
		
		
		
	/**
	 * internal method: called when a user has completed a loop.
	 */
	private void endOfExecuteLoop(boolean loopPassed, HttpTestURL testURL, int threadStep, LoadtestPluginContext loopPluginContext) throws Exception
	{
		// log URL if last call has failed
		if ((!loopPassed) && (testURL != null))
			log(testURL);
		
		// update plugin context
		loopPluginContext.setLoopPassed(loopPassed);
		if ((testURL != null) && (loopPluginContext.getHttpTestURL() == null))
			loopPluginContext.setHttpTestURL(testURL);
		if ((threadStep != -1) && (loopPluginContext.getThreadStep() == -1))
			loopPluginContext.setThreadStep(threadStep);
	}


	/**
	 * Recorded http requests of page #0.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_0(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{

		// all http requests of page #0 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #1: LaunchPageURL
		// # ----------------------



		// --- HTTP REQUEST: Test [1] <- WEB ADMIN Index 1 ---
		String requestProt0001 = "https";
		String requestHost0001 = "hcm4preview.sapsf.com";
		int    requestPort0001 = 443;
		String requestFile0001 = "/sf/login" +
				"?company=tctest" +
				"&loginMethod=SSO";
		String requestHeader0001 = "GET " + requestFile0001 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0001, requestHost0001, requestPort0001, requestHeader0001, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0001 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 7111
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors Log in");		// Test [1] <- Index 1
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_TimeStamp'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0001_1 = new BoundaryBasedExtractorItem( "Timestamp:</strong> <span dir=\"ltr\">" , "T",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0001_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_TimeStamp'
			C_TimeStamp = boundaryBasedContentExtractorItem0001_1.getResultText();
			log("<<< C_TimeStamp = " + C_TimeStamp);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_TimeStamp!= null && C_TimeStamp.trim().length() == 0)
			{
				C_TimeStamp = "";
				log("runtime note: the extraction of a new value for the variable 'C_TimeStamp' ends up with an empty string - a substitute value was set");
				log("<<< C_TimeStamp = " + C_TimeStamp);
			}
		}
		catch (Exception e) { C_TimeStamp = null; log(e); }
		if (C_TimeStamp == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_TimeStamp' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [2] <- WEB ADMIN Index 2 ---
		String requestProt0002 = "https";
		String requestHost0002 = "hcm4preview.sapsf.com";
		int    requestPort0002 = 443;
		String requestFile0002 = "/ui/extlib/XMLHttpRequest_1.0.5_sf.15/XMLHttpRequest.js";
		String requestHeader0002 = "GET " + requestFile0002 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0002, requestHost0002, requestPort0002, requestHeader0002, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0002 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2738
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [2] <- Index 2
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [3] <- WEB ADMIN Index 3 ---
		String requestProt0003 = "https";
		String requestHost0003 = "hcm4preview.sapsf.com";
		int    requestPort0003 = 443;
		String requestFile0003 = "/ui/perflog/js/perflog_56a51e27aa05a9193b97aeb85b6213af.js";
		String requestHeader0003 = "GET " + requestFile0003 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0003, requestHost0003, requestPort0003, requestHeader0003, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0003 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3305
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [3] <- Index 3
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [4] <- WEB ADMIN Index 4 ---
		String requestProt0004 = "https";
		String requestHost0004 = "hcm4preview.sapsf.com";
		int    requestPort0004 = 443;
		String requestFile0004 = "/ui/juic/js/GlobalFunctions_7c6c0000b683cb791f25f3210a0a1731.js";
		String requestHeader0004 = "GET " + requestFile0004 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0004, requestHost0004, requestPort0004, requestHeader0004, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0004 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 910
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [4] <- Index 4
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [5] <- WEB ADMIN Index 5 ---
		String requestProt0005 = "https";
		String requestHost0005 = "hcm4preview.sapsf.com";
		int    requestPort0005 = 443;
		String requestFile0005 = "/ui/extlib/jshash_2.2/sha256.js";
		String requestHeader0005 = "GET " + requestFile0005 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0005, requestHost0005, requestPort0005, requestHeader0005, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0005 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2403
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [5] <- Index 5
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [6] <- WEB ADMIN Index 6 ---
		String requestProt0006 = "https";
		String requestHost0006 = "hcm4preview.sapsf.com";
		int    requestPort0006 = 443;
		String requestFile0006 = "/ui/juic/js/InterstitialUtil_1f1a1807326bb0d8ceaa3c1c842340d9.js";
		String requestHeader0006 = "GET " + requestFile0006 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0006, requestHost0006, requestPort0006, requestHeader0006, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0006 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [6] <- Index 6
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [7] <- WEB ADMIN Index 7 ---
		String requestProt0007 = "https";
		String requestHost0007 = "hcm4preview.sapsf.com";
		int    requestPort0007 = 443;
		String requestFile0007 = "/ui/uicore/css/revolutionfont-Icons_e66c293a573ac22c088d0dae05237b02.css";
		String requestHeader0007 = "GET " + requestFile0007 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0007, requestHost0007, requestPort0007, requestHeader0007, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0007 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 672
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [7] <- Index 7
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [8] <- WEB ADMIN Index 8 ---
		String requestProt0008 = "https";
		String requestHost0008 = "hcm4preview.sapsf.com";
		int    requestPort0008 = 443;
		String requestFile0008 = "/ui/surj/js/core/config-util_1f1411d7d63c13c9fff25c556f656cd6.js";
		String requestHeader0008 = "GET " + requestFile0008 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0008, requestHost0008, requestPort0008, requestHeader0008, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0008 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 771
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [8] <- Index 8
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [9] <- WEB ADMIN Index 9 ---
		String requestProt0009 = "https";
		String requestHost0009 = "hcm4preview.sapsf.com";
		int    requestPort0009 = 443;
		String requestFile0009 = "/ui/sfgrp/js/SURJUtil_305d4ce02664e4587a9021eb38d00f50.js";
		String requestHeader0009 = "GET " + requestFile0009 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0009, requestHost0009, requestPort0009, requestHeader0009, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0009 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10044
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [9] <- Index 9
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [10] <- WEB ADMIN Index 10 ---
		String requestProt0010 = "https";
		String requestHost0010 = "hcm4preview.sapsf.com";
		int    requestPort0010 = 443;
		String requestFile0010 = "/ui/extlib/jquery_3.2.1/jquery.js";
		String requestHeader0010 = "GET " + requestFile0010 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0010, requestHost0010, requestPort0010, requestHeader0010, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0010 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 32669
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [10] <- Index 10
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [11] <- WEB ADMIN Index 11 ---
		String requestProt0011 = "https";
		String requestHost0011 = "hcm4preview.sapsf.com";
		int    requestPort0011 = 443;
		String requestFile0011 = "/ui/sfgrp/js/SURJStartup_78a027715aeb2ab678a4435189a8a063.js";
		String requestHeader0011 = "GET " + requestFile0011 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0011, requestHost0011, requestPort0011, requestHeader0011, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0011 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3099
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [11] <- Index 11
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [12] <- WEB ADMIN Index 12 ---
		String requestProt0012 = "https";
		String requestHost0012 = "hcm4preview.sapsf.com";
		int    requestPort0012 = 443;
		String requestFile0012 = "/ui/surj/js/core/surj-ui-config_7d220bdbd024ae22b5a1671a383a1cd7.js";
		String requestHeader0012 = "GET " + requestFile0012 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0012, requestHost0012, requestPort0012, requestHeader0012, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0012 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [12] <- Index 12
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [13] <- WEB ADMIN Index 13 ---
		String requestProt0013 = "https";
		String requestHost0013 = "hcm4preview.sapsf.com";
		int    requestPort0013 = 443;
		String requestFile0013 = "/ui/surj/resources_1.4/lite/resources/sap-ui-core-nojQuery.js";
		String requestHeader0013 = "GET " + requestFile0013 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0013, requestHost0013, requestPort0013, requestHeader0013, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0013 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 67
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [13] <- Index 13
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [14] <- WEB ADMIN Index 14 ---
		String requestProt0014 = "https";
		String requestHost0014 = "hcm4preview.sapsf.com";
		int    requestPort0014 = 443;
		String requestFile0014 = "/ui/sapui5/lite_1.65.10/common-0.js";
		String requestHeader0014 = "GET " + requestFile0014 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0014, requestHost0014, requestPort0014, requestHeader0014, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0014 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 187443
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [14] <- Index 14
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [15] <- WEB ADMIN Index 15 ---
		String requestProt0015 = "https";
		String requestHost0015 = "hcm4preview.sapsf.com";
		int    requestPort0015 = 443;
		String requestFile0015 = "/ui/sapui5/lite_1.65.10/common-1.js";
		String requestHeader0015 = "GET " + requestFile0015 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0015, requestHost0015, requestPort0015, requestHeader0015, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0015 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 168117
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [15] <- Index 15
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [16] <- WEB ADMIN Index 16 ---
		String requestProt0016 = "https";
		String requestHost0016 = "hcm4preview.sapsf.com";
		int    requestPort0016 = 443;
		String requestFile0016 = "/ui/sapui5/lite_1.65.10/common-2.js";
		String requestHeader0016 = "GET " + requestFile0016 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0016, requestHost0016, requestPort0016, requestHeader0016, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0016 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 184500
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [16] <- Index 16
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [17] <- WEB ADMIN Index 17 ---
		String requestProt0017 = "https";
		String requestHost0017 = "hcm4preview.sapsf.com";
		int    requestPort0017 = 443;
		String requestFile0017 = "/ui/sapui5/lite_1.65.10/common-3.js";
		String requestHeader0017 = "GET " + requestFile0017 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0017, requestHost0017, requestPort0017, requestHeader0017, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0017 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 184056
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [17] <- Index 17
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [18] <- WEB ADMIN Index 18 ---
		String requestProt0018 = "https";
		String requestHost0018 = "hcm4preview.sapsf.com";
		int    requestPort0018 = 443;
		String requestFile0018 = "/ui/login/css/bizx/BizXLogin_5d54c7c15863fe4e43628906b096a6c1.css";
		String requestHeader0018 = "GET " + requestFile0018 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0018, requestHost0018, requestPort0018, requestHeader0018, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0018 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2355
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [18] <- Index 18
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [19] <- WEB ADMIN Index 19 ---
		String requestProt0019 = "https";
		String requestHost0019 = "hcm4preview.sapsf.com";
		int    requestPort0019 = 443;
		String requestFile0019 = "/ui/sfgrp/js/loginBizX_1a711762d5ff1e7db5d79561510eb3f5.js";
		String requestHeader0019 = "GET " + requestFile0019 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0019, requestHost0019, requestPort0019, requestHeader0019, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0019 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8011
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [19] <- Index 19
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [20] <- WEB ADMIN Index 20 ---
		String requestProt0020 = "https";
		String requestHost0020 = "hcm4preview.sapsf.com";
		int    requestPort0020 = 443;
		String requestFile0020 = "/ui/surj/js/LastPageVisitedUtil_f667e3b7dddc5cdf8deec5a143d1e156.js";
		String requestHeader0020 = "GET " + requestFile0020 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0020, requestHost0020, requestPort0020, requestHeader0020, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0020 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1497
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [20] <- Index 20
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 2 of 3)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [21] <- WEB ADMIN Index 21 ---
		String requestProt0021 = "https";
		String requestHost0021 = "ds-aksb-a.akamaihd.net";
		int    requestPort0021 = 443;
		String requestFile0021 = "/aksb.min.js";
		String requestHeader0021 = "GET " + requestFile0021 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0021, requestHost0021, requestPort0021, requestHeader0021, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0021 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4826
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [21] <- Index 21
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [22] <- WEB ADMIN Index 22 ---
		String requestProt0022 = "https";
		String requestHost0022 = "hcm4preview.sapsf.com";
		int    requestPort0022 = 443;
		String requestFile0022 = "/ui/uicore/img/successfactors-large_abf7640c2701d6e38bbb0fe0d0fa326b.gif";
		String requestHeader0022 = "GET " + requestFile0022 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0022, requestHost0022, requestPort0022, requestHeader0022, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0022 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 2621
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [22] <- Index 22
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [23] <- WEB ADMIN Index 23 ---
		String requestProt0023 = "https";
		String requestHost0023 = "hcm4preview.sapsf.com";
		int    requestPort0023 = 443;
		String requestFile0023 = "/ui/surj/resources_4E82BE2B96D8FA64F26070CF70B634C4/sap/sf/surj/shell/library-preload.js";
		String requestHeader0023 = "GET " + requestFile0023 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500010c4e6289-6c42-456a-8e24-4f6d2ce29d2d29820909-1501-babe-face-000000000003ec08b2c1-ead2-4500-9627-98f922d7c027HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143623-204506\r\n" + 
				"X-Ajax-Token: JGhy47HlQGAb8I44YzMu6OZzKkg%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0023, requestHost0023, requestPort0023, requestHeader0023, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0023 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 94727
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [23] <- Index 23
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [24] <- WEB ADMIN Index 24 ---
		String requestProt0024 = "https";
		String requestHost0024 = "hcm4preview.sapsf.com";
		int    requestPort0024 = 443;
		String requestFile0024 = "/ui/sapui5/main_1.65.10/sap/ui/core/themes/sap_belize/library.css";
		String requestHeader0024 = "GET " + requestFile0024 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0024, requestHost0024, requestPort0024, requestHeader0024, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0024 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 15759
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [24] <- Index 24
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [25] <- WEB ADMIN Index 25 ---
		String requestProt0025 = "https";
		String requestHost0025 = "hcm4preview.sapsf.com";
		int    requestPort0025 = 443;
		String requestFile0025 = "/ui/sapui5/main_1.65.10/sap/m/themes/sap_belize/library.css";
		String requestHeader0025 = "GET " + requestFile0025 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0025, requestHost0025, requestPort0025, requestHeader0025, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0025 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 111158
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [25] <- Index 25
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [26] <- WEB ADMIN Index 26 ---
		String requestProt0026 = "https";
		String requestHost0026 = "hcm4preview.sapsf.com";
		int    requestPort0026 = 443;
		String requestFile0026 = "/ui/sapui5/lite_1.65.10/themes/sap_belize/library.css";
		String requestHeader0026 = "GET " + requestFile0026 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0026, requestHost0026, requestPort0026, requestHeader0026, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0026 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 53816
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [26] <- Index 26
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [27] <- WEB ADMIN Index 27 ---
		String requestProt0027 = "https";
		String requestHost0027 = "hcm4preview.sapsf.com";
		int    requestPort0027 = 443;
		String requestFile0027 = "/ui/sapui5/lite_1.65.10/messagebundle-preload_en.js";
		String requestHeader0027 = "GET " + requestFile0027 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001ea8b6258-7f02-4e9a-922f-7a3d2385b62129820909-1501-babe-face-000000000003deeaf2ef-2a22-4f24-8e2b-d04123a40122HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143623-204506\r\n" + 
				"X-Ajax-Token: JGhy47HlQGAb8I44YzMu6OZzKkg%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0027, requestHost0027, requestPort0027, requestHeader0027, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0027 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 11329
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [27] <- Index 27
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [28] <- WEB ADMIN Index 28 ---
		String requestProt0028 = "https";
		String requestHost0028 = "hcm4preview.sapsf.com";
		int    requestPort0028 = 443;
		String requestFile0028 = "/ui/surj/resources_4E82BE2B96D8FA64F26070CF70B634C4/sap/sf/surj/shell/themes/sap_belize/library.css";
		String requestHeader0028 = "GET " + requestFile0028 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0028, requestHost0028, requestPort0028, requestHeader0028, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0028 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 8458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [28] <- Index 28
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [29] <- WEB ADMIN Index 29 ---
		String requestProt0029 = "https";
		String requestHost0029 = "hcm4preview.sapsf.com";
		int    requestPort0029 = 443;
		String requestFile0029 = "/ui/sapui5/main_1.65.10/sap/ui/layout/themes/sap_belize/library.css";
		String requestHeader0029 = "GET " + requestFile0029 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0029, requestHost0029, requestPort0029, requestHeader0029, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0029 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 26547
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [29] <- Index 29
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [30] <- WEB ADMIN Index 30 ---
		String requestProt0030 = "https";
		String requestHost0030 = "hcm4preview.sapsf.com";
		int    requestPort0030 = 443;
		String requestFile0030 = "/ui/surj/resources_F71AEAF23B9A2E477A57080174493027/sap/sf/surj/commons/patch/sap-ui-core-Popup-PATCH.js";
		String requestHeader0030 = "GET " + requestFile0030 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500016b5b7287-84c2-4823-9425-456228f4dd2529820909-1501-babe-face-000000000003aad4d259-9002-41fe-b42e-1c36264cd121HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143623-204506\r\n" + 
				"X-Ajax-Token: JGhy47HlQGAb8I44YzMu6OZzKkg%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0030, requestHost0030, requestPort0030, requestHeader0030, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0030 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 415
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [30] <- Index 30
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [31] <- WEB ADMIN Index 31 ---
		String requestProt0031 = "https";
		String requestHost0031 = "hcm4preview.sapsf.com";
		int    requestPort0031 = 443;
		String requestFile0031 = "/ui/sapui5/main_1.65.10/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		String requestHeader0031 = "GET " + requestFile0031 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/ui/sapui5/main_1.65.10/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0031, requestHost0031, requestPort0031, requestHeader0031, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0031 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [31] <- Index 31
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [32] <- WEB ADMIN Index 32 ---
		String requestProt0032 = "https";
		String requestHost0032 = "hcm4preview.sapsf.com";
		int    requestPort0032 = 443;
		String requestFile0032 = "/ui/login/img/topnav/belize_light_bg_132a77170450d7007fd6f1b60109ccd6.png";
		String requestHeader0032 = "GET " + requestFile0032 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/ui/login/css/bizx/BizXLogin_5d54c7c15863fe4e43628906b096a6c1.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0032, requestHost0032, requestPort0032, requestHeader0032, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0032 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 3765
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [32] <- Index 32
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [33] <- WEB ADMIN Index 33 ---
		String requestProt0033 = "https";
		String requestHost0033 = "hcm4preview.sapsf.com";
		int    requestPort0033 = 443;
		String requestFile0033 = "/ui/surj/resources_F71AEAF23B9A2E477A57080174493027/sap/sf/surj/commons/patch/DragAndDrop-PATCH.js";
		String requestHeader0033 = "GET " + requestFile0033 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001063cf22b-0402-4b19-8d26-df9424af852829820909-1501-babe-face-000000000003e02cf2ee-61c2-45c3-8620-77552d3a6221HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143623-204506\r\n" + 
				"X-Ajax-Token: JGhy47HlQGAb8I44YzMu6OZzKkg%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0033, requestHost0033, requestPort0033, requestHeader0033, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0033 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 192
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [33] <- Index 33
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [34] <- WEB ADMIN Index 34 ---
		String requestProt0034 = "https";
		String requestHost0034 = "hcm4preview.sapsf.com";
		int    requestPort0034 = 443;
		String requestFile0034 = "/favicon.ico";
		String requestHeader0034 = "GET " + requestFile0034 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0034, requestHost0034, requestPort0034, requestHeader0034, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0034 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/X-ICON", header text fragment = [verification disabled], recorded content size = 1406
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/X-ICON", null, null);		// Test [34] <- Index 34
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [35] <- WEB ADMIN Index 35 ---
		String requestProt0035 = "https";
		String requestHost0035 = "hcm4preview.sapsf.com";
		int    requestPort0035 = 443;
		String requestFile0035 = "/messagebundle/_/vmod_90ec61d9/ui/login/resources/sap/sf/login/i18n/messagebundle_en.properties";
		String requestHeader0035 = "GET " + requestFile0035 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001cf3c820c-04a2-425e-8f2c-512322f17a2429820909-1501-babe-face-00000000000346f0a2d8-4e82-4828-9a2f-0e9027b4f829HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143623-204506\r\n" + 
				"X-Ajax-Token: JGhy47HlQGAb8I44YzMu6OZzKkg%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0035, requestHost0035, requestPort0035, requestHeader0035, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0035 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 1084
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [35] <- Index 35
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [36] <- WEB ADMIN Index 36 ---
		String requestProt0036 = "https";
		String requestHost0036 = "hcm4preview.sapsf.com";
		int    requestPort0036 = 443;
		String requestFile0036 = "/ui/sapui5/main_1.65.5/sap/ui/core/themes/base/fonts/SAP-icons.woff2";
		String requestHeader0036 = "GET " + requestFile0036 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/ui/uicore/css/revolutionfont-Icons_e66c293a573ac22c088d0dae05237b02.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0036, requestHost0036, requestPort0036, requestHeader0036, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0036 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 92820
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [36] <- Index 36
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [37] <- WEB ADMIN Index 37 ---
		String requestProt0037 = "https";
		String requestHost0037 = "hcm4preview.sapsf.com";
		int    requestPort0037 = 443;
		String requestFile0037 = "/ui/surj/resources_1.4/SF-supp-icons.ttf";
		String requestHeader0037 = "GET " + requestFile0037 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/ui/uicore/css/revolutionfont-Icons_e66c293a573ac22c088d0dae05237b02.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0037, requestHost0037, requestPort0037, requestHeader0037, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0037 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-TTF", header text fragment = [verification disabled], recorded content size = 42072
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-TTF", null, null);		// Test [37] <- Index 37
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [38] <- WEB ADMIN Index 38 ---
		String requestProt0038 = "https";
		String requestHost0038 = "hcm4preview.sapsf.com";
		int    requestPort0038 = 443;
		String requestFile0038 = "/ui/login/img/sf_logo_new_dark_bbca44d394a268f0a40b207fdf794ae9.png";
		String requestHeader0038 = "GET " + requestFile0038 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/ui/login/css/bizx/BizXLogin_5d54c7c15863fe4e43628906b096a6c1.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0038, requestHost0038, requestPort0038, requestHeader0038, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0038 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 1792
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [38] <- Index 38
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [39] <- WEB ADMIN Index 39 ---
		String requestProt0039 = "https";
		String requestHost0039 = "hcm4preview.sapsf.com";
		int    requestPort0039 = 443;
		String requestFile0039 = "/public/theme-api/css/tctest/*/ui/login/css/bizx/BizXLoginTheme.dcss";
		String requestHeader0039 = "GET " + requestFile0039 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0039, requestHost0039, requestPort0039, requestHeader0039, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0039 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [39] <- Index 39
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		htmlContentParser = new HtmlContentParser(testURL, this);
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'C_Img0'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0039_1 = new BoundaryBasedExtractorItem( "jpg" , "belizeLanding",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0039_1);

		// setup var extractor for 'C_belieze0'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0039_2 = new BoundaryBasedExtractorItem( "belizeLanding" , "/ui/login/",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0039_2);

		// setup var extractor for 'C_tctest0'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0039_3 = new BoundaryBasedExtractorItem( "tctest/_/" , "uires",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0039_3);

		// setup var extractor for 'C_Mod6'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0039_4 = new BoundaryBasedExtractorItem( "mod=3D" , "=26name",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0039_4);

		// setup var extractor for 'C_Mod4'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0039_5 = new BoundaryBasedExtractorItem( "mod=" , "=26name",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0039_5);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Mod0'
			C_Mod0 = Lib.trimString(Lib.extractTextToken(testURL.getHeaderField("Location"), 2, ";"));		// recorded value = mod=b97b490a
			log("<<< C_Mod0 = " + C_Mod0);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod0!= null && C_Mod0.trim().length() == 0)
			{
				C_Mod0 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod0' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod0 = " + C_Mod0);
			}
		}
		catch (Exception e) { C_Mod0 = null; log(e); }
		if (C_Mod0 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod0' from http response header field";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Img0'
			C_Img0 = boundaryBasedHeaderExtractorItem0039_1.getResultText();
			log("<<< C_Img0 = " + C_Img0);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Img0!= null && C_Img0.trim().length() == 0)
			{
				C_Img0 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Img0' ends up with an empty string - a substitute value was set");
				log("<<< C_Img0 = " + C_Img0);
			}
		}
		catch (Exception e) { C_Img0 = null; log(e); }
		if (C_Img0 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Img0' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_belieze0'
			C_belieze0 = boundaryBasedHeaderExtractorItem0039_2.getResultText();
			log("<<< C_belieze0 = " + C_belieze0);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_belieze0!= null && C_belieze0.trim().length() == 0)
			{
				C_belieze0 = "";
				log("runtime note: the extraction of a new value for the variable 'C_belieze0' ends up with an empty string - a substitute value was set");
				log("<<< C_belieze0 = " + C_belieze0);
			}
		}
		catch (Exception e) { C_belieze0 = null; log(e); }
		if (C_belieze0 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_belieze0' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_tctest0'
			C_tctest0 = boundaryBasedHeaderExtractorItem0039_3.getResultText();
			log("<<< C_tctest0 = " + C_tctest0);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_tctest0!= null && C_tctest0.trim().length() == 0)
			{
				C_tctest0 = "";
				log("runtime note: the extraction of a new value for the variable 'C_tctest0' ends up with an empty string - a substitute value was set");
				log("<<< C_tctest0 = " + C_tctest0);
			}
		}
		catch (Exception e) { C_tctest0 = null; log(e); }
		if (C_tctest0 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_tctest0' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Mod6'
			C_Mod6 = boundaryBasedHeaderExtractorItem0039_4.getResultText();
			log("<<< C_Mod6 = " + C_Mod6);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod6!= null && C_Mod6.trim().length() == 0)
			{
				C_Mod6 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod6' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod6 = " + C_Mod6);
			}
		}
		catch (Exception e) { C_Mod6 = null; log(e); }
		if (C_Mod6 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod6' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Mod4'
			C_Mod4 = boundaryBasedHeaderExtractorItem0039_5.getResultText();
			log("<<< C_Mod4 = " + C_Mod4);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod4!= null && C_Mod4.trim().length() == 0)
			{
				C_Mod4 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod4' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod4 = " + C_Mod4);
			}
		}
		catch (Exception e) { C_Mod4 = null; log(e); }
		if (C_Mod4 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod4' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [40] <- WEB ADMIN Index 40 ---
		String requestProt0040 = "https";
		String requestHost0040 = "hcm4preview.sapsf.com";
		int    requestPort0040 = 443;
		String requestFile0040 = "/ui/sapui5/main_1.65.10/sap/ui/core/themes/sap_belize/fonts/72-Bold.woff2";
		String requestHeader0040 = "GET " + requestFile0040 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/ui/sapui5/main_1.65.10/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0040, requestHost0040, requestPort0040, requestHeader0040, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0040 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 26732
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [40] <- Index 40
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 3 of 3)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [41] <- WEB ADMIN Index 41 ---
		String requestProt0041 = "https";
		String requestHost0041 = "hcm4preview.sapsf.com";
		int    requestPort0041 = 443;
		String requestFile0041 = "/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/ui/login/css/bizx/BizXLoginTheme.dcss;mod=b97b490a";
		requestFile0041 = Lib.replaceTextPattern(requestFile0041, "mod=b97b490a", C_Mod0, 0);		// search and replace request file fragment "mod=b97b490a" with variable 'C_Mod0' on all occurrences
		requestFile0041 = Lib.replaceTextPattern(requestFile0041, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_Img0' on all occurrences
		requestFile0041 = Lib.replaceTextPattern(requestFile0041, "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!" with variable 'C_belieze0' on all occurrences
		requestFile0041 = Lib.replaceTextPattern(requestFile0041, "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0041 = Lib.replaceTextPattern(requestFile0041, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod4' on all occurrences

		String requestHeader0041 = "GET " + requestFile0041 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0041, requestHost0041, requestPort0041, requestHeader0041, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0041 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 910
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [41] <- Index 41
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [42] <- WEB ADMIN Index 42 ---
		String requestProt0042 = "https";
		String requestHost0042 = "hcm4preview.sapsf.com";
		int    requestPort0042 = 443;
		String requestFile0042 = "/perfLogServlet" +
				"?callId=9255814395-0" +
				"&eventId=EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143623-204506" +
				"&ST=1574796983169" +
				"&ET=1574796984896" +
				"&MEM=11524" +
				"&NRE=19" +
				"&NWR=11" +
				"&SCPU=0" +
				"&SQLC=19" +
				"&SQLT=10" +
				"&SVT=60" +
				"&UCPU=40" +
				"&CPU=40" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=19" +
				"&cssNum=8" +
				"&renderTime=955" +
				"&TTB=31" +
				"&RSR=299" +
				"&DIA=1196";
		String requestContent0042 = 
				"OPTR_INFO=0c4e6289-6c42-456a-8e24-4f6d2ce29d2d!1574796984098!1574796984227!0" +
				"&OPTR_INFO=ea8b6258-7f02-4e9a-922f-7a3d2385b621!1574796984256!1574796984334!0" +
				"&OPTR_INFO=0758827d-1084-11ea-9bb9-4daa529fd176!0!1574796984366!1" +
				"&OPTR_INFO=6b5b7287-84c2-4823-9425-456228f4dd25!1574796984381!1574796984448!0" +
				"&OPTR_INFO=063cf22b-0402-4b19-8d26-df9424af8528!1574796984451!1574796984518!0" +
				"&OPTR_INFO=cf3c820c-04a2-425e-8f2c-512322f17a24!1574796984532!1574796984559!0";
		String requestHeader0042 = "POST " + requestFile0042 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143623-204506\r\n" + 
				"X-Ajax-Token: JGhy47HlQGAb8I44YzMu6OZzKkg%3d\r\n" + 
				"Content-Length: " + requestContent0042.length() + "\r\n" + 		// Content-Length: 449
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0042, requestHost0042, requestPort0042, requestHeader0042, requestContent0042.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0042 = null;		// support garbage collector to reduce memory
		requestContent0042 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [42] <- Index 42
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [43] <- WEB ADMIN Index 43 ---
		String requestProt0043 = "https";
		String requestHost0043 = "hcm4preview.sapsf.com";
		int    requestPort0043 = 443;
		String requestFile0043 = "/companyLogoServlet/" +
				"?companyId=tctest";
		String requestHeader0043 = "GET " + requestFile0043 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0043, requestHost0043, requestPort0043, requestHeader0043, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0043 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/JPEG", header text fragment = [verification disabled], recorded content size = 2178
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/JPEG", null, null);		// Test [43] <- Index 43
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [44] <- WEB ADMIN Index 44 ---
		String requestProt0044 = "https";
		String requestHost0044 = "hcm4preview.sapsf.com";
		int    requestPort0044 = 443;
		String requestFile0044 = "/perfLogServlet" +
				"?callId=9255814395-X" +
				"&ST=1574796983169" +
				"&ET=1574796985076" +
				"&TTB=31" +
				"&RSR=299" +
				"&DIA=1196" +
				"&DCP=1904";
		String requestHeader0044 = "GET " + requestFile0044 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain; charset=UTF-8\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143623-204506-X\r\n" + 
				"X-Ajax-Token: JGhy47HlQGAb8I44YzMu6OZzKkg%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0044, requestHost0044, requestPort0044, requestHeader0044, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0044 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [44] <- Index 44
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [45] <- WEB ADMIN Index 45 ---
		String requestProt0045 = "https";
		String requestHost0045 = "ds-aksb-a.akamaihd.net";
		int    requestPort0045 = 443;
		String requestFile0045 = "/2/492962/b" +
				"?dE=0" +
				"&cS=0" +
				"&cE=1" +
				"&rqS=1" +
				"&rsS=8" +
				"&rsE=260" +
				"&sS=-23" +
				"&dl=276" +
				"&di=1173" +
				"&fp=" +
				"&dlS=1184" +
				"&dlE=1555" +
				"&dc=1881" +
				"&leS=1883" +
				"&leE=1884" +
				"&to=" +
				"&ol=0" +
				"&cr=7" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/sf/login" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A70.0%29%20Gecko/20100101%20Firefox/70.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=23.36.3.39" +
				"&t=" +
				"&rid=42cc972d" +
				"&r=34125" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=8ee60000" +
				"&akTX=1" +
				"&akTI=42cc972d" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0045 = "GET " + requestFile0045 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0045, requestHost0045, requestPort0045, requestHeader0045, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0045 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, null);		// Test [45] <- Index 45
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #2: Login
		// # --------------



		// --- HTTP REQUEST: Test [47] <- WEB ADMIN Index 47 ---
		String requestProt0047 = "https";
		String requestHost0047 = "hcm4preview.sapsf.com";
		int    requestPort0047 = 443;
		String requestFile0047 = "/ui/sapui5/main_1.65.10/sap/ui/core/themes/sap_belize/fonts/72-Regular-full.woff2";
		String requestHeader0047 = "GET " + requestFile0047 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/ui/sapui5/main_1.65.10/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0047, requestHost0047, requestPort0047, requestHeader0047, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0047 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 53376
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [47] <- Index 47
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [48] <- WEB ADMIN Index 48 ---
		String requestProt0048 = "https";
		String requestHost0048 = "hcm4preview.sapsf.com";
		int    requestPort0048 = 443;
		String requestFile0048 = "/login";
		String requestContent0048 = 
				"referer=%2Fsf%2Flogin%3Fcompany%3Dtctest%26loginMethod%3DSSO" +
				"&bplte_userid=" +
				"&company=tctest" +
				"&username=SIT20018" +
				"&password=123%21Perform1";
		requestContent0048 = Lib.replaceTextPattern(requestContent0048, "123%21Perform1", P_Password, 0);		// search and replace content fragment "123%21Perform1" with variable 'P_Password' on all occurrences
		requestContent0048 = Lib.replaceTextPattern(requestContent0048, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences

		String requestHeader0048 = "POST " + requestFile0048 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0048.length() + "\r\n" + 		// Content-Length: 131
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0048, requestHost0048, requestPort0048, requestHeader0048, requestContent0048.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0048 = null;		// support garbage collector to reduce memory
		requestContent0048 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [48] <- Index 48
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		htmlContentParser = new HtmlContentParser(testURL, this);
		try
		{
			// extract var 'vScrb'
			vScrb = testURL.getRedirectLocation().getParameter("_s.crb");		// recorded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
			log("<<< vScrb = " + vScrb);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && vScrb!= null && vScrb.trim().length() == 0)
			{
				vScrb = "";
				log("runtime note: the extraction of a new value for the variable 'vScrb' ends up with an empty string - a substitute value was set");
				log("<<< vScrb = " + vScrb);
			}
		}
		catch (Exception e) { vScrb = null; log(e); }
		if (vScrb == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'vScrb' from http redirection";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [49] <- WEB ADMIN Index 49 ---
		log();
		log("# title: SuccessFactors: Home");
		String requestProt0049 = "https";
		String requestHost0049 = "hcm4preview.sapsf.com";
		int    requestPort0049 = 443;
		String requestFile0049 = "/sf/login" +
				"?company=tctest" +
				"&loginMethod=SSO" +
				"&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d";
		requestFile0049 = Lib.replaceTextPattern(requestFile0049, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace request file fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		String requestHeader0049 = "GET " + requestFile0049 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0049, requestHost0049, requestPort0049, requestHeader0049, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0049 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 7913
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "currentUserId : \"");		// Test [49] <- Index 49
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_AjaxsecKey'
		ContentTokenExtractorItem contentTokenExtractorItem0049_1 = new ContentTokenExtractorItem("ajaxSecKey", "\t\n\r \"(),={}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0049_1);

		// setup var extractor for 'C_Resource1'
		ContentTokenExtractorItem contentTokenExtractorItem0049_2 = new ContentTokenExtractorItem("\"sap.sf.peopleprofile\":\"", "\t\n\r (),/=_{}", 4);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0049_2);

		contentTokenExtractor.extractTokens();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Mod1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0049_1 = new BoundaryBasedExtractorItem( "mod=" , "\" type=",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0049_1);

		// setup var extractor for 'C_EID'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0049_2 = new BoundaryBasedExtractorItem( "EID=" , "&NWR",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0049_2);

		// setup var extractor for 'C_Merge0'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0049_3 = new BoundaryBasedExtractorItem( "merge_" , "/ui/",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0049_3);

		// setup var extractor for 'C_belieze1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0049_4 = new BoundaryBasedExtractorItem( "belizeLanding" , "/.dcss;mod",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0049_4);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Mod1'
			C_Mod1 = boundaryBasedContentExtractorItem0049_1.getResultText();
			log("<<< C_Mod1 = " + C_Mod1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod1!= null && C_Mod1.trim().length() == 0)
			{
				C_Mod1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod1' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod1 = " + C_Mod1);
			}
		}
		catch (Exception e) { C_Mod1 = null; log(e); }
		if (C_Mod1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_EID'
			C_EID = boundaryBasedContentExtractorItem0049_2.getResultText();
			log("<<< C_EID = " + C_EID);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_EID!= null && C_EID.trim().length() == 0)
			{
				C_EID = "";
				log("runtime note: the extraction of a new value for the variable 'C_EID' ends up with an empty string - a substitute value was set");
				log("<<< C_EID = " + C_EID);
			}
		}
		catch (Exception e) { C_EID = null; log(e); }
		if (C_EID == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_EID' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Merge0'
			C_Merge0 = boundaryBasedContentExtractorItem0049_3.getResultText();
			log("<<< C_Merge0 = " + C_Merge0);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Merge0!= null && C_Merge0.trim().length() == 0)
			{
				C_Merge0 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Merge0' ends up with an empty string - a substitute value was set");
				log("<<< C_Merge0 = " + C_Merge0);
			}
		}
		catch (Exception e) { C_Merge0 = null; log(e); }
		if (C_Merge0 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Merge0' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_AjaxsecKey'
			C_AjaxsecKey = contentTokenExtractorItem0049_1.getResultToken();
			log("<<< C_AjaxsecKey = " + C_AjaxsecKey);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_AjaxsecKey!= null && C_AjaxsecKey.trim().length() == 0)
			{
				C_AjaxsecKey = "";
				log("runtime note: the extraction of a new value for the variable 'C_AjaxsecKey' ends up with an empty string - a substitute value was set");
				log("<<< C_AjaxsecKey = " + C_AjaxsecKey);
			}
		}
		catch (Exception e) { C_AjaxsecKey = null; log(e); }
		if (C_AjaxsecKey == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_AjaxsecKey' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_belieze1'
			C_belieze1 = boundaryBasedContentExtractorItem0049_4.getResultText();
			log("<<< C_belieze1 = " + C_belieze1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_belieze1!= null && C_belieze1.trim().length() == 0)
			{
				C_belieze1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_belieze1' ends up with an empty string - a substitute value was set");
				log("<<< C_belieze1 = " + C_belieze1);
			}
		}
		catch (Exception e) { C_belieze1 = null; log(e); }
		if (C_belieze1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_belieze1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Resource1'
			C_Resource1 = contentTokenExtractorItem0049_2.getResultToken();
			log("<<< C_Resource1 = " + C_Resource1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Resource1!= null && C_Resource1.trim().length() == 0)
			{
				C_Resource1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Resource1' ends up with an empty string - a substitute value was set");
				log("<<< C_Resource1 = " + C_Resource1);
			}
		}
		catch (Exception e) { C_Resource1 = null; log(e); }
		if (C_Resource1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Resource1' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [50] <- WEB ADMIN Index 50 ---
		String requestProt0050 = "https";
		String requestHost0050 = "hcm4preview.sapsf.com";
		int    requestPort0050 = 443;
		String requestFile0050 = "/public/ui-dcss/tctest/_/3m!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!/.dcss;mod=7613b5b4";
		requestFile0050 = Lib.replaceTextPattern(requestFile0050, "7613b5b4", C_Mod1, 0);		// search and replace request file fragment "7613b5b4" with variable 'C_Mod1' on all occurrences
		requestFile0050 = Lib.replaceTextPattern(requestFile0050, "!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!", C_belieze1, 0);		// search and replace request file fragment "!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!" with variable 'C_belieze1' on all occurrences

		String requestHeader0050 = "GET " + requestFile0050 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0050, requestHost0050, requestPort0050, requestHeader0050, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0050 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 8880
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [50] <- Index 50
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [51] <- WEB ADMIN Index 51 ---
		String requestProt0051 = "https";
		String requestHost0051 = "hcm4preview.sapsf.com";
		int    requestPort0051 = 443;
		String requestFile0051 = "/ui/sapui5/main_1.65.10/sap/ui/thirdparty/jqueryui/jquery-ui-position.js";
		String requestHeader0051 = "GET " + requestFile0051 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0051, requestHost0051, requestPort0051, requestHeader0051, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0051 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2693
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [51] <- Index 51
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [52] <- WEB ADMIN Index 52 ---
		String requestProt0052 = "https";
		String requestHost0052 = "hcm4preview.sapsf.com";
		int    requestPort0052 = 443;
		String requestFile0052 = "/ui/topnav/img/belize_light_bg_132a77170450d7007fd6f1b60109ccd6.png";
		String requestHeader0052 = "GET " + requestFile0052 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/public/ui-dcss/tctest/_/3m!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!/.dcss;mod=7613b5b4\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0052, requestHost0052, requestPort0052, requestHeader0052, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("7613b5b4", C_Mod1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!", C_belieze1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0052 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 3765
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [52] <- Index 52
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [53] <- WEB ADMIN Index 53 ---
		String requestProt0053 = "https";
		String requestHost0053 = "hcm4preview.sapsf.com";
		int    requestPort0053 = 443;
		String requestFile0053 = "/ui/homepage3/resources_E033111F9047E5E69CFF05CD074E5B41/sap/ushell/library-preload.js";
		String requestHeader0053 = "GET " + requestFile0053 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0053, requestHost0053, requestPort0053, requestHeader0053, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0053 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 307777
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [53] <- Index 53
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [54] <- WEB ADMIN Index 54 ---
		String requestProt0054 = "https";
		String requestHost0054 = "hcm4preview.sapsf.com";
		int    requestPort0054 = 443;
		String requestFile0054 = "/ui/homepage3/resources_63B0E281D02DCA884827182D146D4BE5/sap/sf/homepage3/commons/library-preload.js";
		String requestHeader0054 = "GET " + requestFile0054 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0054, requestHost0054, requestPort0054, requestHeader0054, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0054 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5990
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [54] <- Index 54
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [55] <- WEB ADMIN Index 55 ---
		String requestProt0055 = "https";
		String requestHost0055 = "hcm4preview.sapsf.com";
		int    requestPort0055 = 443;
		String requestFile0055 = "/perfLogServlet" +
				"?callId=8670694290-0" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&ST=1574797008418" +
				"&ET=1574797011234" +
				"&MEM=293336" +
				"&NRE=2229" +
				"&NWR=363" +
				"&SCPU=70" +
				"&SQLC=394" +
				"&SQLT=369" +
				"&SVT=1546" +
				"&UCPU=920" +
				"&CPU=990" +
				"&FRE=10" +
				"&FWR=0" +
				"&jsNum=15" +
				"&cssNum=1" +
				"&renderTime=212" +
				"&RED=1" +
				"&TTB=13" +
				"&RSR=2362" +
				"&DIA=2591";
		String requestContent0055 = 
				"OPTR_INFO=16bdb460-1084-11ea-9bb9-4daa529fd176!1574797008420!1574797011009!1";
		String requestHeader0055 = "POST " + requestFile0055 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0055.length() + "\r\n" + 		// Content-Length: 76
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0055, requestHost0055, requestPort0055, requestHeader0055, requestContent0055.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0055 = null;		// support garbage collector to reduce memory
		requestContent0055 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [55] <- Index 55
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [56] <- WEB ADMIN Index 56 ---
		String requestProt0056 = "https";
		String requestHost0056 = "hcm4preview.sapsf.com";
		int    requestPort0056 = 443;
		String requestFile0056 = "/ui/sapui5/main_1.65.10/sap/ui/core/library.js";
		String requestHeader0056 = "GET " + requestFile0056 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500012d9aa215-38d2-423f-8427-7079286ddd2a29820909-1501-babe-face-00000000000383229218-e372-4159-a620-1361230dcc24HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-1\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0056, requestHost0056, requestPort0056, requestHeader0056, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0056 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4454
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [56] <- Index 56
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [57] <- WEB ADMIN Index 57 ---
		String requestProt0057 = "https";
		String requestHost0057 = "hcm4preview.sapsf.com";
		int    requestPort0057 = 443;
		String requestFile0057 = "/public/ui-dcss/tctest/_/3m!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css";
		requestFile0057 = Lib.replaceTextPattern(requestFile0057, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0057 = Lib.replaceTextPattern(requestFile0057, "!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!", C_belieze1, 0);		// search and replace request file fragment "!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!" with variable 'C_belieze1' on all occurrences

		String requestHeader0057 = "GET " + requestFile0057 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0057, requestHost0057, requestPort0057, requestHeader0057, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0057 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 11383
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [57] <- Index 57
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [58] <- WEB ADMIN Index 58 ---
		String requestProt0058 = "https";
		String requestHost0058 = "hcm4preview.sapsf.com";
		int    requestPort0058 = 443;
		String requestFile0058 = "/ui/sapui5/main_1.65.10/sap/m/library.js";
		String requestHeader0058 = "GET " + requestFile0058 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001daa9824a-d642-4cdc-9e26-91212cb6dd2029820909-1501-babe-face-0000000000037a91e243-7cd2-4076-a420-aa3d2da3f225HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-1\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0058, requestHost0058, requestPort0058, requestHeader0058, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0058 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 9287
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [58] <- Index 58
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [59] <- WEB ADMIN Index 59 ---
		String requestProt0059 = "https";
		String requestHost0059 = "hcm4preview.sapsf.com";
		int    requestPort0059 = 443;
		String requestFile0059 = "/ui/sapui5/main_1.65.10/sap/base/strings/capitalize.js";
		String requestHeader0059 = "GET " + requestFile0059 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001840742e7-8ec2-4b70-b92a-64f2209d6f2f29820909-1501-babe-face-0000000000036fe4e26c-9f32-4a90-bd27-d367209cf624HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-1\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0059, requestHost0059, requestPort0059, requestHeader0059, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0059 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 234
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [59] <- Index 59
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [60] <- WEB ADMIN Index 60 ---
		String requestProt0060 = "https";
		String requestHost0060 = "hcm4preview.sapsf.com";
		int    requestPort0060 = 443;
		String requestFile0060 = "/ui/sapui5/main_1.65.10/sap/base/security/encodeCSS.js";
		String requestHeader0060 = "GET " + requestFile0060 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001cd808253-7082-486a-892f-f2e329f35c2929820909-1501-babe-face-00000000000358516267-4862-479d-a72f-8df42331e627HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-1\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0060, requestHost0060, requestPort0060, requestHeader0060, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0060 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 346
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [60] <- Index 60
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [61] <- WEB ADMIN Index 61 ---
		String requestProt0061 = "https";
		String requestHost0061 = "hcm4preview.sapsf.com";
		int    requestPort0061 = 443;
		String requestFile0061 = "/ui/sapui5/main_1.65.10/sap/m/Support.js";
		String requestHeader0061 = "GET " + requestFile0061 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001436562b2-71d2-425b-9e2f-ac602449912a29820909-1501-babe-face-000000000003d53852de-c912-4864-9424-2f29279e8927HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-1\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0061, requestHost0061, requestPort0061, requestHeader0061, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0061 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2514
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [61] <- Index 61
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [62] <- WEB ADMIN Index 62 ---
		String requestProt0062 = "https";
		String requestHost0062 = "hcm4preview.sapsf.com";
		int    requestPort0062 = 443;
		String requestFile0062 = "/public/ui-dcss/tctest/_/3m!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library.css";
		requestFile0062 = Lib.replaceTextPattern(requestFile0062, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0062 = Lib.replaceTextPattern(requestFile0062, "!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!", C_belieze1, 0);		// search and replace request file fragment "!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!" with variable 'C_belieze1' on all occurrences

		String requestHeader0062 = "GET " + requestFile0062 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0062, requestHost0062, requestPort0062, requestHeader0062, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0062 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 83343
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [62] <- Index 62
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [63] <- WEB ADMIN Index 63 ---
		String requestProt0063 = "https";
		String requestHost0063 = "hcm4preview.sapsf.com";
		int    requestPort0063 = 443;
		String requestFile0063 = "/ui/homepage3/resources_E033111F9047E5E69CFF05CD074E5B41/sap/ushell/themes/sap_belize/library.css";
		String requestHeader0063 = "GET " + requestFile0063 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0063, requestHost0063, requestPort0063, requestHeader0063, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0063 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 55724
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [63] <- Index 63
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [64] <- WEB ADMIN Index 64 ---
		String requestProt0064 = "https";
		String requestHost0064 = "hcm4preview.sapsf.com";
		int    requestPort0064 = 443;
		String requestFile0064 = "/ui/homepage3/resources_63B0E281D02DCA884827182D146D4BE5/sap/sf/homepage3/commons/themes/sap_belize/library.css";
		String requestHeader0064 = "GET " + requestFile0064 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0064, requestHost0064, requestPort0064, requestHeader0064, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0064 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2683
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [64] <- Index 64
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [65] <- WEB ADMIN Index 65 ---
		String requestProt0065 = "https";
		String requestHost0065 = "hcm4preview.sapsf.com";
		int    requestPort0065 = 443;
		String requestFile0065 = "/public/ui-dcss/tctest/_/3m!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		requestFile0065 = Lib.replaceTextPattern(requestFile0065, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0065 = Lib.replaceTextPattern(requestFile0065, "!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!", C_belieze1, 0);		// search and replace request file fragment "!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!" with variable 'C_belieze1' on all occurrences

		String requestHeader0065 = "GET " + requestFile0065 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/public/ui-dcss/tctest/_/3m!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0065, requestHost0065, requestPort0065, requestHeader0065, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("C7B52757B839BC0F193BCD71F2425A88", C_Merge0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!", C_belieze1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0065 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [65] <- Index 65
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [66] <- WEB ADMIN Index 66 ---
		String requestProt0066 = "https";
		String requestHost0066 = "hcm4preview.sapsf.com";
		int    requestPort0066 = 443;
		String requestFile0066 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TRS";
		String requestHeader0066 = "GET " + requestFile0066 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0066, requestHost0066, requestPort0066, requestHeader0066, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0066 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [66] <- Index 66
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 2 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [67] <- WEB ADMIN Index 67 ---
		String requestProt0067 = "https";
		String requestHost0067 = "hcm4preview.sapsf.com";
		int    requestPort0067 = 443;
		String requestFile0067 = "/perfLogServlet" +
				"?callId=8670694290-1" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&TRS=1363" +
				"&ST=1574797011451" +
				"&ET=1574797012360" +
				"&MEM=0" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=0" +
				"&UCPU=0" +
				"&CPU=0" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=17" +
				"&cssNum=8" +
				"&renderTime=687" +
				"&RED=1" +
				"&TTB=13" +
				"&RSR=2362" +
				"&DIA=2591";
		String requestContent0067 = 
				"OPTR_INFO=2d9aa215-38d2-423f-8427-7079286ddd2a!1574797011451!1574797011552!0" +
				"&OPTR_INFO=daa9824a-d642-4cdc-9e26-91212cb6dd20!1574797011565!1574797011674!0" +
				"&OPTR_INFO=840742e7-8ec2-4b70-b92a-64f2209d6f2f!1574797011676!1574797011805!0" +
				"&OPTR_INFO=cd808253-7082-486a-892f-f2e329f35c29!1574797011806!1574797011910!0" +
				"&OPTR_INFO=436562b2-71d2-425b-9e2f-ac602449912a!1574797011911!1574797012096!0" +
				"&OPTR_INFO=9aecc200-d8c2-4afe-a72b-851b236eb029!1574797012111!1574797012138!0";
		String requestHeader0067 = "POST " + requestFile0067 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-1\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0067.length() + "\r\n" + 		// Content-Length: 461
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0067, requestHost0067, requestPort0067, requestHeader0067, requestContent0067.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0067 = null;		// support garbage collector to reduce memory
		requestContent0067 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [67] <- Index 67
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [68] <- WEB ADMIN Index 68 ---
		String requestProt0068 = "https";
		String requestHost0068 = "hcm4preview.sapsf.com";
		int    requestPort0068 = 443;
		String requestFile0068 = "/ui/homepage3/resources_F954DFB1DC5279343A913E8AD8B19B83/sap/sf/homepage3/core/Component-preload.js";
		String requestHeader0068 = "GET " + requestFile0068 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 010005000130310256-5662-4e1e-b924-258326114f2c29820909-1501-babe-face-000000000003d29ed2b3-73a2-4949-9827-81522dd43629HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0068, requestHost0068, requestPort0068, requestHeader0068, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0068 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 25463
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [68] <- Index 68
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [69] <- WEB ADMIN Index 69 ---
		String requestProt0069 = "https";
		String requestHost0069 = "hcm4preview.sapsf.com";
		int    requestPort0069 = 443;
		String requestFile0069 = "/perfLogServlet" +
				"?callId=8670694290-X" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&TRS=1363" +
				"&ST=1574797008418" +
				"&ET=1574797012379" +
				"&RED=1" +
				"&TTB=13" +
				"&RSR=2362" +
				"&DIA=2591" +
				"&DCP=3959";
		String requestHeader0069 = "GET " + requestFile0069 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain; charset=UTF-8\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-X\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0069, requestHost0069, requestPort0069, requestHeader0069, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0069 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [69] <- Index 69
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [70] <- WEB ADMIN Index 70 ---
		String requestProt0070 = "https";
		String requestHost0070 = "hcm4preview.sapsf.com";
		int    requestPort0070 = 443;
		String requestFile0070 = "/ui/homepage3/resources_F954DFB1DC5279343A913E8AD8B19B83/sap/sf/homepage3/core/css/homepage3.css";
		String requestHeader0070 = "GET " + requestFile0070 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0070, requestHost0070, requestPort0070, requestHeader0070, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0070 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 3567
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [70] <- Index 70
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [71] <- WEB ADMIN Index 71 ---
		String requestProt0071 = "https";
		String requestHost0071 = "hcm4preview.sapsf.com";
		int    requestPort0071 = 443;
		String requestFile0071 = "/messagebundle/tctest/vmod_7a7e215-651502e6/ui/homepage3/resources/sap/sf/homepage3/app/i18n/messagebundle_en_US.properties";
		String requestHeader0071 = "GET " + requestFile0071 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000127be82d2-8842-4c33-9a2c-539c25bb892229820909-1501-babe-face-0000000000038966322d-fbf2-47a9-be21-dfc623cb0a21HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0071, requestHost0071, requestPort0071, requestHeader0071, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0071 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 3060
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [71] <- Index 71
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [72] <- WEB ADMIN Index 72 ---
		String requestProt0072 = "https";
		String requestHost0072 = "hcm4preview.sapsf.com";
		int    requestPort0072 = 443;
		String requestFile0072 = "/ui/homepage3/resources_E033111F9047E5E69CFF05CD074E5B41/sap/ushell/renderers/fiori2/resources/resources_en.properties";
		String requestHeader0072 = "GET " + requestFile0072 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000153b3223c-1ce2-41ab-9b2b-c06b26dabd2329820909-1501-babe-face-0000000000039d981238-5ff2-4326-af21-52d62cfd8228HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0072, requestHost0072, requestPort0072, requestHeader0072, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0072 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 9348
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [72] <- Index 72
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [73] <- WEB ADMIN Index 73 ---
		String requestProt0073 = "https";
		String requestHost0073 = "hcm4preview.sapsf.com";
		int    requestPort0073 = 443;
		String requestFile0073 = "/ui/sapui5/main_1.65.10/sap/ui/core/mimes/logo/sap_50x26.png";
		String requestHeader0073 = "GET " + requestFile0073 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0073, requestHost0073, requestPort0073, requestHeader0073, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0073 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 1652
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [73] <- Index 73
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [74] <- WEB ADMIN Index 74 ---
		String requestProt0074 = "https";
		String requestHost0074 = "hcm4preview.sapsf.com";
		int    requestPort0074 = 443;
		String requestFile0074 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TIP";
		String requestHeader0074 = "GET " + requestFile0074 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0074, requestHost0074, requestPort0074, requestHeader0074, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0074 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [74] <- Index 74
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [75] <- WEB ADMIN Index 75 ---
		String requestProt0075 = "https";
		String requestHost0075 = "hcm4preview.sapsf.com";
		int    requestPort0075 = 443;
		String requestFile0075 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TML";
		String requestHeader0075 = "GET " + requestFile0075 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0075, requestHost0075, requestPort0075, requestHeader0075, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0075 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [75] <- Index 75
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [76] <- WEB ADMIN Index 76 ---
		String requestProt0076 = "https";
		String requestHost0076 = "hcm4preview.sapsf.com";
		int    requestPort0076 = 443;
		String requestFile0076 = "/xi/ui/commonshell/pages/smrf.xhtml" +
				"?js%5B%5D=%2Fui%2Fjuic%2Fjs%2Fcomponents%2FsfDom.js";
		String requestHeader0076 = "GET " + requestFile0076 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001efa522c8-0d02-4528-962c-452d261ad32b29820909-1501-babe-face-00000000000305256293-5fd2-49ca-9925-0e8a2495a528HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0076, requestHost0076, requestPort0076, requestHeader0076, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0076 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3961
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [76] <- Index 76
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [77] <- WEB ADMIN Index 77 ---
		String requestProt0077 = "https";
		String requestHost0077 = "ds-aksb-a.akamaihd.net";
		int    requestPort0077 = 443;
		String requestFile0077 = "/2/492962/b" +
				"?dE=0" +
				"&cS=0" +
				"&cE=2" +
				"&rqS=2" +
				"&rsS=3" +
				"&rsE=1683" +
				"&sS=-678" +
				"&dl=1684" +
				"&di=1913" +
				"&fp=" +
				"&dlS=1920" +
				"&dlE=1921" +
				"&dc=3281" +
				"&leS=3282" +
				"&leE=3282" +
				"&to=" +
				"&ol=0" +
				"&cr=10" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/sf/login" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A70.0%29%20Gecko/20100101%20Firefox/70.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=23.36.3.39" +
				"&t=" +
				"&rid=42cd7325" +
				"&r=34125" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=8ee60000" +
				"&akTX=1" +
				"&akTI=42cd7325" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0077 = "GET " + requestFile0077 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0077, requestHost0077, requestPort0077, requestHeader0077, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0077 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, null);		// Test [77] <- Index 77
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [78] <- WEB ADMIN Index 78 ---
		String requestProt0078 = "https";
		String requestHost0078 = "hcm4preview.sapsf.com";
		int    requestPort0078 = 443;
		String requestFile0078 = "/messagebundle/tctest/vmod_b5a55cf2-651502e6/sap.m!/ui/sapui5/main/sap/m/messagebundle_en_US.properties";
		String requestHeader0078 = "GET " + requestFile0078 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000116a3c223-e862-4a31-9828-ffc52c88162029820909-1501-babe-face-000000000003e82ac285-1de2-4421-b42a-3dc226adc22dHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0078, requestHost0078, requestPort0078, requestHeader0078, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0078 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 7294
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [78] <- Index 78
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [79] <- WEB ADMIN Index 79 ---
		String requestProt0079 = "https";
		String requestHost0079 = "hcm4preview.sapsf.com";
		int    requestPort0079 = 443;
		String requestFile0079 = "/ui/todo/resources_3B6E2BB0FCE7F2BA2F8C7097DAB411D6/sap/sf/todo/util/PanelManager.js";
		String requestHeader0079 = "GET " + requestFile0079 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001946dc2d9-a892-4796-8f26-5b58257cb12e29820909-1501-babe-face-000000000003fc51d20e-9702-4587-8721-a896283b0325HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0079, requestHost0079, requestPort0079, requestHeader0079, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0079 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1508
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [79] <- Index 79
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [80] <- WEB ADMIN Index 80 ---
		String requestProt0080 = "https";
		String requestHost0080 = "hcm4preview.sapsf.com";
		int    requestPort0080 = 443;
		String requestFile0080 = "/ui/todo/resources_3B6E2BB0FCE7F2BA2F8C7097DAB411D6/sap/sf/todo/util/Util.js";
		String requestHeader0080 = "GET " + requestFile0080 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500011d69e20f-0e72-4ac4-9328-856720a1ce2929820909-1501-babe-face-000000000003a9a89219-fdc2-4081-9029-ffbd20fec823HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0080, requestHost0080, requestPort0080, requestHeader0080, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0080 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 817
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [80] <- Index 80
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [81] <- WEB ADMIN Index 81 ---
		String requestProt0081 = "https";
		String requestHost0081 = "hcm4preview.sapsf.com";
		int    requestPort0081 = 443;
		String requestFile0081 = "/messagebundle/tctest/vmod_b5873e05-651502e6/ui/todo/resources/sap/sf/todo/i18n/messagebundle_en_US.properties";
		String requestHeader0081 = "GET " + requestFile0081 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500013711029a-fd12-4146-ab28-60c92e3cdd2329820909-1501-babe-face-0000000000038fed6243-bda2-40f5-ad2b-600c2ebe1b29HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0081, requestHost0081, requestPort0081, requestHeader0081, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0081 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 1538
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [81] <- Index 81
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [82] <- WEB ADMIN Index 82 ---
		String requestProt0082 = "https";
		String requestHost0082 = "hcm4preview.sapsf.com";
		int    requestPort0082 = 443;
		String requestFile0082 = "/ui/sapui5/main_1.65.10/sap/ui/core/themes/base/fonts/SAP-icons.woff2";
		String requestHeader0082 = "GET " + requestFile0082 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0082, requestHost0082, requestPort0082, requestHeader0082, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0082 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 92820
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [82] <- Index 82
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [83] <- WEB ADMIN Index 83 ---
		String requestProt0083 = "https";
		String requestHost0083 = "hcm4preview.sapsf.com";
		int    requestPort0083 = 443;
		String requestFile0083 = "/messagebundle/tctest/vmod_90ec61d9-651502e6/ui/surj/resources/sap/sf/surj/shell/i18n/messagebundle_en_US.properties";
		String requestHeader0083 = "GET " + requestFile0083 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500019428a2f4-5b72-408b-9e29-999b20ff032329820909-1501-babe-face-000000000003081772ef-4822-4c42-a725-e67023e9972dHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0083, requestHost0083, requestPort0083, requestHeader0083, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0083 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 4204
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [83] <- Index 83
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [84] <- WEB ADMIN Index 84 ---
		String requestProt0084 = "https";
		String requestHost0084 = "hcm4preview.sapsf.com";
		int    requestPort0084 = 443;
		String requestFile0084 = "/xi/ajax/remoting/call/plaincall/globalNotificationControllerProxy.getNumberOfNewNotifications.dwr" +
				"?_s.crb=" + C_AjaxsecKey;		// recorded value = sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d
		requestFile0084 = Lib.replaceTextPattern(requestFile0084, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey, 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0084 = Lib.replaceTextPattern(requestFile0084, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'vScrb' on all occurrences

		String requestContent0084 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423287" + "\r\n" + 
				"c0-scriptName=globalNotificationControllerProxy" + "\r\n" + 
				"c0-methodName=getNumberOfNewNotifications" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"batchId=0";
		requestContent0084 = Lib.replaceTextPattern(requestContent0084, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0084 = Lib.replaceTextPattern(requestContent0084, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0084_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0084 = new String(Lib.binaryReplace(requestContent0084.getBytes(), binarySearchPattern0084_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0084 = "POST " + requestFile0084 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500014c47c201-3ee2-41fc-9128-35d925502f2a29820909-1501-babe-face-0000000000039c753248-6e92-488e-b62c-e15b2168af24HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0084.length() + "\r\n" + 		// Content-Length: 310
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0084, requestHost0084, requestPort0084, requestHeader0084, requestContent0084.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0084 = null;		// support garbage collector to reduce memory
		requestContent0084 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 114
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [84] <- Index 84
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [85] <- WEB ADMIN Index 85 ---
		String requestProt0085 = "https";
		String requestHost0085 = "hcm4preview.sapsf.com";
		int    requestPort0085 = 443;
		String requestFile0085 = "/xi/ajax/remoting/call/plaincall/showMeControllerProxy.signAPIUrl.dwr" +
				"?_s.crb=" + C_AjaxsecKey;		// recorded value = sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d
		requestFile0085 = Lib.replaceTextPattern(requestFile0085, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey, 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0085 = Lib.replaceTextPattern(requestFile0085, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'vScrb' on all occurrences

		String requestContent0085 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423287" + "\r\n" + 
				"c0-scriptName=showMeControllerProxy" + "\r\n" + 
				"c0-methodName=signAPIUrl" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:%2Fmedia%2Fshowme_597075b7_0dbc_491c_b3d1_f9fc838ee8e9%2FHOME_TAB%2Fstatus" + "\r\n" + 
				"c0-param1=string:HOME_TAB" + "\r\n" + 
				"c0-param2=string:727a1820ae53fe16b4a90eb72d5a4387" + "\r\n" + 
				"batchId=1";
		requestContent0085 = Lib.replaceTextPattern(requestContent0085, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0085_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0085 = new String(Lib.binaryReplace(requestContent0085.getBytes(), binarySearchPattern0085_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0085 = "POST " + requestFile0085 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500017258a282-0682-4f8a-ba2b-0cbe2965112929820909-1501-babe-face-0000000000035f1e32cd-f632-41ae-a22e-555525a1f520HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0085.length() + "\r\n" + 		// Content-Length: 423
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0085, requestHost0085, requestPort0085, requestHeader0085, requestContent0085.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0085 = null;		// support garbage collector to reduce memory
		requestContent0085 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 419
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [85] <- Index 85
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Token1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0085_1 = new BoundaryBasedExtractorItem( "token=" , "\");",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0085_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Token1'
			C_Token1 = boundaryBasedContentExtractorItem0085_1.getResultText();
			log("<<< C_Token1 = " + C_Token1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Token1!= null && C_Token1.trim().length() == 0)
			{
				C_Token1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Token1' ends up with an empty string - a substitute value was set");
				log("<<< C_Token1 = " + C_Token1);
			}
		}
		catch (Exception e) { C_Token1 = null; log(e); }
		if (C_Token1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Token1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [86] <- WEB ADMIN Index 86 ---
		String requestProt0086 = "https";
		String requestHost0086 = "hcm4preview.sapsf.com";
		int    requestPort0086 = 443;
		String requestFile0086 = "/ui/inproductsupport/resources_FC2D390696FAB47A4EA15ECC3DB96537/sap/sf/ips/Container.js";
		String requestHeader0086 = "GET " + requestFile0086 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0086, requestHost0086, requestPort0086, requestHeader0086, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0086 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 876
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [86] <- Index 86
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 3 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [87] <- WEB ADMIN Index 87 ---
		String requestProt0087 = "https";
		String requestHost0087 = "hcm4preview.sapsf.com";
		int    requestPort0087 = 443;
		String requestFile0087 = "/odata/v2/restricted/_Homepage3_/getHp3TileInitializer" +
				"?%24format=json" +
				"&_=1574797010875";
		String requestHeader0087 = "GET " + requestFile0087 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000100b4327a-3e12-47c4-862b-ddb92ec9b62329820909-1501-babe-face-000000000003cc4f3211-ff62-4427-9225-dc972d432220HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0087, requestHost0087, requestPort0087, requestHeader0087, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0087 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2808
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "}, \"title\" : \"Onboarding\"");		// Test [87] <- Index 87
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [88] <- WEB ADMIN Index 88 ---
		String requestProt0088 = "https";
		String requestHost0088 = "hcm4preview.sapsf.com";
		int    requestPort0088 = 443;
		String requestFile0088 = "/eduPhoto/view" +
				"?companyId=tctest" +
				"&photo_type=liveProfile" +
				"&user_id=SIT20018" +
				"&mod=";
		requestFile0088 = Lib.replaceTextPattern(requestFile0088, "SIT20018", P_UserID, 0);		// search and replace request file fragment "SIT20018" with variable 'P_UserID' on all occurrences

		String requestHeader0088 = "GET " + requestFile0088 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0088, requestHost0088, requestPort0088, requestHeader0088, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0088 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [88] <- Index 88
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [89] <- WEB ADMIN Index 89 ---
		String requestProt0089 = "https";
		String requestHost0089 = "hcm4preview.sapsf.com";
		int    requestPort0089 = 443;
		String requestFile0089 = "/ui/smrf/js/smrf_4e29ad345da40367c2fd48ac7998674d.js";
		String requestHeader0089 = "GET " + requestFile0089 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0089, requestHost0089, requestPort0089, requestHeader0089, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0089 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2163
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [89] <- Index 89
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [90] <- WEB ADMIN Index 90 ---
		String requestProt0090 = "https";
		String requestHost0090 = "hcm4preview.sapsf.com";
		int    requestPort0090 = 443;
		String requestFile0090 = "/ui/uicore/img/photoNotAvailable_a0c897b28771df5c8ecfb20dfe63199d.gif";
		String requestHeader0090 = "GET " + requestFile0090 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0090, requestHost0090, requestPort0090, requestHeader0090, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0090 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 2510
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [90] <- Index 90
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [91] <- WEB ADMIN Index 91 ---
		String requestProt0091 = "https";
		String requestHost0091 = "hcm4preview.sapsf.com";
		int    requestPort0091 = 443;
		String requestFile0091 = "/ui/sfgrp/css/juicGlobal_e6cc8671971b156b20e63648917ba730.css";
		String requestHeader0091 = "GET " + requestFile0091 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0091, requestHost0091, requestPort0091, requestHeader0091, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0091 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 12295
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [91] <- Index 91
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [92] <- WEB ADMIN Index 92 ---
		String requestProt0092 = "https";
		String requestHost0092 = "hcm4preview.sapsf.com";
		int    requestPort0092 = 443;
		String requestFile0092 = "/ui/juic/js/Util_c628076f6686d02db00e973ccd944d56.js";
		String requestHeader0092 = "GET " + requestFile0092 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0092, requestHost0092, requestPort0092, requestHeader0092, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0092 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6276
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [92] <- Index 92
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [93] <- WEB ADMIN Index 93 ---
		String requestProt0093 = "https";
		String requestHost0093 = "hcm4preview.sapsf.com";
		int    requestPort0093 = 443;
		String requestFile0093 = "/ui/juic/js/core/component_ca4231790bc781dc49a1857b2a4e24d5.js";
		String requestHeader0093 = "GET " + requestFile0093 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0093, requestHost0093, requestPort0093, requestHeader0093, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0093 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3105
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [93] <- Index 93
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [94] <- WEB ADMIN Index 94 ---
		String requestProt0094 = "https";
		String requestHost0094 = "hcm4preview.sapsf.com";
		int    requestPort0094 = 443;
		String requestFile0094 = "/ui/sfgrp/js/juicUtils_9a6794ee067de934138170d9a5fdb2d8.js";
		String requestHeader0094 = "GET " + requestFile0094 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0094, requestHost0094, requestPort0094, requestHeader0094, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0094 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 27169
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [94] <- Index 94
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [95] <- WEB ADMIN Index 95 ---
		String requestProt0095 = "https";
		String requestHost0095 = "hcm4preview.sapsf.com";
		int    requestPort0095 = 443;
		String requestFile0095 = "/ui/todo/resources_3B6E2BB0FCE7F2BA2F8C7097DAB411D6/sap/sf/todo/model/ApvReqModel.js";
		String requestHeader0095 = "GET " + requestFile0095 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0095, requestHost0095, requestPort0095, requestHeader0095, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0095 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 341
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [95] <- Index 95
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [96] <- WEB ADMIN Index 96 ---
		String requestProt0096 = "https";
		String requestHost0096 = "hcm4preview.sapsf.com";
		int    requestPort0096 = 443;
		String requestFile0096 = "/ui/todo/resources_3B6E2BB0FCE7F2BA2F8C7097DAB411D6/sap/sf/todo/model/LearningModel.js";
		String requestHeader0096 = "GET " + requestFile0096 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0096, requestHost0096, requestPort0096, requestHeader0096, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0096 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 331
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [96] <- Index 96
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [97] <- WEB ADMIN Index 97 ---
		String requestProt0097 = "https";
		String requestHost0097 = "hcm4preview.sapsf.com";
		int    requestPort0097 = 443;
		String requestFile0097 = "/ui/todo/resources_3B6E2BB0FCE7F2BA2F8C7097DAB411D6/sap/sf/todo/model/OnboardingModel.js";
		String requestHeader0097 = "GET " + requestFile0097 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0097, requestHost0097, requestPort0097, requestHeader0097, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0097 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 399
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [97] <- Index 97
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [98] <- WEB ADMIN Index 98 ---
		String requestProt0098 = "https";
		String requestHost0098 = "hcm4preview.sapsf.com";
		int    requestPort0098 = 443;
		String requestFile0098 = "/ui/todo/resources_3B6E2BB0FCE7F2BA2F8C7097DAB411D6/sap/sf/todo/model/PayrollHireModel.js";
		String requestHeader0098 = "GET " + requestFile0098 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0098, requestHost0098, requestPort0098, requestHeader0098, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0098 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 343
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [98] <- Index 98
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [99] <- WEB ADMIN Index 99 ---
		String requestProt0099 = "https";
		String requestHost0099 = "hcm4preview.sapsf.com";
		int    requestPort0099 = 443;
		String requestFile0099 = "/ui/todo/resources_3B6E2BB0FCE7F2BA2F8C7097DAB411D6/sap/sf/todo/model/ThirdPartyModel.js";
		String requestHeader0099 = "GET " + requestFile0099 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0099, requestHost0099, requestPort0099, requestHeader0099, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0099 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 456
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [99] <- Index 99
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [100] <- WEB ADMIN Index 100 ---
		String requestProt0100 = "https";
		String requestHost0100 = "hcm4preview.sapsf.com";
		int    requestPort0100 = 443;
		String requestFile0100 = "/ui/sapui5/main_1.65.10/sap/ui/core/cldr/en.json";
		String requestHeader0100 = "GET " + requestFile0100 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001cd8e82a2-3f92-4d95-ae26-f9232cb23c2329820909-1501-babe-face-000000000003770f72d0-6a12-4241-bc2c-ff7d26043a2aHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0100, requestHost0100, requestPort0100, requestHeader0100, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0100 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 17094
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"Cans\": \"Unified Canadian Aboriginal Syllabics\",");		// Test [100] <- Index 100
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [101] <- WEB ADMIN Index 101 ---
		String requestProt0101 = "https";
		String requestHost0101 = "hcm4preview.sapsf.com";
		int    requestPort0101 = 443;
		String requestFile0101 = "/xi/ajax/remoting/call/plaincall/myInfoControllerProxy.getInitializer.dwr" +
				"?_s.crb=" + C_AjaxsecKey;		// recorded value = sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d
		requestFile0101 = Lib.replaceTextPattern(requestFile0101, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey, 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0101 = Lib.replaceTextPattern(requestFile0101, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'vScrb' on all occurrences

		String requestContent0101 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423287" + "\r\n" + 
				"c0-scriptName=myInfoControllerProxy" + "\r\n" + 
				"c0-methodName=getInitializer" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:11%2F26%2F2019" + "\r\n" + 
				"batchId=2";
		requestContent0101 = Lib.replaceTextPattern(requestContent0101, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0101_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0101 = new String(Lib.binaryReplace(requestContent0101.getBytes(), binarySearchPattern0101_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0101 = "POST " + requestFile0101 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000155729247-7ae2-4933-8428-f8652b0a5a2429820909-1501-babe-face-0000000000037c6622ab-a442-4ef9-922e-fa4822e47c21HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0101.length() + "\r\n" + 		// Content-Length: 291
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0101, requestHost0101, requestPort0101, requestHeader0101, requestContent0101.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0101 = null;		// support garbage collector to reduce memory
		requestContent0101 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 760
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [101] <- Index 101
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_Mod2'
		ContentTokenExtractorItem contentTokenExtractorItem0101_1 = new ContentTokenExtractorItem("userExpressivePhotoMod:", "\t\n\r \"(),={}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0101_1);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'C_Mod2'
			C_Mod2 = contentTokenExtractorItem0101_1.getResultToken();
			log("<<< C_Mod2 = " + C_Mod2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod2!= null && C_Mod2.trim().length() == 0)
			{
				C_Mod2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod2' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod2 = " + C_Mod2);
			}
		}
		catch (Exception e) { C_Mod2 = null; log(e); }
		if (C_Mod2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod2' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [102] <- WEB ADMIN Index 102 ---
		String requestProt0102 = "https";
		String requestHost0102 = "hcm4preview.sapsf.com";
		int    requestPort0102 = 443;
		String requestFile0102 = "/xi/ajax/remoting/call/plaincall/dossierControllerProxy.getDossierSlideCount.dwr" +
				"?_s.crb=" + C_AjaxsecKey;		// recorded value = sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d
		requestFile0102 = Lib.replaceTextPattern(requestFile0102, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey, 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0102 = Lib.replaceTextPattern(requestFile0102, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'vScrb' on all occurrences

		String requestContent0102 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423287" + "\r\n" + 
				"c0-scriptName=dossierControllerProxy" + "\r\n" + 
				"c0-methodName=getDossierSlideCount" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:manager" + "\r\n" + 
				"batchId=3";
		requestContent0102 = Lib.replaceTextPattern(requestContent0102, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0102_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0102 = new String(Lib.binaryReplace(requestContent0102.getBytes(), binarySearchPattern0102_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0102 = "POST " + requestFile0102 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500013d48528f-bfa2-4dcd-972f-ef5d294f532829820909-1501-babe-face-000000000003d87ab23f-b402-4dd6-ba2a-836a24729e2aHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0102.length() + "\r\n" + 		// Content-Length: 291
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0102, requestHost0102, requestPort0102, requestHeader0102, requestContent0102.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0102 = null;		// support garbage collector to reduce memory
		requestContent0102 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 114
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [102] <- Index 102
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [103] <- WEB ADMIN Index 103 ---
		String requestProt0103 = "https";
		String requestHost0103 = "hcm4preview.sapsf.com";
		int    requestPort0103 = 443;
		String requestFile0103 = "/xi/ajax/remoting/call/plaincall/hp3ReportTileControllerProxy.getFavoritesCount.dwr" +
				"?_s.crb=" + C_AjaxsecKey;		// recorded value = sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d
		requestFile0103 = Lib.replaceTextPattern(requestFile0103, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey, 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0103 = Lib.replaceTextPattern(requestFile0103, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'vScrb' on all occurrences

		String requestContent0103 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423287" + "\r\n" + 
				"c0-scriptName=hp3ReportTileControllerProxy" + "\r\n" + 
				"c0-methodName=getFavoritesCount" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=4";
		requestContent0103 = Lib.replaceTextPattern(requestContent0103, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0103_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0103 = new String(Lib.binaryReplace(requestContent0103.getBytes(), binarySearchPattern0103_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0103 = "POST " + requestFile0103 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500019f8d3260-9a82-442a-8920-ccdd294c802029820909-1501-babe-face-0000000000032514928c-ca52-4c16-9b28-795425d13c2dHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0103.length() + "\r\n" + 		// Content-Length: 269
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0103, requestHost0103, requestPort0103, requestHeader0103, requestContent0103.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0103 = null;		// support garbage collector to reduce memory
		requestContent0103 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 114
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [103] <- Index 103
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [104] <- WEB ADMIN Index 104 ---
		String requestProt0104 = "https";
		String requestHost0104 = "hcm4preview.sapsf.com";
		int    requestPort0104 = 443;
		String requestFile0104 = "/ui/todo/resources_3B6E2BB0FCE7F2BA2F8C7097DAB411D6/sap/sf/todo/popup/service/DueDateHelper.js";
		String requestHeader0104 = "GET " + requestFile0104 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0104, requestHost0104, requestPort0104, requestHeader0104, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0104 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 790
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [104] <- Index 104
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [105] <- WEB ADMIN Index 105 ---
		String requestProt0105 = "https";
		String requestHost0105 = "hcm4preview.sapsf.com";
		int    requestPort0105 = 443;
		String requestFile0105 = "/xi/ajax/remoting/call/plaincall/hp3TourControllerProxy.getTourPreference.dwr" +
				"?_s.crb=" + C_AjaxsecKey;		// recorded value = sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d
		requestFile0105 = Lib.replaceTextPattern(requestFile0105, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey, 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0105 = Lib.replaceTextPattern(requestFile0105, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'vScrb' on all occurrences

		String requestContent0105 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423287" + "\r\n" + 
				"c0-scriptName=hp3TourControllerProxy" + "\r\n" + 
				"c0-methodName=getTourPreference" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=5";
		requestContent0105 = Lib.replaceTextPattern(requestContent0105, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0105_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0105 = new String(Lib.binaryReplace(requestContent0105.getBytes(), binarySearchPattern0105_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0105 = "POST " + requestFile0105 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000100e77266-31c2-4137-b52b-90162bf8902529820909-1501-babe-face-0000000000039eb8f247-1b82-4b48-b82d-e0042fdb602fHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0105.length() + "\r\n" + 		// Content-Length: 263
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0105, requestHost0105, requestPort0105, requestHeader0105, requestContent0105.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0105 = null;		// support garbage collector to reduce memory
		requestContent0105 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 170
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [105] <- Index 105
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [106] <- WEB ADMIN Index 106 ---
		String requestProt0106 = "https";
		String requestHost0106 = "hcm4preview.sapsf.com";
		int    requestPort0106 = 443;
		String requestFile0106 = "/welcomePortletImageUpload/a6d386d4-0d39-4684-90c9-e8a9e116ea92";
		String requestHeader0106 = "GET " + requestFile0106 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0106, requestHost0106, requestPort0106, requestHeader0106, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0106 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/JPEG", header text fragment = [verification disabled], recorded content size = 258027
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/JPEG", null, null);		// Test [106] <- Index 106
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 4 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [107] <- WEB ADMIN Index 107 ---
		String requestProt0107 = "https";
		String requestHost0107 = "hcm4preview.sapsf.com";
		int    requestPort0107 = 443;
		String requestFile0107 = "/public/ui-dcss/tctest/_/3m!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Bold.woff2";
		requestFile0107 = Lib.replaceTextPattern(requestFile0107, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0107 = Lib.replaceTextPattern(requestFile0107, "!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!", C_belieze1, 0);		// search and replace request file fragment "!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!" with variable 'C_belieze1' on all occurrences

		String requestHeader0107 = "GET " + requestFile0107 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/public/ui-dcss/tctest/_/3m!belizeLanding!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0107, requestHost0107, requestPort0107, requestHeader0107, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("C7B52757B839BC0F193BCD71F2425A88", C_Merge0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!!lN0gsV2!011VKLLTANOBTRXPLPT!10!0-1!PL-1!1!0!!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!1eS=qeS=qeS=q11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd6677cjQcPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1eS=q-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP0U00001Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SL1DE!!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!Db8Ir!", C_belieze1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0107 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 26732
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [107] <- Index 107
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [108] <- WEB ADMIN Index 108 ---
		String requestProt0108 = "https";
		String requestHost0108 = "mediaservicesfmsprod.ms.successfactors.com";
		int    requestPort0108 = 443;
		String requestFile0108 = "/mediaservice/api/v2/media/showme_597075b7_0dbc_491c_b3d1_f9fc838ee8e9/HOME_TAB/status" +
				"?token=" + C_Token1 +		// recorded value = c8e35d9c81c21c4fde28a25f8a4d24c065be5aa0bfcabcda1eb6ebe331598c54e5717541d59d543a1801b2c9ee4808d563866f4de09c8d217d1f7d626a473f87,-326872741816978914,1574798813,1
				"&callback=sfDeferredUtilCallback4";
		requestFile0108 = Lib.replaceTextPattern(requestFile0108, "c8e35d9c81c21c4fde28a25f8a4d24c065be5aa0bfcabcda1eb6ebe331598c54e5717541d59d543a1801b2c9ee4808d563866f4de09c8d217d1f7d626a473f87,-326872741816978914,1574798813,1", C_Token1, 0);		// search and replace request file fragment "c8e35d9c81c21c4fde28a25f8a4d24c065be5aa0bfcabcda1eb6ebe331598c54e5717541d59d543a1801b2c9ee4808d563866f4de09c8d217d1f7d626a473f87,-326872741816978914,1574798813,1" with variable 'C_Token1' on all occurrences

		String requestHeader0108 = "GET " + requestFile0108 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mediaservicesfmsprod.ms.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0108, requestHost0108, requestPort0108, requestHeader0108, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0108 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 128
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [108] <- Index 108
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [109] <- WEB ADMIN Index 109 ---
		String requestProt0109 = "https";
		String requestHost0109 = "hcm4preview.sapsf.com";
		int    requestPort0109 = 443;
		String requestFile0109 = "/ui/surj/resources_F71AEAF23B9A2E477A57080174493027/sap/sf/surj/commons/charting/ArcChart.js";
		String requestHeader0109 = "GET " + requestFile0109 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001144f3222-ddc2-4de1-942b-55812f98e12329820909-1501-babe-face-00000000000392c50264-8fd2-4ab5-ab2c-165e22513126HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0109, requestHost0109, requestPort0109, requestHeader0109, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0109 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1192
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [109] <- Index 109
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [110] <- WEB ADMIN Index 110 ---
		String requestProt0110 = "https";
		String requestHost0110 = "hcm4preview.sapsf.com";
		int    requestPort0110 = 443;
		String requestFile0110 = "/ui/surj/resources_F71AEAF23B9A2E477A57080174493027/sap/sf/surj/commons/library.js";
		String requestHeader0110 = "GET " + requestFile0110 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500016463d2c9-dfa2-4cfd-9d2f-ccad2d47bb2c29820909-1501-babe-face-0000000000039a2e0245-a0d2-40a9-a12c-28072263d12bHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0110, requestHost0110, requestPort0110, requestHeader0110, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0110 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 219
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [110] <- Index 110
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [111] <- WEB ADMIN Index 111 ---
		String requestProt0111 = "https";
		String requestHost0111 = "hcm4preview.sapsf.com";
		int    requestPort0111 = 443;
		String requestFile0111 = "/ui/surj/resources_F71AEAF23B9A2E477A57080174493027/sap/sf/surj/commons/themes/sap_belize/library.css";
		String requestHeader0111 = "GET " + requestFile0111 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0111, requestHost0111, requestPort0111, requestHeader0111, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0111 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1150
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [111] <- Index 111
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [112] <- WEB ADMIN Index 112 ---
		String requestProt0112 = "https";
		String requestHost0112 = "hcm4preview.sapsf.com";
		int    requestPort0112 = 443;
		String requestFile0112 = "/ui/sapui5/main_1.65.10/sap/ui/thirdparty/d3.js";
		String requestHeader0112 = "GET " + requestFile0112 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001dcc302c5-3d72-439f-ac24-4edf224e5f2029820909-1501-babe-face-000000000003f6f8f29b-8b92-4109-8f21-04302a6a822cHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0112, requestHost0112, requestPort0112, requestHeader0112, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0112 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 54186
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [112] <- Index 112
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [113] <- WEB ADMIN Index 113 ---
		String requestProt0113 = "https";
		String requestHost0113 = "hcm4preview.sapsf.com";
		int    requestPort0113 = 443;
		String requestFile0113 = "/odata/v2/restricted/AttachmentInternal,COAHStatusBean,COAdminLinkItemBean,COAdminTileLinkBean,COAdminTileLinkListBean,SLActivityBean,SLEmpActivitiesBean,SLEmpActivitiesBeanList,Tour,changeFavoriteLink,getAdminTileLinks,getInternalJobPostingCount,getPreApprovedJobReqCount,getSLActivityList/Tour" +
				"?%24format=json" +
				"&_=1574797010876";
		String requestHeader0113 = "GET " + requestFile0113 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001b71982a7-01b2-4221-9925-f9642182862829820909-1501-babe-face-000000000003eb339287-ab72-442d-8826-f8be280fd921HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0113, requestHost0113, requestPort0113, requestHeader0113, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0113 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 30
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"results\" : [");		// Test [113] <- Index 113
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [114] <- WEB ADMIN Index 114 ---
		String requestProt0114 = "https";
		String requestHost0114 = "hcm4preview.sapsf.com";
		int    requestPort0114 = 443;
		String requestFile0114 = "/xi/ajax/remoting/call/plaincall/myInfoControllerProxy.getCompletePercent.dwr" +
				"?_s.crb=" + C_AjaxsecKey;		// recorded value = sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d
		requestFile0114 = Lib.replaceTextPattern(requestFile0114, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey, 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0114 = Lib.replaceTextPattern(requestFile0114, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'vScrb' on all occurrences

		String requestContent0114 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423287" + "\r\n" + 
				"c0-scriptName=myInfoControllerProxy" + "\r\n" + 
				"c0-methodName=getCompletePercent" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"batchId=6";
		requestContent0114 = Lib.replaceTextPattern(requestContent0114, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0114 = Lib.replaceTextPattern(requestContent0114, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0114_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0114 = new String(Lib.binaryReplace(requestContent0114.getBytes(), binarySearchPattern0114_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0114 = "POST " + requestFile0114 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500013358a2db-7412-4f45-8322-45ec25fcaa2929820909-1501-babe-face-0000000000035903723d-b222-467f-b92b-ba7b28130e2cHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0114.length() + "\r\n" + 		// Content-Length: 289
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0114, requestHost0114, requestPort0114, requestHeader0114, requestContent0114.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0114 = null;		// support garbage collector to reduce memory
		requestContent0114 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 124
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [114] <- Index 114
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [115] <- WEB ADMIN Index 115 ---
		String requestProt0115 = "https";
		String requestHost0115 = "hcm4preview.sapsf.com";
		int    requestPort0115 = 443;
		String requestFile0115 = "/xi/ui/commonshell/pages/smrf.xhtml" +
				"?js%5B%5D=%2Fui%2Fuicore%2Fjs%2Fshell%2Fshell.library.smrf.js";
		String requestHeader0115 = "GET " + requestFile0115 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000180c91203-7da2-47b9-9e2c-29ed282d792029820909-1501-babe-face-000000000003eb775236-1e12-45ba-b327-e45e2b098327HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0115, requestHost0115, requestPort0115, requestHeader0115, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0115 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 38583
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [115] <- Index 115
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [116] <- WEB ADMIN Index 116 ---
		String requestProt0116 = "https";
		String requestHost0116 = "hcm4preview.sapsf.com";
		int    requestPort0116 = 443;
		String requestFile0116 = "/ui/surj/resources_F71AEAF23B9A2E477A57080174493027/sap/sf/surj/commons/charting/ArcChartRenderer.js";
		String requestHeader0116 = "GET " + requestFile0116 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500010f3322f8-5962-4678-aa2e-b21a2cd0ef2529820909-1501-babe-face-0000000000030863e2f8-7b42-46d0-a32c-a77422570826HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0116, requestHost0116, requestPort0116, requestHeader0116, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0116 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 213
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [116] <- Index 116
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [117] <- WEB ADMIN Index 117 ---
		String requestProt0117 = "https";
		String requestHost0117 = "hcm4preview.sapsf.com";
		int    requestPort0117 = 443;
		String requestFile0117 = "/eduPhoto/view" +
				"?companyId=tctest" +
				"&photo_type=userExpressivePhoto" +
				"&user_id=SIT20018" +
				"&mod=" + C_Mod2;		// recorded value = 240141571184340000
		requestFile0117 = Lib.replaceTextPattern(requestFile0117, "240141571184340000", C_Mod2, 0);		// search and replace request file fragment "240141571184340000" with variable 'C_Mod2' on all occurrences
		requestFile0117 = Lib.replaceTextPattern(requestFile0117, "SIT20018", P_UserID, 0);		// search and replace request file fragment "SIT20018" with variable 'P_UserID' on all occurrences

		String requestHeader0117 = "GET " + requestFile0117 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0117, requestHost0117, requestPort0117, requestHeader0117, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0117 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/JPEG", header text fragment = [verification disabled], recorded content size = 123168
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/JPEG", null, null);		// Test [117] <- Index 117
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [118] <- WEB ADMIN Index 118 ---
		String requestProt0118 = "https";
		String requestHost0118 = "hcm4preview.sapsf.com";
		int    requestPort0118 = 443;
		String requestFile0118 = "/odata/v2/restricted/TodoEntryV2,WfRequest/TodoEntryV2/$count" +
				"?%24filter=categoryId%20in%20%2714%27%2C%2717%27%2C%2718%27%2C%2721%27%2C%2724%27%2C%2725%27%2C%2729%27%2C%2739%27%2C%2746%27%20and%20status%20eq%202%20and%20wfRequestNav%2FwfRequestId%20ne%20null";
		String requestHeader0118 = "GET " + requestFile0118 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-CSRF-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500014ea9f209-3e62-48f3-9d2f-ee592d8b932229820909-1501-babe-face-000000000003149f02d4-bd32-4f20-932b-774c25354b2bHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0118, requestHost0118, requestPort0118, requestHeader0118, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0118 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 1
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [118] <- Index 118
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [119] <- WEB ADMIN Index 119 ---
		String requestProt0119 = "https";
		String requestHost0119 = "hcm4preview.sapsf.com";
		int    requestPort0119 = 443;
		String requestFile0119 = "/xi/ajax/remoting/call/plaincall/hp3TodoPanelControllerProxy.getLearningTodoDetails.dwr" +
				"?_s.crb=" + C_AjaxsecKey;		// recorded value = sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d
		requestFile0119 = Lib.replaceTextPattern(requestFile0119, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey, 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0119 = Lib.replaceTextPattern(requestFile0119, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'vScrb' on all occurrences

		String requestContent0119 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423287" + "\r\n" + 
				"c0-scriptName=hp3TodoPanelControllerProxy" + "\r\n" + 
				"c0-methodName=getLearningTodoDetails" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=7";
		requestContent0119 = Lib.replaceTextPattern(requestContent0119, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0119_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0119 = new String(Lib.binaryReplace(requestContent0119.getBytes(), binarySearchPattern0119_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0119 = "POST " + requestFile0119 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001d3d5f25c-e872-4b6a-b620-d0b02d3f902f29820909-1501-babe-face-0000000000036b0a02ff-ba42-4470-a620-1a6d28e4de23HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0119.length() + "\r\n" + 		// Content-Length: 273
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0119, requestHost0119, requestPort0119, requestHeader0119, requestContent0119.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0119 = null;		// support garbage collector to reduce memory
		requestContent0119 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 163
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [119] <- Index 119
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [120] <- WEB ADMIN Index 120 ---
		String requestProt0120 = "https";
		String requestHost0120 = "hcm4preview.sapsf.com";
		int    requestPort0120 = 443;
		String requestFile0120 = "/xi/ajax/remoting/call/plaincall/OnboardingHP3TileControllerProxy.getOnboardingTasksTile.dwr" +
				"?_s.crb=" + C_AjaxsecKey;		// recorded value = sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d
		requestFile0120 = Lib.replaceTextPattern(requestFile0120, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey, 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0120 = Lib.replaceTextPattern(requestFile0120, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'vScrb' on all occurrences

		String requestContent0120 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423287" + "\r\n" + 
				"c0-scriptName=OnboardingHP3TileControllerProxy" + "\r\n" + 
				"c0-methodName=getOnboardingTasksTile" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=8";
		requestContent0120 = Lib.replaceTextPattern(requestContent0120, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0120_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0120 = new String(Lib.binaryReplace(requestContent0120.getBytes(), binarySearchPattern0120_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0120 = "POST " + requestFile0120 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001073f3237-9ec2-4028-8925-3a212e9c7d2b29820909-1501-babe-face-000000000003a93ec25c-c862-47d7-ac29-93ed24266825HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0120.length() + "\r\n" + 		// Content-Length: 278
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0120, requestHost0120, requestPort0120, requestHeader0120, requestContent0120.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0120 = null;		// support garbage collector to reduce memory
		requestContent0120 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 356
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [120] <- Index 120
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [121] <- WEB ADMIN Index 121 ---
		String requestProt0121 = "https";
		String requestHost0121 = "hcm4preview.sapsf.com";
		int    requestPort0121 = 443;
		String requestFile0121 = "/odata/v2/PayrollDataMaintenanceTask/PayrollDataMaintenanceTask/$count" +
				"?%24filter=status%20eq%20%27IN_PROCESS%27%20or%20status%20eq%20%27OPEN%27";
		String requestHeader0121 = "GET " + requestFile0121 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-CSRF-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001522f5229-9992-4913-9e2d-3c71231f742c29820909-1501-babe-face-000000000003eff72256-2ab2-4a35-8122-f8f72e00bb20HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0121, requestHost0121, requestPort0121, requestHeader0121, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0121 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 2
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [121] <- Index 121
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [122] <- WEB ADMIN Index 122 ---
		String requestProt0122 = "https";
		String requestHost0122 = "hcm4preview.sapsf.com";
		int    requestPort0122 = 443;
		String requestFile0122 = "/odata/v2/restricted/TodoEntryV2/TodoEntryV2" +
				"?%24filter=categoryId%20eq%2057%20and%20status%20eq%202" +
				"&%24orderby=dueDate" +
				"&%24select=dueDate";
		String requestHeader0122 = "GET " + requestFile0122 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-CSRF-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000156809259-a572-49ef-a623-be7b2524912b29820909-1501-babe-face-00000000000374ac2253-ddf2-43a3-b429-b1242b254c2bHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0122, requestHost0122, requestPort0122, requestHeader0122, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0122 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 30
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"results\" : [");		// Test [122] <- Index 122
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [123] <- WEB ADMIN Index 123 ---
		String requestProt0123 = "https";
		String requestHost0123 = "hcm4preview.sapsf.com";
		int    requestPort0123 = 443;
		String requestFile0123 = "/odata/v2/restricted/AttachmentInternal,COAHStatusBean,COAdminLinkItemBean,COAdminTileLinkBean,COAdminTileLinkListBean,SLActivityBean,SLEmpActivitiesBean,SLEmpActivitiesBeanList,Tour,changeFavoriteLink,getAdminTileLinks,getInternalJobPostingCount,getPreApprovedJobReqCount,getSLActivityList/getInternalJobPostingCount" +
				"?%24format=json" +
				"&_=1574797010877";
		String requestHeader0123 = "GET " + requestFile0123 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001ef6872ab-1a62-440f-b12b-aaa325b5302829820909-1501-babe-face-000000000003fe3fd26c-cf62-49db-9a2a-662c28389e2fHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0123, requestHost0123, requestPort0123, requestHeader0123, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0123 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 47
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"getInternalJobPostingCount\" :");		// Test [123] <- Index 123
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [124] <- WEB ADMIN Index 124 ---
		String requestProt0124 = "https";
		String requestHost0124 = "hcm4preview.sapsf.com";
		int    requestPort0124 = 443;
		String requestFile0124 = "/xi/ui/commonshell/pages/smrf.xhtml" +
				"?js%5B%5D=%2Fui%2Fyoucalc%2Fjs%2Fcontrol%2FTile.js";
		String requestHeader0124 = "GET " + requestFile0124 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000105b2e29f-8ef2-4094-8b26-2f6b22d6b62129820909-1501-babe-face-000000000003eacde295-9632-467f-b52c-5dec2c41ca23HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0124, requestHost0124, requestPort0124, requestHeader0124, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0124 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 21410
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [124] <- Index 124
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [125] <- WEB ADMIN Index 125 ---
		String requestProt0125 = "https";
		String requestHost0125 = "hcm4preview.sapsf.com";
		int    requestPort0125 = 443;
		String requestFile0125 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TSL";
		String requestHeader0125 = "GET " + requestFile0125 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0125, requestHost0125, requestPort0125, requestHeader0125, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0125 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [125] <- Index 125
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [126] <- WEB ADMIN Index 126 ---
		String requestProt0126 = "https";
		String requestHost0126 = "hcm4preview.sapsf.com";
		int    requestPort0126 = 443;
		String requestFile0126 = "/ui/ycserver/css/youcalc_22144c538716f1647455783fd8f2e3d7.css";
		String requestHeader0126 = "GET " + requestFile0126 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0126, requestHost0126, requestPort0126, requestHeader0126, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0126 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 3363
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [126] <- Index 126
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2_4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #2 (fragment 5 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [127] <- WEB ADMIN Index 127 ---
		String requestProt0127 = "https";
		String requestHost0127 = "hcm4preview.sapsf.com";
		int    requestPort0127 = 443;
		String requestFile0127 = "/ui/surj/js/core/surj-ui-core_8a189e8cb1f9b21c5dbc7bfb2df74830.js";
		String requestHeader0127 = "GET " + requestFile0127 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0127, requestHost0127, requestPort0127, requestHeader0127, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0127 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1662
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [127] <- Index 127
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [128] <- WEB ADMIN Index 128 ---
		String requestProt0128 = "https";
		String requestHost0128 = "hcm4preview.sapsf.com";
		int    requestPort0128 = 443;
		String requestFile0128 = "/ui/juic/js/core/component-surj_f3ab217faa0d6807425510d0ad2294e2.js";
		String requestHeader0128 = "GET " + requestFile0128 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0128, requestHost0128, requestPort0128, requestHeader0128, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0128 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1273
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [128] <- Index 128
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [129] <- WEB ADMIN Index 129 ---
		String requestProt0129 = "https";
		String requestHost0129 = "hcm4preview.sapsf.com";
		int    requestPort0129 = 443;
		String requestFile0129 = "/ui/extlib/json2_git8e0b15c/json2.js";
		String requestHeader0129 = "GET " + requestFile0129 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0129, requestHost0129, requestPort0129, requestHeader0129, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0129 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1539
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [129] <- Index 129
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [130] <- WEB ADMIN Index 130 ---
		String requestProt0130 = "https";
		String requestHost0130 = "hcm4preview.sapsf.com";
		int    requestPort0130 = 443;
		String requestFile0130 = "/perfLogServlet" +
				"?callId=8670694290-2" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&TRS=1363" +
				"&TIP=2420" +
				"&TML=2421" +
				"&TSL=4836" +
				"&ST=1574797012366" +
				"&ET=1574797015796" +
				"&MEM=94630" +
				"&NRE=58" +
				"&NWR=45" +
				"&SCPU=30" +
				"&SQLC=54" +
				"&SQLT=272" +
				"&SVT=674" +
				"&UCPU=260" +
				"&CPU=290" +
				"&FRE=316" +
				"&FWR=0" +
				"&jsNum=37" +
				"&cssNum=13" +
				"&renderTime=3329" +
				"&RED=1" +
				"&TTB=13" +
				"&RSR=2362" +
				"&DIA=2591" +
				"&DCP=3959";
		String requestContent0130 = 
				"OPTR_INFO=30310256-5662-4e1e-b924-258326114f2c!1574797012366!1574797012693!0" +
				"&OPTR_INFO=27be82d2-8842-4c33-9a2c-539c25bb8922!1574797012713!1574797012893!0" +
				"&OPTR_INFO=53b3223c-1ce2-41ab-9b2b-c06b26dabd23!1574797012923!1574797013113!0" +
				"&OPTR_INFO=efa522c8-0d02-4528-962c-452d261ad32b!1574797013203!1574797013441!0" +
				"&OPTR_INFO=16a3c223-e862-4a31-9828-ffc52c881620!1574797013256!1574797013381!0" +
				"&OPTR_INFO=946dc2d9-a892-4796-8f26-5b58257cb12e!1574797013415!1574797013483!0" +
				"&OPTR_INFO=1d69e20f-0e72-4ac4-9328-856720a1ce29!1574797013486!1574797013559!0" +
				"&OPTR_INFO=3711029a-fd12-4146-ab28-60c92e3cdd23!1574797013563!1574797013710!0" +
				"&OPTR_INFO=9428a2f4-5b72-408b-9e29-999b20ff0323!1574797013789!1574797013897!0" +
				"&OPTR_INFO=4c47c201-3ee2-41fc-9128-35d925502f2a!1574797013930!1574797014029!0" +
				"&OPTR_INFO=7258a282-0682-4f8a-ba2b-0cbe29651129!1574797013931!1574797014017!0" +
				"&OPTR_INFO=00b4327a-3e12-47c4-862b-ddb92ec9b623!1574797013968!1574797014415!0" +
				"&OPTR_INFO=cd8e82a2-3f92-4d95-ae26-f9232cb23c23!1574797014515!1574797014623!0" +
				"&OPTR_INFO=55729247-7ae2-4933-8428-f8652b0a5a24!1574797014628!1574797014995!0" +
				"&OPTR_INFO=3d48528f-bfa2-4dcd-972f-ef5d294f5328!1574797014631!1574797014799!0" +
				"&OPTR_INFO=9f8d3260-9a82-442a-8920-ccdd294c8020!1574797014632!1574797014826!0" +
				"&OPTR_INFO=00e77266-31c2-4137-b52b-90162bf89025!1574797014635!1574797014799!0" +
				"&OPTR_INFO=144f3222-ddc2-4de1-942b-55812f98e123!1574797014836!1574797014907!0" +
				"&OPTR_INFO=6463d2c9-dfa2-4cfd-9d2f-ccad2d47bb2c!1574797014908!1574797014980!0" +
				"&OPTR_INFO=dcc302c5-3d72-439f-ac24-4edf224e5f20!1574797014982!1574797015134!0" +
				"&OPTR_INFO=b71982a7-01b2-4221-9925-f96421828628!1574797015151!1574797015266!0" +
				"&OPTR_INFO=3358a2db-7412-4f45-8322-45ec25fcaa29!1574797015224!1574797015312!0" +
				"&OPTR_INFO=80c91203-7da2-47b9-9e2c-29ed282d7920!1574797015226!1574797015447!0" +
				"&OPTR_INFO=0f3322f8-5962-4678-aa2e-b21a2cd0ef25!1574797015259!1574797015330!0" +
				"&OPTR_INFO=4ea9f209-3e62-48f3-9d2f-ee592d8b9322!1574797015397!1574797015500!0" +
				"&OPTR_INFO=d3d5f25c-e872-4b6a-b620-d0b02d3f902f!1574797015397!1574797015481!0" +
				"&OPTR_INFO=073f3237-9ec2-4028-8925-3a212e9c7d2b!1574797015399!1574797015695!0" +
				"&OPTR_INFO=522f5229-9992-4913-9e2d-3c71231f742c!1574797015399!1574797015561!0" +
				"&OPTR_INFO=56809259-a572-49ef-a623-be7b2524912b!1574797015400!1574797015536!0" +
				"&OPTR_INFO=ef6872ab-1a62-440f-b12b-aaa325b53028!1574797015408!1574797015602!0" +
				"&OPTR_INFO=05b2e29f-8ef2-4094-8b26-2f6b22d6b621!1574797015461!1574797015629!0";
		String requestHeader0130 = "POST " + requestFile0130 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0130.length() + "\r\n" + 		// Content-Length: 2386
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0130, requestHost0130, requestPort0130, requestHeader0130, requestContent0130.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0130 = null;		// support garbage collector to reduce memory
		requestContent0130 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [130] <- Index 130
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [131] <- WEB ADMIN Index 131 ---
		String requestProt0131 = "https";
		String requestHost0131 = "hcm4preview.sapsf.com";
		int    requestPort0131 = 443;
		String requestFile0131 = "/ui/sfgrp/js/ycserverFramework_2723ea4fcf015fa0a26c8e3c53edad36.js";
		String requestHeader0131 = "GET " + requestFile0131 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0131, requestHost0131, requestPort0131, requestHeader0131, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0131 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 16242
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [131] <- Index 131
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [132] <- WEB ADMIN Index 132 ---
		String requestProt0132 = "https";
		String requestHost0132 = "hcm4preview.sapsf.com";
		int    requestPort0132 = 443;
		String requestFile0132 = "/public/theme-api/info/tctest;jsonp=youcalcParseThemeInfo";
		String requestHeader0132 = "GET " + requestFile0132 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0132, requestHost0132, requestPort0132, requestHeader0132, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0132 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 815
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [132] <- Index 132
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Mod3'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0132_1 = new BoundaryBasedExtractorItem( "dcss;mod=" , "\",\"",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0132_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Mod3'
			C_Mod3 = boundaryBasedContentExtractorItem0132_1.getResultText();
			log("<<< C_Mod3 = " + C_Mod3);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod3!= null && C_Mod3.trim().length() == 0)
			{
				C_Mod3 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod3' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod3 = " + C_Mod3);
			}
		}
		catch (Exception e) { C_Mod3 = null; log(e); }
		if (C_Mod3 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod3' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [133] <- WEB ADMIN Index 133 ---
		String requestProt0133 = "https";
		String requestHost0133 = "hcm4preview.sapsf.com";
		int    requestPort0133 = 443;
		String requestFile0133 = "/ui/youcalc/js/control/Tile_984eb9d7d44cf421c3dccc41f383a34e.js";
		String requestHeader0133 = "GET " + requestFile0133 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0133, requestHost0133, requestPort0133, requestHeader0133, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0133 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2463
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [133] <- Index 133
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [134] <- WEB ADMIN Index 134 ---
		String requestProt0134 = "https";
		String requestHost0134 = "hcm4preview.sapsf.com";
		int    requestPort0134 = 443;
		String requestFile0134 = "/xi/ajax/remoting/call/plaincall/youcalcTileControllerProxy.getYoucalcDocument.dwr" +
				"?_s.crb=" + C_AjaxsecKey;		// recorded value = sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d
		requestFile0134 = Lib.replaceTextPattern(requestFile0134, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey, 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0134 = Lib.replaceTextPattern(requestFile0134, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'vScrb' on all occurrences

		String requestContent0134 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423287" + "\r\n" + 
				"c0-scriptName=youcalcTileControllerProxy" + "\r\n" + 
				"c0-methodName=getYoucalcDocument" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=number:804" + "\r\n" + 
				"batchId=9";
		requestContent0134 = Lib.replaceTextPattern(requestContent0134, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0134_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0134 = new String(Lib.binaryReplace(requestContent0134.getBytes(), binarySearchPattern0134_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0134 = "POST " + requestFile0134 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500011727d23e-4d82-4ae4-b32c-69ab2730312529820909-1501-babe-face-000000000003ddfdc2d7-ffa2-435b-a121-bb0428fa9b23HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-3\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0134.length() + "\r\n" + 		// Content-Length: 289
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0134, requestHost0134, requestPort0134, requestHeader0134, requestContent0134.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0134 = null;		// support garbage collector to reduce memory
		requestContent0134 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 657
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [134] <- Index 134
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_docKey'
		ContentTokenExtractorItem contentTokenExtractorItem0134_1 = new ContentTokenExtractorItem("documentKey:", "\t\n\r \"(),={}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0134_1);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'C_docKey'
			C_docKey = contentTokenExtractorItem0134_1.getResultToken();
			log("<<< C_docKey = " + C_docKey);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_docKey!= null && C_docKey.trim().length() == 0)
			{
				C_docKey = "";
				log("runtime note: the extraction of a new value for the variable 'C_docKey' ends up with an empty string - a substitute value was set");
				log("<<< C_docKey = " + C_docKey);
			}
		}
		catch (Exception e) { C_docKey = null; log(e); }
		if (C_docKey == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_docKey' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [135] <- WEB ADMIN Index 135 ---
		String requestProt0135 = "https";
		String requestHost0135 = "hcm4preview.sapsf.com";
		int    requestPort0135 = 443;
		String requestFile0135 = "/public/theme-api/config/tctest/3eybd488sn;mod=16bfc1941f1&jsonp=youcalcParseThemeConfig";
		String requestHeader0135 = "GET " + requestFile0135 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0135, requestHost0135, requestPort0135, requestHeader0135, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0135 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1953
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [135] <- Index 135
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [136] <- WEB ADMIN Index 136 ---
		String requestProt0136 = "https";
		String requestHost0136 = "hcm4preview.sapsf.com";
		int    requestPort0136 = 443;
		String requestFile0136 = "/ui/uicore/img/__325472601571f31e1bf00674c368d335.gif";
		String requestHeader0136 = "GET " + requestFile0136 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0136, requestHost0136, requestPort0136, requestHeader0136, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0136 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [136] <- Index 136
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [137] <- WEB ADMIN Index 137 ---
		String requestProt0137 = "https";
		String requestHost0137 = "hcm4preview.sapsf.com";
		int    requestPort0137 = 443;
		String requestFile0137 = "/YoucalcUpdate";
		String requestContent0137 = 
				"event=update" +
				"&documentKey=" + C_docKey +		// recorded value = 8274031385637412274872580
				"&appId=804" +
				"&data=%7B%22event%22%3A%22init%22%2C%22widgets%22%3A%5B1%5D%7D" +
				"&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d";
		byte[] binarySearchPattern0137_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0137 = new String(Lib.binaryReplace(requestContent0137.getBytes(), binarySearchPattern0137_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0137 = Lib.replaceTextPattern(requestContent0137, "8274031385637412274872580", C_docKey, 0);		// search and replace content fragment "8274031385637412274872580" with variable 'C_docKey' on all occurrences
		requestContent0137 = Lib.replaceTextPattern(requestContent0137, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] requestContentBinary0137 = requestContent0137.getBytes("UTF-8");
		String requestHeader0137 = "POST " + requestFile0137 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001bd3f82d1-7ef2-4e42-b623-b3272a0c0a2f29820909-1501-babe-face-000000000003845002a3-e452-4977-b92a-12df2af3d822HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-3\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContentBinary0137.length + "\r\n" + 		// Content-Length: 174
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0137, requestHost0137, requestPort0137, requestHeader0137, requestContentBinary0137, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0137 = null;		// support garbage collector to reduce memory
		requestContent0137 = null;		// support garbage collector to reduce memory
		requestContentBinary0137 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 615
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, "{\"defaults\":{\"date\":{\"");		// Test [137] <- Index 137
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [138] <- WEB ADMIN Index 138 ---
		String requestProt0138 = "https";
		String requestHost0138 = "hcm4preview.sapsf.com";
		int    requestPort0138 = 443;
		String requestFile0138 = "/ui/sfgrp/js/ycserverViz_f6eef04e254187a9613533329a0132dd.js";
		String requestHeader0138 = "GET " + requestFile0138 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0138, requestHost0138, requestPort0138, requestHeader0138, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0138 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 23097
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [138] <- Index 138
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [139] <- WEB ADMIN Index 139 ---
		String requestProt0139 = "https";
		String requestHost0139 = "hcm4preview.sapsf.com";
		int    requestPort0139 = 443;
		String requestFile0139 = "/perfLogServlet" +
				"?callId=8670694290-3" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&TRS=1363" +
				"&TIP=2420" +
				"&TML=2421" +
				"&TSL=4836" +
				"&ST=1574797015914" +
				"&ET=1574797016510" +
				"&MEM=90045" +
				"&NRE=893" +
				"&NWR=59" +
				"&SCPU=20" +
				"&SQLC=47" +
				"&SQLT=53" +
				"&SVT=317" +
				"&UCPU=220" +
				"&CPU=240" +
				"&FRE=2" +
				"&FWR=0" +
				"&jsNum=42" +
				"&cssNum=13" +
				"&renderTime=496" +
				"&RED=1" +
				"&TTB=13" +
				"&RSR=2362" +
				"&DIA=2591" +
				"&DCP=3959";
		String requestContent0139 = 
				"OPTR_INFO=1727d23e-4d82-4ae4-b32c-69ab27303125!1574797015914!1574797016095!0" +
				"&OPTR_INFO=bd3f82d1-7ef2-4e42-b623-b3272a0c0a2f!1574797016102!1574797016410!0";
		String requestHeader0139 = "POST " + requestFile0139 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-3\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0139.length() + "\r\n" + 		// Content-Length: 153
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0139, requestHost0139, requestPort0139, requestHeader0139, requestContent0139.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0139 = null;		// support garbage collector to reduce memory
		requestContent0139 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [139] <- Index 139
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [140] <- WEB ADMIN Index 140 ---
		String requestProt0140 = "https";
		String requestHost0140 = "cdn.cjr.org";
		int    requestPort0140 = 443;
		String requestFile0140 = "/wp-content/uploads/2019/11/vanzuylenwood_enquirers-800x419.jpg";
		String requestHeader0140 = "GET " + requestFile0140 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.cjr.org\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"DNT: 1\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Pragma: no-cache\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0140, requestHost0140, requestPort0140, requestHeader0140, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0140 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/JPEG", header text fragment = [verification disabled], recorded content size = 119867
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/JPEG", null, null);		// Test [140] <- Index 140
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [141] <- WEB ADMIN Index 141 ---
		String requestProt0141 = "https";
		String requestHost0141 = "cdn.cjr.org";
		int    requestPort0141 = 443;
		String requestFile0141 = "/favicon.ico";
		String requestHeader0141 = "GET " + requestFile0141 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: cdn.cjr.org\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"DNT: 1\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Pragma: no-cache\r\n" + 
				"Cache-Control: no-cache\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0141, requestHost0141, requestPort0141, requestHeader0141, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0141 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/X-ICON", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/X-ICON", null, null);		// Test [141] <- Index 141
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2_4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #3: EmployeeProfile
		// # ------------------------



		// --- HTTP REQUEST: Test [143] <- WEB ADMIN Index 143 ---
		String requestProt0143 = "https";
		String requestHost0143 = "hcm4preview.sapsf.com";
		int    requestPort0143 = 443;
		String requestFile0143 = "/xi/ui/peopleprofile/pages/index.xhtml" +
				"?bplte_company=tctest" +
				"&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d";
		requestFile0143 = Lib.replaceTextPattern(requestFile0143, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", java.net.URLEncoder.encode(C_AjaxsecKey), 0);		// search and replace request file fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0143 = Lib.replaceTextPattern(requestFile0143, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace request file fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		String requestHeader0143 = "GET " + requestFile0143 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0143, requestHost0143, requestPort0143, requestHeader0143, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0143 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 106154
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Event Reason For Position Assignment Change");		// Test [143] <- Index 143
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [144] <- WEB ADMIN Index 144 ---
		String requestProt0144 = "https";
		String requestHost0144 = "hcm4preview.sapsf.com";
		int    requestPort0144 = 443;
		String requestFile0144 = "/perfLogServlet" +
				"?callId=8670694290-4" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&TRS=1363" +
				"&TIP=2420" +
				"&TML=2421" +
				"&TSL=4836" +
				"&ST=1574797070264" +
				"&ET=1574797070372" +
				"&MEM=0" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=0" +
				"&UCPU=0" +
				"&CPU=0" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=42" +
				"&cssNum=13" +
				"&renderTime=5" +
				"&RED=1" +
				"&TTB=13" +
				"&RSR=2362" +
				"&DIA=2591" +
				"&DCP=3959";
		String requestContent0144 = 
				"OPTR_INFO=2568b264-4482-4591-bd21-949b2d2f4e22!1574797070264!1574797070270!0";
		String requestHeader0144 = "POST " + requestFile0144 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566-4\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0144.length() + "\r\n" + 		// Content-Length: 76
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/login?company=tctest&loginMethod=SSO&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0144, requestHost0144, requestPort0144, requestHeader0144, requestContent0144.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143649-204566", C_EID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0144 = null;		// support garbage collector to reduce memory
		requestContent0144 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [144] <- Index 144
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [145] <- WEB ADMIN Index 145 ---
		String requestProt0145 = "https";
		String requestHost0145 = "hcm4preview.sapsf.com";
		int    requestPort0145 = 443;
		String requestFile0145 = "/ui/sfgrp/css/peopleprofileGroupViewCSS_04950c89284997e98dbb2e2306852ca3.css";
		String requestHeader0145 = "GET " + requestFile0145 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0145, requestHost0145, requestPort0145, requestHeader0145, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0145 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 26338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [145] <- Index 145
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [146] <- WEB ADMIN Index 146 ---
		String requestProt0146 = "https";
		String requestHost0146 = "hcm4preview.sapsf.com";
		int    requestPort0146 = 443;
		String requestFile0146 = "/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/.dcss;mod=1ee5b9f";
		requestFile0146 = Lib.replaceTextPattern(requestFile0146, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_Img0' on all occurrences
		requestFile0146 = Lib.replaceTextPattern(requestFile0146, "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!" with variable 'C_belieze0' on all occurrences
		requestFile0146 = Lib.replaceTextPattern(requestFile0146, "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0146 = Lib.replaceTextPattern(requestFile0146, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod4' on all occurrences
		requestFile0146 = Lib.replaceTextPattern(requestFile0146, "1ee5b9f", C_Mod3, 0);		// search and replace request file fragment "1ee5b9f" with variable 'C_Mod3' on all occurrences

		String requestHeader0146 = "GET " + requestFile0146 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0146, requestHost0146, requestPort0146, requestHeader0146, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0146 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 8950
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [146] <- Index 146
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [147] <- WEB ADMIN Index 147 ---
		String requestProt0147 = "https";
		String requestHost0147 = "hcm4preview.sapsf.com";
		int    requestPort0147 = 443;
		String requestFile0147 = "/ui/ect/css/absence/pp3CalOverride_07bc93d34e4100a8183ba47d6e7c3003.css";
		String requestHeader0147 = "GET " + requestFile0147 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0147, requestHost0147, requestPort0147, requestHeader0147, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0147 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 973
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [147] <- Index 147
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [148] <- WEB ADMIN Index 148 ---
		String requestProt0148 = "https";
		String requestHost0148 = "hcm4preview.sapsf.com";
		int    requestPort0148 = 443;
		String requestFile0148 = "/ui/extlib/yui_2.9_sf.3/js/yahoo-dom-event/yahoo-dom-event.js";
		String requestHeader0148 = "GET " + requestFile0148 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0148, requestHost0148, requestPort0148, requestHeader0148, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0148 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 13255
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [148] <- Index 148
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [149] <- WEB ADMIN Index 149 ---
		String requestProt0149 = "https";
		String requestHost0149 = "hcm4preview.sapsf.com";
		int    requestPort0149 = 443;
		String requestFile0149 = "/ui/extlib/yui_2.9_sf.3/js/animation/animation.js";
		String requestHeader0149 = "GET " + requestFile0149 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0149, requestHost0149, requestPort0149, requestHeader0149, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0149 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4887
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [149] <- Index 149
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [150] <- WEB ADMIN Index 150 ---
		String requestProt0150 = "https";
		String requestHost0150 = "hcm4preview.sapsf.com";
		int    requestPort0150 = 443;
		String requestFile0150 = "/ui/extlib/yui_2.9_sf.3/js/connection/connection.js";
		String requestHeader0150 = "GET " + requestFile0150 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0150, requestHost0150, requestPort0150, requestHeader0150, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0150 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4707
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [150] <- Index 150
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [151] <- WEB ADMIN Index 151 ---
		String requestProt0151 = "https";
		String requestHost0151 = "hcm4preview.sapsf.com";
		int    requestPort0151 = 443;
		String requestFile0151 = "/ui/extlib/yui_2.9_sf.3/js/autocomplete/autocomplete.js";
		String requestHeader0151 = "GET " + requestFile0151 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0151, requestHost0151, requestPort0151, requestHeader0151, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0151 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15497
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [151] <- Index 151
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [152] <- WEB ADMIN Index 152 ---
		String requestProt0152 = "https";
		String requestHost0152 = "hcm4preview.sapsf.com";
		int    requestPort0152 = 443;
		String requestFile0152 = "/ui/ajaxservice/js/engine_195ddf977bd9394da5411c65e8f86a34.js";
		String requestHeader0152 = "GET " + requestFile0152 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0152, requestHost0152, requestPort0152, requestHeader0152, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0152 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6530
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [152] <- Index 152
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [153] <- WEB ADMIN Index 153 ---
		String requestProt0153 = "https";
		String requestHost0153 = "hcm4preview.sapsf.com";
		int    requestPort0153 = 443;
		String requestFile0153 = "/ui/ajaxservice/js/AjaxService_041708a5a79a334a10ebe0f5b37087c9.js";
		String requestHeader0153 = "GET " + requestFile0153 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0153, requestHost0153, requestPort0153, requestHeader0153, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0153 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2971
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [153] <- Index 153
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [154] <- WEB ADMIN Index 154 ---
		String requestProt0154 = "https";
		String requestHost0154 = "hcm4preview.sapsf.com";
		int    requestPort0154 = 443;
		String requestFile0154 = "/ui/sapui5/lite_1.65.10/pp3-modules.js";
		String requestHeader0154 = "GET " + requestFile0154 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0154, requestHost0154, requestPort0154, requestHeader0154, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0154 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 150542
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [154] <- Index 154
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [155] <- WEB ADMIN Index 155 ---
		String requestProt0155 = "https";
		String requestHost0155 = "hcm4preview.sapsf.com";
		int    requestPort0155 = 443;
		String requestFile0155 = "/ui/admin/js/tutorial/admTutorialVideoLinks_558b98a6faadf9db0a70314d319a755a.js";
		String requestHeader0155 = "GET " + requestFile0155 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0155, requestHost0155, requestPort0155, requestHeader0155, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0155 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 703
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [155] <- Index 155
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [156] <- WEB ADMIN Index 156 ---
		String requestProt0156 = "https";
		String requestHost0156 = "hcm4preview.sapsf.com";
		int    requestPort0156 = 443;
		String requestFile0156 = "/ui/sfgrp/js/peopleprofileGlobalJS_07acf213840c668c344665a393c62ce1.js";
		String requestHeader0156 = "GET " + requestFile0156 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0156, requestHost0156, requestPort0156, requestHeader0156, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0156 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3156
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [156] <- Index 156
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [157] <- WEB ADMIN Index 157 ---
		String requestProt0157 = "https";
		String requestHost0157 = "hcm4preview.sapsf.com";
		int    requestPort0157 = 443;
		String requestFile0157 = "/ui/juic/js/components/sfPersonAutoCompleteWrapper_405235381825d984c1b0b36a8650e81c.js";
		String requestHeader0157 = "GET " + requestFile0157 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0157, requestHost0157, requestPort0157, requestHeader0157, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0157 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2402
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [157] <- Index 157
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [158] <- WEB ADMIN Index 158 ---
		String requestProt0158 = "https";
		String requestHost0158 = "hcm4preview.sapsf.com";
		int    requestPort0158 = 443;
		String requestFile0158 = "/ui/ect/js/common/ectSearchAdoptionUtils_13ffc762bec59b8780053740e1254a5f.js";
		String requestHeader0158 = "GET " + requestFile0158 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0158, requestHost0158, requestPort0158, requestHeader0158, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0158 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 984
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [158] <- Index 158
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [159] <- WEB ADMIN Index 159 ---
		String requestProt0159 = "https";
		String requestHost0159 = "hcm4preview.sapsf.com";
		int    requestPort0159 = 443;
		String requestFile0159 = "/ui/peopleprofile/resources_DF8CE8E00BEBA0129E7ECA4E6A1197DE/sap/extent/uilib/library-preload.js";
		String requestHeader0159 = "GET " + requestFile0159 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500017b206248-28b2-423c-b729-f97e264da02529820909-1501-babe-face-000000000003e093f2cb-13e2-4bcc-bc20-df4b21dd2221HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0159, requestHost0159, requestPort0159, requestHeader0159, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0159 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 167115
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [159] <- Index 159
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [160] <- WEB ADMIN Index 160 ---
		String requestProt0160 = "https";
		String requestHost0160 = "hcm4preview.sapsf.com";
		int    requestPort0160 = 443;
		String requestFile0160 = "/ui/sapui5/main_1.65.10/sap/ui/comp/library-preload.js";
		String requestHeader0160 = "GET " + requestFile0160 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001707fe2a8-27a2-45d4-8025-cf2529b9922929820909-1501-babe-face-000000000003dba5b2c8-5132-4207-832d-5f28263de82dHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0160, requestHost0160, requestPort0160, requestHeader0160, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0160 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 266896
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [160] <- Index 160
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [161] <- WEB ADMIN Index 161 ---
		String requestProt0161 = "https";
		String requestHost0161 = "hcm4preview.sapsf.com";
		int    requestPort0161 = 443;
		String requestFile0161 = "/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css";
		requestFile0161 = Lib.replaceTextPattern(requestFile0161, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0161 = Lib.replaceTextPattern(requestFile0161, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_Img0' on all occurrences
		requestFile0161 = Lib.replaceTextPattern(requestFile0161, "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!" with variable 'C_belieze0' on all occurrences
		requestFile0161 = Lib.replaceTextPattern(requestFile0161, "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0161 = Lib.replaceTextPattern(requestFile0161, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod4' on all occurrences

		String requestHeader0161 = "GET " + requestFile0161 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0161, requestHost0161, requestPort0161, requestHeader0161, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0161 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 11377
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [161] <- Index 161
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [162] <- WEB ADMIN Index 162 ---
		String requestProt0162 = "https";
		String requestHost0162 = "hcm4preview.sapsf.com";
		int    requestPort0162 = 443;
		String requestFile0162 = "/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library.css";
		requestFile0162 = Lib.replaceTextPattern(requestFile0162, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0162 = Lib.replaceTextPattern(requestFile0162, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_Img0' on all occurrences
		requestFile0162 = Lib.replaceTextPattern(requestFile0162, "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!" with variable 'C_belieze0' on all occurrences
		requestFile0162 = Lib.replaceTextPattern(requestFile0162, "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0162 = Lib.replaceTextPattern(requestFile0162, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod4' on all occurrences

		String requestHeader0162 = "GET " + requestFile0162 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0162, requestHost0162, requestPort0162, requestHeader0162, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0162 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 83340
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [162] <- Index 162
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 2 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [163] <- WEB ADMIN Index 163 ---
		String requestProt0163 = "https";
		String requestHost0163 = "hcm4preview.sapsf.com";
		int    requestPort0163 = 443;
		String requestFile0163 = "/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/uxap/themes/sap_belize/library.css";
		requestFile0163 = Lib.replaceTextPattern(requestFile0163, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0163 = Lib.replaceTextPattern(requestFile0163, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_Img0' on all occurrences
		requestFile0163 = Lib.replaceTextPattern(requestFile0163, "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!" with variable 'C_belieze0' on all occurrences
		requestFile0163 = Lib.replaceTextPattern(requestFile0163, "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0163 = Lib.replaceTextPattern(requestFile0163, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod4' on all occurrences

		String requestHeader0163 = "GET " + requestFile0163 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0163, requestHost0163, requestPort0163, requestHeader0163, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0163 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 15955
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [163] <- Index 163
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [164] <- WEB ADMIN Index 164 ---
		String requestProt0164 = "https";
		String requestHost0164 = "hcm4preview.sapsf.com";
		int    requestPort0164 = 443;
		String requestFile0164 = "/ui/sapui5/main_1.65.10/sap/ui/comp/themes/sap_belize/library.css";
		String requestHeader0164 = "GET " + requestFile0164 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0164, requestHost0164, requestPort0164, requestHeader0164, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0164 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 5259
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [164] <- Index 164
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [165] <- WEB ADMIN Index 165 ---
		String requestProt0165 = "https";
		String requestHost0165 = "hcm4preview.sapsf.com";
		int    requestPort0165 = 443;
		String requestFile0165 = "/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		requestFile0165 = Lib.replaceTextPattern(requestFile0165, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0165 = Lib.replaceTextPattern(requestFile0165, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_Img0' on all occurrences
		requestFile0165 = Lib.replaceTextPattern(requestFile0165, "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!" with variable 'C_belieze0' on all occurrences
		requestFile0165 = Lib.replaceTextPattern(requestFile0165, "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0165 = Lib.replaceTextPattern(requestFile0165, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod4' on all occurrences

		String requestHeader0165 = "GET " + requestFile0165 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0165, requestHost0165, requestPort0165, requestHeader0165, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("C7B52757B839BC0F193BCD71F2425A88", C_Merge0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0165 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [165] <- Index 165
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [166] <- WEB ADMIN Index 166 ---
		String requestProt0166 = "https";
		String requestHost0166 = "hcm4preview.sapsf.com";
		int    requestPort0166 = 443;
		String requestFile0166 = "/ui/peopleprofile/resources_A10DC8405A6CF6A39C7227B626193228/sap/sf/peopleprofile/Component-preload.js";
		requestFile0166 = Lib.replaceTextPattern(requestFile0166, "A10DC8405A6CF6A39C7227B626193228", C_Resource1, 0);		// search and replace request file fragment "A10DC8405A6CF6A39C7227B626193228" with variable 'C_Resource1' on all occurrences

		String requestHeader0166 = "GET " + requestFile0166 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001a89a2231-aa12-4ac6-b72c-19592155712229820909-1501-babe-face-0000000000031eaac20e-a492-4a63-a920-bc242fe4d32cHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0166, requestHost0166, requestPort0166, requestHeader0166, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0166 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 248699
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [166] <- Index 166
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [167] <- WEB ADMIN Index 167 ---
		String requestProt0167 = "https";
		String requestHost0167 = "hcm4preview.sapsf.com";
		int    requestPort0167 = 443;
		String requestFile0167 = "/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/peopleprofile/resources_A10DC8405A6CF6A39C7227B626193228/theming_aux!/ui/peopleprofile/resources_A10DC8405A6CF6A39C7227B626193228/sap/sf/peopleprofile/themes/sap_belize/library.css";
		requestFile0167 = Lib.replaceTextPattern(requestFile0167, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0167 = Lib.replaceTextPattern(requestFile0167, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_Img0' on all occurrences
		requestFile0167 = Lib.replaceTextPattern(requestFile0167, "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!" with variable 'C_belieze0' on all occurrences
		requestFile0167 = Lib.replaceTextPattern(requestFile0167, "A10DC8405A6CF6A39C7227B626193228", C_Resource1, 0);		// search and replace request file fragment "A10DC8405A6CF6A39C7227B626193228" with variable 'C_Resource1' on all occurrences
		requestFile0167 = Lib.replaceTextPattern(requestFile0167, "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0167 = Lib.replaceTextPattern(requestFile0167, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod4' on all occurrences

		String requestHeader0167 = "GET " + requestFile0167 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0167, requestHost0167, requestPort0167, requestHeader0167, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0167 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 29488
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [167] <- Index 167
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [168] <- WEB ADMIN Index 168 ---
		String requestProt0168 = "https";
		String requestHost0168 = "hcm4preview.sapsf.com";
		int    requestPort0168 = 443;
		String requestFile0168 = "/ui/sapui5/main_1.65.10/jquery.sap.dom.js";
		String requestHeader0168 = "GET " + requestFile0168 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001087b4207-40f2-48dc-b525-851f2ec6c22b29820909-1501-babe-face-0000000000032f2972b2-dae2-4266-ad27-09a924aea32aHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0168, requestHost0168, requestPort0168, requestHeader0168, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0168 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1006
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [168] <- Index 168
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [169] <- WEB ADMIN Index 169 ---
		String requestProt0169 = "https";
		String requestHost0169 = "hcm4preview.sapsf.com";
		int    requestPort0169 = 443;
		String requestFile0169 = "/messagebundle/tctest/vmod_3ae5a952-651502e6/ui/peopleprofile/resources/sap/sf/peopleprofile/i18n/messagebundle_en_US.properties";
		String requestHeader0169 = "GET " + requestFile0169 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500013e8a32bc-30a2-491a-bf22-43452881cd2d29820909-1501-babe-face-00000000000353399283-b1c2-4f1a-9f27-8a8b2189be21HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0169, requestHost0169, requestPort0169, requestHeader0169, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0169 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 17437
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [169] <- Index 169
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [170] <- WEB ADMIN Index 170 ---
		String requestProt0170 = "https";
		String requestHost0170 = "hcm4preview.sapsf.com";
		int    requestPort0170 = 443;
		String requestFile0170 = "/ui/sapui5/main_1.65.10/jquery.sap.history.js";
		String requestHeader0170 = "GET " + requestFile0170 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500017151c2d6-1892-46d0-a723-c7032942482229820909-1501-babe-face-0000000000035af3c2e5-b3c2-4a6c-a728-71f82303172eHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0170, requestHost0170, requestPort0170, requestHeader0170, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0170 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1894
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [170] <- Index 170
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [171] <- WEB ADMIN Index 171 ---
		String requestProt0171 = "https";
		String requestHost0171 = "hcm4preview.sapsf.com";
		int    requestPort0171 = 443;
		String requestFile0171 = "/ui/sapui5/main_1.65.10/sap/ui/layout/form/ColumnLayout.js";
		String requestHeader0171 = "GET " + requestFile0171 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001b8ee8266-0e02-499e-8920-eb17238a632929820909-1501-babe-face-000000000003b2a182c4-5d42-4356-9c28-15712f117d20HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0171, requestHost0171, requestPort0171, requestHeader0171, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0171 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2423
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [171] <- Index 171
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [172] <- WEB ADMIN Index 172 ---
		String requestProt0172 = "https";
		String requestHost0172 = "hcm4preview.sapsf.com";
		int    requestPort0172 = 443;
		String requestFile0172 = "/ui/sapui5/main_1.65.10/sap/ui/layout/form/ColumnLayoutRenderer.js";
		String requestHeader0172 = "GET " + requestFile0172 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001b86dd267-6f42-4623-832f-7494232dc42329820909-1501-babe-face-0000000000033866a2af-6842-4a2c-ad23-09c02f63f52dHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0172, requestHost0172, requestPort0172, requestHeader0172, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0172 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1170
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [172] <- Index 172
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [173] <- WEB ADMIN Index 173 ---
		String requestProt0173 = "https";
		String requestHost0173 = "hcm4preview.sapsf.com";
		int    requestPort0173 = 443;
		String requestFile0173 = "/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/unified/themes/sap_belize/library.css";
		requestFile0173 = Lib.replaceTextPattern(requestFile0173, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0173 = Lib.replaceTextPattern(requestFile0173, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_Img0' on all occurrences
		requestFile0173 = Lib.replaceTextPattern(requestFile0173, "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!" with variable 'C_belieze0' on all occurrences
		requestFile0173 = Lib.replaceTextPattern(requestFile0173, "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0173 = Lib.replaceTextPattern(requestFile0173, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod4' on all occurrences

		String requestHeader0173 = "GET " + requestFile0173 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0173, requestHost0173, requestPort0173, requestHeader0173, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0173 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 23182
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [173] <- Index 173
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [174] <- WEB ADMIN Index 174 ---
		String requestProt0174 = "https";
		String requestHost0174 = "hcm4preview.sapsf.com";
		int    requestPort0174 = 443;
		String requestFile0174 = "/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library-parameters.json";
		requestFile0174 = Lib.replaceTextPattern(requestFile0174, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0174 = Lib.replaceTextPattern(requestFile0174, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_Img0' on all occurrences
		requestFile0174 = Lib.replaceTextPattern(requestFile0174, "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!" with variable 'C_belieze0' on all occurrences
		requestFile0174 = Lib.replaceTextPattern(requestFile0174, "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0174 = Lib.replaceTextPattern(requestFile0174, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod4' on all occurrences

		String requestHeader0174 = "GET " + requestFile0174 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000194b852c2-5632-46f0-a022-7b7b2d431f2429820909-1501-babe-face-000000000003af6db2c7-fc52-4383-8f21-6db12e28fa2cHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0174, requestHost0174, requestPort0174, requestHeader0174, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0174 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 54031
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{\"");		// Test [174] <- Index 174
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [175] <- WEB ADMIN Index 175 ---
		String requestProt0175 = "https";
		String requestHost0175 = "hcm4preview.sapsf.com";
		int    requestPort0175 = 443;
		String requestFile0175 = "/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library-parameters.json";
		requestFile0175 = Lib.replaceTextPattern(requestFile0175, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0175 = Lib.replaceTextPattern(requestFile0175, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_Img0' on all occurrences
		requestFile0175 = Lib.replaceTextPattern(requestFile0175, "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!" with variable 'C_belieze0' on all occurrences
		requestFile0175 = Lib.replaceTextPattern(requestFile0175, "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0175 = Lib.replaceTextPattern(requestFile0175, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod4' on all occurrences

		String requestHeader0175 = "GET " + requestFile0175 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001ef3a4235-cc32-4e63-bb27-92352040c42729820909-1501-babe-face-000000000003a977b2e4-5612-40af-8423-7228268d2d22HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0175, requestHost0175, requestPort0175, requestHeader0175, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0175 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 16936
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{\"");		// Test [175] <- Index 175
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [176] <- WEB ADMIN Index 176 ---
		String requestProt0176 = "https";
		String requestHost0176 = "hcm4preview.sapsf.com";
		int    requestPort0176 = 443;
		String requestFile0176 = "/ui/sapui5/main_1.65.10/sap/ui/layout/themes/sap_belize/library-parameters.json";
		String requestHeader0176 = "GET " + requestFile0176 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001e12872fa-da02-480f-942a-59ad2dee182229820909-1501-babe-face-000000000003d16ef2e3-e2f2-4560-9a26-ed4c2676c628HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0176, requestHost0176, requestPort0176, requestHeader0176, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0176 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1116
		// content test algorithm: check size +/- 5%, defined content size = 1116
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, 1116, 5);		// Test [176] <- Index 176
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [177] <- WEB ADMIN Index 177 ---
		String requestProt0177 = "https";
		String requestHost0177 = "hcm4preview.sapsf.com";
		int    requestPort0177 = 443;
		String requestFile0177 = "/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/uxap/themes/sap_belize/library-parameters.json";
		requestFile0177 = Lib.replaceTextPattern(requestFile0177, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0177 = Lib.replaceTextPattern(requestFile0177, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_Img0' on all occurrences
		requestFile0177 = Lib.replaceTextPattern(requestFile0177, "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!" with variable 'C_belieze0' on all occurrences
		requestFile0177 = Lib.replaceTextPattern(requestFile0177, "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0177 = Lib.replaceTextPattern(requestFile0177, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod4' on all occurrences

		String requestHeader0177 = "GET " + requestFile0177 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001bbbf1256-2132-428f-b621-3b7d2d40502229820909-1501-babe-face-000000000003baf9a287-70b2-49a2-a82e-455423f0df2cHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0177, requestHost0177, requestPort0177, requestHeader0177, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0177 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 380
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [177] <- Index 177
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [178] <- WEB ADMIN Index 178 ---
		String requestProt0178 = "https";
		String requestHost0178 = "hcm4preview.sapsf.com";
		int    requestPort0178 = 443;
		String requestFile0178 = "/ui/surj/resources_4E82BE2B96D8FA64F26070CF70B634C4/sap/sf/surj/shell/themes/sap_belize/library-parameters.json";
		String requestHeader0178 = "GET " + requestFile0178 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000123c4429d-ef42-444d-b725-647b2e892a2529820909-1501-babe-face-000000000003777ed268-ebc2-4a21-8f2c-d1e827543e2bHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0178, requestHost0178, requestPort0178, requestHeader0178, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0178 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 57
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{");		// Test [178] <- Index 178
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [179] <- WEB ADMIN Index 179 ---
		String requestProt0179 = "https";
		String requestHost0179 = "hcm4preview.sapsf.com";
		int    requestPort0179 = 443;
		String requestFile0179 = "/ui/sapui5/main_1.65.10/sap/ui/comp/themes/sap_belize/library-parameters.json";
		String requestHeader0179 = "GET " + requestFile0179 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001352132b1-83a2-45c3-aa2c-da92246a162e29820909-1501-babe-face-000000000003940762f5-4ac2-4543-bd23-cbd220d5fb28HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0179, requestHost0179, requestPort0179, requestHeader0179, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0179 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 57
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{");		// Test [179] <- Index 179
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [180] <- WEB ADMIN Index 180 ---
		String requestProt0180 = "https";
		String requestHost0180 = "hcm4preview.sapsf.com";
		int    requestPort0180 = 443;
		String requestFile0180 = "/ui/sapui5/lite_1.65.10/themes/sap_belize/library-parameters.json";
		String requestHeader0180 = "GET " + requestFile0180 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500013a8b02b7-c602-430b-a025-7aa02ca3c82429820909-1501-babe-face-00000000000310635225-dbb2-4e12-852e-39c8299eb629HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0180, requestHost0180, requestPort0180, requestHeader0180, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0180 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 268
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{");		// Test [180] <- Index 180
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [181] <- WEB ADMIN Index 181 ---
		String requestProt0181 = "https";
		String requestHost0181 = "hcm4preview.sapsf.com";
		int    requestPort0181 = 443;
		String requestFile0181 = "/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/peopleprofile/resources_A10DC8405A6CF6A39C7227B626193228/theming_aux!/ui/peopleprofile/resources_A10DC8405A6CF6A39C7227B626193228/sap/sf/peopleprofile/themes/sap_belize/library-parameters.json";
		requestFile0181 = Lib.replaceTextPattern(requestFile0181, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0181 = Lib.replaceTextPattern(requestFile0181, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_Img0' on all occurrences
		requestFile0181 = Lib.replaceTextPattern(requestFile0181, "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!" with variable 'C_belieze0' on all occurrences
		requestFile0181 = Lib.replaceTextPattern(requestFile0181, "A10DC8405A6CF6A39C7227B626193228", C_Resource1, 0);		// search and replace request file fragment "A10DC8405A6CF6A39C7227B626193228" with variable 'C_Resource1' on all occurrences
		requestFile0181 = Lib.replaceTextPattern(requestFile0181, "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0181 = Lib.replaceTextPattern(requestFile0181, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod4' on all occurrences

		String requestHeader0181 = "GET " + requestFile0181 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500014266d2d2-f5e2-421f-852c-3e4128721b2229820909-1501-babe-face-0000000000032588e293-d6b2-489c-8a27-5e31250a902fHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0181, requestHost0181, requestPort0181, requestHeader0181, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0181 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 27402
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{\"");		// Test [181] <- Index 181
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [182] <- WEB ADMIN Index 182 ---
		String requestProt0182 = "https";
		String requestHost0182 = "hcm4preview.sapsf.com";
		int    requestPort0182 = 443;
		String requestFile0182 = "/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/unified/themes/sap_belize/library-parameters.json";
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_Img0' on all occurrences
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!" with variable 'C_belieze0' on all occurrences
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod4' on all occurrences

		String requestHeader0182 = "GET " + requestFile0182 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000182e7a24e-c282-4dd8-a72d-bc6e2a4ec32529820909-1501-babe-face-0000000000037a8962bd-f522-42ca-972e-531b2fa20827HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0182, requestHost0182, requestPort0182, requestHeader0182, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0182 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 13576
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [182] <- Index 182
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 3 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [183] <- WEB ADMIN Index 183 ---
		String requestProt0183 = "https";
		String requestHost0183 = "hcm4preview.sapsf.com";
		int    requestPort0183 = 443;
		String requestFile0183 = "/ui/surj/resources_F71AEAF23B9A2E477A57080174493027/sap/sf/surj/commons/PeoplePicker.js";
		String requestHeader0183 = "GET " + requestFile0183 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001e0d7c27b-8612-40b1-b020-61c52b76132c29820909-1501-babe-face-000000000003988bb25c-8322-4386-9c27-e81e292b122eHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0183, requestHost0183, requestPort0183, requestHeader0183, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0183 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3768
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [183] <- Index 183
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [184] <- WEB ADMIN Index 184 ---
		String requestProt0184 = "https";
		String requestHost0184 = "hcm4preview.sapsf.com";
		int    requestPort0184 = 443;
		String requestFile0184 = "/messagebundle/tctest/vmod_90ec61d9-651502e6/ui/surj/resources/sap/sf/surj/commons/i18n/messagebundle_en_US.properties";
		String requestHeader0184 = "GET " + requestFile0184 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001b16322ac-2022-4ce5-802a-081625bd7e2229820909-1501-babe-face-00000000000330c8424f-1542-417b-8923-34422bed9f22HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0184, requestHost0184, requestPort0184, requestHeader0184, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0184 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 634
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [184] <- Index 184
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [185] <- WEB ADMIN Index 185 ---
		String requestProt0185 = "https";
		String requestHost0185 = "hcm4preview.sapsf.com";
		int    requestPort0185 = 443;
		String requestFile0185 = "/ui/sapui5/main_1.65.10/sap/uxap/messagebundle_en.properties";
		String requestHeader0185 = "GET " + requestFile0185 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500019d0a82b5-0dc2-413a-932e-8afd27661a2029820909-1501-babe-face-0000000000030f58d2a8-2be2-4c6b-a426-4e9428fa0e2aHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0185, requestHost0185, requestPort0185, requestHeader0185, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0185 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 1277
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [185] <- Index 185
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [186] <- WEB ADMIN Index 186 ---
		String requestProt0186 = "https";
		String requestHost0186 = "hcm4preview.sapsf.com";
		int    requestPort0186 = 443;
		String requestFile0186 = "/ui/peopleprofile/resources_A10DC8405A6CF6A39C7227B626193228/sap/sf/peopleprofile/configurations/BlockViewMappings.json";
		requestFile0186 = Lib.replaceTextPattern(requestFile0186, "A10DC8405A6CF6A39C7227B626193228", C_Resource1, 0);		// search and replace request file fragment "A10DC8405A6CF6A39C7227B626193228" with variable 'C_Resource1' on all occurrences

		String requestHeader0186 = "GET " + requestFile0186 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000146a832a3-5e82-4b54-a926-604a25d2a52f29820909-1501-babe-face-000000000003143c22cf-b012-4bc6-b62f-6ba123924320HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0186, requestHost0186, requestPort0186, requestHeader0186, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0186 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 3606
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"BENEFIT_PROCESSED_CLAIMS_");		// Test [186] <- Index 186
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [187] <- WEB ADMIN Index 187 ---
		String requestProt0187 = "https";
		String requestHost0187 = "hcm4preview.sapsf.com";
		int    requestPort0187 = 443;
		String requestFile0187 = "/ui/peopleprofile/resources_A10DC8405A6CF6A39C7227B626193228/sap/sf/peopleprofile/configurations/LayoutConfig.json";
		requestFile0187 = Lib.replaceTextPattern(requestFile0187, "A10DC8405A6CF6A39C7227B626193228", C_Resource1, 0);		// search and replace request file fragment "A10DC8405A6CF6A39C7227B626193228" with variable 'C_Resource1' on all occurrences

		String requestHeader0187 = "GET " + requestFile0187 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001e07bd285-5442-43ec-9220-cea92dd3f62329820909-1501-babe-face-00000000000314c76263-f212-455f-9c21-07aa2eb89f26HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0187, requestHost0187, requestPort0187, requestHeader0187, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0187 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1681
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"BENEFIT_PROGRAM_ACTIVE_ENROLLMENTS\": {");		// Test [187] <- Index 187
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [188] <- WEB ADMIN Index 188 ---
		String requestProt0188 = "https";
		String requestHost0188 = "hcm4preview.sapsf.com";
		int    requestPort0188 = 443;
		String requestFile0188 = "/xi/ajax/remoting/call/plaincall/employeeInfoControllerProxy.decodeUserId.dwr";
		String requestContent0188 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=employeeInfoControllerProxy" + "\r\n" + 
				"c0-methodName=decodeUserId" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"batchId=0";
		requestContent0188 = Lib.replaceTextPattern(requestContent0188, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0188 = Lib.replaceTextPattern(requestContent0188, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0188_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0188 = new String(Lib.binaryReplace(requestContent0188.getBytes(), binarySearchPattern0188_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0188 = "POST " + requestFile0188 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500017576d2ef-0752-42ae-aa25-86002e3b9c2229820909-1501-babe-face-000000000003d0128282-3d62-495b-8427-278826a6cd20HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0188.length() + "\r\n" + 		// Content-Length: 309
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0188, requestHost0188, requestPort0188, requestHeader0188, requestContent0188.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0188 = null;		// support garbage collector to reduce memory
		requestContent0188 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 123
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [188] <- Index 188
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [189] <- WEB ADMIN Index 189 ---
		String requestProt0189 = "https";
		String requestHost0189 = "hcm4preview.sapsf.com";
		int    requestPort0189 = 443;
		String requestFile0189 = "/ui/surj/resources_F71AEAF23B9A2E477A57080174493027/sap/sf/surj/commons/PeoplePickerRenderer.js";
		String requestHeader0189 = "GET " + requestFile0189 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001ab10d26e-1582-49d3-952d-d6302a63452229820909-1501-babe-face-000000000003db3252eb-0942-4a94-b623-25722ed6ca2bHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0189, requestHost0189, requestPort0189, requestHeader0189, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0189 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 730
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [189] <- Index 189
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [190] <- WEB ADMIN Index 190 ---
		String requestProt0190 = "https";
		String requestHost0190 = "hcm4preview.sapsf.com";
		int    requestPort0190 = 443;
		String requestFile0190 = "/ui/surj/resources_4E82BE2B96D8FA64F26070CF70B634C4/sap/sf/surj/shell/img/userphoto/UserPhotoPlaceholder_180x240.png";
		String requestHeader0190 = "GET " + requestFile0190 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0190, requestHost0190, requestPort0190, requestHeader0190, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0190 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 2670
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [190] <- Index 190
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [191] <- WEB ADMIN Index 191 ---
		String requestProt0191 = "https";
		String requestHost0191 = "hcm4preview.sapsf.com";
		int    requestPort0191 = 443;
		String requestFile0191 = "/ui/peopleprofile/resources_DF8CE8E00BEBA0129E7ECA4E6A1197DE/sap/extent/uilib/resources/speaker.svg";
		String requestHeader0191 = "GET " + requestFile0191 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0191, requestHost0191, requestPort0191, requestHeader0191, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0191 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/SVG+XML", header text fragment = [verification disabled], recorded content size = 658
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/SVG+XML", null, null);		// Test [191] <- Index 191
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [192] <- WEB ADMIN Index 192 ---
		String requestProt0192 = "https";
		String requestHost0192 = "hcm4preview.sapsf.com";
		int    requestPort0192 = 443;
		String requestFile0192 = "/perfLogServlet" +
				"?callId=1855092175-X" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&ST=1574797070260" +
				"&ET=1574797074285" +
				"&TTB=30" +
				"&RSR=888" +
				"&DIA=1915" +
				"&DCP=4023";
		String requestHeader0192 = "GET " + requestFile0192 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain; charset=UTF-8\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-X\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0192, requestHost0192, requestPort0192, requestHeader0192, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0192 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [192] <- Index 192
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [193] <- WEB ADMIN Index 193 ---
		String requestProt0193 = "https";
		String requestHost0193 = "hcm4preview.sapsf.com";
		int    requestPort0193 = 443;
		String requestFile0193 = "/xi/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.getHeader.dwr";
		String requestContent0193 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=employeeProfilePageConfigControllerProxy" + "\r\n" + 
				"c0-methodName=getHeader" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"batchId=1";
		requestContent0193 = Lib.replaceTextPattern(requestContent0193, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0193 = Lib.replaceTextPattern(requestContent0193, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0193_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0193 = new String(Lib.binaryReplace(requestContent0193.getBytes(), binarySearchPattern0193_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0193 = "POST " + requestFile0193 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500016d7752d2-f612-44ca-bd2f-d03d2ba86d2a29820909-1501-babe-face-000000000003a7458288-59f2-446a-bb24-8f152f79342cHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0193.length() + "\r\n" + 		// Content-Length: 319
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0193, requestHost0193, requestPort0193, requestHeader0193, requestContent0193.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0193 = null;		// support garbage collector to reduce memory
		requestContent0193 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 806
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [193] <- Index 193
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [194] <- WEB ADMIN Index 194 ---
		String requestProt0194 = "https";
		String requestHost0194 = "hcm4preview.sapsf.com";
		int    requestPort0194 = 443;
		String requestFile0194 = "/xi/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.checkUserStatus.dwr";
		String requestContent0194 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=employeeProfilePageConfigControllerProxy" + "\r\n" + 
				"c0-methodName=checkUserStatus" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"batchId=2";
		requestContent0194 = Lib.replaceTextPattern(requestContent0194, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0194 = Lib.replaceTextPattern(requestContent0194, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0194_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0194 = new String(Lib.binaryReplace(requestContent0194.getBytes(), binarySearchPattern0194_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0194 = "POST " + requestFile0194 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001582362de-7362-4645-ac2b-8a0e2648522e29820909-1501-babe-face-000000000003974f02cf-dcb2-4677-b62f-81242aa7c428HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0194.length() + "\r\n" + 		// Content-Length: 325
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0194, requestHost0194, requestPort0194, requestHeader0194, requestContent0194.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0194 = null;		// support garbage collector to reduce memory
		requestContent0194 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 222
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [194] <- Index 194
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [195] <- WEB ADMIN Index 195 ---
		String requestProt0195 = "https";
		String requestHost0195 = "hcm4preview.sapsf.com";
		int    requestPort0195 = 443;
		String requestFile0195 = "/ui/pageaccess/js/pageAccess_a8762ad33a61a6ad48ee1b515cecc4cb.js";
		String requestHeader0195 = "GET " + requestFile0195 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0195, requestHost0195, requestPort0195, requestHeader0195, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0195 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 557
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [195] <- Index 195
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [196] <- WEB ADMIN Index 196 ---
		String requestProt0196 = "https";
		String requestHost0196 = "ds-aksb-a.akamaihd.net";
		int    requestPort0196 = 443;
		String requestFile0196 = "/2/492962/b" +
				"?dE=0" +
				"&cS=0" +
				"&cE=0" +
				"&rqS=0" +
				"&rsS=3" +
				"&rsE=851" +
				"&sS=-32" +
				"&dl=856" +
				"&di=1883" +
				"&fp=" +
				"&dlS=1884" +
				"&dlE=3944" +
				"&dc=3991" +
				"&leS=3992" +
				"&leE=3992" +
				"&to=" +
				"&ol=0" +
				"&cr=9" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A70.0%29%20Gecko/20100101%20Firefox/70.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=23.36.3.39" +
				"&t=" +
				"&rid=42cdb531" +
				"&r=34125" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=8ee60000" +
				"&akTX=1" +
				"&akTI=42cdb531" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0196 = "GET " + requestFile0196 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0196, requestHost0196, requestPort0196, requestHeader0196, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0196 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, null);		// Test [196] <- Index 196
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [197] <- WEB ADMIN Index 197 ---
		String requestProt0197 = "https";
		String requestHost0197 = "hcm4preview.sapsf.com";
		int    requestPort0197 = 443;
		String requestFile0197 = "/xi/ajax/remoting/call/plaincall/quickcardControllerProxy.getTakeActionPermission.dwr";
		String requestContent0197 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=quickcardControllerProxy" + "\r\n" + 
				"c0-methodName=getTakeActionPermission" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"c0-param1=string:" + "\r\n" + 
				"batchId=3";
		requestContent0197 = Lib.replaceTextPattern(requestContent0197, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0197 = Lib.replaceTextPattern(requestContent0197, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0197_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0197 = new String(Lib.binaryReplace(requestContent0197.getBytes(), binarySearchPattern0197_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0197 = "POST " + requestFile0197 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001f3e1327b-3082-47bb-8921-684d2930272929820909-1501-babe-face-0000000000030d45f275-9652-429f-9d2f-6cde2d7c122dHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0197.length() + "\r\n" + 		// Content-Length: 335
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0197, requestHost0197, requestPort0197, requestHeader0197, requestContent0197.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0197 = null;		// support garbage collector to reduce memory
		requestContent0197 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 117
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [197] <- Index 197
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [198] <- WEB ADMIN Index 198 ---
		String requestProt0198 = "https";
		String requestHost0198 = "hcm4preview.sapsf.com";
		int    requestPort0198 = 443;
		String requestFile0198 = "/xi/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.getPageConfig.dwr";
		String requestContent0198 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=employeeProfilePageConfigControllerProxy" + "\r\n" + 
				"c0-methodName=getPageConfig" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"batchId=4";
		requestContent0198 = Lib.replaceTextPattern(requestContent0198, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0198 = Lib.replaceTextPattern(requestContent0198, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0198_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0198 = new String(Lib.binaryReplace(requestContent0198.getBytes(), binarySearchPattern0198_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0198 = "POST " + requestFile0198 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 010005000119cb92fc-c252-4c83-bb21-01e52e2e7f2e29820909-1501-babe-face-0000000000039d1352af-3ac2-45ce-8025-1d7f270e4524HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0198.length() + "\r\n" + 		// Content-Length: 323
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0198, requestHost0198, requestPort0198, requestHeader0198, requestContent0198.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0198 = null;		// support garbage collector to reduce memory
		requestContent0198 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3639
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [198] <- Index 198
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [199] <- WEB ADMIN Index 199 ---
		String requestProt0199 = "https";
		String requestHost0199 = "hcm4preview.sapsf.com";
		int    requestPort0199 = 443;
		String requestFile0199 = "/xi/ajax/remoting/call/plaincall/pageAccessControllerProxy.generatePageAccess.dwr";
		String requestContent0199 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=pageAccessControllerProxy" + "\r\n" + 
				"c0-methodName=generatePageAccess" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e2=string:EMPLOYEE_FILE" + "\r\n" + 
				"c0-e3=string:EMPLOYEE_FILE" + "\r\n" + 
				"c0-e4=string:PP3_MAIN" + "\r\n" + 
				"c0-e5=string:SIT20018" + "\r\n" + 
				"c0-e6=null:null" + "\r\n" + 
				"c0-e8=string:SIT20018" + "\r\n" + 
				"c0-e7=Object_Object:{targetUserId:reference:c0-e8}" + "\r\n" + 
				"c0-e1=Object_Object:{pageId:reference:c0-e2, moduleId:reference:c0-e3, pageQualifier:reference:c0-e4, userId:reference:c0-e5, proxyUserId:reference:c0-e6, pageDetail:reference:c0-e7}" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"batchId=5";
		requestContent0199 = Lib.replaceTextPattern(requestContent0199, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0199 = Lib.replaceTextPattern(requestContent0199, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0199_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0199 = new String(Lib.binaryReplace(requestContent0199.getBytes(), binarySearchPattern0199_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0199 = "POST " + requestFile0199 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500018897c2f0-32e2-4109-832e-61072b7ce32b29820909-1501-babe-face-0000000000036bba22eb-6a62-46cd-b422-02072268bb26HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0199.length() + "\r\n" + 		// Content-Length: 691
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0199, requestHost0199, requestPort0199, requestHeader0199, requestContent0199.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0199 = null;		// support garbage collector to reduce memory
		requestContent0199 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 117
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [199] <- Index 199
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [200] <- WEB ADMIN Index 200 ---
		String requestProt0200 = "https";
		String requestHost0200 = "hcm4preview.sapsf.com";
		int    requestPort0200 = 443;
		String requestFile0200 = "/xi/ajax/remoting/call/plaincall/quickcardControllerProxy.getActionListGoToLinks.dwr";
		String requestContent0200 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=quickcardControllerProxy" + "\r\n" + 
				"c0-methodName=getActionListGoToLinks" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"batchId=6";
		requestContent0200 = Lib.replaceTextPattern(requestContent0200, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0200 = Lib.replaceTextPattern(requestContent0200, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0200_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0200 = new String(Lib.binaryReplace(requestContent0200.getBytes(), binarySearchPattern0200_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0200 = "POST " + requestFile0200 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001aecc3269-9aa2-4eac-aa28-417829f3572729820909-1501-babe-face-00000000000356b692d0-ccb2-4822-9027-c6b326924a29HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0200.length() + "\r\n" + 		// Content-Length: 316
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0200, requestHost0200, requestPort0200, requestHeader0200, requestContent0200.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0200 = null;		// support garbage collector to reduce memory
		requestContent0200 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 965
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [200] <- Index 200
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [201] <- WEB ADMIN Index 201 ---
		String requestProt0201 = "https";
		String requestHost0201 = "hcm4preview.sapsf.com";
		int    requestPort0201 = 443;
		String requestFile0201 = "/eduPhoto/view" +
				"?companyId=tctest" +
				"&photo_type=liveProfile" +
				"&user_id=SIT20018" +
				"&mod=null";
		requestFile0201 = Lib.replaceTextPattern(requestFile0201, "SIT20018", P_UserID, 0);		// search and replace request file fragment "SIT20018" with variable 'P_UserID' on all occurrences

		String requestHeader0201 = "GET " + requestFile0201 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0201, requestHost0201, requestPort0201, requestHeader0201, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0201 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [201] <- Index 201
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [202] <- WEB ADMIN Index 202 ---
		String requestProt0202 = "https";
		String requestHost0202 = "hcm4preview.sapsf.com";
		int    requestPort0202 = 443;
		String requestFile0202 = "/eduPhoto/view" +
				"?companyId=tctest" +
				"&photo_type=userExpressivePhoto" +
				"&user_id=SIT20018" +
				"&mod=24014_1571184340000";
		requestFile0202 = Lib.replaceTextPattern(requestFile0202, "SIT20018", P_UserID, 0);		// search and replace request file fragment "SIT20018" with variable 'P_UserID' on all occurrences

		String requestHeader0202 = "GET " + requestFile0202 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0202, requestHost0202, requestPort0202, requestHeader0202, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0202 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/JPEG", header text fragment = [verification disabled], recorded content size = 123168
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/JPEG", null, null);		// Test [202] <- Index 202
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 4 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [203] <- WEB ADMIN Index 203 ---
		String requestProt0203 = "https";
		String requestHost0203 = "hcm4preview.sapsf.com";
		int    requestPort0203 = 443;
		String requestFile0203 = "/eduPhoto/view" +
				"?companyId=tctest" +
				"&photo_type=liveProfileSquare60" +
				"&user_id=SIT20018" +
				"&mod=null";
		requestFile0203 = Lib.replaceTextPattern(requestFile0203, "SIT20018", P_UserID, 0);		// search and replace request file fragment "SIT20018" with variable 'P_UserID' on all occurrences

		String requestHeader0203 = "GET " + requestFile0203 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0203, requestHost0203, requestPort0203, requestHeader0203, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0203 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [203] <- Index 203
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [204] <- WEB ADMIN Index 204 ---
		String requestProt0204 = "https";
		String requestHost0204 = "hcm4preview.sapsf.com";
		int    requestPort0204 = 443;
		String requestFile0204 = "/xi/ajax/remoting/call/plaincall/ecHelpControllerProxy.getHelp.dwr";
		String requestContent0204 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=ecHelpControllerProxy" + "\r\n" + 
				"c0-methodName=getHelp" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:BIOGRAPHICAL_INFORMATION" + "\r\n" + 
				"c0-e2=string:PERSONAL_INFORMATION" + "\r\n" + 
				"c0-e3=string:WORK_ELIG_INFORMATION" + "\r\n" + 
				"c0-e4=string:NATIONAL_ID" + "\r\n" + 
				"c0-e5=string:EMERGENCY_CONTACT_INFORMATION" + "\r\n" + 
				"c0-e6=string:CONTACT_INFORMATION" + "\r\n" + 
				"c0-e7=string:ADDRESS_INFORMATION" + "\r\n" + 
				"c0-e8=string:DEPENDENT_INFORMATION" + "\r\n" + 
				"c0-e9=string:Payment_Information_Portlet" + "\r\n" + 
				"c0-e10=string:EMPLOYMENT_INFORMATION" + "\r\n" + 
				"c0-e11=string:ORGANIZATIONAL_INFORMATION" + "\r\n" + 
				"c0-e12=string:JOB_INFORMATION" + "\r\n" + 
				"c0-e13=string:JOB_RELATIONSHIP" + "\r\n" + 
				"c0-e14=string:COMPENSATION_INFORMATION" + "\r\n" + 
				"c0-e15=string:NON_RECURRING_PAY_COMP_INFO" + "\r\n" + 
				"c0-e16=string:one_time_emp_info" + "\r\n" + 
				"c0-e17=string:RecurringDeductionConfigUI" + "\r\n" + 
				"c0-e18=string:EmpCostDistributionUI" + "\r\n" + 
				"c0-e19=string:PAYROLL" + "\r\n" + 
				"c0-e20=string:PayrollHistory" + "\r\n" + 
				"c0-e21=string:TIME_OFF" + "\r\n" + 
				"c0-e22=string:WorkSeniorityUI" + "\r\n" + 
				"c0-e23=string:TimeClockUI" + "\r\n" + 
				"c0-e24=string:BENEFIT_OPEN_ENROLLMENTS_PP3" + "\r\n" + 
				"c0-e25=string:BENEFIT_CURRENT_BENEFITS_PP3" + "\r\n" + 
				"c0-e26=string:block212" + "\r\n" + 
				"c0-e27=string:block1" + "\r\n" + 
				"c0-e28=string:languages" + "\r\n" + 
				"c0-e29=string:courses" + "\r\n" + 
				"c0-e30=string:education" + "\r\n" + 
				"c0-e31=string:awards" + "\r\n" + 
				"c0-e32=string:outsideWorkExperience" + "\r\n" + 
				"c0-e33=string:insideWorkExperience" + "\r\n" + 
				"c0-e34=string:community" + "\r\n" + 
				"c0-e35=string:memberships" + "\r\n" + 
				"c0-e36=string:leadExperience" + "\r\n" + 
				"c0-e37=string:projectExposure" + "\r\n" + 
				"c0-e38=string:certificates" + "\r\n" + 
				"c0-e39=string:specialAssign" + "\r\n" + 
				"c0-e40=string:promotability" + "\r\n" + 
				"c0-e41=string:preferredNextMove" + "\r\n" + 
				"c0-e42=string:block1075" + "\r\n" + 
				"c0-e43=string:mobility" + "\r\n" + 
				"c0-e44=string:sysOverallPotential" + "\r\n" + 
				"c0-e45=string:sysOverallPerformance" + "\r\n" + 
				"c0-e46=string:sysOverallCustom1" + "\r\n" + 
				"c0-e47=string:block46" + "\r\n" + 
				"c0-e48=string:block1605" + "\r\n" + 
				"c0-e49=string:block44" + "\r\n" + 
				"c0-e50=string:systalentdevplan" + "\r\n" + 
				"c0-e51=string:availability" + "\r\n" + 
				"c0-e52=string:block1796" + "\r\n" + 
				"c0-e53=string:block2276" + "\r\n" + 
				"c0-e54=string:block2275" + "\r\n" + 
				"c0-e55=string:block2278" + "\r\n" + 
				"c0-e56=string:block4887" + "\r\n" + 
				"c0-e57=string:block86" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1,reference:c0-e2,reference:c0-e3,reference:c0-e4,reference:c0-e5,reference:c0-e6,reference:c0-e7,reference:c0-e8,reference:c0-e9,reference:c0-e10,reference:c0-e11,reference:c0-e12,reference:c0-e13,reference:c0-e14,reference:c0-e15,reference:c0-e16,reference:c0-e17,reference:c0-e18,reference:c0-e19,reference:c0-e20,reference:c0-e21,reference:c0-e22,reference:c0-e23,reference:c0-e24,reference:c0-e25,reference:c0-e26,reference:c0-e27,reference:c0-e28,reference:c0-e29,reference:c0-e30,reference:c0-e31,reference:c0-e32,reference:c0-e33,reference:c0-e34,reference:c0-e35,reference:c0-e36,reference:c0-e37,reference:c0-e38,reference:c0-e39,reference:c0-e40,reference:c0-e41,reference:c0-e42,reference:c0-e43,reference:c0-e44,reference:c0-e45,reference:c0-e46,reference:c0-e47,reference:c0-e48,reference:c0-e49,reference:c0-e50,reference:c0-e51,reference:c0-e52,reference:c0-e53,reference:c0-e54,reference:c0-e55,reference:c0-e56,reference:c0-e57]" + "\r\n" + 
				"batchId=7";
		requestContent0204 = Lib.replaceTextPattern(requestContent0204, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0204_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0204 = new String(Lib.binaryReplace(requestContent0204.getBytes(), binarySearchPattern0204_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0204 = "POST " + requestFile0204 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500015d7be21f-7a32-443b-ac2e-8b7f290a152029820909-1501-babe-face-000000000003c103e2d2-5652-4d68-8827-1e7d2c9e0621HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0204.length() + "\r\n" + 		// Content-Length: 2959
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0204, requestHost0204, requestPort0204, requestHeader0204, requestContent0204.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0204 = null;		// support garbage collector to reduce memory
		requestContent0204 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 518
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [204] <- Index 204
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [205] <- WEB ADMIN Index 205 ---
		String requestProt0205 = "https";
		String requestHost0205 = "hcm4preview.sapsf.com";
		int    requestPort0205 = 443;
		String requestFile0205 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getPortletData.dwr";
		String requestContent0205 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getPortletData" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:BIOGRAPHICAL_INFORMATION" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"c0-param1=string:SIT20018" + "\r\n" + 
				"c0-param2=string:2019-11-26" + "\r\n" + 
				"c0-param3=string:2019-11-26" + "\r\n" + 
				"batchId=8";
		requestContent0205 = Lib.replaceTextPattern(requestContent0205, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0205 = Lib.replaceTextPattern(requestContent0205, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0205 = Lib.replaceTextPattern(requestContent0205, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0205_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0205 = new String(Lib.binaryReplace(requestContent0205.getBytes(), binarySearchPattern0205_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0205 = "POST " + requestFile0205 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001c18f2258-e2c2-4bff-a124-de0124011c2f29820909-1501-babe-face-0000000000030481b261-6d22-4860-a52f-eb302206da2bHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0205.length() + "\r\n" + 		// Content-Length: 430
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0205, requestHost0205, requestPort0205, requestHeader0205, requestContent0205.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0205 = null;		// support garbage collector to reduce memory
		requestContent0205 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2218
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [205] <- Index 205
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [206] <- WEB ADMIN Index 206 ---
		String requestProt0206 = "https";
		String requestHost0206 = "hcm4preview.sapsf.com";
		int    requestPort0206 = 443;
		String requestFile0206 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getPortletData.dwr";
		String requestContent0206 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getPortletData" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:PERSON_INFORMATION" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"c0-param1=string:SIT20018" + "\r\n" + 
				"c0-param2=string:2019-11-26" + "\r\n" + 
				"c0-param3=string:2019-11-26" + "\r\n" + 
				"batchId=9";
		requestContent0206 = Lib.replaceTextPattern(requestContent0206, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0206 = Lib.replaceTextPattern(requestContent0206, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0206 = Lib.replaceTextPattern(requestContent0206, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0206_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0206 = new String(Lib.binaryReplace(requestContent0206.getBytes(), binarySearchPattern0206_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0206 = "POST " + requestFile0206 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 010005000162c1921c-1852-43ee-ac22-7f4c2639742929820909-1501-babe-face-000000000003c03c4206-47e2-48ac-9029-6a4b2fdd7628HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0206.length() + "\r\n" + 		// Content-Length: 424
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0206, requestHost0206, requestPort0206, requestHeader0206, requestContent0206.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0206 = null;		// support garbage collector to reduce memory
		requestContent0206 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4687
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [206] <- Index 206
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [207] <- WEB ADMIN Index 207 ---
		String requestProt0207 = "https";
		String requestHost0207 = "hcm4preview.sapsf.com";
		int    requestPort0207 = 443;
		String requestFile0207 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getPortletData.dwr";
		String requestContent0207 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getPortletData" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:NATIONAL_ID" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"c0-param1=string:SIT20018" + "\r\n" + 
				"c0-param2=string:2019-11-26" + "\r\n" + 
				"c0-param3=string:2019-11-26" + "\r\n" + 
				"batchId=10";
		requestContent0207 = Lib.replaceTextPattern(requestContent0207, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0207 = Lib.replaceTextPattern(requestContent0207, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0207 = Lib.replaceTextPattern(requestContent0207, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0207_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0207 = new String(Lib.binaryReplace(requestContent0207.getBytes(), binarySearchPattern0207_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0207 = "POST " + requestFile0207 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500014c0ad2a0-b1a2-4d2f-9e21-fdb82d3c992929820909-1501-babe-face-00000000000398465299-34b2-4bba-b42f-8bd826e3bf24HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0207.length() + "\r\n" + 		// Content-Length: 418
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0207, requestHost0207, requestPort0207, requestHeader0207, requestContent0207.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0207 = null;		// support garbage collector to reduce memory
		requestContent0207 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 14744
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [207] <- Index 207
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [208] <- WEB ADMIN Index 208 ---
		String requestProt0208 = "https";
		String requestHost0208 = "hcm4preview.sapsf.com";
		int    requestPort0208 = 443;
		String requestFile0208 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getPortletData.dwr";
		String requestContent0208 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getPortletData" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:WORK_ELIG_INFORMATION" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"c0-param1=string:SIT20018" + "\r\n" + 
				"c0-param2=string:2019-11-26" + "\r\n" + 
				"c0-param3=string:2019-11-26" + "\r\n" + 
				"batchId=11";
		requestContent0208 = Lib.replaceTextPattern(requestContent0208, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0208 = Lib.replaceTextPattern(requestContent0208, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0208 = Lib.replaceTextPattern(requestContent0208, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0208_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0208 = new String(Lib.binaryReplace(requestContent0208.getBytes(), binarySearchPattern0208_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0208 = "POST " + requestFile0208 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001bf6062c5-6ac2-45b7-9024-4c2c2330332d29820909-1501-babe-face-00000000000338e12209-f462-41ec-8a26-12fb2b5d312aHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0208.length() + "\r\n" + 		// Content-Length: 428
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0208, requestHost0208, requestPort0208, requestHeader0208, requestContent0208.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0208 = null;		// support garbage collector to reduce memory
		requestContent0208 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 11829
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [208] <- Index 208
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [209] <- WEB ADMIN Index 209 ---
		String requestProt0209 = "https";
		String requestHost0209 = "hcm4preview.sapsf.com";
		int    requestPort0209 = 443;
		String requestFile0209 = "/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Bold.woff2";
		requestFile0209 = Lib.replaceTextPattern(requestFile0209, "C7B52757B839BC0F193BCD71F2425A88", C_Merge0, 0);		// search and replace request file fragment "C7B52757B839BC0F193BCD71F2425A88" with variable 'C_Merge0' on all occurrences
		requestFile0209 = Lib.replaceTextPattern(requestFile0209, "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0, 0);		// search and replace request file fragment "!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_Img0' on all occurrences
		requestFile0209 = Lib.replaceTextPattern(requestFile0209, "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!" with variable 'C_belieze0' on all occurrences
		requestFile0209 = Lib.replaceTextPattern(requestFile0209, "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0209 = Lib.replaceTextPattern(requestFile0209, "3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4, 0);		// search and replace request file fragment "3Dea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod4' on all occurrences

		String requestHeader0209 = "GET " + requestFile0209 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/public/ui-dcss/tctest/_/3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11uires=3A280=3Fmod=3Dea5a9eb6367aa95e7fa782bea1b0faef=26name=3DTeck=255f54321=252d2.jpg!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizeLanding!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!/merge_C7B52757B839BC0F193BCD71F2425A88/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0209, requestHost0209, requestPort0209, requestHeader0209, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("C7B52757B839BC0F193BCD71F2425A88", C_Merge0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!0-1!PL38!1X_jV1A!SL00!72N!1eS=qgDOI-1!gDOI-1!1!!172N!72N!72N!11YLbOf3MY-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!!1YLbOf3MYd667f3MYd667=vDV-1!f3MYd667tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7goH7-1!goH7FIvzYLbODs7w0+0+1px+0!1cPcP-1!bPN8-1!gDOIYf3M__X=BHDmcPcP1pCpCSD1f3MYd667-1!f3MY-1!d667lBpmd667!cPcP=vDVd667ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!172N!-1!AszSSL1x8=klBpmnbHCJJBn=IdAzdf_SpzbYJ99AXD6PcmESZJ6CaHXlBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_Img0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!11!THRBPLPT!NO0!SL1DET1!TH0SD!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!21quLV!", C_belieze0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3m!3eybd488sn!!mLY6k7N!011VKLLTANOBTRXPLPT!11", C_tctest0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3Dea5a9eb6367aa95e7fa782bea1b0faef", C_Mod4);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0209 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 26732
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [209] <- Index 209
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [210] <- WEB ADMIN Index 210 ---
		String requestProt0210 = "https";
		String requestHost0210 = "hcm4preview.sapsf.com";
		int    requestPort0210 = 443;
		String requestFile0210 = "/ui/topnav/js/SFResponsiveHeader_250cad09274ed3682a7739db5a4870d3.js";
		String requestHeader0210 = "GET " + requestFile0210 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0210, requestHost0210, requestPort0210, requestHeader0210, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0210 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1948
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [210] <- Index 210
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [211] <- WEB ADMIN Index 211 ---
		String requestProt0211 = "https";
		String requestHost0211 = "hcm4preview.sapsf.com";
		int    requestPort0211 = 443;
		String requestFile0211 = "/ui/quickcard/js/quickcard_ea5751a860222ce3b8f70e6a1a1985a8.js";
		String requestHeader0211 = "GET " + requestFile0211 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0211, requestHost0211, requestPort0211, requestHeader0211, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0211 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1297
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [211] <- Index 211
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [212] <- WEB ADMIN Index 212 ---
		String requestProt0212 = "https";
		String requestHost0212 = "hcm4preview.sapsf.com";
		int    requestPort0212 = 443;
		String requestFile0212 = "/perfLogServlet" +
				"?callId=1855092175-0" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=4330" +
				"&TIP=4878" +
				"&TML=5002" +
				"&ST=1574797070260" +
				"&ET=1574797076256" +
				"&MEM=268236" +
				"&NRE=634" +
				"&NWR=476" +
				"&SCPU=70" +
				"&SQLC=335" +
				"&SQLT=487" +
				"&SVT=2437" +
				"&UCPU=920" +
				"&CPU=990" +
				"&FRE=6" +
				"&FWR=0" +
				"&jsNum=39" +
				"&cssNum=14" +
				"&renderTime=4949" +
				"&TTB=30" +
				"&RSR=888" +
				"&DIA=1915" +
				"&DCP=4023";
		String requestContent0212 = 
				"OPTR_INFO=7b206248-28b2-423c-b729-f97e264da025!1574797071602!1574797071771!0" +
				"&OPTR_INFO=98afc26b-f6e2-4264-bc2a-7e5c22a14222!1574797071786!1574797071796!0" +
				"&OPTR_INFO=707fe2a8-27a2-45d4-8025-cf2529b99229!1574797071807!1574797072062!0" +
				"&OPTR_INFO=f29f02b9-52f2-46a9-9a2d-887b2d634b21!1574797072116!1574797072151!0" +
				"&OPTR_INFO=3b34450b-1084-11ea-9bb9-4daa529fd176!1574797070262!1574797072176!1" +
				"&OPTR_INFO=636fe22e-5d82-4593-a72f-2af92d97672c!1574797072183!1574797072195!0" +
				"&OPTR_INFO=16eca266-5232-4f1e-a22e-5cd420d7ad2a!1574797072201!1574797072218!0" +
				"&OPTR_INFO=a89a2231-aa12-4ac6-b72c-195921557122!1574797072229!1574797072425!0" +
				"&OPTR_INFO=087b4207-40f2-48dc-b525-851f2ec6c22b!1574797072493!1574797072570!0" +
				"&OPTR_INFO=3e8a32bc-30a2-491a-bf22-43452881cd2d!1574797072574!1574797072743!0" +
				"&OPTR_INFO=7151c2d6-1892-46d0-a723-c70329424822!1574797072780!1574797072845!0" +
				"&OPTR_INFO=b8ee8266-0e02-499e-8920-eb17238a6329!1574797072862!1574797072929!0" +
				"&OPTR_INFO=b86dd267-6f42-4623-832f-7494232dc423!1574797072931!1574797072995!0" +
				"&OPTR_INFO=05d062ad-bd02-43e4-b72d-06e02f3b6d29!1574797073048!1574797073056!0" +
				"&OPTR_INFO=62c58290-1312-41a8-8d21-3daa2ee9dc28!1574797073078!1574797073089!0" +
				"&OPTR_INFO=94b852c2-5632-46f0-a022-7b7b2d431f24!1574797073103!1574797073143!0" +
				"&OPTR_INFO=ef3a4235-cc32-4e63-bb27-92352040c427!1574797073147!1574797073181!0" +
				"&OPTR_INFO=e12872fa-da02-480f-942a-59ad2dee1822!1574797073184!1574797073249!0" +
				"&OPTR_INFO=bbbf1256-2132-428f-b621-3b7d2d405022!1574797073253!1574797073296!0" +
				"&OPTR_INFO=23c4429d-ef42-444d-b725-647b2e892a25!1574797073297!1574797073364!0" +
				"&OPTR_INFO=352132b1-83a2-45c3-aa2c-da92246a162e!1574797073365!1574797073429!0" +
				"&OPTR_INFO=3a8b02b7-c602-430b-a025-7aa02ca3c824!1574797073430!1574797073494!0" +
				"&OPTR_INFO=4266d2d2-f5e2-421f-852c-3e4128721b22!1574797073496!1574797073532!0" +
				"&OPTR_INFO=82e7a24e-c282-4dd8-a72d-bc6e2a4ec325!1574797073534!1574797073567!0" +
				"&OPTR_INFO=4de6d269-7382-438a-a321-3aae2a0e7e26!1574797073580!1574797073588!0" +
				"&OPTR_INFO=ab4d8220-5222-4aae-9b24-ffb728b72f26!1574797073596!1574797073604!0" +
				"&OPTR_INFO=e0d7c27b-8612-40b1-b020-61c52b76132c!1574797073639!1574797073705!0" +
				"&OPTR_INFO=96d10226-8272-49da-a122-f23d24dbb92f!1574797073706!1574797073716!0" +
				"&OPTR_INFO=b16322ac-2022-4ce5-802a-081625bd7e22!1574797073720!1574797073845!0" +
				"&OPTR_INFO=9d0a82b5-0dc2-413a-932e-8afd27661a20!1574797073873!1574797073939!0" +
				"&OPTR_INFO=46a832a3-5e82-4b54-a926-604a25d2a52f!1574797073988!1574797074062!0" +
				"&OPTR_INFO=e07bd285-5442-43ec-9220-cea92dd3f623!1574797074067!1574797074286!0" +
				"&OPTR_INFO=7576d2ef-0752-42ae-aa25-86002e3b9c22!1574797074087!1574797074336!0" +
				"&OPTR_INFO=ab10d26e-1582-49d3-952d-d6302a634522!1574797074112!1574797074177!0" +
				"&OPTR_INFO=6d7752d2-f612-44ca-bd2f-d03d2ba86d2a!1574797074317!1574797074769!0" +
				"&OPTR_INFO=582362de-7362-4645-ac2b-8a0e2648522e!1574797074336!1574797074419!0" +
				"&OPTR_INFO=f3e1327b-3082-47bb-8921-684d29302729!1574797074417!1574797074615!0" +
				"&OPTR_INFO=19cb92fc-c252-4c83-bb21-01e52e2e7f2e!1574797074418!1574797075472!0" +
				"&OPTR_INFO=8897c2f0-32e2-4109-832e-61072b7ce32b!1574797074421!1574797074510!0" +
				"&OPTR_INFO=aecc3269-9aa2-4eac-aa28-417829f35727!1574797074614!1574797076021!0" +
				"&OPTR_INFO=5d7be21f-7a32-443b-ac2e-8b7f290a1520!1574797075472!1574797076098!0" +
				"&OPTR_INFO=c18f2258-e2c2-4bff-a124-de0124011c2f!1574797075501!1574797076146!0" +
				"&OPTR_INFO=62c1921c-1852-43ee-ac22-7f4c26397429!1574797075507!1574797076155!0" +
				"&OPTR_INFO=4c0ad2a0-b1a2-4d2f-9e21-fdb82d3c9929!1574797075511!1574797076114!0" +
				"&OPTR_INFO=bf6062c5-6ac2-45b7-9024-4c2c2330332d!1574797075516!1574797076140!0";
		String requestHeader0212 = "POST " + requestFile0212 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0212.length() + "\r\n" + 		// Content-Length: 3464
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0212, requestHost0212, requestPort0212, requestHeader0212, requestContent0212.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0212 = null;		// support garbage collector to reduce memory
		requestContent0212 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [212] <- Index 212
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [213] <- WEB ADMIN Index 213 ---
		String requestProt0213 = "https";
		String requestHost0213 = "hcm4preview.sapsf.com";
		int    requestPort0213 = 443;
		String requestFile0213 = "/xi/ajax/remoting/call/plaincall/EssMssGlobalAssignmentNavigationControllerProxy.getNavigationItems.dwr";
		String requestContent0213 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=EssMssGlobalAssignmentNavigationControllerProxy" + "\r\n" + 
				"c0-methodName=getNavigationItems" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"c0-param1=string:ECT_MSS" + "\r\n" + 
				"c0-param2=string:" + "\r\n" + 
				"c0-param3=string:2019-11-26" + "\r\n" + 
				"batchId=12";
		requestContent0213 = Lib.replaceTextPattern(requestContent0213, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0213 = Lib.replaceTextPattern(requestContent0213, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0213 = Lib.replaceTextPattern(requestContent0213, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0213_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0213 = new String(Lib.binaryReplace(requestContent0213.getBytes(), binarySearchPattern0213_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0213 = "POST " + requestFile0213 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001d447429d-d6d2-4492-9f21-835c298ef62229820909-1501-babe-face-0000000000037cd7f278-5bd2-4383-b12a-e09e26bb1427HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-1\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0213.length() + "\r\n" + 		// Content-Length: 407
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0213, requestHost0213, requestPort0213, requestHeader0213, requestContent0213.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0213 = null;		// support garbage collector to reduce memory
		requestContent0213 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 203
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [213] <- Index 213
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [214] <- WEB ADMIN Index 214 ---
		String requestProt0214 = "https";
		String requestHost0214 = "hcm4preview.sapsf.com";
		int    requestPort0214 = 443;
		String requestFile0214 = "/xi/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.getTimeoffStatus.dwr";
		String requestContent0214 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=employeeProfilePageConfigControllerProxy" + "\r\n" + 
				"c0-methodName=getTimeoffStatus" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=null:null" + "\r\n" + 
				"c0-param1=string:SIT20018" + "\r\n" + 
				"batchId=13";
		requestContent0214 = Lib.replaceTextPattern(requestContent0214, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0214 = Lib.replaceTextPattern(requestContent0214, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0214_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0214 = new String(Lib.binaryReplace(requestContent0214.getBytes(), binarySearchPattern0214_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0214 = "POST " + requestFile0214 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500011bdef2a6-59a2-4ec6-9a27-85d721b3d72129820909-1501-babe-face-0000000000034f07524b-ecd2-482b-9028-76a623d2cd2eHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-1\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0214.length() + "\r\n" + 		// Content-Length: 347
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0214, requestHost0214, requestPort0214, requestHeader0214, requestContent0214.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0214 = null;		// support garbage collector to reduce memory
		requestContent0214 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 160
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [214] <- Index 214
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [215] <- WEB ADMIN Index 215 ---
		String requestProt0215 = "https";
		String requestHost0215 = "hcm4preview.sapsf.com";
		int    requestPort0215 = 443;
		String requestFile0215 = "/ui/uicore/css/fiori_fc960c9ddf57de1aa2536367a33ba8fb.css";
		String requestHeader0215 = "GET " + requestFile0215 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0215, requestHost0215, requestPort0215, requestHeader0215, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0215 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1425
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [215] <- Index 215
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [216] <- WEB ADMIN Index 216 ---
		String requestProt0216 = "https";
		String requestHost0216 = "hcm4preview.sapsf.com";
		int    requestPort0216 = 443;
		String requestFile0216 = "/ui/trial/js/sfGuidedTourRegistry_23bd2cabcfceb9fa1570e1e63c403eb6.js";
		String requestHeader0216 = "GET " + requestFile0216 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0216, requestHost0216, requestPort0216, requestHeader0216, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0216 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 239
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [216] <- Index 216
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [217] <- WEB ADMIN Index 217 ---
		String requestProt0217 = "https";
		String requestHost0217 = "hcm4preview.sapsf.com";
		int    requestPort0217 = 443;
		String requestFile0217 = "/xi/ajax/remoting/call/plaincall/globalNotificationControllerProxy.getNumberOfNewNotifications.dwr";
		String requestContent0217 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=globalNotificationControllerProxy" + "\r\n" + 
				"c0-methodName=getNumberOfNewNotifications" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"batchId=14";
		requestContent0217 = Lib.replaceTextPattern(requestContent0217, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0217 = Lib.replaceTextPattern(requestContent0217, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0217_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0217 = new String(Lib.binaryReplace(requestContent0217.getBytes(), binarySearchPattern0217_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0217 = "POST " + requestFile0217 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001569b92d1-2462-42f1-a229-72ef21567a2529820909-1501-babe-face-000000000003871ae298-8382-4c72-9e2b-ba8927c50420HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-1\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0217.length() + "\r\n" + 		// Content-Length: 331
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0217, requestHost0217, requestPort0217, requestHeader0217, requestContent0217.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0217 = null;		// support garbage collector to reduce memory
		requestContent0217 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 115
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [217] <- Index 217
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [218] <- WEB ADMIN Index 218 ---
		String requestProt0218 = "https";
		String requestHost0218 = "hcm4preview.sapsf.com";
		int    requestPort0218 = 443;
		String requestFile0218 = "/xi/ajax/remoting/call/plaincall/showMeControllerProxy.signAPIUrl.dwr";
		String requestContent0218 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=showMeControllerProxy" + "\r\n" + 
				"c0-methodName=signAPIUrl" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:%2Fmedia%2Fshowme_597075b7_0dbc_491c_b3d1_f9fc838ee8e9%2FEMPLOYEE_FILE_PP3_MAIN%2Fstatus" + "\r\n" + 
				"c0-param1=string:EMPLOYEE_FILE_PP3_MAIN" + "\r\n" + 
				"c0-param2=string:9ce05637f1a5f3199a8cabc66b3fb042" + "\r\n" + 
				"batchId=15";
		requestContent0218 = Lib.replaceTextPattern(requestContent0218, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0218_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0218 = new String(Lib.binaryReplace(requestContent0218.getBytes(), binarySearchPattern0218_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0218 = "POST " + requestFile0218 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001f81d3260-d1a2-4e9c-9229-c10e2c6a032729820909-1501-babe-face-0000000000037b7e02f4-6e92-4734-ad22-18652f2ea12eHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-1\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0218.length() + "\r\n" + 		// Content-Length: 472
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0218, requestHost0218, requestPort0218, requestHeader0218, requestContent0218.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0218 = null;		// support garbage collector to reduce memory
		requestContent0218 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 435
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [218] <- Index 218
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Token2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0218_1 = new BoundaryBasedExtractorItem( "token=" , "\");",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0218_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Token2'
			C_Token2 = boundaryBasedContentExtractorItem0218_1.getResultText();
			log("<<< C_Token2 = " + C_Token2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Token2!= null && C_Token2.trim().length() == 0)
			{
				C_Token2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Token2' ends up with an empty string - a substitute value was set");
				log("<<< C_Token2 = " + C_Token2);
			}
		}
		catch (Exception e) { C_Token2 = null; log(e); }
		if (C_Token2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Token2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [219] <- WEB ADMIN Index 219 ---
		String requestProt0219 = "https";
		String requestHost0219 = "hcm4preview.sapsf.com";
		int    requestPort0219 = 443;
		String requestFile0219 = "/eduPhoto/view" +
				"?companyId=tctest" +
				"&photo_type=liveProfile" +
				"&user_id=SIT20018" +
				"&mod=";
		requestFile0219 = Lib.replaceTextPattern(requestFile0219, "SIT20018", P_UserID, 0);		// search and replace request file fragment "SIT20018" with variable 'P_UserID' on all occurrences

		String requestHeader0219 = "GET " + requestFile0219 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0219, requestHost0219, requestPort0219, requestHeader0219, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0219 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [219] <- Index 219
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [220] <- WEB ADMIN Index 220 ---
		String requestProt0220 = "https";
		String requestHost0220 = "hcm4preview.sapsf.com";
		int    requestPort0220 = 443;
		String requestFile0220 = "/public/ui-resource/tctest/280;mod=ea5a9eb6367aa95e7fa782bea1b0faef%22";
		requestFile0220 = Lib.replaceTextPattern(requestFile0220, "ea5a9eb6367aa95e7fa782bea1b0faef", C_Mod6, 0);		// search and replace request file fragment "ea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod6' on all occurrences

		String requestHeader0220 = "GET " + requestFile0220 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0220, requestHost0220, requestPort0220, requestHeader0220, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0220 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [220] <- Index 220
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [221] <- WEB ADMIN Index 221 ---
		String requestProt0221 = "https";
		String requestHost0221 = "mediaservicesfmsprod.ms.successfactors.com";
		int    requestPort0221 = 443;
		String requestFile0221 = "/mediaservice/api/v2/media/showme_597075b7_0dbc_491c_b3d1_f9fc838ee8e9/EMPLOYEE_FILE_PP3_MAIN/status" +
				"?token=" + C_Token2 +		// recorded value = 03904ae7f48930cb26b9c27c045fec5f1fd6712914f950b692af83c6445b2b61cd55d8e180b32da980fccfa28916909de49a0ab53fe615965f22fc32073ef56f,-7201412613455779379,1574798876,1
				"&callback=sfDeferredUtilCallback0";
		requestFile0221 = Lib.replaceTextPattern(requestFile0221, "03904ae7f48930cb26b9c27c045fec5f1fd6712914f950b692af83c6445b2b61cd55d8e180b32da980fccfa28916909de49a0ab53fe615965f22fc32073ef56f,-7201412613455779379,1574798876,1", C_Token2, 0);		// search and replace request file fragment "03904ae7f48930cb26b9c27c045fec5f1fd6712914f950b692af83c6445b2b61cd55d8e180b32da980fccfa28916909de49a0ab53fe615965f22fc32073ef56f,-7201412613455779379,1574798876,1" with variable 'C_Token2' on all occurrences

		String requestHeader0221 = "GET " + requestFile0221 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mediaservicesfmsprod.ms.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0221, requestHost0221, requestPort0221, requestHeader0221, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0221 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 142
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [221] <- Index 221
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [222] <- WEB ADMIN Index 222 ---
		String requestProt0222 = "https";
		String requestHost0222 = "hcm4preview.sapsf.com";
		int    requestPort0222 = 443;
		String requestFile0222 = "/public/ui-resource/tctest/280;mod=ea5a9eb6367aa95e7fa782bea1b0faef";
		requestFile0222 = Lib.replaceTextPattern(requestFile0222, "ea5a9eb6367aa95e7fa782bea1b0faef", C_Mod6, 0);		// search and replace request file fragment "ea5a9eb6367aa95e7fa782bea1b0faef" with variable 'C_Mod6' on all occurrences

		String requestHeader0222 = "GET " + requestFile0222 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0222, requestHost0222, requestPort0222, requestHeader0222, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0222 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/JPEG", header text fragment = [verification disabled], recorded content size = 2178
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/JPEG", null, null);		// Test [222] <- Index 222
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 5 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [223] <- WEB ADMIN Index 223 ---
		String requestProt0223 = "https";
		String requestHost0223 = "hcm4preview.sapsf.com";
		int    requestPort0223 = 443;
		String requestFile0223 = "/perfLogServlet" +
				"?callId=1855092175-1" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=4330" +
				"&TIP=4878" +
				"&TML=5002" +
				"&ST=1574797076290" +
				"&ET=1574797076733" +
				"&MEM=14160" +
				"&NRE=240" +
				"&NWR=39" +
				"&SCPU=10" +
				"&SQLC=7" +
				"&SQLT=19" +
				"&SVT=290" +
				"&UCPU=40" +
				"&CPU=50" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=40" +
				"&cssNum=15" +
				"&renderTime=341" +
				"&TTB=30" +
				"&RSR=888" +
				"&DIA=1915" +
				"&DCP=4023";
		String requestContent0223 = 
				"OPTR_INFO=d447429d-d6d2-4492-9f21-835c298ef622!1574797076290!1574797076631!0" +
				"&OPTR_INFO=1bdef2a6-59a2-4ec6-9a27-85d721b3d721!1574797076291!1574797076399!0" +
				"&OPTR_INFO=ae8bc204-3802-4921-a22a-e5112accac22!1574797076372!1574797076397!0" +
				"&OPTR_INFO=c9019294-8792-4715-8b29-bbd829403d23!1574797076398!1574797076405!0" +
				"&OPTR_INFO=2277a258-eec2-48bf-a729-391e2f480722!1574797076406!1574797076415!0" +
				"&OPTR_INFO=7e9bd227-9382-418e-9f28-96a22182dc2a!1574797076428!1574797076445!0" +
				"&OPTR_INFO=569b92d1-2462-42f1-a229-72ef21567a25!1574797076450!1574797076522!0" +
				"&OPTR_INFO=f81d3260-d1a2-4e9c-9229-c10e2c6a0327!1574797076451!1574797076529!0";
		String requestHeader0223 = "POST " + requestFile0223 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-1\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0223.length() + "\r\n" + 		// Content-Length: 615
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0223, requestHost0223, requestPort0223, requestHeader0223, requestContent0223.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0223 = null;		// support garbage collector to reduce memory
		requestContent0223 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [223] <- Index 223
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [224] <- WEB ADMIN Index 224 ---
		String requestProt0224 = "https";
		String requestHost0224 = "hcm4preview.sapsf.com";
		int    requestPort0224 = 443;
		String requestFile0224 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getPortletData.dwr";
		String requestContent0224 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getPortletData" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:CONTACT_INFORMATION" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"c0-param1=string:SIT20018" + "\r\n" + 
				"c0-param2=string:2019-11-26" + "\r\n" + 
				"c0-param3=string:2019-11-26" + "\r\n" + 
				"batchId=16";
		requestContent0224 = Lib.replaceTextPattern(requestContent0224, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0224 = Lib.replaceTextPattern(requestContent0224, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0224 = Lib.replaceTextPattern(requestContent0224, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0224_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0224 = new String(Lib.binaryReplace(requestContent0224.getBytes(), binarySearchPattern0224_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0224 = "POST " + requestFile0224 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001637c92a8-4322-4e91-942b-544621d4422a29820909-1501-babe-face-000000000003d36942cc-97b2-4263-892b-6a522812a42bHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0224.length() + "\r\n" + 		// Content-Length: 426
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0224, requestHost0224, requestPort0224, requestHeader0224, requestContent0224.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0224 = null;		// support garbage collector to reduce memory
		requestContent0224 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3697
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [224] <- Index 224
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [225] <- WEB ADMIN Index 225 ---
		String requestProt0225 = "https";
		String requestHost0225 = "hcm4preview.sapsf.com";
		int    requestPort0225 = 443;
		String requestFile0225 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getPortletData.dwr";
		String requestContent0225 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getPortletData" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:EMERGENCY_CONTACT_INFORMATION" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"c0-param1=string:SIT20018" + "\r\n" + 
				"c0-param2=string:2019-11-26" + "\r\n" + 
				"c0-param3=string:2019-11-26" + "\r\n" + 
				"batchId=17";
		requestContent0225 = Lib.replaceTextPattern(requestContent0225, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0225 = Lib.replaceTextPattern(requestContent0225, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0225 = Lib.replaceTextPattern(requestContent0225, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0225_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0225 = new String(Lib.binaryReplace(requestContent0225.getBytes(), binarySearchPattern0225_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0225 = "POST " + requestFile0225 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001f32352d6-e552-4f2a-8227-301a29e5192129820909-1501-babe-face-000000000003cf1f220a-8782-4690-bd20-23822b489f21HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0225.length() + "\r\n" + 		// Content-Length: 436
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0225, requestHost0225, requestPort0225, requestHeader0225, requestContent0225.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0225 = null;		// support garbage collector to reduce memory
		requestContent0225 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2436
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [225] <- Index 225
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [226] <- WEB ADMIN Index 226 ---
		String requestProt0226 = "https";
		String requestHost0226 = "hcm4preview.sapsf.com";
		int    requestPort0226 = 443;
		String requestFile0226 = "/xi/ajax/remoting/call/plaincall/EDUPercentCompleteControllerProxy.getCompletePercentForPP3.dwr";
		String requestContent0226 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=EDUPercentCompleteControllerProxy" + "\r\n" + 
				"c0-methodName=getCompletePercentForPP3" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"batchId=18";
		requestContent0226 = Lib.replaceTextPattern(requestContent0226, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0226 = Lib.replaceTextPattern(requestContent0226, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0226_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0226 = new String(Lib.binaryReplace(requestContent0226.getBytes(), binarySearchPattern0226_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0226 = "POST " + requestFile0226 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 010005000196e20252-2882-4101-942b-3e402802412329820909-1501-babe-face-00000000000335e342dd-8812-4b8b-9e26-518522dffe2fHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0226.length() + "\r\n" + 		// Content-Length: 328
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0226, requestHost0226, requestPort0226, requestHeader0226, requestContent0226.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0226 = null;		// support garbage collector to reduce memory
		requestContent0226 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 125
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [226] <- Index 226
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [227] <- WEB ADMIN Index 227 ---
		String requestProt0227 = "https";
		String requestHost0227 = "hcm4preview.sapsf.com";
		int    requestPort0227 = 443;
		String requestFile0227 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getPortletData.dwr";
		String requestContent0227 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getPortletData" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:ADDRESS_INFORMATION" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"c0-param1=string:SIT20018" + "\r\n" + 
				"c0-param2=string:2019-11-26" + "\r\n" + 
				"c0-param3=string:2019-11-26" + "\r\n" + 
				"batchId=19";
		requestContent0227 = Lib.replaceTextPattern(requestContent0227, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0227 = Lib.replaceTextPattern(requestContent0227, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0227 = Lib.replaceTextPattern(requestContent0227, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0227_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0227 = new String(Lib.binaryReplace(requestContent0227.getBytes(), binarySearchPattern0227_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0227 = "POST " + requestFile0227 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001b1ac7236-c802-4250-9026-bdc5229f192e29820909-1501-babe-face-0000000000034b2192e0-51f2-48be-b82f-da1f28fc952fHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0227.length() + "\r\n" + 		// Content-Length: 426
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0227, requestHost0227, requestPort0227, requestHeader0227, requestContent0227.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0227 = null;		// support garbage collector to reduce memory
		requestContent0227 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 13235
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [227] <- Index 227
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [228] <- WEB ADMIN Index 228 ---
		String requestProt0228 = "https";
		String requestHost0228 = "hcm4preview.sapsf.com";
		int    requestPort0228 = 443;
		String requestFile0228 = "/perfLogServlet" +
				"?callId=1855092175-2" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=4330" +
				"&TIP=4878" +
				"&TML=5002" +
				"&TSL=5835" +
				"&ST=1574797076754" +
				"&ET=1574797078701" +
				"&MEM=286317" +
				"&NRE=293" +
				"&NWR=503" +
				"&SCPU=80" +
				"&SQLC=372" +
				"&SQLT=839" +
				"&SVT=2284" +
				"&UCPU=860" +
				"&CPU=940" +
				"&FRE=7" +
				"&FWR=0" +
				"&jsNum=40" +
				"&cssNum=15" +
				"&renderTime=1846" +
				"&TTB=30" +
				"&RSR=888" +
				"&DIA=1915" +
				"&DCP=4023";
		String requestContent0228 = 
				"OPTR_INFO=637c92a8-4322-4e91-942b-544621d4422a!1574797076754!1574797077292!0" +
				"&OPTR_INFO=f32352d6-e552-4f2a-8227-301a29e51921!1574797076758!1574797076979!0" +
				"&OPTR_INFO=96e20252-2882-4101-942b-3e4028024123!1574797076790!1574797078600!0" +
				"&OPTR_INFO=b1ac7236-c802-4250-9026-bdc5229f192e!1574797077764!1574797078372!0";
		String requestHeader0228 = "POST " + requestFile0228 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-2\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0228.length() + "\r\n" + 		// Content-Length: 307
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0228, requestHost0228, requestPort0228, requestHeader0228, requestContent0228.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0228 = null;		// support garbage collector to reduce memory
		requestContent0228 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [228] <- Index 228
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [229] <- WEB ADMIN Index 229 ---
		String requestProt0229 = "https";
		String requestHost0229 = "hcm4preview.sapsf.com";
		int    requestPort0229 = 443;
		String requestFile0229 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getPortletData.dwr";
		String requestContent0229 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getPortletData" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:DEPENDENT_INFORMATION" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"c0-param1=string:SIT20018" + "\r\n" + 
				"c0-param2=string:2019-11-26" + "\r\n" + 
				"c0-param3=string:2019-11-26" + "\r\n" + 
				"batchId=20";
		requestContent0229 = Lib.replaceTextPattern(requestContent0229, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0229 = Lib.replaceTextPattern(requestContent0229, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0229 = Lib.replaceTextPattern(requestContent0229, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0229_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0229 = new String(Lib.binaryReplace(requestContent0229.getBytes(), binarySearchPattern0229_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0229 = "POST " + requestFile0229 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001fd848281-e592-425e-9322-9169224be22529820909-1501-babe-face-000000000003c025b2a0-b482-40aa-bb24-87932c373420HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-3\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0229.length() + "\r\n" + 		// Content-Length: 428
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0229, requestHost0229, requestPort0229, requestHeader0229, requestContent0229.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0229 = null;		// support garbage collector to reduce memory
		requestContent0229 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2529
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [229] <- Index 229
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [230] <- WEB ADMIN Index 230 ---
		String requestProt0230 = "https";
		String requestHost0230 = "hcm4preview.sapsf.com";
		int    requestPort0230 = 443;
		String requestFile0230 = "/perfLogServlet" +
				"?callId=1855092175-3" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=4330" +
				"&TIP=4878" +
				"&TML=5002" +
				"&TSL=5835" +
				"&ST=1574797078780" +
				"&ET=1574797079402" +
				"&MEM=55473" +
				"&NRE=120" +
				"&NWR=107" +
				"&SCPU=10" +
				"&SQLC=40" +
				"&SQLT=49" +
				"&SVT=429" +
				"&UCPU=190" +
				"&CPU=200" +
				"&FRE=1" +
				"&FWR=0" +
				"&jsNum=40" +
				"&cssNum=15" +
				"&renderTime=520" +
				"&TTB=30" +
				"&RSR=888" +
				"&DIA=1915" +
				"&DCP=4023";
		String requestContent0230 = 
				"OPTR_INFO=fd848281-e592-425e-9322-9169224be225!1574797078780!1574797079300!0";
		String requestHeader0230 = "POST " + requestFile0230 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-3\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0230.length() + "\r\n" + 		// Content-Length: 76
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0230, requestHost0230, requestPort0230, requestHeader0230, requestContent0230.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0230 = null;		// support garbage collector to reduce memory
		requestContent0230 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [230] <- Index 230
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [231] <- WEB ADMIN Index 231 ---
		String requestProt0231 = "https";
		String requestHost0231 = "hcm4preview.sapsf.com";
		int    requestPort0231 = 443;
		String requestFile0231 = "/xi/ajax/remoting/call/plaincall/configUIControllerProxy.getMetaForUser.dwr";
		String requestContent0231 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=configUIControllerProxy" + "\r\n" + 
				"c0-methodName=getMetaForUser" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"c0-param1=string:Payment_Information_Portlet" + "\r\n" + 
				"batchId=21";
		requestContent0231 = Lib.replaceTextPattern(requestContent0231, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0231 = Lib.replaceTextPattern(requestContent0231, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0231_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0231 = new String(Lib.binaryReplace(requestContent0231.getBytes(), binarySearchPattern0231_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0231 = "POST " + requestFile0231 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001ff07b281-2442-40c9-9e22-d8302bd12b2629820909-1501-babe-face-00000000000380c9d222-7872-4ad7-882b-d8452180a421HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-4\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0231.length() + "\r\n" + 		// Content-Length: 353
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0231, requestHost0231, requestPort0231, requestHeader0231, requestContent0231.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0231 = null;		// support garbage collector to reduce memory
		requestContent0231 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 20269
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [231] <- Index 231
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [232] <- WEB ADMIN Index 232 ---
		String requestProt0232 = "https";
		String requestHost0232 = "hcm4preview.sapsf.com";
		int    requestPort0232 = 443;
		String requestFile0232 = "/perfLogServlet" +
				"?callId=1855092175-4" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=4330" +
				"&TIP=4878" +
				"&TML=5002" +
				"&TSL=5835" +
				"&ST=1574797088819" +
				"&ET=1574797090162" +
				"&MEM=0" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=0" +
				"&UCPU=0" +
				"&CPU=0" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=40" +
				"&cssNum=15" +
				"&renderTime=1241" +
				"&TTB=30" +
				"&RSR=888" +
				"&DIA=1915" +
				"&DCP=4023";
		String requestContent0232 = 
				"OPTR_INFO=ff07b281-2442-40c9-9e22-d8302bd12b26!1574797088819!1574797090060!0";
		String requestHeader0232 = "POST " + requestFile0232 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-4\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0232.length() + "\r\n" + 		// Content-Length: 76
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0232, requestHost0232, requestPort0232, requestHeader0232, requestContent0232.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0232 = null;		// support garbage collector to reduce memory
		requestContent0232 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [232] <- Index 232
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [233] <- WEB ADMIN Index 233 ---
		String requestProt0233 = "https";
		String requestHost0233 = "hcm4preview.sapsf.com";
		int    requestPort0233 = 443;
		String requestFile0233 = "/xi/ajax/remoting/call/plaincall/mssEmploymentInfoControllerProxy.getPortletData.dwr";
		String requestContent0233 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=mssEmploymentInfoControllerProxy" + "\r\n" + 
				"c0-methodName=getPortletData" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:EMPLOYMENT_INFORMATION" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"c0-param1=string:SIT20018" + "\r\n" + 
				"c0-param2=string:2019-11-26" + "\r\n" + 
				"c0-param3=string:2019-11-26" + "\r\n" + 
				"batchId=22";
		requestContent0233 = Lib.replaceTextPattern(requestContent0233, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0233 = Lib.replaceTextPattern(requestContent0233, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0233 = Lib.replaceTextPattern(requestContent0233, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0233_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0233 = new String(Lib.binaryReplace(requestContent0233.getBytes(), binarySearchPattern0233_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0233 = "POST " + requestFile0233 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 010005000176f8b26c-ed32-4467-ad22-5ca920727f2929820909-1501-babe-face-000000000003d226f223-4352-448b-b025-935421ce572cHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-5\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0233.length() + "\r\n" + 		// Content-Length: 443
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0233, requestHost0233, requestPort0233, requestHeader0233, requestContent0233.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0233 = null;		// support garbage collector to reduce memory
		requestContent0233 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5425
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [233] <- Index 233
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [234] <- WEB ADMIN Index 234 ---
		String requestProt0234 = "https";
		String requestHost0234 = "hcm4preview.sapsf.com";
		int    requestPort0234 = 443;
		String requestFile0234 = "/perfLogServlet" +
				"?callId=1855092175-5" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=4330" +
				"&TIP=4878" +
				"&TML=5002" +
				"&TSL=5835" +
				"&ST=1574797090850" +
				"&ET=1574797091283" +
				"&MEM=0" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=0" +
				"&UCPU=0" +
				"&CPU=0" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=40" +
				"&cssNum=15" +
				"&renderTime=330" +
				"&TTB=30" +
				"&RSR=888" +
				"&DIA=1915" +
				"&DCP=4023";
		String requestContent0234 = 
				"OPTR_INFO=76f8b26c-ed32-4467-ad22-5ca920727f29!1574797090850!1574797091180!0";
		String requestHeader0234 = "POST " + requestFile0234 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-5\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0234.length() + "\r\n" + 		// Content-Length: 76
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0234, requestHost0234, requestPort0234, requestHeader0234, requestContent0234.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0234 = null;		// support garbage collector to reduce memory
		requestContent0234 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [234] <- Index 234
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #4: EditAddress
		// # --------------------



		// --- HTTP REQUEST: Test [236] <- WEB ADMIN Index 236 ---
		String requestProt0236 = "https";
		String requestHost0236 = "hcm4preview.sapsf.com";
		int    requestPort0236 = 443;
		String requestFile0236 = "/ui/peopleprofile/resources_A10DC8405A6CF6A39C7227B626193228/sap/sf/peopleprofile/configurations/EditLayoutConfig.json";
		requestFile0236 = Lib.replaceTextPattern(requestFile0236, "A10DC8405A6CF6A39C7227B626193228", C_Resource1, 0);		// search and replace request file fragment "A10DC8405A6CF6A39C7227B626193228" with variable 'C_Resource1' on all occurrences

		String requestHeader0236 = "GET " + requestFile0236 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500016a5872d3-0102-4b0e-8d2b-217e2792bf2c29820909-1501-babe-face-0000000000034fe31246-f2b2-4374-8e2f-c1a82ff9bf23HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-6\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0236, requestHost0236, requestPort0236, requestHeader0236, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0236 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 3360
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"EMPLOYMENT_INFORMATION\":{");		// Test [236] <- Index 236
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [237] <- WEB ADMIN Index 237 ---
		String requestProt0237 = "https";
		String requestHost0237 = "hcm4preview.sapsf.com";
		int    requestPort0237 = 443;
		String requestFile0237 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getDataForInsertNew.dwr";
		String requestContent0237 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getDataForInsertNew" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:ADDRESS_INFORMATION" + "\r\n" + 
				"c0-param1=string:SIT20018" + "\r\n" + 
				"c0-param2=string:2019-11-26" + "\r\n" + 
				"c0-param3=string:2019-11-26" + "\r\n" + 
				"batchId=23";
		requestContent0237 = Lib.replaceTextPattern(requestContent0237, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0237 = Lib.replaceTextPattern(requestContent0237, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0237 = Lib.replaceTextPattern(requestContent0237, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0237_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0237 = new String(Lib.binaryReplace(requestContent0237.getBytes(), binarySearchPattern0237_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0237 = "POST " + requestFile0237 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500016a39d23d-7272-4953-ac26-7ea7286a742d29820909-1501-babe-face-00000000000302b5221b-9f52-4df3-b822-f8f521cfeb29HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-6\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0237.length() + "\r\n" + 		// Content-Length: 401
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0237, requestHost0237, requestPort0237, requestHeader0237, requestContent0237.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0237 = null;		// support garbage collector to reduce memory
		requestContent0237 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 13300
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [237] <- Index 237
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [238] <- WEB ADMIN Index 238 ---
		String requestProt0238 = "https";
		String requestHost0238 = "hcm4preview.sapsf.com";
		int    requestPort0238 = 443;
		String requestFile0238 = "/xi/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.getEditConfigLayouts.dwr";
		String requestContent0238 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=employeeProfilePageConfigControllerProxy" + "\r\n" + 
				"c0-methodName=getEditConfigLayouts" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e2=null:null" + "\r\n" + 
				"c0-e3=string:homeAddress-country" + "\r\n" + 
				"c0-e4=null:null" + "\r\n" + 
				"c0-e6=null:null" + "\r\n" + 
				"c0-e5=Array:[reference:c0-e6]" + "\r\n" + 
				"c0-e7=string:ADDRESS_INFORMATION" + "\r\n" + 
				"c0-e1=Object_Object:{editableFieldConfigVO:reference:c0-e2, fieldId:reference:c0-e3, fieldValue:reference:c0-e4, fieldValues:reference:c0-e5, portletId:reference:c0-e7}" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"batchId=24";
		requestContent0238 = Lib.replaceTextPattern(requestContent0238, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0238_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0238 = new String(Lib.binaryReplace(requestContent0238.getBytes(), binarySearchPattern0238_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0238 = "POST " + requestFile0238 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001880fe26e-ec62-41b8-8f27-fe752618402229820909-1501-babe-face-0000000000036bb0621f-f942-4f3a-9327-06532aab9721HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-6\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0238.length() + "\r\n" + 		// Content-Length: 652
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0238, requestHost0238, requestPort0238, requestHeader0238, requestContent0238.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0238 = null;		// support garbage collector to reduce memory
		requestContent0238 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1045
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [238] <- Index 238
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [239] <- WEB ADMIN Index 239 ---
		String requestProt0239 = "https";
		String requestHost0239 = "hcm4preview.sapsf.com";
		int    requestPort0239 = 443;
		String requestFile0239 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getSectionsForAlternateSet.dwr";
		String requestContent0239 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getSectionsForAlternateSet" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"c0-param1=string:2019-11-26" + "\r\n" + 
				"c0-param2=string:HOME_ADDRESS" + "\r\n" + 
				"c0-param3=null:null" + "\r\n" + 
				"c0-param4=null:null" + "\r\n" + 
				"c0-param5=null:null" + "\r\n" + 
				"batchId=25";
		requestContent0239 = Lib.replaceTextPattern(requestContent0239, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0239 = Lib.replaceTextPattern(requestContent0239, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0239 = Lib.replaceTextPattern(requestContent0239, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0239_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0239 = new String(Lib.binaryReplace(requestContent0239.getBytes(), binarySearchPattern0239_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0239 = "POST " + requestFile0239 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500013104d284-d982-4844-912f-fc3e2551b92529820909-1501-babe-face-000000000003ef731209-c7e2-4b14-8c2d-9cc92d565d26HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-6\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0239.length() + "\r\n" + 		// Content-Length: 433
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0239, requestHost0239, requestPort0239, requestHeader0239, requestContent0239.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0239 = null;		// support garbage collector to reduce memory
		requestContent0239 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 118
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [239] <- Index 239
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [240] <- WEB ADMIN Index 240 ---
		String requestProt0240 = "https";
		String requestHost0240 = "hcm4preview.sapsf.com";
		int    requestPort0240 = 443;
		String requestFile0240 = "/xi/ajax/remoting/call/plaincall/ecHelpControllerProxy.getHelp.dwr";
		String requestContent0240 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=ecHelpControllerProxy" + "\r\n" + 
				"c0-methodName=getHelp" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:ADDRESS_INFORMATION" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"batchId=26";
		requestContent0240 = Lib.replaceTextPattern(requestContent0240, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0240_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0240 = new String(Lib.binaryReplace(requestContent0240.getBytes(), binarySearchPattern0240_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0240 = "POST " + requestFile0240 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001fc3c62ff-2af2-4daa-a822-4b8c2e947f2e29820909-1501-babe-face-00000000000338304239-47b2-4faf-ab24-f7922639a423HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-6\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0240.length() + "\r\n" + 		// Content-Length: 340
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0240, requestHost0240, requestPort0240, requestHeader0240, requestContent0240.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0240 = null;		// support garbage collector to reduce memory
		requestContent0240 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 519
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [240] <- Index 240
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [241] <- WEB ADMIN Index 241 ---
		String requestProt0241 = "https";
		String requestHost0241 = "hcm4preview.sapsf.com";
		int    requestPort0241 = 443;
		String requestFile0241 = "/xi/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.getBlockLink.dwr";
		String requestContent0241 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=employeeProfilePageConfigControllerProxy" + "\r\n" + 
				"c0-methodName=getBlockLink" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:block2618" + "\r\n" + 
				"batchId=27";
		requestContent0241 = Lib.replaceTextPattern(requestContent0241, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0241_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0241 = new String(Lib.binaryReplace(requestContent0241.getBytes(), binarySearchPattern0241_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0241 = "POST " + requestFile0241 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500019d1f02f3-0442-452b-b12a-df482ef8b82329820909-1501-babe-face-000000000003e813e22b-d742-40d0-9d2e-936f28ed272fHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-6\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0241.length() + "\r\n" + 		// Content-Length: 324
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0241, requestHost0241, requestPort0241, requestHeader0241, requestContent0241.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0241 = null;		// support garbage collector to reduce memory
		requestContent0241 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 116
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [241] <- Index 241
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [242] <- WEB ADMIN Index 242 ---
		String requestProt0242 = "https";
		String requestHost0242 = "hcm4preview.sapsf.com";
		int    requestPort0242 = 443;
		String requestFile0242 = "/perfLogServlet" +
				"?callId=1855092175-6" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=4330" +
				"&TIP=4878" +
				"&TML=5002" +
				"&TSL=5835" +
				"&ST=1574797104856" +
				"&ET=1574797106502" +
				"&MEM=23373" +
				"&NRE=266" +
				"&NWR=24" +
				"&SCPU=0" +
				"&SQLC=15" +
				"&SQLT=12" +
				"&SVT=126" +
				"&UCPU=90" +
				"&CPU=90" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=40" +
				"&cssNum=15" +
				"&renderTime=1545" +
				"&TTB=30" +
				"&RSR=888" +
				"&DIA=1915" +
				"&DCP=4023";
		String requestContent0242 = 
				"OPTR_INFO=6a5872d3-0102-4b0e-8d2b-217e2792bf2c!1574797104856!1574797105059!0" +
				"&OPTR_INFO=6a39d23d-7272-4953-ac26-7ea7286a742d!1574797104861!1574797105629!0" +
				"&OPTR_INFO=880fe26e-ec62-41b8-8f27-fe7526184022!1574797104863!1574797105256!0" +
				"&OPTR_INFO=3104d284-d982-4844-912f-fc3e2551b925!1574797105629!1574797105905!0" +
				"&OPTR_INFO=fc3c62ff-2af2-4daa-a822-4b8c2e947f2e!1574797105884!1574797106036!0" +
				"&OPTR_INFO=9d1f02f3-0442-452b-b12a-df482ef8b823!1574797105904!1574797106401!0";
		String requestHeader0242 = "POST " + requestFile0242 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-6\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0242.length() + "\r\n" + 		// Content-Length: 461
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0242, requestHost0242, requestPort0242, requestHeader0242, requestContent0242.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0242 = null;		// support garbage collector to reduce memory
		requestContent0242 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [242] <- Index 242
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #5: SelectCountry
		// # ----------------------



		// --- HTTP REQUEST: Test [244] <- WEB ADMIN Index 244 ---
		String requestProt0244 = "https";
		String requestHost0244 = "hcm4preview.sapsf.com";
		int    requestPort0244 = 443;
		String requestFile0244 = "/ui/fo/js/ajaxservice/countrySpecificValueControllerASProxy_2a2421838ee973d26e12a75b75297a2d.js";
		String requestHeader0244 = "GET " + requestFile0244 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0244, requestHost0244, requestPort0244, requestHeader0244, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0244 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 449
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [244] <- Index 244
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [245] <- WEB ADMIN Index 245 ---
		String requestProt0245 = "https";
		String requestHost0245 = "hcm4preview.sapsf.com";
		int    requestPort0245 = 443;
		String requestFile0245 = "/xi/ajax/remoting/call/plaincall/countrySpecificValueControllerProxy.getCountrySpecificData.dwr";
		String requestContent0245 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=countrySpecificValueControllerProxy" + "\r\n" + 
				"c0-methodName=getCountrySpecificData" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:homeAddress" + "\r\n" + 
				"c0-param1=string:AFG" + "\r\n" + 
				"c0-param2=string:SIT20018" + "\r\n" + 
				"batchId=28";
		requestContent0245 = Lib.replaceTextPattern(requestContent0245, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0245 = Lib.replaceTextPattern(requestContent0245, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0245_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0245 = new String(Lib.binaryReplace(requestContent0245.getBytes(), binarySearchPattern0245_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0245 = "POST " + requestFile0245 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500018f4882f2-3d22-40bf-872d-91642b65372e29820909-1501-babe-face-000000000003b16f9273-f072-4972-b622-2f5f24ec072aHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-7\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0245.length() + "\r\n" + 		// Content-Length: 378
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0245, requestHost0245, requestPort0245, requestHeader0245, requestContent0245.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0245 = null;		// support garbage collector to reduce memory
		requestContent0245 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6743
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [245] <- Index 245
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [246] <- WEB ADMIN Index 246 ---
		String requestProt0246 = "https";
		String requestHost0246 = "hcm4preview.sapsf.com";
		int    requestPort0246 = 443;
		String requestFile0246 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getSectionsForAlternateSet.dwr";
		String requestContent0246 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getSectionsForAlternateSet" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"c0-param1=string:2019-11-26" + "\r\n" + 
				"c0-param2=string:HOME_ADDRESS" + "\r\n" + 
				"c0-param3=string:home" + "\r\n" + 
				"c0-param4=string:AFG" + "\r\n" + 
				"c0-param5=null:null" + "\r\n" + 
				"batchId=29";
		requestContent0246 = Lib.replaceTextPattern(requestContent0246, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0246 = Lib.replaceTextPattern(requestContent0246, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0246 = Lib.replaceTextPattern(requestContent0246, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0246_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0246 = new String(Lib.binaryReplace(requestContent0246.getBytes(), binarySearchPattern0246_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0246 = "POST " + requestFile0246 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001ef82d2ec-d0f2-4331-af2e-f45b23ba692c29820909-1501-babe-face-000000000003385ed279-94c2-434f-b72b-3ef824d9cd2dHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-7\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0246.length() + "\r\n" + 		// Content-Length: 436
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0246, requestHost0246, requestPort0246, requestHeader0246, requestContent0246.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0246 = null;		// support garbage collector to reduce memory
		requestContent0246 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 118
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [246] <- Index 246
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [247] <- WEB ADMIN Index 247 ---
		String requestProt0247 = "https";
		String requestHost0247 = "hcm4preview.sapsf.com";
		int    requestPort0247 = 443;
		String requestFile0247 = "/xi/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.getEditConfigLayouts.dwr";
		String requestContent0247 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=employeeProfilePageConfigControllerProxy" + "\r\n" + 
				"c0-methodName=getEditConfigLayouts" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e2=null:null" + "\r\n" + 
				"c0-e3=string:country" + "\r\n" + 
				"c0-e4=null:null" + "\r\n" + 
				"c0-e6=string:AFG" + "\r\n" + 
				"c0-e5=Array:[reference:c0-e6]" + "\r\n" + 
				"c0-e7=string:ADDRESS_INFORMATION" + "\r\n" + 
				"c0-e1=Object_Object:{editableFieldConfigVO:reference:c0-e2, fieldId:reference:c0-e3, fieldValue:reference:c0-e4, fieldValues:reference:c0-e5, portletId:reference:c0-e7}" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"batchId=30";
		requestContent0247 = Lib.replaceTextPattern(requestContent0247, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0247_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0247 = new String(Lib.binaryReplace(requestContent0247.getBytes(), binarySearchPattern0247_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0247 = "POST " + requestFile0247 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001b2313226-5422-4b25-852c-80fc2250062e29820909-1501-babe-face-0000000000030aea920f-fb72-4de0-8d26-150925fbe329HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-7\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0247.length() + "\r\n" + 		// Content-Length: 641
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0247, requestHost0247, requestPort0247, requestHeader0247, requestContent0247.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0247 = null;		// support garbage collector to reduce memory
		requestContent0247 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1045
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [247] <- Index 247
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [248] <- WEB ADMIN Index 248 ---
		String requestProt0248 = "https";
		String requestHost0248 = "hcm4preview.sapsf.com";
		int    requestPort0248 = 443;
		String requestFile0248 = "/perfLogServlet" +
				"?callId=1855092175-7" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=4330" +
				"&TIP=4878" +
				"&TML=5002" +
				"&TSL=5835" +
				"&ST=1574797141594" +
				"&ET=1574797142103" +
				"&MEM=17997" +
				"&NRE=37" +
				"&NWR=34" +
				"&SCPU=20" +
				"&SQLC=7" +
				"&SQLT=13" +
				"&SVT=102" +
				"&UCPU=50" +
				"&CPU=70" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=41" +
				"&cssNum=15" +
				"&renderTime=406" +
				"&TTB=30" +
				"&RSR=888" +
				"&DIA=1915" +
				"&DCP=4023";
		String requestContent0248 = 
				"OPTR_INFO=8f4882f2-3d22-40bf-872d-91642b65372e!1574797141594!1574797141758!0" +
				"&OPTR_INFO=ef82d2ec-d0f2-4331-af2e-f45b23ba692c!1574797141755!1574797142001!0" +
				"&OPTR_INFO=b2313226-5422-4b25-852c-80fc2250062e!1574797141758!1574797141892!0";
		String requestHeader0248 = "POST " + requestFile0248 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-7\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0248.length() + "\r\n" + 		// Content-Length: 230
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0248, requestHost0248, requestPort0248, requestHeader0248, requestContent0248.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0248 = null;		// support garbage collector to reduce memory
		requestContent0248 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [248] <- Index 248
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #6.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #6: Save
		// # -------------



		// --- HTTP REQUEST: Test [250] <- WEB ADMIN Index 250 ---
		String requestProt0250 = "https";
		String requestHost0250 = "hcm4preview.sapsf.com";
		int    requestPort0250 = 443;
		String requestFile0250 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.save.dwr";
		String requestContent0250 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=save" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"c0-param1=string:2019-11-26" + "\r\n" + 
				"c0-e2=string:HOME_ADDRESS" + "\r\n" + 
				"c0-e3=string:2019-11-26" + "\r\n" + 
				"c0-e4=string:Edit" + "\r\n" + 
				"c0-e5=null:null" + "\r\n" + 
				"c0-e8=string:Add" + "\r\n" + 
				"c0-e9=string:" + "\r\n" + 
				"c0-e10=boolean:true" + "\r\n" + 
				"c0-e13=string:homeAddress-address-type" + "\r\n" + 
				"c0-e14=string:home" + "\r\n" + 
				"c0-e12=Object_Object:{id:reference:c0-e13, value:reference:c0-e14}" + "\r\n" + 
				"c0-e16=string:country" + "\r\n" + 
				"c0-e17=string:AFG" + "\r\n" + 
				"c0-e15=Object_Object:{id:reference:c0-e16, value:reference:c0-e17}" + "\r\n" + 
				"c0-e19=string:homeAddress-attachment-id" + "\r\n" + 
				"c0-e20=string:" + "\r\n" + 
				"c0-e18=Object_Object:{id:reference:c0-e19, value:reference:c0-e20}" + "\r\n" + 
				"c0-e22=string:homeAddress-address1" + "\r\n" + 
				"c0-e23=string:123%20Kandahar" + "\r\n" + 
				"c0-e21=Object_Object:{id:reference:c0-e22, value:reference:c0-e23}" + "\r\n" + 
				"c0-e25=string:homeAddress-address2" + "\r\n" + 
				"c0-e26=string:" + "\r\n" + 
				"c0-e24=Object_Object:{id:reference:c0-e25, value:reference:c0-e26}" + "\r\n" + 
				"c0-e28=string:homeAddress-address3" + "\r\n" + 
				"c0-e29=string:" + "\r\n" + 
				"c0-e27=Object_Object:{id:reference:c0-e28, value:reference:c0-e29}" + "\r\n" + 
				"c0-e31=string:homeAddress-city" + "\r\n" + 
				"c0-e32=string:" + "\r\n" + 
				"c0-e30=Object_Object:{id:reference:c0-e31, value:reference:c0-e32}" + "\r\n" + 
				"c0-e34=string:homeAddress-county" + "\r\n" + 
				"c0-e35=string:" + "\r\n" + 
				"c0-e33=Object_Object:{id:reference:c0-e34, value:reference:c0-e35}" + "\r\n" + 
				"c0-e37=string:homeAddress-state" + "\r\n" + 
				"c0-e38=string:" + "\r\n" + 
				"c0-e36=Object_Object:{id:reference:c0-e37, value:reference:c0-e38}" + "\r\n" + 
				"c0-e40=string:homeAddress-province" + "\r\n" + 
				"c0-e41=string:" + "\r\n" + 
				"c0-e39=Object_Object:{id:reference:c0-e40, value:reference:c0-e41}" + "\r\n" + 
				"c0-e43=string:homeAddress-zip-code" + "\r\n" + 
				"c0-e44=string:" + "\r\n" + 
				"c0-e42=Object_Object:{id:reference:c0-e43, value:reference:c0-e44}" + "\r\n" + 
				"c0-e11=Array:[reference:c0-e12,reference:c0-e15,reference:c0-e18,reference:c0-e21,reference:c0-e24,reference:c0-e27,reference:c0-e30,reference:c0-e33,reference:c0-e36,reference:c0-e39,reference:c0-e42]" + "\r\n" + 
				"c0-e7=Object_Object:{actionType:reference:c0-e8, id:reference:c0-e9, lastModified:reference:c0-e10, fields:reference:c0-e11}" + "\r\n" + 
				"c0-e6=Array:[reference:c0-e7]" + "\r\n" + 
				"c0-e45=boolean:true" + "\r\n" + 
				"c0-e1=Object_Object:{elementType:reference:c0-e2, date:reference:c0-e3, actionType:reference:c0-e4, sectionId:reference:c0-e5, fieldsData:reference:c0-e6, lastModified:reference:c0-e45}" + "\r\n" + 
				"c0-param2=Array:[reference:c0-e1]" + "\r\n" + 
				"c0-param3=boolean:false" + "\r\n" + 
				"batchId=31";
		requestContent0250 = Lib.replaceTextPattern(requestContent0250, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0250 = Lib.replaceTextPattern(requestContent0250, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0250 = Lib.replaceTextPattern(requestContent0250, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0250_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0250 = new String(Lib.binaryReplace(requestContent0250.getBytes(), binarySearchPattern0250_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0250 = "POST " + requestFile0250 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001e32b821c-e702-4d75-812b-75c92b80102129820909-1501-babe-face-00000000000344332248-aa62-4e05-9f20-ca092ac6c022HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-8\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0250.length() + "\r\n" + 		// Content-Length: 2372
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0250, requestHost0250, requestPort0250, requestHeader0250, requestContent0250.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0250 = null;		// support garbage collector to reduce memory
		requestContent0250 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 519
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, ",status:'success',");		// Test [250] <- Index 250
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [251] <- WEB ADMIN Index 251 ---
		String requestProt0251 = "https";
		String requestHost0251 = "hcm4preview.sapsf.com";
		int    requestPort0251 = 443;
		String requestFile0251 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getPortletData.dwr";
		String requestContent0251 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getPortletData" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:ADDRESS_INFORMATION" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"c0-param1=string:SIT20018" + "\r\n" + 
				"c0-param2=string:2019-11-26" + "\r\n" + 
				"c0-param3=string:2019-11-26" + "\r\n" + 
				"batchId=32";
		requestContent0251 = Lib.replaceTextPattern(requestContent0251, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0251 = Lib.replaceTextPattern(requestContent0251, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0251 = Lib.replaceTextPattern(requestContent0251, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0251_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0251 = new String(Lib.binaryReplace(requestContent0251.getBytes(), binarySearchPattern0251_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0251 = "POST " + requestFile0251 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500016ca77203-5772-4a70-9520-f24a2d44d22329820909-1501-babe-face-0000000000031b8dd25b-c1f2-4aa4-bb20-b21c20a72227HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-8\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0251.length() + "\r\n" + 		// Content-Length: 426
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0251, requestHost0251, requestPort0251, requestHeader0251, requestContent0251.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0251 = null;		// support garbage collector to reduce memory
		requestContent0251 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 26083
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [251] <- Index 251
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_LastModified'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0251_1 = new BoundaryBasedExtractorItem( "s13.id=" , ";s13.lastModified=",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0251_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_LastModified'
			C_LastModified = boundaryBasedContentExtractorItem0251_1.getResultText();
			log("<<< C_LastModified = " + C_LastModified);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_LastModified!= null && C_LastModified.trim().length() == 0)
			{
				C_LastModified = "";
				log("runtime note: the extraction of a new value for the variable 'C_LastModified' ends up with an empty string - a substitute value was set");
				log("<<< C_LastModified = " + C_LastModified);
			}
		}
		catch (Exception e) { C_LastModified = null; log(e); }
		if (C_LastModified == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_LastModified' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [252] <- WEB ADMIN Index 252 ---
		String requestProt0252 = "https";
		String requestHost0252 = "hcm4preview.sapsf.com";
		int    requestPort0252 = 443;
		String requestFile0252 = "/perfLogServlet" +
				"?callId=1855092175-8" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=4330" +
				"&TIP=4878" +
				"&TML=5002" +
				"&TSL=5835" +
				"&ST=1574797162356" +
				"&ET=1574797163328" +
				"&MEM=47379" +
				"&NRE=135" +
				"&NWR=116" +
				"&SCPU=0" +
				"&SQLC=33" +
				"&SQLT=48" +
				"&SVT=281" +
				"&UCPU=160" +
				"&CPU=160" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=41" +
				"&cssNum=15" +
				"&renderTime=871" +
				"&TTB=30" +
				"&RSR=888" +
				"&DIA=1915" +
				"&DCP=4023";
		String requestContent0252 = 
				"OPTR_INFO=e32b821c-e702-4d75-812b-75c92b801021!1574797162356!1574797162761!0" +
				"&OPTR_INFO=6ca77203-5772-4a70-9520-f24a2d44d223!1574797162760!1574797163227!0";
		String requestHeader0252 = "POST " + requestFile0252 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-8\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0252.length() + "\r\n" + 		// Content-Length: 153
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0252, requestHost0252, requestPort0252, requestHeader0252, requestContent0252.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0252 = null;		// support garbage collector to reduce memory
		requestContent0252 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [252] <- Index 252
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #6 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #7: SelectAddressField
		// # ---------------------------



		// --- HTTP REQUEST: Test [254] <- WEB ADMIN Index 254 ---
		String requestProt0254 = "https";
		String requestHost0254 = "hcm4preview.sapsf.com";
		int    requestPort0254 = 443;
		String requestFile0254 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getDataForInsertNew.dwr";
		String requestContent0254 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getDataForInsertNew" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:ADDRESS_INFORMATION" + "\r\n" + 
				"c0-param1=string:SIT20018" + "\r\n" + 
				"c0-param2=string:2019-11-26" + "\r\n" + 
				"c0-param3=string:2019-11-26" + "\r\n" + 
				"batchId=33";
		requestContent0254 = Lib.replaceTextPattern(requestContent0254, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0254 = Lib.replaceTextPattern(requestContent0254, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0254 = Lib.replaceTextPattern(requestContent0254, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0254_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0254 = new String(Lib.binaryReplace(requestContent0254.getBytes(), binarySearchPattern0254_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0254 = "POST " + requestFile0254 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001edde82b1-5312-443d-bc29-701f235bf42a29820909-1501-babe-face-0000000000033b33f28a-2cd2-4d37-b026-828e25eff72dHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-9\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0254.length() + "\r\n" + 		// Content-Length: 401
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0254, requestHost0254, requestPort0254, requestHeader0254, requestContent0254.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0254 = null;		// support garbage collector to reduce memory
		requestContent0254 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 26112
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "modelLabel=\"Addresses\";");		// Test [254] <- Index 254
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [255] <- WEB ADMIN Index 255 ---
		String requestProt0255 = "https";
		String requestHost0255 = "hcm4preview.sapsf.com";
		int    requestPort0255 = 443;
		String requestFile0255 = "/xi/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.getEditConfigLayouts.dwr";
		String requestContent0255 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=employeeProfilePageConfigControllerProxy" + "\r\n" + 
				"c0-methodName=getEditConfigLayouts" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e2=null:null" + "\r\n" + 
				"c0-e3=string:country" + "\r\n" + 
				"c0-e4=null:null" + "\r\n" + 
				"c0-e6=string:AFG" + "\r\n" + 
				"c0-e5=Array:[reference:c0-e6]" + "\r\n" + 
				"c0-e7=string:ADDRESS_INFORMATION" + "\r\n" + 
				"c0-e1=Object_Object:{editableFieldConfigVO:reference:c0-e2, fieldId:reference:c0-e3, fieldValue:reference:c0-e4, fieldValues:reference:c0-e5, portletId:reference:c0-e7}" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"batchId=34";
		requestContent0255 = Lib.replaceTextPattern(requestContent0255, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0255_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0255 = new String(Lib.binaryReplace(requestContent0255.getBytes(), binarySearchPattern0255_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0255 = "POST " + requestFile0255 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001a7b7b2f1-eb32-41aa-b52f-ce1b2128382729820909-1501-babe-face-000000000003134892f8-7f32-4ce7-a62e-439c26ba8020HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-9\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0255.length() + "\r\n" + 		// Content-Length: 641
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0255, requestHost0255, requestPort0255, requestHeader0255, requestContent0255.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0255 = null;		// support garbage collector to reduce memory
		requestContent0255 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1045
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "\"homeAddress-address-type\"");		// Test [255] <- Index 255
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [256] <- WEB ADMIN Index 256 ---
		String requestProt0256 = "https";
		String requestHost0256 = "hcm4preview.sapsf.com";
		int    requestPort0256 = 443;
		String requestFile0256 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getSectionsForAlternateSet.dwr";
		String requestContent0256 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getSectionsForAlternateSet" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"c0-param1=string:2019-11-26" + "\r\n" + 
				"c0-param2=string:HOME_ADDRESS" + "\r\n" + 
				"c0-param3=null:null" + "\r\n" + 
				"c0-param4=null:null" + "\r\n" + 
				"c0-param5=null:null" + "\r\n" + 
				"batchId=35";
		requestContent0256 = Lib.replaceTextPattern(requestContent0256, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0256 = Lib.replaceTextPattern(requestContent0256, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0256 = Lib.replaceTextPattern(requestContent0256, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0256_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0256 = new String(Lib.binaryReplace(requestContent0256.getBytes(), binarySearchPattern0256_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0256 = "POST " + requestFile0256 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001849032ba-3132-41f5-942b-9dc32ca62b2a29820909-1501-babe-face-000000000003e42b8200-27c2-4481-8128-55a62bcf282bHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-9\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0256.length() + "\r\n" + 		// Content-Length: 433
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0256, requestHost0256, requestPort0256, requestHeader0256, requestContent0256.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0256 = null;		// support garbage collector to reduce memory
		requestContent0256 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 118
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [256] <- Index 256
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [257] <- WEB ADMIN Index 257 ---
		String requestProt0257 = "https";
		String requestHost0257 = "hcm4preview.sapsf.com";
		int    requestPort0257 = 443;
		String requestFile0257 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getSectionsForAlternateSet.dwr";
		String requestContent0257 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getSectionsForAlternateSet" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"c0-param1=string:2019-11-26" + "\r\n" + 
				"c0-param2=string:HOME_ADDRESS" + "\r\n" + 
				"c0-param3=string:home" + "\r\n" + 
				"c0-param4=string:AFG" + "\r\n" + 
				"c0-param5=null:null" + "\r\n" + 
				"batchId=36";
		requestContent0257 = Lib.replaceTextPattern(requestContent0257, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0257 = Lib.replaceTextPattern(requestContent0257, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0257 = Lib.replaceTextPattern(requestContent0257, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0257_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0257 = new String(Lib.binaryReplace(requestContent0257.getBytes(), binarySearchPattern0257_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0257 = "POST " + requestFile0257 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001588ea250-b4a2-4338-ad21-24a02765ac2229820909-1501-babe-face-000000000003be1eb2cb-4d82-4037-b22d-dbe52b72692fHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-9\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0257.length() + "\r\n" + 		// Content-Length: 436
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0257, requestHost0257, requestPort0257, requestHeader0257, requestContent0257.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0257 = null;		// support garbage collector to reduce memory
		requestContent0257 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 118
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [257] <- Index 257
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [258] <- WEB ADMIN Index 258 ---
		String requestProt0258 = "https";
		String requestHost0258 = "hcm4preview.sapsf.com";
		int    requestPort0258 = 443;
		String requestFile0258 = "/xi/ajax/remoting/call/plaincall/ecHelpControllerProxy.getHelp.dwr";
		String requestContent0258 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=ecHelpControllerProxy" + "\r\n" + 
				"c0-methodName=getHelp" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:ADDRESS_INFORMATION" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"batchId=37";
		requestContent0258 = Lib.replaceTextPattern(requestContent0258, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0258_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0258 = new String(Lib.binaryReplace(requestContent0258.getBytes(), binarySearchPattern0258_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0258 = "POST " + requestFile0258 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 010005000180adf20e-7ad2-41be-a129-ce3e24e1f12c29820909-1501-babe-face-000000000003f3e6a220-2112-4eaf-882e-f47d23b5ed2dHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-9\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0258.length() + "\r\n" + 		// Content-Length: 340
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0258, requestHost0258, requestPort0258, requestHeader0258, requestContent0258.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0258 = null;		// support garbage collector to reduce memory
		requestContent0258 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 519
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "status:'success");		// Test [258] <- Index 258
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [259] <- WEB ADMIN Index 259 ---
		String requestProt0259 = "https";
		String requestHost0259 = "hcm4preview.sapsf.com";
		int    requestPort0259 = 443;
		String requestFile0259 = "/xi/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.getBlockLink.dwr";
		String requestContent0259 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=employeeProfilePageConfigControllerProxy" + "\r\n" + 
				"c0-methodName=getBlockLink" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:block2618" + "\r\n" + 
				"batchId=38";
		requestContent0259 = Lib.replaceTextPattern(requestContent0259, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0259_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0259 = new String(Lib.binaryReplace(requestContent0259.getBytes(), binarySearchPattern0259_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0259 = "POST " + requestFile0259 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500013b1a027c-7632-495f-b32f-469426cd902429820909-1501-babe-face-0000000000034d6ca23b-6572-40dd-832a-6d8027d82b28HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-9\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0259.length() + "\r\n" + 		// Content-Length: 324
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0259, requestHost0259, requestPort0259, requestHeader0259, requestContent0259.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0259 = null;		// support garbage collector to reduce memory
		requestContent0259 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 116
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [259] <- Index 259
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [260] <- WEB ADMIN Index 260 ---
		String requestProt0260 = "https";
		String requestHost0260 = "hcm4preview.sapsf.com";
		int    requestPort0260 = 443;
		String requestFile0260 = "/perfLogServlet" +
				"?callId=1855092175-9" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=4330" +
				"&TIP=4878" +
				"&TML=5002" +
				"&TSL=5835" +
				"&ST=1574797179981" +
				"&ET=1574797181340" +
				"&MEM=35886" +
				"&NRE=38" +
				"&NWR=22" +
				"&SCPU=10" +
				"&SQLC=24" +
				"&SQLT=25" +
				"&SVT=252" +
				"&UCPU=120" +
				"&CPU=130" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=41" +
				"&cssNum=15" +
				"&renderTime=1259" +
				"&TTB=30" +
				"&RSR=888" +
				"&DIA=1915" +
				"&DCP=4023";
		String requestContent0260 = 
				"OPTR_INFO=26210275-9c32-4cfd-8422-c77a291e1c28!1574797179981!1574797180033!0" +
				"&OPTR_INFO=edde82b1-5312-443d-bc29-701f235bf42a!1574797179990!1574797180387!0" +
				"&OPTR_INFO=a7b7b2f1-eb32-41aa-b52f-ce1b21283827!1574797179992!1574797180117!0" +
				"&OPTR_INFO=849032ba-3132-41f5-942b-9dc32ca62b2a!1574797180385!1574797180572!0" +
				"&OPTR_INFO=588ea250-b4a2-4338-ad21-24a02765ac22!1574797180386!1574797181069!0" +
				"&OPTR_INFO=80adf20e-7ad2-41be-a129-ce3e24e1f12c!1574797180622!1574797181219!0" +
				"&OPTR_INFO=3b1a027c-7632-495f-b32f-469426cd9024!1574797181065!1574797181240!0";
		String requestHeader0260 = "POST " + requestFile0260 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-9\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0260.length() + "\r\n" + 		// Content-Length: 538
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0260, requestHost0260, requestPort0260, requestHeader0260, requestContent0260.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0260 = null;		// support garbage collector to reduce memory
		requestContent0260 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [260] <- Index 260
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #7 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #8.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_8(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #8: Save Delete
		// # --------------------



		// --- HTTP REQUEST: Test [262] <- WEB ADMIN Index 262 ---
		String requestProt0262 = "https";
		String requestHost0262 = "hcm4preview.sapsf.com";
		int    requestPort0262 = 443;
		String requestFile0262 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.save.dwr";
		String requestContent0262 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=save" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:SIT20018" + "\r\n" + 
				"c0-param1=string:2019-11-26" + "\r\n" + 
				"c0-e2=string:HOME_ADDRESS" + "\r\n" + 
				"c0-e3=string:2019-11-26" + "\r\n" + 
				"c0-e4=string:Edit" + "\r\n" + 
				"c0-e5=null:null" + "\r\n" + 
				"c0-e8=string:Delete" + "\r\n" + 
				"c0-e9=string:9706" + "\r\n" + 
				"c0-e10=boolean:true" + "\r\n" + 
				"c0-e11=boolean:true" + "\r\n" + 
				"c0-e7=Object_Object:{actionType:reference:c0-e8, id:reference:c0-e9, lastModified:reference:c0-e10, isDeleted:reference:c0-e11}" + "\r\n" + 
				"c0-e6=Array:[reference:c0-e7]" + "\r\n" + 
				"c0-e12=boolean:true" + "\r\n" + 
				"c0-e1=Object_Object:{elementType:reference:c0-e2, date:reference:c0-e3, actionType:reference:c0-e4, sectionId:reference:c0-e5, fieldsData:reference:c0-e6, lastModified:reference:c0-e12}" + "\r\n" + 
				"c0-param2=Array:[reference:c0-e1]" + "\r\n" + 
				"c0-param3=boolean:false" + "\r\n" + 
				"batchId=39";
		requestContent0262 = Lib.replaceTextPattern(requestContent0262, "9706", C_LastModified, 0);		// search and replace content fragment "9706" with variable 'C_LastModified' on all occurrences
		requestContent0262 = Lib.replaceTextPattern(requestContent0262, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0262 = Lib.replaceTextPattern(requestContent0262, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0262 = Lib.replaceTextPattern(requestContent0262, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0262_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0262 = new String(Lib.binaryReplace(requestContent0262.getBytes(), binarySearchPattern0262_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0262 = "POST " + requestFile0262 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500017c8f0290-ea62-4185-8e26-2b5d28c5232f29820909-1501-babe-face-00000000000314b4b216-f1a2-4a35-8d2e-943225a63321HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-10\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0262.length() + "\r\n" + 		// Content-Length: 905
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0262, requestHost0262, requestPort0262, requestHeader0262, requestContent0262.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0262 = null;		// support garbage collector to reduce memory
		requestContent0262 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 519
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "status:'success");		// Test [262] <- Index 262
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [263] <- WEB ADMIN Index 263 ---
		String requestProt0263 = "https";
		String requestHost0263 = "hcm4preview.sapsf.com";
		int    requestPort0263 = 443;
		String requestFile0263 = "/xi/ajax/remoting/call/plaincall/essControllerProxy.getPortletData.dwr";
		String requestContent0263 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423455" + "\r\n" + 
				"c0-scriptName=essControllerProxy" + "\r\n" + 
				"c0-methodName=getPortletData" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:ADDRESS_INFORMATION" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"c0-param1=string:SIT20018" + "\r\n" + 
				"c0-param2=string:2019-11-26" + "\r\n" + 
				"c0-param3=string:2019-11-26" + "\r\n" + 
				"batchId=40";
		requestContent0263 = Lib.replaceTextPattern(requestContent0263, "SIT20018", P_UserID, 0);		// search and replace content fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestContent0263 = Lib.replaceTextPattern(requestContent0263, "2019-11-26", C_TimeStamp, 0);		// search and replace content fragment "2019-11-26" with variable 'C_TimeStamp' on all occurrences
		requestContent0263 = Lib.replaceTextPattern(requestContent0263, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace content fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0263_0 = Base64Decoder.decodeToBytes("c05qJTI1MmJDOSUyNTJmb1BIS01FOGRRZ2NhJTI1MmJFdjJVeUk0JTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d
		requestContent0263 = new String(Lib.binaryReplace(requestContent0263.getBytes(), binarySearchPattern0263_0, java.net.URLEncoder.encode(C_AjaxsecKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0263 = "POST " + requestFile0263 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001959112d0-7012-4cb4-b321-f0fe2bd7b02429820909-1501-babe-face-00000000000355362218-7942-411b-8420-28d22a49a62aHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-10\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0263.length() + "\r\n" + 		// Content-Length: 426
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0263, requestHost0263, requestPort0263, requestHeader0263, requestContent0263.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0263 = null;		// support garbage collector to reduce memory
		requestContent0263 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 13234
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [263] <- Index 263
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [264] <- WEB ADMIN Index 264 ---
		String requestProt0264 = "https";
		String requestHost0264 = "hcm4preview.sapsf.com";
		int    requestPort0264 = 443;
		String requestFile0264 = "/perfLogServlet" +
				"?callId=1855092175-10" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=4330" +
				"&TIP=4878" +
				"&TML=5002" +
				"&TSL=5835" +
				"&ST=1574797216106" +
				"&ET=1574797217421" +
				"&MEM=216328" +
				"&NRE=52" +
				"&NWR=56" +
				"&SCPU=0" +
				"&SQLC=26" +
				"&SQLT=37" +
				"&SVT=295" +
				"&UCPU=230" +
				"&CPU=230" +
				"&FRE=11" +
				"&FWR=0" +
				"&jsNum=41" +
				"&cssNum=15" +
				"&renderTime=1213" +
				"&TTB=30" +
				"&RSR=888" +
				"&DIA=1915" +
				"&DCP=4023";
		String requestContent0264 = 
				"OPTR_INFO=7c8f0290-ea62-4185-8e26-2b5d28c5232f!1574797216106!1574797216824!0" +
				"&OPTR_INFO=959112d0-7012-4cb4-b321-f0fe2bd7b024!1574797216823!1574797217319!0";
		String requestHeader0264 = "POST " + requestFile0264 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-rb3abe15s-20191126143750-204688-10\r\n" + 
				"X-Ajax-Token: sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"X-SAP-Page-Info: companyId=tctest&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=SIT20018\r\n" + 
				"Content-Length: " + requestContent0264.length() + "\r\n" + 		// Content-Length: 153
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0264, requestHost0264, requestPort0264, requestHeader0264, requestContent0264.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0264 = null;		// support garbage collector to reduce memory
		requestContent0264 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [264] <- Index 264
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #8 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #9.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_9(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #9: SignOut
		// # ----------------



		// --- HTTP REQUEST: Test [266] <- WEB ADMIN Index 266 ---
		String requestProt0266 = "https";
		String requestHost0266 = "hcm4preview.sapsf.com";
		int    requestPort0266 = 443;
		String requestFile0266 = "/sf/idp/SAML2/slo" +
				"?_s.crb=" + C_AjaxsecKey;		// recorded value = sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d
		requestFile0266 = Lib.replaceTextPattern(requestFile0266, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey, 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0266 = Lib.replaceTextPattern(requestFile0266, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'vScrb' on all occurrences

		String requestContent0266 = 
				"LogoutUrl=https%3A%2F%2Ftctest-stage.plateau.com%2Flearning%2Fsaml%2FSSO" +
				"&company=tctest";
		String requestHeader0266 = "POST " + requestFile0266 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0266.length() + "\r\n" + 		// Content-Length: 87
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0266, requestHost0266, requestPort0266, requestHeader0266, requestContent0266.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0266 = null;		// support garbage collector to reduce memory
		requestContent0266 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2400
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "function getTimeoutPage(){return '/login?company=tctest';}");		// Test [266] <- Index 266
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLReq'
		ContentTokenExtractorItem contentTokenExtractorItem0266_1 = new ContentTokenExtractorItem("SAMLRequest", "\t\n\r \"(),{}", 2);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0266_1);

		// setup var extractor for 'C_Signature'
		ContentTokenExtractorItem contentTokenExtractorItem0266_2 = new ContentTokenExtractorItem("Signature", "\t\n\r \"(),{}", 2);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0266_2);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'C_SAMLReq'
			C_SAMLReq = contentTokenExtractorItem0266_1.getResultToken();
			log("<<< C_SAMLReq = " + C_SAMLReq);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLReq!= null && C_SAMLReq.trim().length() == 0)
			{
				C_SAMLReq = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLReq' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLReq = " + C_SAMLReq);
			}
		}
		catch (Exception e) { C_SAMLReq = null; log(e); }
		if (C_SAMLReq == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLReq' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Signature'
			C_Signature = contentTokenExtractorItem0266_2.getResultToken();
			log("<<< C_Signature = " + C_Signature);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Signature!= null && C_Signature.trim().length() == 0)
			{
				C_Signature = "";
				log("runtime note: the extraction of a new value for the variable 'C_Signature' ends up with an empty string - a substitute value was set");
				log("<<< C_Signature = " + C_Signature);
			}
		}
		catch (Exception e) { C_Signature = null; log(e); }
		if (C_Signature == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Signature' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [267] <- WEB ADMIN Index 267 ---
		String requestProt0267 = "https";
		String requestHost0267 = "hcm4preview.sapsf.com";
		int    requestPort0267 = 443;
		String requestFile0267 = "/sf/idp/SAML2/slo" +
				"?_s.crb=" + C_AjaxsecKey;		// recorded value = sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d
		requestFile0267 = Lib.replaceTextPattern(requestFile0267, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey, 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0267 = Lib.replaceTextPattern(requestFile0267, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'vScrb' on all occurrences

		String requestContent0267 = 
				"LogoutUrl=https%3A%2F%2Fmy030333.payroll.ondemand.com%2Fsap%2Fsaml2%2Fsp%2Fslo%2F200" +
				"&company=tctest";
		String requestHeader0267 = "POST " + requestFile0267 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0267.length() + "\r\n" + 		// Content-Length: 99
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0267, requestHost0267, requestPort0267, requestHeader0267, requestContent0267.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0267 = null;		// support garbage collector to reduce memory
		requestContent0267 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2419
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "function getTimeoutPage(){return '/login?company=tctest';}");		// Test [267] <- Index 267
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLReq2'
		ContentTokenExtractorItem contentTokenExtractorItem0267_1 = new ContentTokenExtractorItem("SAMLRequest", "\t\n\r \"(),{}", 2);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0267_1);

		// setup var extractor for 'C_Signature2'
		ContentTokenExtractorItem contentTokenExtractorItem0267_2 = new ContentTokenExtractorItem("Signature", "\t\n\r \"(),{}", 2);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0267_2);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'C_SAMLReq2'
			C_SAMLReq2 = contentTokenExtractorItem0267_1.getResultToken();
			log("<<< C_SAMLReq2 = " + C_SAMLReq2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLReq2!= null && C_SAMLReq2.trim().length() == 0)
			{
				C_SAMLReq2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLReq2' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLReq2 = " + C_SAMLReq2);
			}
		}
		catch (Exception e) { C_SAMLReq2 = null; log(e); }
		if (C_SAMLReq2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLReq2' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Signature2'
			C_Signature2 = contentTokenExtractorItem0267_2.getResultToken();
			log("<<< C_Signature2 = " + C_Signature2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Signature2!= null && C_Signature2.trim().length() == 0)
			{
				C_Signature2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Signature2' ends up with an empty string - a substitute value was set");
				log("<<< C_Signature2 = " + C_Signature2);
			}
		}
		catch (Exception e) { C_Signature2 = null; log(e); }
		if (C_Signature2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Signature2' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [268] <- WEB ADMIN Index 268 ---
		String requestProt0268 = "https";
		String requestHost0268 = "hcm4preview.sapsf.com";
		int    requestPort0268 = 443;
		String requestFile0268 = "/sf/idp/SAML2/slo" +
				"?_s.crb=" + C_AjaxsecKey;		// recorded value = sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d
		requestFile0268 = Lib.replaceTextPattern(requestFile0268, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey, 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0268 = Lib.replaceTextPattern(requestFile0268, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'vScrb' on all occurrences

		String requestContent0268 = 
				"LogoutUrl=https%3A%2F%2Fanalytics4preview.sapsf.com%2FProduction%2FHrmlLogout.aspx" +
				"&company=tctest";
		String requestHeader0268 = "POST " + requestFile0268 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0268.length() + "\r\n" + 		// Content-Length: 97
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0268, requestHost0268, requestPort0268, requestHeader0268, requestContent0268.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0268 = null;		// support garbage collector to reduce memory
		requestContent0268 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2414
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "function getTimeoutPage(){return '/login?company=tctest';}");		// Test [268] <- Index 268
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_Signature1'
		ContentTokenExtractorItem contentTokenExtractorItem0268_1 = new ContentTokenExtractorItem("Signature", "\t\n\r \"(),{}", 2);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0268_1);

		contentTokenExtractor.extractTokens();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLReq1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0268_1 = new BoundaryBasedExtractorItem( "SAMLRequest\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0268_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLReq1'
			C_SAMLReq1 = boundaryBasedContentExtractorItem0268_1.getResultText();
			log("<<< C_SAMLReq1 = " + C_SAMLReq1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLReq1!= null && C_SAMLReq1.trim().length() == 0)
			{
				C_SAMLReq1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLReq1' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLReq1 = " + C_SAMLReq1);
			}
		}
		catch (Exception e) { C_SAMLReq1 = null; log(e); }
		if (C_SAMLReq1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLReq1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Signature1'
			C_Signature1 = contentTokenExtractorItem0268_1.getResultToken();
			log("<<< C_Signature1 = " + C_Signature1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Signature1!= null && C_Signature1.trim().length() == 0)
			{
				C_Signature1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Signature1' ends up with an empty string - a substitute value was set");
				log("<<< C_Signature1 = " + C_Signature1);
			}
		}
		catch (Exception e) { C_Signature1 = null; log(e); }
		if (C_Signature1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Signature1' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [269] <- WEB ADMIN Index 269 ---
		String requestProt0269 = "https";
		String requestHost0269 = "hcm4preview.sapsf.com";
		int    requestPort0269 = 443;
		String requestFile0269 = "/sf/idp/SAML2/slo" +
				"?_s.crb=" + C_AjaxsecKey;		// recorded value = sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d
		requestFile0269 = Lib.replaceTextPattern(requestFile0269, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey, 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0269 = Lib.replaceTextPattern(requestFile0269, "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d" with variable 'vScrb' on all occurrences

		String requestContent0269 = 
				"LogoutUrl=https%3A%2F%2Fonboarding4preview.sapsf.com%2FONB%2FSSO%2FSAML20%2FSingleLogoutService.aspx" +
				"&company=tctest";
		String requestHeader0269 = "POST " + requestFile0269 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0269.length() + "\r\n" + 		// Content-Length: 115
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0269, requestHost0269, requestPort0269, requestHeader0269, requestContent0269.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0269 = null;		// support garbage collector to reduce memory
		requestContent0269 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2427
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "function getTimeoutPage(){return '/login?company=tctest';}");		// Test [269] <- Index 269
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_Signature3'
		ContentTokenExtractorItem contentTokenExtractorItem0269_1 = new ContentTokenExtractorItem("Signature", "\t\n\r \"(),{}", 2);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0269_1);

		// setup var extractor for 'C_SAMLReq3'
		ContentTokenExtractorItem contentTokenExtractorItem0269_2 = new ContentTokenExtractorItem("SAMLRequest", "\t\n\r \"(),={}", 2);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0269_2);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'C_Signature3'
			C_Signature3 = contentTokenExtractorItem0269_1.getResultToken();
			log("<<< C_Signature3 = " + C_Signature3);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Signature3!= null && C_Signature3.trim().length() == 0)
			{
				C_Signature3 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Signature3' ends up with an empty string - a substitute value was set");
				log("<<< C_Signature3 = " + C_Signature3);
			}
		}
		catch (Exception e) { C_Signature3 = null; log(e); }
		if (C_Signature3 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Signature3' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_SAMLReq3'
			C_SAMLReq3 = contentTokenExtractorItem0269_2.getResultToken();
			log("<<< C_SAMLReq3 = " + C_SAMLReq3);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLReq3!= null && C_SAMLReq3.trim().length() == 0)
			{
				C_SAMLReq3 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLReq3' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLReq3 = " + C_SAMLReq3);
			}
		}
		catch (Exception e) { C_SAMLReq3 = null; log(e); }
		if (C_SAMLReq3 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLReq3' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [270] <- WEB ADMIN Index 270 ---
		String requestProt0270 = "https";
		String requestHost0270 = "hcm4preview.sapsf.com";
		int    requestPort0270 = 443;
		String requestFile0270 = "/ui/uicore/css/xi_d41d8cd98f00b204e9800998ecf8427e.css";
		String requestHeader0270 = "GET " + requestFile0270 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0270, requestHost0270, requestPort0270, requestHeader0270, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0270 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [270] <- Index 270
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [271] <- WEB ADMIN Index 271 ---
		String requestProt0271 = "https";
		String requestHost0271 = "hcm4preview.sapsf.com";
		int    requestPort0271 = 443;
		String requestFile0271 = "/ui/uicore/css/xicommon_b2ba91d0973e2f2b556d59b67dfd2bc1.css";
		String requestHeader0271 = "GET " + requestFile0271 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0271, requestHost0271, requestPort0271, requestHeader0271, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0271 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 11785
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [271] <- Index 271
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [272] <- WEB ADMIN Index 272 ---
		String requestProt0272 = "https";
		String requestHost0272 = "hcm4preview.sapsf.com";
		int    requestPort0272 = 443;
		String requestFile0272 = "/ui/uicore/css/ext-custom_473ff6a53c9327806cfe3e6a15f6f177.css";
		String requestHeader0272 = "GET " + requestFile0272 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0272, requestHost0272, requestPort0272, requestHeader0272, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0272 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2075
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [272] <- Index 272
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [273] <- WEB ADMIN Index 273 ---
		String requestProt0273 = "https";
		String requestHost0273 = "hcm4preview.sapsf.com";
		int    requestPort0273 = 443;
		String requestFile0273 = "/ui/uicore/css/sysmsg_e5ae6c5bedbc0e4cac2f1ec64ce11153.css";
		String requestHeader0273 = "GET " + requestFile0273 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0273, requestHost0273, requestPort0273, requestHeader0273, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0273 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1136
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [273] <- Index 273
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [274] <- WEB ADMIN Index 274 ---
		String requestProt0274 = "https";
		String requestHost0274 = "ds-aksb-a.akamaihd.net";
		int    requestPort0274 = 443;
		String requestFile0274 = "/2/492962/b" +
				"?dE=0" +
				"&cS=1" +
				"&cE=1" +
				"&rqS=1" +
				"&rsS=3" +
				"&rsE=584" +
				"&sS=-72" +
				"&dl=585" +
				"&di=717" +
				"&fp=" +
				"&dlS=718" +
				"&dlE=719" +
				"&dc=725" +
				"&leS=725" +
				"&leE=728" +
				"&to=" +
				"&ol=0" +
				"&cr=7" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/sf/idp/SAML2/slo" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A70.0%29%20Gecko/20100101%20Firefox/70.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=23.36.3.39" +
				"&t=" +
				"&rid=42d43fc5" +
				"&r=34125" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=8ee60000" +
				"&akTX=1" +
				"&akTI=42d43fc5" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0274 = "GET " + requestFile0274 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0274, requestHost0274, requestPort0274, requestHeader0274, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0274 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: check size +/- 5%, defined content size = 0
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, 0, 5);		// Test [274] <- Index 274
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [275] <- WEB ADMIN Index 275 ---
		String requestProt0275 = "https";
		String requestHost0275 = "ds-aksb-a.akamaihd.net";
		int    requestPort0275 = 443;
		String requestFile0275 = "/2/492962/b" +
				"?dE=0" +
				"&cS=0" +
				"&cE=1" +
				"&rqS=2" +
				"&rsS=5" +
				"&rsE=374" +
				"&sS=-38" +
				"&dl=375" +
				"&di=581" +
				"&fp=" +
				"&dlS=588" +
				"&dlE=589" +
				"&dc=601" +
				"&leS=601" +
				"&leE=603" +
				"&to=" +
				"&ol=0" +
				"&cr=7" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/sf/idp/SAML2/slo" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A70.0%29%20Gecko/20100101%20Firefox/70.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=23.36.3.39" +
				"&t=" +
				"&rid=42d43f68" +
				"&r=34125" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=8ee60000" +
				"&akTX=1" +
				"&akTI=42d43f68" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0275 = "GET " + requestFile0275 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0275, requestHost0275, requestPort0275, requestHeader0275, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0275 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: check size +/- 5%, defined content size = 0
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, 0, 5);		// Test [275] <- Index 275
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [276] <- WEB ADMIN Index 276 ---
		String requestProt0276 = "https";
		String requestHost0276 = "ds-aksb-a.akamaihd.net";
		int    requestPort0276 = 443;
		String requestFile0276 = "/2/492962/b" +
				"?dE=0" +
				"&cS=0" +
				"&cE=0" +
				"&rqS=0" +
				"&rsS=3" +
				"&rsE=367" +
				"&sS=-59" +
				"&dl=368" +
				"&di=569" +
				"&fp=" +
				"&dlS=570" +
				"&dlE=571" +
				"&dc=584" +
				"&leS=584" +
				"&leE=588" +
				"&to=" +
				"&ol=0" +
				"&cr=7" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/sf/idp/SAML2/slo" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A70.0%29%20Gecko/20100101%20Firefox/70.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=23.36.3.39" +
				"&t=" +
				"&rid=42d43fa0" +
				"&r=34125" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=8ee60000" +
				"&akTX=1" +
				"&akTI=42d43fa0" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0276 = "GET " + requestFile0276 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0276, requestHost0276, requestPort0276, requestHeader0276, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0276 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: check size +/- 5%, defined content size = 0
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, 0, 5);		// Test [276] <- Index 276
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [277] <- WEB ADMIN Index 277 ---
		String requestProt0277 = "https";
		String requestHost0277 = "ds-aksb-a.akamaihd.net";
		int    requestPort0277 = 443;
		String requestFile0277 = "/2/492962/b" +
				"?dE=1" +
				"&cS=1" +
				"&cE=1" +
				"&rqS=1" +
				"&rsS=4" +
				"&rsE=97" +
				"&sS=-20" +
				"&dl=98" +
				"&di=588" +
				"&fp=" +
				"&dlS=594" +
				"&dlE=596" +
				"&dc=617" +
				"&leS=617" +
				"&leE=621" +
				"&to=" +
				"&ol=0" +
				"&cr=24" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/sf/idp/SAML2/slo" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A70.0%29%20Gecko/20100101%20Firefox/70.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=23.36.3.39" +
				"&t=" +
				"&rid=42d3be26" +
				"&r=34125" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=8ee60000" +
				"&akTX=1" +
				"&akTI=42d3be26" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0277 = "GET " + requestFile0277 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0277, requestHost0277, requestPort0277, requestHeader0277, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0277 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: check size +/- 5%, defined content size = 0
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, 0, 5);		// Test [277] <- Index 277
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [278] <- WEB ADMIN Index 278 ---
		log();
		log("# title: Login");
		String requestProt0278 = "https";
		String requestHost0278 = "tctest-stage.plateau.com";
		int    requestPort0278 = 443;
		String requestFile0278 = "/learning/saml/SSO" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLReq) +		// recorded value = nZJbb5tAEIX%2FCtpXi8tSY8PKOLLkuKUipDV2Ffml2iyDvRIsmFlo8u8LxI6SSM1DX89czplPs7h5KgujgwZlpUJCLYcYoESVSXUMyX63MX1ys1wgLwu3ZnF1rFq9hXMLqI1%2BUiF7KYWkbRSrOEpkipeATAuWru5i5loOq5tKV6IqiLHuB6XienQ7aV0js20tdC%2BbqPkRrLrgGnhriaq0C%2BCN6pPYg4mdpvfEiNYh%2BQ2B9xg8eo45A0%2BYUz%2F3TE4DMD1vPg%2F4jFOReX0rYguR6tcqHRLXoYFJqenOdjRgU4d9cS3XCQ7E2ALHIc5nFxTj5axFaIjx64qrr5ALHDa6NW%2BhfL6RY79r4ECWVw4nUU7rBjoJfyzkNeYjBMxtmdX2MOjavVBz9XxBtrDfel%2BTJL1XtP6fJMamakqu%2F91OLToqMjPzsZW1CmsQMpeQkWUa7VzHof4110uS1%2FdJAQdukcrgaXmYf9edzifdXHYa9Hx3NzlIPvGnXGZ%2B7Dw4SUv9TZrfbptnmWwOpwTPD%2FH0nCDw%2FWxC1z9LYTeH2%2Fbr%2FZ5Hq295TMWPVRhevD%2B4varvXnj5Fw%3D%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=" + java.net.URLEncoder.encode(C_Signature);		// recorded value = nxwor1X4Uv1H%2FEpPO2Ez%2FaRbfirhintA4XzE759eH9S6AogFWZrFkfqtdzWNMLnno%2Bat7bKWmMNmxONlb6wq6aRYTIGN9OrgvnWKcnrWFSvxts0YZ%2FvOFN8DjIauyXWdCoRUB6plO%2BxJhtyP45PhqUCmKxHdr%2FTHoTK30acP4Go%3D
		requestFile0278 = Lib.replaceTextPattern(requestFile0278, "nZJbb5tAEIX%2FCtpXi8tSY8PKOLLkuKUipDV2Ffml2iyDvRIsmFlo8u8LxI6SSM1DX89czplPs7h5KgujgwZlpUJCLYcYoESVSXUMyX63MX1ys1wgLwu3ZnF1rFq9hXMLqI1%2BUiF7KYWkbRSrOEpkipeATAuWru5i5loOq5tKV6IqiLHuB6XienQ7aV0js20tdC%2BbqPkRrLrgGnhriaq0C%2BCN6pPYg4mdpvfEiNYh%2BQ2B9xg8eo45A0%2BYUz%2F3TE4DMD1vPg%2F4jFOReX0rYguR6tcqHRLXoYFJqenOdjRgU4d9cS3XCQ7E2ALHIc5nFxTj5axFaIjx64qrr5ALHDa6NW%2BhfL6RY79r4ECWVw4nUU7rBjoJfyzkNeYjBMxtmdX2MOjavVBz9XxBtrDfel%2BTJL1XtP6fJMamakqu%2F91OLToqMjPzsZW1CmsQMpeQkWUa7VzHof4110uS1%2FdJAQdukcrgaXmYf9edzifdXHYa9Hx3NzlIPvGnXGZ%2B7Dw4SUv9TZrfbptnmWwOpwTPD%2FH0nCDw%2FWxC1z9LYTeH2%2Fbr%2FZ5Hq295TMWPVRhevD%2B4varvXnj5Fw%3D%3D", java.net.URLEncoder.encode(C_SAMLReq), 0);		// search and replace request file fragment "nZJbb5tAEIX%2FCtpXi8tSY8PKOLLkuKUipDV2Ffml2iyDvRIsmFlo8u8LxI6SSM1DX89czplPs7h5KgujgwZlpUJCLYcYoESVSXUMyX63MX1ys1wgLwu3ZnF1rFq9hXMLqI1%2BUiF7KYWkbRSrOEpkipeATAuWru5i5loOq5tKV6IqiLHuB6XienQ7aV0js20tdC%2BbqPkRrLrgGnhriaq0C%2BCN6pPYg4mdpvfEiNYh%2BQ2B9xg8eo45A0%2BYUz%2F3TE4DMD1vPg%2F4jFOReX0rYguR6tcqHRLXoYFJqenOdjRgU4d9cS3XCQ7E2ALHIc5nFxTj5axFaIjx64qrr5ALHDa6NW%2BhfL6RY79r4ECWVw4nUU7rBjoJfyzkNeYjBMxtmdX2MOjavVBz9XxBtrDfel%2BTJL1XtP6fJMamakqu%2F91OLToqMjPzsZW1CmsQMpeQkWUa7VzHof4110uS1%2FdJAQdukcrgaXmYf9edzifdXHYa9Hx3NzlIPvGnXGZ%2B7Dw4SUv9TZrfbptnmWwOpwTPD%2FH0nCDw%2FWxC1z9LYTeH2%2Fbr%2FZ5Hq295TMWPVRhevD%2B4varvXnj5Fw%3D%3D" with variable 'C_SAMLReq' on all occurrences
		requestFile0278 = Lib.replaceTextPattern(requestFile0278, "nxwor1X4Uv1H%2FEpPO2Ez%2FaRbfirhintA4XzE759eH9S6AogFWZrFkfqtdzWNMLnno%2Bat7bKWmMNmxONlb6wq6aRYTIGN9OrgvnWKcnrWFSvxts0YZ%2FvOFN8DjIauyXWdCoRUB6plO%2BxJhtyP45PhqUCmKxHdr%2FTHoTK30acP4Go%3D", java.net.URLEncoder.encode(C_Signature), 0);		// search and replace request file fragment "nxwor1X4Uv1H%2FEpPO2Ez%2FaRbfirhintA4XzE759eH9S6AogFWZrFkfqtdzWNMLnno%2Bat7bKWmMNmxONlb6wq6aRYTIGN9OrgvnWKcnrWFSvxts0YZ%2FvOFN8DjIauyXWdCoRUB6plO%2BxJhtyP45PhqUCmKxHdr%2FTHoTK30acP4Go%3D" with variable 'C_Signature' on all occurrences

		String requestHeader0278 = "GET " + requestFile0278 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: tctest-stage.plateau.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0278, requestHost0278, requestPort0278, requestHeader0278, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0278 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 525
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "You must correct the following error(s) before proceeding:");		// Test [278] <- Index 278
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		regExpBasedExtractor = new RegExpBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Mod5'
		RegExpBasedExtractorItem regExpBasedContentExtractorItem0278_1 = new RegExpBasedExtractorItem( "mod=(.*?)\" type=\"text/css\">" ,1,1,false,false,0,false);
		regExpBasedExtractor.addRegExpBasedExtractorItem(regExpBasedContentExtractorItem0278_1);

		regExpBasedExtractor.extractText();
		regExpBasedExtractor = new RegExpBasedExtractor(testURL.getHeaderString());

		regExpBasedExtractor.extractText();
		try
		{
			// extract var 'C_Mod5'
			C_Mod5 = regExpBasedContentExtractorItem0278_1.getResultText();
			log("<<< C_Mod5 = " + C_Mod5);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod5!= null && C_Mod5.trim().length() == 0)
			{
				C_Mod5 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod5' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod5 = " + C_Mod5);
			}
		}
		catch (Exception e) { C_Mod5 = null; log(e); }
		if (C_Mod5 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod5' from regexp based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [279] <- WEB ADMIN Index 279 ---
		String requestProt0279 = "https";
		String requestHost0279 = "tctest-stage.plateau.com";
		int    requestPort0279 = 443;
		String requestFile0279 = "/learning/user/css/styles.css;mod=c09d4043";
		requestFile0279 = Lib.replaceTextPattern(requestFile0279, "c09d4043", C_Mod5, 0);		// search and replace request file fragment "c09d4043" with variable 'C_Mod5' on all occurrences

		String requestHeader0279 = "GET " + requestFile0279 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: tctest-stage.plateau.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://tctest-stage.plateau.com/learning/saml/SSO?SAMLRequest=nZJbb5tAEIX%2FCtpXi8tSY8PKOLLkuKUipDV2Ffml2iyDvRIsmFlo8u8LxI6SSM1DX89czplPs7h5KgujgwZlpUJCLYcYoESVSXUMyX63MX1ys1wgLwu3ZnF1rFq9hXMLqI1%2BUiF7KYWkbRSrOEpkipeATAuWru5i5loOq5tKV6IqiLHuB6XienQ7aV0js20tdC%2BbqPkRrLrgGnhriaq0C%2BCN6pPYg4mdpvfEiNYh%2BQ2B9xg8eo45A0%2BYUz%2F3TE4DMD1vPg%2F4jFOReX0rYguR6tcqHRLXoYFJqenOdjRgU4d9cS3XCQ7E2ALHIc5nFxTj5axFaIjx64qrr5ALHDa6NW%2BhfL6RY79r4ECWVw4nUU7rBjoJfyzkNeYjBMxtmdX2MOjavVBz9XxBtrDfel%2BTJL1XtP6fJMamakqu%2F91OLToqMjPzsZW1CmsQMpeQkWUa7VzHof4110uS1%2FdJAQdukcrgaXmYf9edzifdXHYa9Hx3NzlIPvGnXGZ%2B7Dw4SUv9TZrfbptnmWwOpwTPD%2FH0nCDw%2FWxC1z9LYTeH2%2Fbr%2FZ5Hq295TMWPVRhevD%2B4varvXnj5Fw%3D%3D&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1&Signature=nxwor1X4Uv1H%2FEpPO2Ez%2FaRbfirhintA4XzE759eH9S6AogFWZrFkfqtdzWNMLnno%2Bat7bKWmMNmxONlb6wq6aRYTIGN9OrgvnWKcnrWFSvxts0YZ%2FvOFN8DjIauyXWdCoRUB6plO%2BxJhtyP45PhqUCmKxHdr%2FTHoTK30acP4Go%3D\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0279, requestHost0279, requestPort0279, requestHeader0279, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0279 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 29551
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [279] <- Index 279
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [280] <- WEB ADMIN Index 280 ---
		log();
		log("# title: Object moved");
		String requestProt0280 = "https";
		String requestHost0280 = "analytics4preview.sapsf.com";
		int    requestPort0280 = 443;
		String requestFile0280 = "/Production/HrmlLogout.aspx" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLReq1) +		// recorded value = nZJbb9swDIX%2FiqHXwBfZru0KcYoAaVYPadblMhR5GVSZbgTYkivKafLv5yRN0Q1bH%2FZKHvIcfuDwZt%2FUzg4MSq1yQr2AOKCELqV6zsl6NXUzcjMaIm%2FqsGUz%2Faw7u4CXDtA6%2FaRCdm7lpDOKaY4SmeINILOCLcf3MxZ6AWuNtlromjiTflAqbk9uW2tbZL7PFa8PVgqMWwM7Ca8e8hYrT%2BjGfzC67MRR79%2BZpj4n8Di2e%2BIUk5z8pFEJIETpVhEkbpxdBS5%2FSp%2FcKEkBkjitkijqpYgdFAotVzYnYUCvXUrdMFnRaxYHLAq9K5puiLMAjsdon11TnzKwDsEQ58cFXd8hb6DYyc18BPT5Ro79ruONZHRhshXNX2hg5cuy9Y%2BDod8XWq4OvhW2pzr0P3pfksx7r2LyP0mcqTYNt%2F%2BWU4%2BeKrJHf5KyTmELQlYSSjJaFqswCGh2yXVO8v5KS8Ajt0KVsB9t0q92Z6vBLpU7CzZd3Q82kg%2BymMsymwWPwbyj2XRZ3S7MQc6nm%2B0cXx5n8cscga%2BTAZ18b4RvNrfdl29rXozvqhkVD%2BM8f%2FP%2Bw%2B29%2Bts7j34B
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=" + java.net.URLEncoder.encode(C_Signature1);		// recorded value = azOwIh3EZ7PSBmtw%2F5Gca96xjGvjk6szYfcvE47MymQZ0AIZBRCual%2Ftj2oEH9MysklceqkNLy0tjcBMClTuxwUGVEu1zl68iuWj%2Fk9CLc0MuEzaUPZGsZhTMWVbd7h15DXmOKEP34dZTRLPPszwiz8sbrJjBIdtMUjf3AW%2F%2BGI%3D
		requestFile0280 = Lib.replaceTextPattern(requestFile0280, "nZJbb9swDIX%2FiqHXwBfZru0KcYoAaVYPadblMhR5GVSZbgTYkivKafLv5yRN0Q1bH%2FZKHvIcfuDwZt%2FUzg4MSq1yQr2AOKCELqV6zsl6NXUzcjMaIm%2FqsGUz%2Faw7u4CXDtA6%2FaRCdm7lpDOKaY4SmeINILOCLcf3MxZ6AWuNtlromjiTflAqbk9uW2tbZL7PFa8PVgqMWwM7Ca8e8hYrT%2BjGfzC67MRR79%2BZpj4n8Di2e%2BIUk5z8pFEJIETpVhEkbpxdBS5%2FSp%2FcKEkBkjitkijqpYgdFAotVzYnYUCvXUrdMFnRaxYHLAq9K5puiLMAjsdon11TnzKwDsEQ58cFXd8hb6DYyc18BPT5Ro79ruONZHRhshXNX2hg5cuy9Y%2BDod8XWq4OvhW2pzr0P3pfksx7r2LyP0mcqTYNt%2F%2BWU4%2BeKrJHf5KyTmELQlYSSjJaFqswCGh2yXVO8v5KS8Ajt0KVsB9t0q92Z6vBLpU7CzZd3Q82kg%2BymMsymwWPwbyj2XRZ3S7MQc6nm%2B0cXx5n8cscga%2BTAZ18b4RvNrfdl29rXozvqhkVD%2BM8f%2FP%2Bw%2B29%2Bts7j34B", java.net.URLEncoder.encode(C_SAMLReq1), 0);		// search and replace request file fragment "nZJbb9swDIX%2FiqHXwBfZru0KcYoAaVYPadblMhR5GVSZbgTYkivKafLv5yRN0Q1bH%2FZKHvIcfuDwZt%2FUzg4MSq1yQr2AOKCELqV6zsl6NXUzcjMaIm%2FqsGUz%2Faw7u4CXDtA6%2FaRCdm7lpDOKaY4SmeINILOCLcf3MxZ6AWuNtlromjiTflAqbk9uW2tbZL7PFa8PVgqMWwM7Ca8e8hYrT%2BjGfzC67MRR79%2BZpj4n8Di2e%2BIUk5z8pFEJIETpVhEkbpxdBS5%2FSp%2FcKEkBkjitkijqpYgdFAotVzYnYUCvXUrdMFnRaxYHLAq9K5puiLMAjsdon11TnzKwDsEQ58cFXd8hb6DYyc18BPT5Ro79ruONZHRhshXNX2hg5cuy9Y%2BDod8XWq4OvhW2pzr0P3pfksx7r2LyP0mcqTYNt%2F%2BWU4%2BeKrJHf5KyTmELQlYSSjJaFqswCGh2yXVO8v5KS8Ajt0KVsB9t0q92Z6vBLpU7CzZd3Q82kg%2BymMsymwWPwbyj2XRZ3S7MQc6nm%2B0cXx5n8cscga%2BTAZ18b4RvNrfdl29rXozvqhkVD%2BM8f%2FP%2Bw%2B29%2Bts7j34B" with variable 'C_SAMLReq1' on all occurrences
		requestFile0280 = Lib.replaceTextPattern(requestFile0280, "azOwIh3EZ7PSBmtw%2F5Gca96xjGvjk6szYfcvE47MymQZ0AIZBRCual%2Ftj2oEH9MysklceqkNLy0tjcBMClTuxwUGVEu1zl68iuWj%2Fk9CLc0MuEzaUPZGsZhTMWVbd7h15DXmOKEP34dZTRLPPszwiz8sbrJjBIdtMUjf3AW%2F%2BGI%3D", java.net.URLEncoder.encode(C_Signature1), 0);		// search and replace request file fragment "azOwIh3EZ7PSBmtw%2F5Gca96xjGvjk6szYfcvE47MymQZ0AIZBRCual%2Ftj2oEH9MysklceqkNLy0tjcBMClTuxwUGVEu1zl68iuWj%2Fk9CLc0MuEzaUPZGsZhTMWVbd7h15DXmOKEP34dZTRLPPszwiz8sbrJjBIdtMUjf3AW%2F%2BGI%3D" with variable 'C_Signature1' on all occurrences

		String requestHeader0280 = "GET " + requestFile0280 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0280, requestHost0280, requestPort0280, requestHeader0280, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0280 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 2081
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [280] <- Index 280
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [281] <- WEB ADMIN Index 281 ---
		String requestProt0281 = "https";
		String requestHost0281 = "my030333.payroll.ondemand.com";
		int    requestPort0281 = 443;
		String requestFile0281 = "/sap/saml2/sp/slo/200" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLReq2) +		// recorded value = nZJdb5swFIb%2FCvJtBMZAEmIFqkhpNqaUbfmYKm4my5jGEtiEY7Lm388hTdVWWi92Z52v9z3P8fzuuamdk%2BhAapUg4vnIEYrrUqqnBO13KzdGd%2BkcWFMHLV3rJ92bjTj2AoxjOxXQaypBfaeoZiCBKtYIoIbT7eJhTQPPp22njea6Rs7SNkrFzKB2MKYFinFz9kM%2FDEOvZedO17WnVSkapkqP6wYDa%2FEggsE%2Bao0D35rMlgn6PSZlyUVYuSEnsRuFbOLOyFS4Ycwn44j5Y0EmthSgF5kCw5RJUOCTmUuIG0x2ZEYjn4aBF83GBXI2gsHF1meb1AMB2oPokPPrhs1m0AskOqh1b%2BF8PpGBnXXhgdIbjwNvorYTJyn%2BeHZ7qK4cKizLFl8aA2wDLVNnbLixROf4rfbNSW61suX%2FOHFWumuY%2BXc58cgQkaVbDaW0V9AKLispSpRus509Eolvvq5OXr%2FRVsCFW2av%2FJwW02%2FmZKrRaSpPRpjp7mFUSDaKIybLeO0%2F%2BnlP4tW2ut90Z5mvikMOx8d1dMxBsP1kRJY%2FG4674r7%2F8n3PssXXak34j0WSvGh%2FUHuNvvvK6V8%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=" + java.net.URLEncoder.encode(C_Signature2);		// recorded value = a87375Cm1zjJvQl%2F%2BdIR4nUywasSRDwtWVATHvfGyrpfWw4ArXpaIjouZsg%2FNzZlDrMQyJ6OxYu6wbc%2Fm6jU8TgTORE42pJoKgfL4YkMGbrVnIzD7I0KXMH0H5H%2B3gEelLIBF%2Bz4Ho73utVZBQFP%2FDdJdFOtT3nQVOvzuMYRhSU%3D
		requestFile0281 = Lib.replaceTextPattern(requestFile0281, "nZJdb5swFIb%2FCvJtBMZAEmIFqkhpNqaUbfmYKm4my5jGEtiEY7Lm388hTdVWWi92Z52v9z3P8fzuuamdk%2BhAapUg4vnIEYrrUqqnBO13KzdGd%2BkcWFMHLV3rJ92bjTj2AoxjOxXQaypBfaeoZiCBKtYIoIbT7eJhTQPPp22njea6Rs7SNkrFzKB2MKYFinFz9kM%2FDEOvZedO17WnVSkapkqP6wYDa%2FEggsE%2Bao0D35rMlgn6PSZlyUVYuSEnsRuFbOLOyFS4Ycwn44j5Y0EmthSgF5kCw5RJUOCTmUuIG0x2ZEYjn4aBF83GBXI2gsHF1meb1AMB2oPokPPrhs1m0AskOqh1b%2BF8PpGBnXXhgdIbjwNvorYTJyn%2BeHZ7qK4cKizLFl8aA2wDLVNnbLixROf4rfbNSW61suX%2FOHFWumuY%2BXc58cgQkaVbDaW0V9AKLispSpRus509Eolvvq5OXr%2FRVsCFW2av%2FJwW02%2FmZKrRaSpPRpjp7mFUSDaKIybLeO0%2F%2BnlP4tW2ut90Z5mvikMOx8d1dMxBsP1kRJY%2FG4674r7%2F8n3PssXXak34j0WSvGh%2FUHuNvvvK6V8%3D", java.net.URLEncoder.encode(C_SAMLReq2), 0);		// search and replace request file fragment "nZJdb5swFIb%2FCvJtBMZAEmIFqkhpNqaUbfmYKm4my5jGEtiEY7Lm388hTdVWWi92Z52v9z3P8fzuuamdk%2BhAapUg4vnIEYrrUqqnBO13KzdGd%2BkcWFMHLV3rJ92bjTj2AoxjOxXQaypBfaeoZiCBKtYIoIbT7eJhTQPPp22njea6Rs7SNkrFzKB2MKYFinFz9kM%2FDEOvZedO17WnVSkapkqP6wYDa%2FEggsE%2Bao0D35rMlgn6PSZlyUVYuSEnsRuFbOLOyFS4Ycwn44j5Y0EmthSgF5kCw5RJUOCTmUuIG0x2ZEYjn4aBF83GBXI2gsHF1meb1AMB2oPokPPrhs1m0AskOqh1b%2BF8PpGBnXXhgdIbjwNvorYTJyn%2BeHZ7qK4cKizLFl8aA2wDLVNnbLixROf4rfbNSW61suX%2FOHFWumuY%2BXc58cgQkaVbDaW0V9AKLispSpRus509Eolvvq5OXr%2FRVsCFW2av%2FJwW02%2FmZKrRaSpPRpjp7mFUSDaKIybLeO0%2F%2BnlP4tW2ut90Z5mvikMOx8d1dMxBsP1kRJY%2FG4674r7%2F8n3PssXXak34j0WSvGh%2FUHuNvvvK6V8%3D" with variable 'C_SAMLReq2' on all occurrences
		requestFile0281 = Lib.replaceTextPattern(requestFile0281, "a87375Cm1zjJvQl%2F%2BdIR4nUywasSRDwtWVATHvfGyrpfWw4ArXpaIjouZsg%2FNzZlDrMQyJ6OxYu6wbc%2Fm6jU8TgTORE42pJoKgfL4YkMGbrVnIzD7I0KXMH0H5H%2B3gEelLIBF%2Bz4Ho73utVZBQFP%2FDdJdFOtT3nQVOvzuMYRhSU%3D", java.net.URLEncoder.encode(C_Signature2), 0);		// search and replace request file fragment "a87375Cm1zjJvQl%2F%2BdIR4nUywasSRDwtWVATHvfGyrpfWw4ArXpaIjouZsg%2FNzZlDrMQyJ6OxYu6wbc%2Fm6jU8TgTORE42pJoKgfL4YkMGbrVnIzD7I0KXMH0H5H%2B3gEelLIBF%2Bz4Ho73utVZBQFP%2FDdJdFOtT3nQVOvzuMYRhSU%3D" with variable 'C_Signature2' on all occurrences

		String requestHeader0281 = "GET " + requestFile0281 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: my030333.payroll.ondemand.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0281, requestHost0281, requestPort0281, requestHeader0281, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0281 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2672
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Since your browser does notsupport JavaScript, you must press the Continuebutton once to");		// Test [281] <- Index 281
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [282] <- WEB ADMIN Index 282 ---
		log();
		log("# title: Onboarding");
		String requestProt0282 = "https";
		String requestHost0282 = "onboarding4preview.sapsf.com";
		int    requestPort0282 = 443;
		String requestFile0282 = "/ONB/SSO/SAML20/SingleLogoutService.aspx" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLReq3) +		// recorded value = nZLdjtowEIVfJfItSmyHv2ARVlQsbSo2tASqFTeVcSaLJWIH28myb98Ay2pbtXvR25kzc858mvHdqTx4DRgrtYoRDQjyQAmdS%2FUUo8167kfobjK2vDyEFVvoJ127FRxrsM5rJ5Vl11aMaqOY5lZapngJljnBsunDgoUBYZXRTgt9QN6sHZSKu4vb3rnKMoy12mluzpa9ykAj4TmwvLJFIHSJl%2BknnGVLfF4WEpy1qgNcg2RgGikg4LY6IS%2BZxegnzSPod3ddP6RD4ff4jvgjGAgfchB9yMNcENpKra0hUdZx5WIUEjryKfXDwZqOWI%2Bwbhj0I7JF3gq4PQf96LbDJQqrLRjk%2FbiBbDvoFRu7uJn3uD7eyG2760wITW6E9qL8CxpbYJlXVzK4LVRcvWAnXMt4jN9735KkrVcy%2B58k3lybkrt%2Fy2lALxWZ%2B8VFymplKxCykJCjSZasQ0JodMt1TfL2WBnYM7dE5XCabIdfXeOKTjOUjQM3XD90tpJ3oh6XebQgjyStaTTPivuVeZHpfLtP7fFx0TumFvhm0KGz76XAZntff15ueDL9Uiyo%2BDaN41fvP9zeqr899%2BQX
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=" + java.net.URLEncoder.encode(C_Signature3);		// recorded value = idVdYbchh8HBCE66HZrQ1rKzWSnWrDic3cQ4%2BhF0s0eMBvqf2efreLwG3XQJk7m2ay0DrhdHOdsXdv1cQR%2BK9EPwB%2BA8vzHbup1zA2V2SIS16TCcAPB3nvXO50MnRdQ%2Brrg6mJHPzXv8sRDqMq07k1JqUAOT%2F%2FdP5hTvgG577Ow%3D
		requestFile0282 = Lib.replaceTextPattern(requestFile0282, "idVdYbchh8HBCE66HZrQ1rKzWSnWrDic3cQ4%2BhF0s0eMBvqf2efreLwG3XQJk7m2ay0DrhdHOdsXdv1cQR%2BK9EPwB%2BA8vzHbup1zA2V2SIS16TCcAPB3nvXO50MnRdQ%2Brrg6mJHPzXv8sRDqMq07k1JqUAOT%2F%2FdP5hTvgG577Ow%3D", java.net.URLEncoder.encode(C_Signature3), 0);		// search and replace request file fragment "idVdYbchh8HBCE66HZrQ1rKzWSnWrDic3cQ4%2BhF0s0eMBvqf2efreLwG3XQJk7m2ay0DrhdHOdsXdv1cQR%2BK9EPwB%2BA8vzHbup1zA2V2SIS16TCcAPB3nvXO50MnRdQ%2Brrg6mJHPzXv8sRDqMq07k1JqUAOT%2F%2FdP5hTvgG577Ow%3D" with variable 'C_Signature3' on all occurrences
		requestFile0282 = Lib.replaceTextPattern(requestFile0282, "nZLdjtowEIVfJfItSmyHv2ARVlQsbSo2tASqFTeVcSaLJWIH28myb98Ay2pbtXvR25kzc858mvHdqTx4DRgrtYoRDQjyQAmdS%2FUUo8167kfobjK2vDyEFVvoJ127FRxrsM5rJ5Vl11aMaqOY5lZapngJljnBsunDgoUBYZXRTgt9QN6sHZSKu4vb3rnKMoy12mluzpa9ykAj4TmwvLJFIHSJl%2BknnGVLfF4WEpy1qgNcg2RgGikg4LY6IS%2BZxegnzSPod3ddP6RD4ff4jvgjGAgfchB9yMNcENpKra0hUdZx5WIUEjryKfXDwZqOWI%2Bwbhj0I7JF3gq4PQf96LbDJQqrLRjk%2FbiBbDvoFRu7uJn3uD7eyG2760wITW6E9qL8CxpbYJlXVzK4LVRcvWAnXMt4jN9735KkrVcy%2B58k3lybkrt%2Fy2lALxWZ%2B8VFymplKxCykJCjSZasQ0JodMt1TfL2WBnYM7dE5XCabIdfXeOKTjOUjQM3XD90tpJ3oh6XebQgjyStaTTPivuVeZHpfLtP7fFx0TumFvhm0KGz76XAZntff15ueDL9Uiyo%2BDaN41fvP9zeqr899%2BQX", java.net.URLEncoder.encode(C_SAMLReq3), 0);		// search and replace request file fragment "nZLdjtowEIVfJfItSmyHv2ARVlQsbSo2tASqFTeVcSaLJWIH28myb98Ay2pbtXvR25kzc858mvHdqTx4DRgrtYoRDQjyQAmdS%2FUUo8167kfobjK2vDyEFVvoJ127FRxrsM5rJ5Vl11aMaqOY5lZapngJljnBsunDgoUBYZXRTgt9QN6sHZSKu4vb3rnKMoy12mluzpa9ykAj4TmwvLJFIHSJl%2BknnGVLfF4WEpy1qgNcg2RgGikg4LY6IS%2BZxegnzSPod3ddP6RD4ff4jvgjGAgfchB9yMNcENpKra0hUdZx5WIUEjryKfXDwZqOWI%2Bwbhj0I7JF3gq4PQf96LbDJQqrLRjk%2FbiBbDvoFRu7uJn3uD7eyG2760wITW6E9qL8CxpbYJlXVzK4LVRcvWAnXMt4jN9735KkrVcy%2B58k3lybkrt%2Fy2lALxWZ%2B8VFymplKxCykJCjSZasQ0JodMt1TfL2WBnYM7dE5XCabIdfXeOKTjOUjQM3XD90tpJ3oh6XebQgjyStaTTPivuVeZHpfLtP7fFx0TumFvhm0KGz76XAZntff15ueDL9Uiyo%2BDaN41fvP9zeqr899%2BQX" with variable 'C_SAMLReq3' on all occurrences

		String requestHeader0282 = "GET " + requestFile0282 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0282, requestHost0282, requestPort0282, requestHeader0282, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0282 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1167
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "var topMostFrame = getTopmostFrame();");		// Test [282] <- Index 282
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [283] <- WEB ADMIN Index 283 ---
		String requestProt0283 = "https";
		String requestHost0283 = "hcm4preview.sapsf.com";
		int    requestPort0283 = 443;
		String requestFile0283 = "/sf/idp/SAML2/slo/POST";
		String requestContent0283 = 
				"SAMLResponse=PHNhbWxwOkxvZ291dFJlc3BvbnNlIElEPSJTMDAxNjNlNmMtNTE4OC0xZWVhLTg0OTAtOTM5MmRlYWZmMjQ1IiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAxOS0xMS0yNlQxOTo0MDozM1oiIEluUmVzcG9uc2VUbz0iXzUxZGRjZTNmLTNjMTgtNDNhNi05MTdlLTM4YzY1NGEwNWUxNiIgRGVzdGluYXRpb249Imh0dHBzOi8vaGNtNHByZXZpZXcuc2Fwc2YuY29tL3NmL2lkcC9TQU1MMi9zbG8vUE9TVCIgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCI%2BPHNhbWw6SXNzdWVyIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPlhPQ0NMMjAwPC9zYW1sOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI1MwMDE2M2U2Yy01MTg4LTFlZWEtODQ5MC05MzkyZGVhZmYyNDUiPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybXM%2BPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8%2BPGRzOkRpZ2VzdFZhbHVlPmFCczl5aDFuZEZQZUgxOUNzQnEvekN6b3V1UT08L2RzOkRpZ2VzdFZhbHVlPjwvZHM6UmVmZXJlbmNlPjwvZHM6U2lnbmVkSW5mbz48ZHM6U2lnbmF0dXJlVmFsdWU%2BbENqUEYzbnVDcDVPVDJoNUdGc0xyb0NOM2VDNllMMDhBWFpaczdNcW1HVlVVMUtMVU1ZSVJFemo3UmlON3VNbEtNZFI3ZnFiN2ZBbgpmYzlQNkxncDB6cDd2VGdycUp2VjBMeHJVZlA3aHk0YngwOHlIUld3N0ZJVHlTQ2E0YkdDTDV6M29wT29QY04vd05mZVhFNjdKcDY3Cko2MDBiV2loRUZkTG8vbi9NSzJkYWlndzlDRnAwYmc1THkva294b0xUamQ4Rm5NRmJEY1RrcVlxSHVkakRyZFg4dDhCN3VmUkFxK0gKeU1xSlhVQk1rdENkbjFpV28rS29HQ2lTeXJvVDczVWxER0xoeG5wWVN2ZWxrZlpXRGNiN0ZpVGJSazNNamFVQ0plcnMwc0NWUnpRbwo2ejNFYVZyYnBjVDVreHBBRFlQbGtKbEFyYlBLYlc4ajRKZDgzUT09PC9kczpTaWduYXR1cmVWYWx1ZT48L2RzOlNpZ25hdHVyZT48c2FtbHA6U3RhdHVzPjxzYW1scDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlJlc3BvbmRlciIvPjxzYW1scDpTdGF0dXNNZXNzYWdlPkFuIGV4Y2VwdGlvbiB3YXMgcmFpc2VkPC9zYW1scDpTdGF0dXNNZXNzYWdlPjwvc2FtbHA6U3RhdHVzPjwvc2FtbHA6TG9nb3V0UmVzcG9uc2U%2B";
		String requestHeader0283 = "POST " + requestFile0283 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0283.length() + "\r\n" + 		// Content-Length: 2147
				"Origin: https://my030333.payroll.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://my030333.payroll.ondemand.com/sap/saml2/sp/slo/200?SAMLRequest=nZJdb5swFIb%2FCvJtBMZAEmIFqkhpNqaUbfmYKm4my5jGEtiEY7Lm388hTdVWWi92Z52v9z3P8fzuuamdk%2BhAapUg4vnIEYrrUqqnBO13KzdGd%2BkcWFMHLV3rJ92bjTj2AoxjOxXQaypBfaeoZiCBKtYIoIbT7eJhTQPPp22njea6Rs7SNkrFzKB2MKYFinFz9kM%2FDEOvZedO17WnVSkapkqP6wYDa%2FEggsE%2Bao0D35rMlgn6PSZlyUVYuSEnsRuFbOLOyFS4Ycwn44j5Y0EmthSgF5kCw5RJUOCTmUuIG0x2ZEYjn4aBF83GBXI2gsHF1meb1AMB2oPokPPrhs1m0AskOqh1b%2BF8PpGBnXXhgdIbjwNvorYTJyn%2BeHZ7qK4cKizLFl8aA2wDLVNnbLixROf4rfbNSW61suX%2FOHFWumuY%2BXc58cgQkaVbDaW0V9AKLispSpRus509Eolvvq5OXr%2FRVsCFW2av%2FJwW02%2FmZKrRaSpPRpjp7mFUSDaKIybLeO0%2F%2BnlP4tW2ut90Z5mvikMOx8d1dMxBsP1kRJY%2FG4674r7%2F8n3PssXXak34j0WSvGh%2FUHuNvvvK6V8%3D&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1&Signature=a87375Cm1zjJvQl%2F%2BdIR4nUywasSRDwtWVATHvfGyrpfWw4ArXpaIjouZsg%2FNzZlDrMQyJ6OxYu6wbc%2Fm6jU8TgTORE42pJoKgfL4YkMGbrVnIzD7I0KXMH0H5H%2B3gEelLIBF%2Bz4Ho73utVZBQFP%2FDdJdFOtT3nQVOvzuMYRhSU%3D\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0283, requestHost0283, requestPort0283, requestHeader0283, requestContent0283.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0283 = null;		// support garbage collector to reduce memory
		requestContent0283 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1649
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "TopNavLogout = window.parent.TopNavLogout;");		// Test [283] <- Index 283
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [284] <- WEB ADMIN Index 284 ---
		String requestProt0284 = "https";
		String requestHost0284 = "onboarding4preview.sapsf.com";
		int    requestPort0284 = 443;
		String requestFile0284 = "/ONB/bundles/scripts.ashx" +
				"?v=Ye0GVzAGWJJVMVMUaiZZNufK1k33jqWpCRPLgjY4BfM1";
		String requestHeader0284 = "GET " + requestFile0284 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/SSO/SAML20/SingleLogoutService.aspx?SAMLRequest=nZLdjtowEIVfJfItSmyHv2ARVlQsbSo2tASqFTeVcSaLJWIH28myb98Ay2pbtXvR25kzc858mvHdqTx4DRgrtYoRDQjyQAmdS%2FUUo8167kfobjK2vDyEFVvoJ127FRxrsM5rJ5Vl11aMaqOY5lZapngJljnBsunDgoUBYZXRTgt9QN6sHZSKu4vb3rnKMoy12mluzpa9ykAj4TmwvLJFIHSJl%2BknnGVLfF4WEpy1qgNcg2RgGikg4LY6IS%2BZxegnzSPod3ddP6RD4ff4jvgjGAgfchB9yMNcENpKra0hUdZx5WIUEjryKfXDwZqOWI%2Bwbhj0I7JF3gq4PQf96LbDJQqrLRjk%2FbiBbDvoFRu7uJn3uD7eyG2760wITW6E9qL8CxpbYJlXVzK4LVRcvWAnXMt4jN9735KkrVcy%2B58k3lybkrt%2Fy2lALxWZ%2B8VFymplKxCykJCjSZasQ0JodMt1TfL2WBnYM7dE5XCabIdfXeOKTjOUjQM3XD90tpJ3oh6XebQgjyStaTTPivuVeZHpfLtP7fFx0TumFvhm0KGz76XAZntff15ueDL9Uiyo%2BDaN41fvP9zeqr899%2BQX&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1&Signature=idVdYbchh8HBCE66HZrQ1rKzWSnWrDic3cQ4%2BhF0s0eMBvqf2efreLwG3XQJk7m2ay0DrhdHOdsXdv1cQR%2BK9EPwB%2BA8vzHbup1zA2V2SIS16TCcAPB3nvXO50MnRdQ%2Brrg6mJHPzXv8sRDqMq07k1JqUAOT%2F%2FdP5hTvgG577Ow%3D\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0284, requestHost0284, requestPort0284, requestHeader0284, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0284 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 159422
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [284] <- Index 284
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [285] <- WEB ADMIN Index 285 ---
		log();
		log("# title: Object moved");
		String requestProt0285 = "https";
		String requestHost0285 = "analytics4preview.sapsf.com";
		int    requestPort0285 = 443;
		String requestFile0285 = "/Production/Login.aspx" +
				"?ReturnUrl=%2fProduction%2fHrmlLogout.aspx%3fSAMLRequest%3dnZJbb9swDIX%252FiqHXwBfZru0KcYoAaVYPadblMhR5GVSZbgTYkivKafLv5yRN0Q1bH%252FZKHvIcfuDwZt%252FUzg4MSq1yQr2AOKCELqV6zsl6NXUzcjMaIm%252FqsGUz%252Faw7u4CXDtA6%252FaRCdm7lpDOKaY4SmeINILOCLcf3MxZ6AWuNtlromjiTflAqbk9uW2tbZL7PFa8PVgqMWwM7Ca8e8hYrT%252BjGfzC67MRR79%252BZpj4n8Di2e%252BIUk5z8pFEJIETpVhEkbpxdBS5%252FSp%252FcKEkBkjitkijqpYgdFAotVzYnYUCvXUrdMFnRaxYHLAq9K5puiLMAjsdon11TnzKwDsEQ58cFXd8hb6DYyc18BPT5Ro79ruONZHRhshXNX2hg5cuy9Y%252BDod8XWq4OvhW2pzr0P3pfksx7r2LyP0mcqTYNt%252F%252BWU4%252BeKrJHf5KyTmELQlYSSjJaFqswCGh2yXVO8v5KS8Ajt0KVsB9t0q92Z6vBLpU7CzZd3Q82kg%252BymMsymwWPwbyj2XRZ3S7MQc6nm%252B0cXx5n8cscga%252BTAZ18b4RvNrfdl29rXozvqhkVD%252BM8f%252FP%252Bw%252B29%252Bts7j34B%26SigAlg%3dhttp%253A%252F%252Fwww.w3.org%252F2000%252F09%252Fxmldsig%2523rsa-sha1%26Signature%3dazOwIh3EZ7PSBmtw%252F5Gca96xjGvjk6szYfcvE47MymQZ0AIZBRCual%252Ftj2oEH9MysklceqkNLy0tjcBMClTuxwUGVEu1zl68iuWj%252Fk9CLc0MuEzaUPZGsZhTMWVbd7h15DXmOKEP34dZTRLPPszwiz8sbrJjBIdtMUjf3AW%252F%252BGI%253D" +
				"&SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLReq1) +		// recorded value = nZJbb9swDIX%2FiqHXwBfZru0KcYoAaVYPadblMhR5GVSZbgTYkivKafLv5yRN0Q1bH%2FZKHvIcfuDwZt%2FUzg4MSq1yQr2AOKCELqV6zsl6NXUzcjMaIm%2FqsGUz%2Faw7u4CXDtA6%2FaRCdm7lpDOKaY4SmeINILOCLcf3MxZ6AWuNtlromjiTflAqbk9uW2tbZL7PFa8PVgqMWwM7Ca8e8hYrT%2BjGfzC67MRR79%2BZpj4n8Di2e%2BIUk5z8pFEJIETpVhEkbpxdBS5%2FSp%2FcKEkBkjitkijqpYgdFAotVzYnYUCvXUrdMFnRaxYHLAq9K5puiLMAjsdon11TnzKwDsEQ58cFXd8hb6DYyc18BPT5Ro79ruONZHRhshXNX2hg5cuy9Y%2BDod8XWq4OvhW2pzr0P3pfksx7r2LyP0mcqTYNt%2F%2BWU4%2BeKrJHf5KyTmELQlYSSjJaFqswCGh2yXVO8v5KS8Ajt0KVsB9t0q92Z6vBLpU7CzZd3Q82kg%2BymMsymwWPwbyj2XRZ3S7MQc6nm%2B0cXx5n8cscga%2BTAZ18b4RvNrfdl29rXozvqhkVD%2BM8f%2FP%2Bw%2B29%2Bts7j34B
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=" + java.net.URLEncoder.encode(C_Signature1);		// recorded value = azOwIh3EZ7PSBmtw%2F5Gca96xjGvjk6szYfcvE47MymQZ0AIZBRCual%2Ftj2oEH9MysklceqkNLy0tjcBMClTuxwUGVEu1zl68iuWj%2Fk9CLc0MuEzaUPZGsZhTMWVbd7h15DXmOKEP34dZTRLPPszwiz8sbrJjBIdtMUjf3AW%2F%2BGI%3D
		requestFile0285 = Lib.replaceTextPattern(requestFile0285, "nZJbb9swDIX%2FiqHXwBfZru0KcYoAaVYPadblMhR5GVSZbgTYkivKafLv5yRN0Q1bH%2FZKHvIcfuDwZt%2FUzg4MSq1yQr2AOKCELqV6zsl6NXUzcjMaIm%2FqsGUz%2Faw7u4CXDtA6%2FaRCdm7lpDOKaY4SmeINILOCLcf3MxZ6AWuNtlromjiTflAqbk9uW2tbZL7PFa8PVgqMWwM7Ca8e8hYrT%2BjGfzC67MRR79%2BZpj4n8Di2e%2BIUk5z8pFEJIETpVhEkbpxdBS5%2FSp%2FcKEkBkjitkijqpYgdFAotVzYnYUCvXUrdMFnRaxYHLAq9K5puiLMAjsdon11TnzKwDsEQ58cFXd8hb6DYyc18BPT5Ro79ruONZHRhshXNX2hg5cuy9Y%2BDod8XWq4OvhW2pzr0P3pfksx7r2LyP0mcqTYNt%2F%2BWU4%2BeKrJHf5KyTmELQlYSSjJaFqswCGh2yXVO8v5KS8Ajt0KVsB9t0q92Z6vBLpU7CzZd3Q82kg%2BymMsymwWPwbyj2XRZ3S7MQc6nm%2B0cXx5n8cscga%2BTAZ18b4RvNrfdl29rXozvqhkVD%2BM8f%2FP%2Bw%2B29%2Bts7j34B", java.net.URLEncoder.encode(C_SAMLReq1), 0);		// search and replace request file fragment "nZJbb9swDIX%2FiqHXwBfZru0KcYoAaVYPadblMhR5GVSZbgTYkivKafLv5yRN0Q1bH%2FZKHvIcfuDwZt%2FUzg4MSq1yQr2AOKCELqV6zsl6NXUzcjMaIm%2FqsGUz%2Faw7u4CXDtA6%2FaRCdm7lpDOKaY4SmeINILOCLcf3MxZ6AWuNtlromjiTflAqbk9uW2tbZL7PFa8PVgqMWwM7Ca8e8hYrT%2BjGfzC67MRR79%2BZpj4n8Di2e%2BIUk5z8pFEJIETpVhEkbpxdBS5%2FSp%2FcKEkBkjitkijqpYgdFAotVzYnYUCvXUrdMFnRaxYHLAq9K5puiLMAjsdon11TnzKwDsEQ58cFXd8hb6DYyc18BPT5Ro79ruONZHRhshXNX2hg5cuy9Y%2BDod8XWq4OvhW2pzr0P3pfksx7r2LyP0mcqTYNt%2F%2BWU4%2BeKrJHf5KyTmELQlYSSjJaFqswCGh2yXVO8v5KS8Ajt0KVsB9t0q92Z6vBLpU7CzZd3Q82kg%2BymMsymwWPwbyj2XRZ3S7MQc6nm%2B0cXx5n8cscga%2BTAZ18b4RvNrfdl29rXozvqhkVD%2BM8f%2FP%2Bw%2B29%2Bts7j34B" with variable 'C_SAMLReq1' on all occurrences
		requestFile0285 = Lib.replaceTextPattern(requestFile0285, "azOwIh3EZ7PSBmtw%2F5Gca96xjGvjk6szYfcvE47MymQZ0AIZBRCual%2Ftj2oEH9MysklceqkNLy0tjcBMClTuxwUGVEu1zl68iuWj%2Fk9CLc0MuEzaUPZGsZhTMWVbd7h15DXmOKEP34dZTRLPPszwiz8sbrJjBIdtMUjf3AW%2F%2BGI%3D", java.net.URLEncoder.encode(C_Signature1), 0);		// search and replace request file fragment "azOwIh3EZ7PSBmtw%2F5Gca96xjGvjk6szYfcvE47MymQZ0AIZBRCual%2Ftj2oEH9MysklceqkNLy0tjcBMClTuxwUGVEu1zl68iuWj%2Fk9CLc0MuEzaUPZGsZhTMWVbd7h15DXmOKEP34dZTRLPPszwiz8sbrJjBIdtMUjf3AW%2F%2BGI%3D" with variable 'C_Signature1' on all occurrences

		String requestHeader0285 = "GET " + requestFile0285 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0285, requestHost0285, requestPort0285, requestHeader0285, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0285 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 139
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [285] <- Index 285
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #9 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #9_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_9_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #9 (fragment 2 of 2)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [286] <- WEB ADMIN Index 286 ---
		String requestProt0286 = "https";
		String requestHost0286 = "ds-aksb-a.akamaihd.net";
		int    requestPort0286 = 443;
		String requestFile0286 = "/2/492962/b" +
				"?dE=0" +
				"&cS=0" +
				"&cE=0" +
				"&rqS=17" +
				"&rsS=19" +
				"&rsE=133" +
				"&sS=0" +
				"&dl=133" +
				"&di=234" +
				"&fp=" +
				"&dlS=234" +
				"&dlE=235" +
				"&dc=245" +
				"&leS=245" +
				"&leE=245" +
				"&to=" +
				"&ol=0" +
				"&cr=21" +
				"&mt=" +
				"&mb=" +
				"&b=257" +
				"&u=https%3A//hcm4preview.sapsf.com/sf/idp/SAML2/slo/POST" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A70.0%29%20Gecko/20100101%20Firefox/70.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=23.36.3.39" +
				"&t=" +
				"&rid=42d441b6" +
				"&r=34125" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=8ee60000" +
				"&akTX=1" +
				"&akTI=42d441b6" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0286 = "GET " + requestFile0286 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo/POST\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0286, requestHost0286, requestPort0286, requestHeader0286, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0286 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: check size +/- 5%, defined content size = 0
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, 0, 5);		// Test [286] <- Index 286
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [287] <- WEB ADMIN Index 287 ---
		String requestProt0287 = "https";
		String requestHost0287 = "onboarding4preview.sapsf.com";
		int    requestPort0287 = 443;
		String requestFile0287 = "/ONB/App_Themes/XpressHR/Theme.ashx" +
				"?v=_62m6grbaQ7GKtn8RphHj5tIYmHbDsY6QMtW36Nuv_Q1";
		String requestHeader0287 = "GET " + requestFile0287 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://onboarding4preview.sapsf.com/ONB/SSO/SAML20/SingleLogoutService.aspx?SAMLRequest=nZLdjtowEIVfJfItSmyHv2ARVlQsbSo2tASqFTeVcSaLJWIH28myb98Ay2pbtXvR25kzc858mvHdqTx4DRgrtYoRDQjyQAmdS%2FUUo8167kfobjK2vDyEFVvoJ127FRxrsM5rJ5Vl11aMaqOY5lZapngJljnBsunDgoUBYZXRTgt9QN6sHZSKu4vb3rnKMoy12mluzpa9ykAj4TmwvLJFIHSJl%2BknnGVLfF4WEpy1qgNcg2RgGikg4LY6IS%2BZxegnzSPod3ddP6RD4ff4jvgjGAgfchB9yMNcENpKra0hUdZx5WIUEjryKfXDwZqOWI%2Bwbhj0I7JF3gq4PQf96LbDJQqrLRjk%2FbiBbDvoFRu7uJn3uD7eyG2760wITW6E9qL8CxpbYJlXVzK4LVRcvWAnXMt4jN9735KkrVcy%2B58k3lybkrt%2Fy2lALxWZ%2B8VFymplKxCykJCjSZasQ0JodMt1TfL2WBnYM7dE5XCabIdfXeOKTjOUjQM3XD90tpJ3oh6XebQgjyStaTTPivuVeZHpfLtP7fFx0TumFvhm0KGz76XAZntff15ueDL9Uiyo%2BDaN41fvP9zeqr899%2BQX&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1&Signature=idVdYbchh8HBCE66HZrQ1rKzWSnWrDic3cQ4%2BhF0s0eMBvqf2efreLwG3XQJk7m2ay0DrhdHOdsXdv1cQR%2BK9EPwB%2BA8vzHbup1zA2V2SIS16TCcAPB3nvXO50MnRdQ%2Brrg6mJHPzXv8sRDqMq07k1JqUAOT%2F%2FdP5hTvgG577Ow%3D\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0287, requestHost0287, requestPort0287, requestHeader0287, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0287 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 25355
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [287] <- Index 287
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [288] <- WEB ADMIN Index 288 ---
		log();
		log("# title: SuccessFactors Workforce Analytics and Planning Customer Login");
		String requestProt0288 = "https";
		String requestHost0288 = "analytics4preview.sapsf.com";
		int    requestPort0288 = 443;
		String requestFile0288 = "/Production/Login.aspx";
		String requestHeader0288 = "GET " + requestFile0288 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/sf/idp/SAML2/slo?_s.crb=sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0288, requestHost0288, requestPort0288, requestHeader0288, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%2bC9%2foPHKME8dQgca%2bEv2UyI4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0288 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = [verification disabled], content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 15110
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, null, null, null, null);		// Test [288] <- Index 288
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [289] <- WEB ADMIN Index 289 ---
		String requestProt0289 = "https";
		String requestHost0289 = "hcm4preview.sapsf.com";
		int    requestPort0289 = 443;
		String requestFile0289 = "/sf/logout" +
				"?bplte_company=tctest" +
				"&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d";
		requestFile0289 = Lib.replaceTextPattern(requestFile0289, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", java.net.URLEncoder.encode(C_AjaxsecKey), 0);		// search and replace request file fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0289 = Lib.replaceTextPattern(requestFile0289, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace request file fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		String requestHeader0289 = "GET " + requestFile0289 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0289, requestHost0289, requestPort0289, requestHeader0289, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0289 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [289] <- Index 289
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [290] <- WEB ADMIN Index 290 ---
		String requestProt0290 = "https";
		String requestHost0290 = "hcm4preview.sapsf.com";
		int    requestPort0290 = 443;
		String requestFile0290 = "/login" +
				"?company=tctest" +
				"&bplte_logout=1" +
				"&username=SIT20018" +
				"&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d";
		requestFile0290 = Lib.replaceTextPattern(requestFile0290, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", java.net.URLEncoder.encode(C_AjaxsecKey), 0);		// search and replace request file fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'C_AjaxsecKey' on all occurrences
		requestFile0290 = Lib.replaceTextPattern(requestFile0290, "SIT20018", P_UserID, 0);		// search and replace request file fragment "SIT20018" with variable 'P_UserID' on all occurrences
		requestFile0290 = Lib.replaceTextPattern(requestFile0290, "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb, 0);		// search and replace request file fragment "sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d" with variable 'vScrb' on all occurrences

		String requestHeader0290 = "GET " + requestFile0290 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=tctest&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0290, requestHost0290, requestPort0290, requestHeader0290, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0290 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 7018
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors Business Execution Suite");		// Test [290] <- Index 290
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [291] <- WEB ADMIN Index 291 ---
		String requestProt0291 = "https";
		String requestHost0291 = "hcm4preview.sapsf.com";
		int    requestPort0291 = 443;
		String requestFile0291 = "/public/theme-api/css/tctest/3eybd488sn/ui/login/css/bizx/BizXLoginTheme.dcss";
		String requestHeader0291 = "GET " + requestFile0291 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/login?company=tctest&bplte_logout=1&username=SIT20018&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0291, requestHost0291, requestPort0291, requestHeader0291, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0291 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [291] <- Index 291
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [292] <- WEB ADMIN Index 292 ---
		String requestProt0292 = "https";
		String requestHost0292 = "hcm4preview.sapsf.com";
		int    requestPort0292 = 443;
		String requestFile0292 = "/perfLogServlet" +
				"?callId=8567866489-X" +
				"&ST=1574797237144" +
				"&ET=1574797238260" +
				"&RED=1" +
				"&TTB=11" +
				"&RSR=308" +
				"&DIA=737" +
				"&DCP=1115";
		String requestHeader0292 = "GET " + requestFile0292 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain; charset=UTF-8\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-PLT-LOGINPAGE-rb3abe15s-20191126144037-204935-X\r\n" + 
				"X-Ajax-Token: BStByusWpvvGvyx2s%2bmVv9NxV3s%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/login?company=tctest&bplte_logout=1&username=SIT20018&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0292, requestHost0292, requestPort0292, requestHeader0292, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0292 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: check size +/- 5%, defined content size = 0
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, 0, 5);		// Test [292] <- Index 292
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [293] <- WEB ADMIN Index 293 ---
		String requestProt0293 = "https";
		String requestHost0293 = "hcm4preview.sapsf.com";
		int    requestPort0293 = 443;
		String requestFile0293 = "/perfLogServlet" +
				"?callId=8567866489-0" +
				"&eventId=EVENT-PLT-LOGINPAGE-rb3abe15s-20191126144037-204935" +
				"&ST=1574797237144" +
				"&ET=1574797238297" +
				"&MEM=6966" +
				"&NRE=14" +
				"&NWR=14" +
				"&SCPU=0" +
				"&SQLC=6" +
				"&SQLT=4" +
				"&SVT=41" +
				"&UCPU=30" +
				"&CPU=30" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=19" +
				"&cssNum=8" +
				"&renderTime=711" +
				"&RED=1" +
				"&TTB=11" +
				"&RSR=308" +
				"&DIA=737" +
				"&DCP=1115";
		String requestContent0293 = 
				"OPTR_INFO=7c987238-4b72-491c-8c26-1d0d2d13fe22!1574797237788!1574797237799!0" +
				"&OPTR_INFO=3ca3d23f-c172-4ffc-8628-947f2135c624!1574797237824!1574797237845!0" +
				"&OPTR_INFO=9ec2b7d7-1084-11ea-9bb9-4daa529fd176!0!1574797237879!1" +
				"&OPTR_INFO=466392aa-f4c2-4eb4-972f-b86520ad182f!1574797237896!1574797237905!0" +
				"&OPTR_INFO=3089f27f-dd82-42da-bf20-42ab21e06e23!1574797237909!1574797237928!0" +
				"&OPTR_INFO=c9011294-a732-4999-bf29-5f632eb4cb20!1574797237944!1574797237952!0";
		String requestHeader0293 = "POST " + requestFile0293 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: hcm4preview.sapsf.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-PLT-LOGINPAGE-rb3abe15s-20191126144037-204935\r\n" + 
				"X-Ajax-Token: BStByusWpvvGvyx2s%2bmVv9NxV3s%3d\r\n" + 
				"Content-Length: " + requestContent0293.length() + "\r\n" + 		// Content-Length: 449
				"Origin: https://hcm4preview.sapsf.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/login?company=tctest&bplte_logout=1&username=SIT20018&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0293, requestHost0293, requestPort0293, requestHeader0293, requestContent0293.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0293 = null;		// support garbage collector to reduce memory
		requestContent0293 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: check size +/- 5%, defined content size = 0
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, 0, 5);		// Test [293] <- Index 293
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [294] <- WEB ADMIN Index 294 ---
		String requestProt0294 = "https";
		String requestHost0294 = "ds-aksb-a.akamaihd.net";
		int    requestPort0294 = 443;
		String requestFile0294 = "/2/492962/b" +
				"?dE=0" +
				"&cS=0" +
				"&cE=1" +
				"&rqS=2" +
				"&rsS=3" +
				"&rsE=141" +
				"&sS=-166" +
				"&dl=142" +
				"&di=571" +
				"&fp=" +
				"&dlS=580" +
				"&dlE=831" +
				"&dc=949" +
				"&leS=950" +
				"&leE=950" +
				"&to=" +
				"&ol=0" +
				"&cr=20" +
				"&mt=" +
				"&mb=" +
				"&b=2305" +
				"&u=https%3A//hcm4preview.sapsf.com/login" +
				"&ua=Mozilla/5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A70.0%29%20Gecko/20100101%20Firefox/70.0" +
				"&pl=Win32" +
				"&us=" +
				"&gh=23.36.3.39" +
				"&t=" +
				"&rid=42d474ad" +
				"&r=34125" +
				"&akM=a" +
				"&akN=ae" +
				"&vc=14:17" +
				"&bpcip=8ee60000" +
				"&akTX=1" +
				"&akTI=42d474ad" +
				"&ai=312792" +
				"&pmgn=" +
				"&pmgi=" +
				"&pmp=";
		String requestHeader0294 = "GET " + requestFile0294 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: ds-aksb-a.akamaihd.net\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Referer: https://hcm4preview.sapsf.com/login?company=tctest&bplte_logout=1&username=SIT20018&_s.crb=sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0294, requestHost0294, requestPort0294, requestHeader0294, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("SIT20018", P_UserID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("sNj%252bC9%252foPHKME8dQgca%252bEv2UyI4%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		testURL.execute(performanceData);
		requestHeader0294 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 204, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: check size +/- 5%, defined content size = 0
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {204}, "TEXT/HTML", null, 0, 5);		// Test [294] <- Index 294
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #9_1 successful done
		return true;
	}



	boolean synchResponsesParallelRequestsPage_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 1 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_1(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_1 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 2 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_2(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_2 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 3 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_3(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_3 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 4 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_4(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_4 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 5 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_5(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_5 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 6 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_6(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_6 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_7(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 7 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_7(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_7 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_8(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 8 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_8(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_8 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_9(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 9 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_9(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_9 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	/**
	 * implement GetRealTimeUserInputFieldsInterface: get the definition and the value of all real-time user input fields.
	 */
	public ArrayList<RealTimeUserInputField> getRealTimeUserInputFields()
	{
		try
		{
			ArrayList<RealTimeUserInputField> realTimeUserInputFieldList = new ArrayList<RealTimeUserInputField>();
			return realTimeUserInputFieldList;
		}
		catch (Exception e)
		{
			log(e);
			return null;
		}
	}



	/**
	 * implement ThreadStepInterface: get the current execution step (current URL call or page break) of a simulated user.
	 */
	public int getExecutionStep()
	{
		return threadStep;
	}



	/**
	 * implement SetThreadStepInterface: set the current execution step (current URL call or page break) of a simulated user.
	 */
	public void setExecutionStep(int threadStep)
	{
		this.threadStep = threadStep;
	}



	/**
	 * implement SSLSessionCacheStatisticInterface: get statistic data about the SSL session cache behavior of a simulated user.
	 */
	public SSLSessionCacheStatistic getSSLSessionCacheStatistic()
	{
		return sslStatistic;
	}



	/**
	 * implement VaryingTestDurationInterface: support to extend or to reduce the planned test duration.
	 */
	public int getPlannedTestDuration()
	{
		return plannedTestDuration;
	}
	
	public void setExtendTestDuration(int deltaSeconds)
	{
		if (plannedTestDuration == 0)
		{
			plannedTestDuration = deltaSeconds;		// the old planned test duration was unlimited but is now limited
			return;
		}
		if (deltaSeconds == 0)
		{
			plannedTestDuration = 0;		// the new planned test duration is now unlimited
			return;
		}
		plannedTestDuration = plannedTestDuration + deltaSeconds;
	}



	/**
	 * implement SuspendResumeInterface: support to suspend and to resume the test execution.
	 */
	public int getPlannedStartupDelay()
	{
		return plannedStartupDelay;
	}
	
	public void setUserResumeStartWaitDelay(int millis)
	{
		userResumeStartWaitDelay = millis;
	}



	/**
	 * implement VaryingLoadInterface: support to decrement the number of simulated users at runtime.
	 */
	public void setDecrementEndOfLoopFlag(boolean decrementEndOfLoopFlag)
	{
		this.decrementEndOfLoopFlag = decrementEndOfLoopFlag;
	}

	public boolean isDecrementEndOfLoopFlag()
	{
		return decrementEndOfLoopFlag;
	}



	/**
	 * internal method: execute the loops for one simulated user as a thread.
	 * controls the thread and displays the (thread-)log if one loop has been completed.
	 */
	public void run()
	{
		// user terminated by inline script, at start of user ?
		if (isTerminateUser())
		{
			System.out.println("# --- thread " + Thread.currentThread().getName() + " aborted --- " + ZoneTime.dateToShortString() + " ---");
			return;
		}
		try
		{
			while (true)
			{
				threadStep = ThreadStepInterface.THREAD_NO_STEP;
				clearLog();
				
				// execute loop
				log("--- loop started --- " + ZoneTime.dateToShortString() + " ---");
				boolean loopPassed = this.execute(totalLoopCounter.getAndIncrement());
				performanceData.addUserTransactionMeasuredSamples(transactionHandler.getPendingTransactions());
				ArrayList<UserTransactionContext> nonExecutedTransactions = transactionHandler.getNotExecutedTransactions();

				for (UserTransactionContext nonExecutedTransaction : new ArrayList<>(nonExecutedTransactions))
				{
					if(transactionContextMap.containsKey(nonExecutedTransaction.getTransactionId()+"") && transactionContextMap.get(nonExecutedTransaction.getTransactionId()+"") == null)
					{
						transactionContextMap.remove(nonExecutedTransaction.getTransactionId()+"");
						nonExecutedTransactions.remove(nonExecutedTransaction);
					}
				}

				performanceData.addUserTransactionNotExecutedSamples(nonExecutedTransactions);
				performanceData.addSocktPoolStatistic(socketPool);
				socketPool.closePool();
				performanceData.addSSLCacheStatistic(sslStatistic.getSSLSessionCacheStatisticResult());
				sslStatistic.reset();
				
				// eof of input file ?
				if (abortedByEofInputFile())
					return;		// endOfRun() not called in such a case
				
				// check loop result
				String remainingLoopInfo = "";
				if (checkLoopCount)
					remainingLoopInfo = " [remaining loops = " + (remainingLoops - 1) + "]";
				if (loopPassed)
				{
					performanceData.addPassedLoop();
					log("--- loop passed ---  " + ZoneTime.dateToShortString() + " ---" + remainingLoopInfo);
				}
				else
				{
					performanceData.addFailedLoop();
					log("--- loop failed ---  " + ZoneTime.dateToShortString() + " ---" + remainingLoopInfo);
				}
				threadStep = ThreadStepInterface.THREAD_NO_STEP;
				
				// display thread log to standard output
				if (debugLoops || (debugFailedLoops && (!loopPassed)))
				{
					synchronized (dumpLock)
					{
						dumpLog(System.out);				// full log
					}
				}
				
				// check if max loops reached
				if (checkLoopCount)
				{
					// all done ?
					remainingLoops--;
					if (remainingLoops <= 0)
					{
						endOfRun();
						return;
					}
				}
				
				// check if simulated user must be decremented
				if (decrementEndOfLoopFlag && (getOwnLoadTestUserContext().getDecrementEndOfLoopPointInTime() <= System.currentTimeMillis()))
				{
					return;
				}
				
				// check if max test duration reached
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				{
					endOfRun();
					return;
				}
				
				// check if this specific user is terminated earlier than planned by a HTTP content verification or by a plug-in
				if (isTerminateUser())
				{
					endOfRun();
					System.out.println("# --- thread " + Thread.currentThread().getName() + " terminate failed user --- " + ZoneTime.dateToShortString() + " ---");
					return;
				}
				
				// check if load test execution is temporary suspended
				boolean wasSuspended = false;
				while (isSuspend())
				{
					wasSuspended = true;
					try { Thread.currentThread().sleep(20); } catch (InterruptedException ie) {}
					if (abortedByRemote() || abortedByEofInputFile())
					{
						endOfRun();
						return;
					}
					
					// check if max test duration reached during suspend
					if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
					{
						endOfRun();
						return;
					}
				}
				// check if load test execution is resumed
				if (wasSuspended)
				{
					try { sleepRemoteInterruptable(userResumeStartWaitDelay); } catch (InterruptedException ie) {}
				}
				
				// wait 20 milliseconds if loop has failed
				if (!loopPassed)
					try { Thread.currentThread().sleep(loopErrorDelay); } catch (InterruptedException ie) {}
				
				// execute next loop
				threadLoopCounter++;
			}	// end: while (true)
		}
		catch (Throwable tex)
		{
			log("*** INTERNAL ERROR / LOAD TEST ABORTED ***");
			log(tex);
			log();
			synchronized (dumpLock)
			{
				dumpLog(System.out);				// full log
				System.err.println("*** INTERNAL ERROR / LOAD TEST ABORTED ***");
				tex.printStackTrace(System.err);
				System.exit(-2);
			}
		}
		finally
		{
			// remove the reference to this load test instance and the reference to the thread that runs this instance
			try
			{
				if (!decrementEndOfLoopFlag)
				{
					getUserContextTable().getWriteLock().lock();
					getOwnLoadTestUserContext().setLoadTestUserFinallyEnded();
					getUserContextTable().getWriteLock().unlock();
				}
				else
					decrementEndOfLoopFlag = false;
			}
			catch (Throwable texFinal)
			{
				System.err.println("*** INTERNAL FINALLY ERROR / LOAD TEST ABORTED ***");
				texFinal.printStackTrace(System.err);
				System.exit(-2);
			}
		}
	}



	/**
	 * internal method: called when a user has completed the test-run.
	 */
	public void endOfRun()
	{
		clearLog();
		
		if (debugLoops && (getLog().size() > 0))
		{
			synchronized (dumpLock)
			{
				dumpLog(System.out);		// dump log of inline scripts and load test plug-ins which are executed at end of user
			}
		}
	}



	/**
	 * Main program. Starts the test and waits until all have been done.
	 */
	public static void main(String[] args)
	{
		// check command line argument -h or -help
		if ((ParseArgs.hasOption(args, "-h")) || (ParseArgs.hasOption(args, "-help")))
		{
			System.out.println();
			System.out.println("Help - Proxy Sniffer Load Test Program:");
			System.out.println();
			System.out.println("-u <number>              ->> required argument: number of concurrent users");
			System.out.println("-d <seconds>             ->> required argument: planned test duration in seconds (default: 30, 0 = unlimited)");
			System.out.println("-t <seconds>             ->> required argument: request timeout per url in seconds");
			System.out.println();
			System.out.println("-tconnect <seconds>      ->> TCP/IP socket connect timeout in seconds (default: use value of -t <seconds>)");
			System.out.println();
			System.out.println("-sdelay <milliseconds>   ->> startup delay time between concurrent users in milliseconds (default: 200)");
			System.out.println("-mtpu <number>           ->> maximum number of parallel threads per user (default: " + MAX_PARALLEL_THREADS_PER_USER + ")");
			System.out.println("-maxloops <number>       ->> maximum number of loops per user (default: 0 = unlimited)");
			System.out.println("-downlink <kbps>         ->> maximum downlink network bandwidth per user in kilobits per second (default: 0 = unlimited)");
			System.out.println("-uplink <kbps>           ->> maximum uplink network bandwidth per user in kilobits per second (default: 0 = unlimited)");
			System.out.println("-multihomed <filename>   ->> use serveral client ip addresses - file format: <addr1>, <addr2>, ... (all on the same line)");
			System.out.println("-sampling <seconds>      ->> statistic sampling interval in seconds (default: 15)");
			System.out.println("-percpage <percent>      ->> additional sampling rate per web page call in percent (default: 100)");
			System.out.println("-percurl <percent>       ->> additional sampling rate per url call in percent (default: 0)");
			System.out.println("-percurlopt <level>      ->> extended sampling level per url call, see application reference manual (default: 0 = disabled)");
			System.out.println("-maxerrsnap <number>     ->> maximum number of error snapshots per url (default: 0 = unlimited)");
			System.out.println("-maxerrmem <megabytes>   ->> maximum size of memory in megabytes which can be used for error snapshots (default: 20, -1 = unlimited)");
			System.out.println("-nosdelayCluster         ->> apply startup delay time between concurrent users per exec agent, but not per cluster job (default: apply per cluster job)");
			System.out.println("-setuseragent \"<text>\"   ->> replace the recorded value of the HTTP request header field User-Agent with a new value");
			System.out.println("-collect <host>[:<port>] ->> collect additional data from external measuring agents (data collectors)");
			System.out.println("-res <filename>          ->> overrides the default name of the binary output file");
			System.out.println("-nores                   ->> disables to create the binary output file");
			System.out.println();
			System.out.println("-ssl <version>           ->> set SSL version: possible options are \"all\" (default), \"v3\", \"tls\", \"tls11\" or \"tls12\"");
			System.out.println("-sslcache <seconds>      ->> timeout of user-related SSL session cache (default: 300, 0 = cache disabled)");
			System.out.println("-sslrandom <type>        ->> set the type of the random generator used for SSL handshakes: possible options are \"fast\", \"iaik\" (default) or \"java\"");
			System.out.println("-sslcmode                ->> apply SSL/HTTPS compatibility workarounds for deficient SSL servers");
			System.out.println("-ecc                     ->> enable support of elliptic curve cryptography (ECC)");
			System.out.println("-nosni                   ->> disable support of server name indication (SNI)");
			System.out.println("-snicritical             ->> set the TLS SNI extension as critical (default: non-critical)");
			System.out.println("-tlssessiontickets       ->> set the TLS to use Session Tickets (non-critical)");
			System.out.println("-iaikLast                ->> adds the IAIK security provider at the last position (instead of default: IAIK at first position)");
			System.out.println();
			System.out.println("-dnssrv <IP-1>[,IP-N])   ->> use specific DNS server(s) to resolve DNS host names (default: use OS to resolve host names)");
			System.out.println("-dnshosts <filename>     ->> use specific DNS hosts file (default: use OS to resolve host names)");
			System.out.println("-dnstranslation <filename> ->> use a DNS translation file that converts DNS names. It might be needed to disable TLS SNI if this option is used");
			System.out.println("-dnsenattl               ->> enable consideration of DNS TTL by using the received TTL-values from the DNS Server(s) (default: TTL disabled)");
			System.out.println("-dnsfixttl <seconds>     ->> enable DNS TTL by using a fixed TTL-value of seconds for all DNS resolves");
			System.out.println("-dnsperloop              ->> perform new DNS resolves for each executed loop. All resolves are stable within the same loop (no consideration of DNS TTL within a loop)");
			System.out.println("-dnsstatistic            ->> collect statistical data about DNS resolutions. Note: use this option only if not any other, more specific DNS option is enabled");
			System.out.println("-dnsdebug                ->> debug DNS resolves and the DNS cache");
			System.out.println("-enableIPv6 <networkinterface-name>  ->> enable only IPv6 support for recording, also can provide the IPv6 network interface of the load generator");
			System.out.println("-enableIPv6v4 <networkinterface-name> ->> enable both IPv6 and IPv4 (first will try with IPv6 ,if fails will try with IPv4 support for recording),also can provide the IPv6 network interface of the load generator");
			System.out.println();
			System.out.println("-dfl                     ->> debug execution steps of all failed loops to standard output");
			System.out.println("-dl                      ->> debug execution steps of all loops to standard output");
			System.out.println("-dh                      ->> debug HTTP protocol headers to standard output, includes the -dl option");
			System.out.println("-dc                      ->> debug HTTP content data to standard output, includes the -dl option");
			System.out.println("-dhc                     ->> debug HTTP protocol headers and HTTP content data to standard output, includes the -dl option");
			System.out.println("-dC                      ->> debug cookies to standard output, includes the -dl option");
			System.out.println("-dK                      ->> debug keep-alive (socket pool) to standard output, includes the -dl option");
			System.out.println("-dssl                    ->> debug SSL handshake (https) to standard output, includes the -dl and the -dK option");
			System.out.println();
			System.out.println("-tz <timezone>           ->> set time zone (see Application Reference Manual: supported time zones)");
			System.out.println("-dgs a|c                 ->> set number format (decimal group separator) a = '  c = ,");
			System.out.println("-annotation <text>       ->> adds an annotation for this test run");
			System.out.println();
			System.out.println("-execAgentHost <ip address or dns name>      ->> set the ip address or the dns name of the exec agent from which the license is used (default: 127.0.0.1)");
			System.out.println("-execAgentPort <port>                        ->> set the tcp/ip port of the exec agent (default: 7993)");
			System.out.println("-execAgentProtocol <plain | http | https>    ->> set the protocol of the exec agent (default: plain)");
			System.out.println("-execAgentUsername <string>                  ->> set the auth. username for the exec agent (default: [no username])");
			System.out.println("-execAgentPassword <string>                  ->> set the auth. password for the exec agent (default: [no password])");
			System.out.println();
			System.out.println("-h                       ->> display this help text");
			System.out.println("-help                    ->> display this help text");
			System.out.println();
			System.exit(-1);
		}
		
		System.out.println("+----------------------------------------------------------------+");
		System.out.println("| Welcome to the ZebraTester Load Test Program.                  |");
		System.out.println("| Additional help available with program argument \"-help\"        |");
		System.out.println("| Procedure Copyright by Ingenieurbuero David Fischer AG,        |");
		System.out.println("| a company of the Apica group. All rights reserved.             |");
		System.out.println("+----------------------------------------------------------------+");
		
		
		if (commonNextProxyConfig != null)
		{
			System.out.println();
			System.out.println("*** Warning: Loadtest over HTTP(S) Proxy ***");
		}
		
		// check command line argument -ecc
		sslECC = (ParseArgs.hasOption(args, "-ecc"));       // enable ssl ecc ?
		
		// initialize ssl/https support
		SSLInit.execute(!ParseArgs.hasOption(args, "-iaikLast"), true);
		if (sslECC)
			SSLInit.enableECC();
		
		// check command line argument -nosni
		if (ParseArgs.hasOption(args, "-nosni"))            // disable ssl sni ?
			sslSNI = false;
		
		// check command line argument -snicritical
		if (ParseArgs.hasOption(args, "-snicritical"))      // set ssl sni as critical tls extension ?
			sslSNICirical = true;
		
		// check command line argument -tlssessiontickets
		if (ParseArgs.hasOption(args, "-tlssessiontickets"))      // set tls extension session tickets?
			useTlsSessionTickets = true;
		
		// set default character set for response content tests
		setCharEncoding(prxCharEncoding);
		
		// check command line argument -tz <timezone>
		String timeZoneString = ParseArgs.getString(args, "-tz");
		if (timeZoneString != null)
			defaultTimeZone = timeZoneString.toUpperCase(); // set time zone?
		ZoneTime.setDefaultTimeZone(defaultTimeZone);
		
		// check command line argument -dgs a|c
		String dgs = ParseArgs.getString(args, "-dgs");
		if (dgs != null)
		{
			if (dgs.equalsIgnoreCase("a"))
				defaultNumberGroupingSeparator = '\'';
			if (dgs.equalsIgnoreCase("c"))
				defaultNumberGroupingSeparator = ',';
		}
		Lib.setDefaultNumberGroupingSeparator(defaultNumberGroupingSeparator);
		
		// check command line argument -annotation <text>
		String testRunAnnotation = ParseArgs.getString(args, "-annotation");
		if (testRunAnnotation != null)
		{
			if (testRunAnnotation.startsWith("\"") && testRunAnnotation.endsWith("\""))
				testRunAnnotation = testRunAnnotation.substring(1, testRunAnnotation.length() - 1);
		}
		
		// check command line argument -ssl
		String newSslProtocolVersion = ParseArgs.getString(args, "-ssl");
		if (newSslProtocolVersion != null)
		{
			if (newSslProtocolVersion.equalsIgnoreCase("v2"))
				sslProtocolVersion = "v2";
			if (newSslProtocolVersion.equalsIgnoreCase("v3"))
				sslProtocolVersion = "v3";
			if (newSslProtocolVersion.equalsIgnoreCase("tls"))
				sslProtocolVersion = "tls";
			if (newSslProtocolVersion.equalsIgnoreCase("tls11"))
				sslProtocolVersion = "tls11";
			if (newSslProtocolVersion.equalsIgnoreCase("tls12"))
				sslProtocolVersion = "tls12";
		}
		
		// check command line argument -sslcache <seconds>
		Integer newSslSessionCacheTimeout = ParseArgs.getInteger(args, "-sslcache");
		if (newSslSessionCacheTimeout != null)
			sslSessionCacheTimeout = newSslSessionCacheTimeout.intValue();
		
		// check command line argument -sslrandom
		String sslHandshakeRandomGeneratorTypeStr = ParseArgs.getString(args, "-sslrandom");
		if (sslHandshakeRandomGeneratorTypeStr != null)
		{
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("java"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_JAVA_DEFAULT;
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("iaik"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_IAIK_DEFAULT;
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("fast"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_FAST;
		}
		
		// check command line argument -sslcmode
		sslcmode = ParseArgs.hasOption(args, "-sslcmode");  // enable ssl/https compatibility workarounds?
		
		// check command line argument -dfl
		debugFailedLoops = ParseArgs.hasOption(args, "-dfl"); // debug failed loops?
		
		// check command line argument -dl
		debugLoops = ParseArgs.hasOption(args, "-dl");      // debug loops?
		
		// check command line argument -dh
		debugHttp = ParseArgs.hasOption(args, "-dh");       // debug http?
		if (debugHttp)
			debugLoops = true;
		
		// check command line argument -dc
		debugContent = ParseArgs.hasOption(args, "-dc");    // debug content?
		if (debugContent)
			debugLoops = true;
		
		// check command line argument -dhc
		if (ParseArgs.hasOption(args, "-dhc"))				// debug http and content
		{
			debugLoops = true;
			debugHttp = true;
			debugContent = true;
		}
		
		// check command line argument -dC
		debugCookies = ParseArgs.hasOption(args, "-dC");    // debug cookies?
		if (debugCookies)
			debugLoops = true;
		
		// check command line argument -dK
		debugKeepAlive = ParseArgs.hasOption(args, "-dK");  // debug keep.alive (socket pool)?
		if (debugKeepAlive)
			debugLoops = true;
		
		// check command line argument -dssl
		debugSsl = ParseArgs.hasOption(args, "-dssl");      // debug keep.alive (socket pool)?
		if (debugSsl)
		{
			debugLoops = true;
			debugKeepAlive = true;
		}
		
		// get startup delay
		Integer newStartupDelay = ParseArgs.getInteger(args, "-sdelay");
		if (newStartupDelay != null)
			plannedStartupDelay = newStartupDelay.intValue();
		
		// get max. parallel threads per user - note: only valid if CONTAINS_PARALLEL_EXECUTED_URLS = true
		Integer newMaxParallelThreadsPerUser = ParseArgs.getInteger(args, "-mtpu");
		if (newMaxParallelThreadsPerUser != null)
		{
			if (newMaxParallelThreadsPerUser.intValue() > 0)
				maxParallelThreadsPerUser = newMaxParallelThreadsPerUser.intValue();
		}
		// get maximum number of loops per user
		maxPlannedLoops = 0;  // maximum loops per user, 0 = unlimited
		Integer newLoops = ParseArgs.getInteger(args, "-maxloops");
		if (newLoops != null)
			maxPlannedLoops = newLoops.intValue();
		
		// get maximum downlink network bandwidth per user (default = unlimited)
		Integer newDownlinkBandwidth = ParseArgs.getInteger(args, "-downlink");
		if (newDownlinkBandwidth != null)
			downlinkBandwidth = newDownlinkBandwidth.intValue();
		
		// get maximum uplink network bandwidth per user (default = unlimited)
		Integer newUplinkBandwidth = ParseArgs.getInteger(args, "-uplink");
		if (newUplinkBandwidth != null)
			uplinkBandwidth = newUplinkBandwidth.intValue();
		
		// get statistic sampling interval
		int samplingInterval = 15;  // statistic sampling interval in seconds
		Integer newSamplingInterval = ParseArgs.getInteger(args, "-sampling");
		if (newSamplingInterval != null)
			samplingInterval = newSamplingInterval.intValue();
		
		// get additional sampling rate per web page call
		int percentilePageSampling = 100;  // additional sampling rate per web page call in percent
		Integer newPercentilePageSampling = ParseArgs.getInteger(args, "-percpage");
		if (newPercentilePageSampling != null)
			percentilePageSampling = newPercentilePageSampling.intValue();
		
		// get additional sampling rate per url call
		int percentileUrlSampling = 0;  // additional sampling rate per url call in percent
		Integer newPercentileUrlSampling = ParseArgs.getInteger(args, "-percurl");
		if (newPercentileUrlSampling != null)
			percentileUrlSampling = newPercentileUrlSampling.intValue();
		
		// get extended sampling level per url call
		int percentileUrlSamplingAddOption = 0;  // extended sampling level per url call, 0 = disabled
		Integer newPercentileUrlSamplingAddOption = ParseArgs.getInteger(args, "-percurlopt");
		if (newPercentileUrlSamplingAddOption != null)
			percentileUrlSamplingAddOption = newPercentileUrlSamplingAddOption.intValue();
		
		// get maximum number of error snapshots per URL (0 = unlimited)
		int maxErrorSnapshots = 0;
		Integer newMaxErrorSnapshots = ParseArgs.getInteger(args, "-maxerrsnap");
		if (newMaxErrorSnapshots != null)
			maxErrorSnapshots = newMaxErrorSnapshots.intValue();
		
		// get maximum memory in megabytes which can be used for error snapshots (-1 = unlimited, default = 10)
		long maxErrorSnapshotMemory = 20;
		Long newMaxErrorSnapshotMemory = ParseArgs.getLong(args, "-maxerrmem");
		if (newMaxErrorSnapshotMemory != null)
			maxErrorSnapshotMemory = newMaxErrorSnapshotMemory.longValue();
		
		// single user mode ?
		boolean singleUserMode = ParseArgs.hasOption(args, "-singleuser");
		
		// override value for http user agent field ?
		String setUserAgentStr = ParseArgs.getIgnoreCaseString(args, "-setuseragent");
		if (setUserAgentStr != null)
		{
			USER_AGENT_1 = setUserAgentStr;
		}
		// get required input arguments
		int concurrentUsers = 0;     // number of concurrent users
		plannedRequestTimeout = 0;   // request timeout in seconds
		
		System.out.println();
		
		// parse -u argument or ask --> <number of concurrent users>
		Integer i = ParseArgs.getIntegerOrAsk(args, "-u", "Concurrent Users, <RETURN>=1 : ", new Integer(1));
		if (i == null)
			System.exit(-1);
		else
			concurrentUsers = i.intValue();
		
		// parse -d argument or ask --> <test duration in seconds>
		i = ParseArgs.getIntegerOrAsk(args, "-d", "Test Duration in Seconds, <RETURN>=30 : ", new Integer(30));
		if (i == null)
			System.exit(-1);
		else
			plannedTestDuration = i.intValue();
		
		// parse -t argument or ask --> <request timeout in seconds>
		i = ParseArgs.getIntegerOrAsk(args, "-t", "HTTP Request Timeout per URL in Seconds, <RETURN>=60 : ", new Integer(60));
		if (i == null)
			System.exit(-1);
		else
			plannedRequestTimeout = i.intValue();
		
		// parse optional -tconnect argument (TCP/IP socket connect timeout in seconds)
		i = ParseArgs.getInteger(args, "-tconnect");
		if (i != null)
			plannedConnectTimeout = i.intValue();
		
		String genericFileName = PerformanceData.proposeFileName("SFEditEmployeeProfileSM", concurrentUsers, ParseArgs.getString(args, "-executionPlan"));
		
		// auto-configure binary result file
		if (!ParseArgs.hasOption(args, "-nores"))
		{
			String newResultFile = ParseArgs.getString(args, "-res");
			if (newResultFile == null)
				resultFile = genericFileName + ".prxres";
			else
				resultFile = newResultFile;
			System.out.println("Result File : " + resultFile);
		}
		
		// display common arguments at console output
		System.out.println();
		System.out.println("# concurrent users = " + concurrentUsers);
		System.out.println("# max. parallel threads per user = [serial execution order for all URLs]");
		System.out.print("# planned test duration = ");
		if (plannedTestDuration == 0)
			System.out.println("unlimited");
		else
			System.out.println("" + plannedTestDuration + " seconds");
		System.out.println("# http request timeout = " + plannedRequestTimeout + " seconds");
		if (plannedConnectTimeout != 0)
			System.out.println("# tcp/ip socket connect timeout = " + plannedConnectTimeout + " seconds");
		System.out.println("# startup delay = " + plannedStartupDelay + " milliseconds");
		System.out.println("# statistic sampling interval = " + samplingInterval + " seconds");
		System.out.println("# additional sampling rate per web page call = " + percentilePageSampling + " %");
		System.out.println("# additional sampling rate per url call = " + percentileUrlSampling + " %");
		System.out.println("# extended sampling per url call = " + PerformanceDataTickExtension.extTypeToString(percentileUrlSamplingAddOption).toLowerCase());
		System.out.print("# max loops per user = ");
		if (maxPlannedLoops == 0)
			System.out.println("unlimited");
		else
			System.out.println("" + maxPlannedLoops + " loops");
		if (downlinkBandwidth > 0)
			System.out.println("# max downlink bandwidth per user = " + downlinkBandwidth + " kbps");
		if (uplinkBandwidth > 0)
			System.out.println("# max uplink bandwidth per user = " + uplinkBandwidth + " kbps");
		System.out.println("# http protocol version = v" + httpProtocolVersion);
		System.out.println("# ssl protocol version = " + sslProtocolVersion);
		if (sslSessionCacheTimeout != 0)
			System.out.println("# ssl session cache timeout = " + sslSessionCacheTimeout + " seconds");
		else
			System.out.println("# ssl session cache disabled");
		if (resultFile != null)
			System.out.println("# result file = " + resultFile);
		else
			System.out.println("# no result file");
		if (debugFailedLoops)
			System.out.println("# debug failed loops");
		if (debugLoops)
			System.out.println("# debug loops");
		if (debugHttp)
			System.out.println("# debug http protocol headers");
		if (debugContent)
			System.out.println("# debug http content data");
		if (debugCookies)
			System.out.println("# debug cookies");
		if (debugKeepAlive)
			System.out.println("# debug keep-alive (socket pool)");
		if (debugSsl)
			System.out.println("# debug ssl (https)");
		
		
		// ----------------------------
		// *** initialize load test ***
		// ----------------------------
		
		
		// initialize performance data
		// ---------------------------
		final int PAGE_BREAKS = 9;  // number of page breaks in execute()  - modify this value if you add or delete some page breaks
		final int MAX_THREAD_STEPS = 286;  // number of URL requests in execute() - modify this value if you add or delete some requests
		performanceData = new PerformanceData(PAGE_BREAKS, MAX_THREAD_STEPS, concurrentUsers, -1, plannedTestDuration, maxPlannedLoops, httpProtocolVersion, plannedStartupDelay, plannedRequestTimeout, samplingInterval, percentilePageSampling, percentileUrlSampling, percentileUrlSamplingAddOption);
		performanceData.setInfoText("SFEditEmployeeProfileSM");
		performanceData.setExecutorsAnnotation(testRunAnnotation);
		if (commonNextProxyConfig != null)
		{
			performanceData.setProxyInfo(proxyHttpHost, proxyHttpPort, proxyHttpsHost, proxyHttpsPort);
			performanceData.addTestDescription("*** Warning: Load test executed via outbound proxy ***");
		}
		performanceData.setResultFileName(resultFile);
		performanceData.setDumpStream(System.out, "# ");
		performanceData.setMaxErrorSnapshots(maxErrorSnapshots);		// 0 = unlimited
		if (maxErrorSnapshotMemory >= 0)
			performanceData.setMaxErrorSnapshotsMemory(maxErrorSnapshotMemory * 1048576l);		// value in bytes
		
		if (sslECC)
			performanceData.addTestDescription("*** Warning: SSL/TLS option -ecc enabled ***");
		
		if ((downlinkBandwidth != 0) || (uplinkBandwidth != 0))
		{
			String downlinkBandwidthStr = "unlimited";
			String uplinkBandwidthStr = "unlimited";
			
			if (downlinkBandwidth != 0)
				downlinkBandwidthStr = "" + downlinkBandwidth + " kbps";
			if (uplinkBandwidth != 0)
				uplinkBandwidthStr = "" + uplinkBandwidth + " kbps";
			
			performanceData.addTestDescription("*** Warning: Max. network bandwidth per user limited. downlink = " + downlinkBandwidthStr + ", uplink = " + uplinkBandwidthStr + " ***");
		}
		
		if ((percentileUrlSamplingAddOption != PerformanceDataTickExtension.EXT_TYPE_NOTYPE) && (percentileUrlSampling > 0))
			performanceData.addTestDescription("*** Warning: Option \"" + PerformanceDataTickExtension.extTypeToString(percentileUrlSamplingAddOption).toLowerCase() + "\" enabled for additional sampling rate per URL call ***");
		if (debugFailedLoops)
			performanceData.addTestDescription("*** Warning: Debug failed loops enabled ***");
		if (debugLoops)
			performanceData.addTestDescription("*** Warning: Debug loops enabled ***");
		if (debugHttp)
			performanceData.addTestDescription("*** Warning: Debug HTTP protocol headers enabled ***");
		if (debugContent)
			performanceData.addTestDescription("*** Warning: Debug HTTP content data enabled ***");
		if (debugCookies)
			performanceData.addTestDescription("*** Warning: Debug cookies enabled ***");
		if (debugKeepAlive)
			performanceData.addTestDescription("*** Warning: Debug keep-alive enabled ***");
		if (debugSsl)
			performanceData.addTestDescription("*** Warning: Debug SSL/TLS enabled ***");
		if (!sslProtocolVersion.equalsIgnoreCase("all"))
			performanceData.addTestDescription("*** Warning: SSL/TLS protocol version fixed to " + sslProtocolVersion.toUpperCase() + " ***");
		if (sslSessionCacheTimeout == 0)
			performanceData.addTestDescription("*** Warning: SSL/TLS session cache disabled ***");
		if (singleUserMode)
		{
			String singleUserModeWarning = "*** Warning: Single user mode enabled ***";
			System.out.println(singleUserModeWarning);
			performanceData.addTestDescription(singleUserModeWarning);
		}
		if (setUserAgentStr != null)
		{
			String overrideUserAgentWarning = "*** Warning: User agent set to \"" + setUserAgentStr + "\" ***";
			System.out.println(overrideUserAgentWarning);
			performanceData.addTestDescription(overrideUserAgentWarning);
		}
		
		
		// ready to start load test...
		initNull(concurrentUsers);
		performanceData.setUserContextTable(getUserContextTable());
		
		// ... but init first remote interface ...
		initRemote(args);
		
		// ... and init plug-in class loader ...
		try
		{
			if (getPluginClassLoader() == null)
				setPluginClassLoader(new LoadtestPluginClassLoader(getSymmetricEncryptContext(), getEncryptedClasspathList()));
		}
		catch (Throwable pluginClassLoaderThrowable)
		{
			System.out.println("*** ERROR: Unable to load encrypted files ***");
			pluginClassLoaderThrowable.printStackTrace();
			System.exit(-1);
		}
		
		// ... and check multihomed option ...
		initMultihomed(args);
		
		// ... and add dynaTrace session ID to load test result - if available ...
		initDynaTrace();
		
		
		// use test-specific DNS hosts file (optional) ?
		String dnsHostsFile = ParseArgs.getIgnoreCaseString(args, "-dnshosts");
		if (dnsHostsFile != null)
		{
			try
			{
				dnsCache = new DNSCache(getSymmetricEncryptContext(), dnsHostsFile);
			}
			catch (IOException ie)
			{
				System.out.println("*** ERROR: unable to read DNS hosts file " + dnsHostsFile + " ***");
				System.out.println("*** Hint: you have to ZIP " + dnsHostsFile + " together with the compiled class of the load test program ***");
				ie.printStackTrace();
				System.exit(-1);
			}
		}
		
		// use test-specific DNS translation table (optional) ?
		String dnsTranslationTableFile = ParseArgs.getIgnoreCaseString(args, "-dnstranslation");
		if (dnsTranslationTableFile != null)
		{
			try
			{
				DNSTranslationTable dnsTranslationTable = new DNSTranslationTable(getSymmetricEncryptContext(), new File(dnsTranslationTableFile));
				if (dnsCache == null)
					dnsCache = new DNSCache();
				dnsCache.setDNSTranslationTable(dnsTranslationTable);
			}
			catch (IOException ie)
			{
				System.out.println("*** ERROR: unable to read DNS translation table file " + dnsTranslationTableFile + " ***");
				System.out.println("*** Hint: you have to ZIP " + dnsTranslationTableFile + " together with the compiled class of the load test program ***");
				ie.printStackTrace();
				System.exit(-1);
			}
		}
		
		// use test-specific DNS servers (optional) ?
		String dnsSrvStr = ParseArgs.getIgnoreCaseString(args, "-dnssrv");
		if (dnsSrvStr != null)
		{
			ArrayList<String> dnsSrvList = new ArrayList<String>();
			StringTokenizer dnsTok = new StringTokenizer(dnsSrvStr, ",;");
			while (dnsTok.hasMoreTokens())
				dnsSrvList.add(dnsTok.nextToken());
			if (dnsCache == null)
				dnsCache = new DNSCache(dnsSrvList);
			else
				dnsCache.setDnsServers(dnsSrvList);
		}
		
		// enable DNS TTL ?
		if (ParseArgs.hasOption(args, "-dnsenattl"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.enableTTL();
		}
		
		// set fixed DNS TTL ?
		Integer dnsFixTTL = ParseArgs.getInteger(args, "-dnsfixttl");
		{
			if (dnsFixTTL != null)
			{
				if (dnsCache == null)
					dnsCache = new DNSCache();
				dnsCache.setFixedTTL(dnsFixTTL.intValue());
			}
		}
		
		// enable DNS resolves per loop ?
		if (ParseArgs.hasOption(args, "-dnsperloop"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsPerLoop = true;
		}
		
		// enable DNS statistic ?   // note: use this option only if not any other, more specific DNS option is enabled.
		if (ParseArgs.hasOption(args, "-dnsstatistic"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
		}
		
		// debug DNS resolver ?
		if (ParseArgs.hasOption(args, "-dnsdebug"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setDebugToStdout(true);
		}
		
		// enable IPv6 
		if (ParseArgs.hasIgnoreCaseOption(args, "-enableIPv6"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setEnableIPv6(true);
			String networkInterfaceName = ParseArgs.getString(args, "-enableIPv6");
			if(null != networkInterfaceName && !networkInterfaceName.startsWith("-"))
				dnsCache.setNetworkInterfaceName(networkInterfaceName);
		}
		
		// enable IPv6 and V4 
		if (ParseArgs.hasIgnoreCaseOption(args, "-enableIPv6v4"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setEnableIPv6v4(true);
			String networkInterfaceName = ParseArgs.getString(args, "-enableIPv6v4");
			if(null != networkInterfaceName && !networkInterfaceName.startsWith("-"))
				dnsCache.setNetworkInterfaceName(networkInterfaceName);
		}
		
		if (dnsCache != null)
		{
			// update performance data with DNS settings
			performanceData.addDNSCacheStatistic(dnsCache.getCacheStatistic());
			performanceData.addTestDescription("*** Warning: OS-independent DNS access enabled. " + dnsCache.getConfigInfoText() + " ***");
			if (dnsPerLoop)
				performanceData.addTestDescription("*** Warning: DNS option -dnsperloop enabled ***");
			
			// log DNS settings
			System.out.println("# OS-independent DNS access enabled. " + dnsCache.getConfigInfoText());
			if (dnsPerLoop)
				System.out.println("# DNS option -dnsperloop enabled");
		}
		
		// initialize input files
		try
		{
			Login_txt = new VarInputFileReader(getSymmetricEncryptContext(), "Login.txt", "#", ",", AbstractInputFileReader.EOF_REOPEN_FILE, prxCharEncoding);
			Login_txt.setTrimValues(true);
		}
		catch (IOException ie)
		{
			System.out.println("*** ERROR: UNABLE TO OPEN INPUT FILE ***");
			ie.printStackTrace();
			System.exit(-2);
		}
		
		// calculate sampling offset and virtual user startup offset for cluster jobs (time shift per cluster member)
		int samplingTimeshift = 0;	// value in seconds
		if (!ParseArgs.hasOption(args, "-nosdelayCluster"))
		{
			if ((getClusterTotalMemberCount() > 1) && (getClusterMemberLocalId() > 0))
			{
				samplingTimeshift = Math.round(((float) samplingInterval / (float) getClusterTotalMemberCount()) * (float) getClusterMemberLocalId());
				System.out.println("# samplingTimeshift = " + samplingTimeshift + " seconds");
				
				long startupDelayOffset = (plannedStartupDelay / ((long) getClusterTotalMemberCount())) * ((long) getClusterMemberLocalId());
				System.out.println("# startupDelayTimeshift = " + startupDelayOffset + " milliseconds");
				System.out.println();
				if (startupDelayOffset > 0)
				{
					try { sleepRemoteInterruptable(startupDelayOffset); } catch (InterruptedException ie) {}
				}
			}
		}
		
		
		// update performance data
		// -----------------------
		testDurationStart = System.currentTimeMillis();
		performanceData.setStartDate();
		performanceData.addSnapshot(getCpuUsagePercent());
		performanceData.setSnapshotsTimeshift(samplingTimeshift);
		performanceData.setEndDate();
		
		// initialize global context for plug-ins  
		LoadtestPluginContext globalPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, new SFEditEmployeeProfileSM());
		
		
		// --------------------------
		// *** start of load test ***
		// ---------------------------
		
		
		// special case for execution plans - start test with zero virtual users
		// ---------------------------------------------------------------------
		if (hasExecutionPlan())
		{
			if (concurrentUsers != 0)
			{
				System.out.println("*** Fatal Error: Load test with execution plan must start with zero number of virtual users - Load test program aborted ***");
				System.exit(1);
			}
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				SFEditEmployeeProfileSM simulatedUser = new SFEditEmployeeProfileSM(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				
				HttpLoadTestUserContext userContext = new HttpLoadTestUserContext(simulatedUser, null);
				userContext.setLoadTestUserExecutionPlanPlaceholder();
				getUserContextTable().getUserContextList().add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
		}
		
		
		// start virtual users as threads (normal case)
		// --------------------------------------------
		usersToBeIncreasedAtStartupOffset.set(concurrentUsers);
		for (int x = 0; x < concurrentUsers; x++)
		{
			if (cancelIncrementDecrementUser || cancelInitialIncrementUser)
			{
				usersToBeIncreasedAtStartupOffset.set(0);
				break;
			}
			
			// start load test thread
			// ----------------------
			Thread t = null;
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				SFEditEmployeeProfileSM simulatedUser = new SFEditEmployeeProfileSM(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				t = new Thread(simulatedUser);
				String threadName = "" + getUserContextTable().getUserContextList().size();
				threadName = THREAD_NAME.substring(0, 7 - threadName.length()) + threadName;
				t.setName(threadName);
				if (debugLoops && (simulatedUser.getLog().size() > 0))
				{
					synchronized (dumpLock)
					{
						simulatedUser.dumpLog(threadName + " ", System.out);		// dump log of constructor
					}
				}
				HttpLoadTestUserContext userContext = new HttpLoadTestUserContext(simulatedUser, t);
				getUserContextTable().getUserContextList().add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
			t.start();
			usersToBeIncreasedAtStartupOffset.decrementAndGet();
			System.out.println("# --- thread " + t.getName() + " created --- " + ZoneTime.dateToShortString() + " ---");
			
			while (isSuspend())
			{
				try { Thread.currentThread().sleep(100); } catch (InterruptedException ie) { break; }
				if (abortedByRemote() || abortedByEofInputFile())
					break;
				
				// check if max test duration reached during suspend
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
					break;
				
				// display and sample temporary performance data all "sampling interval" seconds - also during suspend
				if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
				{
					performanceData.addSnapshot(getCpuUsagePercent());
					performanceData.setEndDate();
				}
			}
			
			if (abortedByRemote() || abortedByEofInputFile())
				break;
			
			if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				break;
			
			// startup delay for next thread
			// -----------------------------
			try
			{
				if (!singleUserMode)   // create concurrent users
				{
					if (plannedStartupDelay <= 3000)
						sleepRemoteInterruptable(plannedStartupDelay);
					else
					{
						long startupDelayStartTime = System.currentTimeMillis();
						while (true)
						{
							if (abortedByRemote() || abortedByEofInputFile())
								break;
							if ((System.currentTimeMillis() - startupDelayStartTime) >= plannedStartupDelay)
								break;
							
							Thread.currentThread().sleep(100);
							
							// display and sample temporary performance data all "sampling interval" seconds
							if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
							{
								performanceData.addSnapshot(getCpuUsagePercent());
								performanceData.setEndDate();
							}
						}
						while (isSuspend())
						{
							try { Thread.currentThread().sleep(100); } catch (InterruptedException ie) { break; }
							if (abortedByRemote() || abortedByEofInputFile())
								break;
							
							// check if max test duration reached during suspend
							if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
								break;
							
							// display and sample temporary performance data all "sampling interval" seconds - also during suspend
							if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
							{
								performanceData.addSnapshot(getCpuUsagePercent());
								performanceData.setEndDate();
							}
						}
						
					}
				}
				else
					t.join();   // single user mode
			}
			catch (InterruptedException ie) { break; }
			if (abortedByRemote() || abortedByEofInputFile())
				break;
			
			
			// display and sample temporary performance data all "sampling interval" seconds
			if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
			{
				performanceData.addSnapshot(getCpuUsagePercent());
				performanceData.setEndDate();
				if (!isRemote())
				{
					synchronized (dumpLock)
					{
						performanceData.dump(false);
					}
				}
			}
		}
		usersToBeIncreasedAtStartupOffset.set(0);	// just in case that a thread is not started for any reason
		
		
		// wait for test-end in a loop
		// ---------------------------
		boolean allDone = false;
		while (!allDone)
		{
			// test aborted ?
			if (abortedByRemote() || abortedByEofInputFile())
			{
				nearRemoteEnd();
				String abort = "";
				if (abortedByRemote())
					abort = "*** test aborted by remote command ***";
				if (abortedByEofInputFile())
				{
					abort = "*** test aborted at eof of input file ***";
					performanceData.addTestDescription(abort);
				}
				synchronized (dumpLock)
				{
					addSSLCacheStatistic();
					performanceData.addSnapshot(getCpuUsagePercent());
					performanceData.setEndDate();
					
					if (!isRemote())
						performanceData.dump(false);
					if (resultFile != null)
						try { performanceData.writeObjectToFile(getSymmetricEncryptContext(), resultFile); } catch (IOException ie) { ie.printStackTrace(); }
					
					System.out.println();
					System.out.println(abort);
					System.out.println();
					System.out.flush();
					try { Thread.currentThread().sleep(10000); } catch (InterruptedException ie) {}
					System.exit(0);
				}
			}
			
			// display and sample temporary performance data all "sampling interval" seconds
			if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
			{
				performanceData.addSnapshot(getCpuUsagePercent());
				performanceData.setEndDate();
				if (!isRemote())
				{
					synchronized (dumpLock)
					{
						performanceData.dump(false);
					}
				}
			}
			
			// check if test has been done in case of decrement users to zero
			if ((decrementUser) && (plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				decrementUser = false;
			// check if test has been done
			if (!hasExecutionPlan())
				allDone = isTestDone();
			else
			{
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				{
					performanceData.addTestDescription("*** Warning: Load test aborted. Execution plan time limit exceeded after " + plannedTestDuration + " seconds ***");
					triggerAbort();
				}
			}
			
			// if not all is done: sleep one second
			if (!allDone)
				try { sleepRemoteInterruptable(1000); } catch (InterruptedException ie) { break; }
		} // end of wait loop
		
		
		// mark near end of test - only if a remote interface has been used
		nearRemoteEnd();
		
		
		
		// final test result - test completed
		// ----------------------------------
		performanceData.addSnapshot(getCpuUsagePercent());
		performanceData.setEndDate();
		
		// save test result
		performanceData.dump(true);
		if (resultFile != null)
			try { performanceData.writeObjectToFile(getSymmetricEncryptContext(), resultFile); } catch (IOException ie) { ie.printStackTrace(); }
		
		// all done
		System.out.flush();
		
		// wait for official end of test - only if a remote interface has been used
		waitRemoteEnd();
		
		System.out.println();
		System.out.println("Result File: " + resultFile);
		
		// now dead
		System.exit(0);
	}


	/**
	 * implement VaryingLoadInterface: support to increment the number of simulated users at runtime.
	 */
	public void setIncrementUser(long startTime)
	{
		incrementUserStartTime = startTime;
		incrementUserFlag = true;
	}

	public boolean isIncrementUser()
	{
		return incrementUserFlag;
	}

	public long getIncrementUserStartTime()
	{
		return incrementUserStartTime;
	}

	public void setIncrementUserStartTime(long startTime)
	{
		incrementUserStartTime = startTime;
	}

	public void clearIncrementUser()
	{
		incrementUserFlag = false;
	}

	public int incrementUsers(int numAddUsers, long startupDelay)
	{
		if (startupDelay < 0)
			startupDelay = plannedStartupDelay;
		return incrementUsersImplementation(numAddUsers, startupDelay, this);
	}

	static int incrementUsersImplementation(int numAddUsers, long startupDelay, HttpLoadTest httpLoadTest)
	{
		long startupDelayOffset = 0;
		if ((getClusterTotalMemberCount() > 1) && (getClusterMemberLocalId() > 0))
			startupDelayOffset = (startupDelay / ((long) getClusterTotalMemberCount())) * ((long) getClusterMemberLocalId());
		
		ArrayList<HttpLoadTestUserContext> addUserContextList = new ArrayList<HttpLoadTestUserContext>(numAddUsers);
		for (int x = 0; x < numAddUsers; x++)
		{
			if (abortedByRemote() || abortedByEofInputFile())
				return x;
			
			// initialize load test thread
			// ---------------------------
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				SFEditEmployeeProfileSM simulatedUser = new SFEditEmployeeProfileSM(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				HttpLoadTestUserContext userContext = prepareIncrementUser(simulatedUser, System.currentTimeMillis() + startupDelayOffset + (x * startupDelay));
				addUserContextList.add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
				if (debugLoops && (simulatedUser.getLog().size() > 0))
				{
					synchronized (dumpLock)
					{
						simulatedUser.dumpLog(userContext.getLoadTestThread().getName() + " ", System.out);		// dump log of constructor
					}
				}
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
		}
		
		// start load test threads by a thread
		// -----------------------------------
		HttpLoadTestIncrementUserThread incrementUserThread = new HttpLoadTestIncrementUserThread(httpLoadTest, addUserContextList);
		incrementUserThread.start();
		return numAddUsers;
	}


	/**
	 * Internal method used to load and apply next proxy settings from ZBAProxySettings.properties file.
	 * Settings are applied only if file exists and nextProxyIsActive is set to true in the file.
	 * Note that settings stored with the session, will be ineffective.
	 *
	 * @since V5.5-D
	 */
	private void applyNextProxySettingsFromFileIfExists()
	{
		
		String filename = "ZBAProxySettings.properties";
		BufferedReader bin = null;
		SymmetricEncryptContext decryptContext = getSymmetricEncryptContext();
		File file = new File(filename);
		
		if (file.exists())
		// open input file
		try
		{
			if (decryptContext == null)
			{
				bin = new BufferedReader(new InputStreamReader(new FileInputStream(filename), Charset.forName("UTF-8")));
			}
			else
			{
				// create a reader stream that decrypts the data on the fly
				bin = new BufferedReader(new InputStreamReader(SymmetricEncrypt.getCipherInputStream(new FileInputStream(filename), decryptContext), Charset.forName("UTF-8")));
			}
			
			if (bin != null)
			{
				Properties nextProxyConfigProperties = new Properties();
				nextProxyConfigProperties.load(bin);
				NextProxyConfig nextProxyConfig = new NextProxyConfig();
				nextProxyConfig.setActive(Boolean.valueOf(nextProxyConfigProperties.getProperty("nextProxyIsActive")));
				proxyEnabled = nextProxyConfig.isActive();                             // if false: do not use a proxy server
				
				if (proxyEnabled)
				{
					nextProxyConfig.disableHttpProxyCache(Boolean.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpCacheDisabled")));
					proxyCacheDisabled = nextProxyConfig.isDisabledHttpProxyCache();
					nextProxyConfig.setHttpHost(nextProxyConfigProperties.getProperty("nextProxyHttpHost"));
					proxyHttpHost = nextProxyConfig.getHttpHost();
					nextProxyConfig.setHttpPort(Integer.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpPort")));
					proxyHttpPort = nextProxyConfig.getHttpPort();
					nextProxyConfig.setHttpsHost(nextProxyConfigProperties.getProperty("nextProxyHttpsHost"));
					proxyHttpsHost = nextProxyConfig.getHttpsHost();
					nextProxyConfig.setHttpsPort(Integer.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpsPort")));
					proxyHttpsPort = nextProxyConfig.getHttpsPort();
					nextProxyConfig.setAuthUsername(nextProxyConfigProperties.getProperty("nextProxyAuthUsername"));
					nextProxyConfig.setAuthPassword(nextProxyConfigProperties.getProperty("nextProxyAuthPassword"));
					nextProxyConfig.setNoNextProxy(nextProxyConfigProperties.getProperty("noNextProxy"));
					noProxyFor = nextProxyConfig.getNoNextProxy();
					
					String proxyAuth = "";
					
					if (nextProxyConfig.getAuthUsername() != null)
					{
						proxyAuth = nextProxyConfig.getAuthUsername() + ":";
						if (nextProxyConfig.getAuthPassword() != null)
							proxyAuth = proxyAuth + nextProxyConfig.getAuthPassword();
					}
					
					String  proxyAuthorization = null;
					
					if (proxyAuth.length() > 1)
						proxyAuthorization = Base64Encoder.encode(proxyAuth);		// Base 64 encoded - used for basic authentication only
					
					commonNextProxyConfig = new NextProxyConfig(proxyEnabled, proxyCacheDisabled, proxyHttpHost, proxyHttpPort, proxyHttpsHost, proxyHttpsPort, proxyAuthorization, noProxyFor);
					
					log("*** Warning: Applying proxy configuration from file " + filename + " ***");
				}
				
			}
		}
		catch (Throwable tr)
		{
			log("*** Unable to load proxy configuration from properties file " + filename + " ***");
			tr.printStackTrace();
		}
		finally
		{
			if (bin != null)
			{
				try { bin.close(); } catch (Exception e) {}
			}
		}
		
	}
		

}	// end of class

