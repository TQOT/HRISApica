
// *********************************************************************************************
//
// Automatically Generated Load Test Program
// -----------------------------------------
//
// Source: UpdateEmoloyeeProfile_PROD_SM.java
// Date  : 09 Mar 2021 08:50:09 PST
// Author: Apica ZebraTester V5.5-F / automatically generated
//
// Procedure Copyright by Apica
// All Rights Reserved
//
// http://www.apicasystem.com                                         http://www.zebratester.com
// *********************************************************************************************


import java.io.*;
import java.nio.charset.Charset;
import java.util.*;
import java.util.concurrent.atomic.*;
import dfischer.utils.AbstractInputFileReader;
import dfischer.utils.Base64Decoder;
import dfischer.utils.Base64Encoder;
import dfischer.utils.ConvertToDoubleNumber;
import dfischer.utils.ContentTokenExtractor;
import dfischer.utils.ContentTokenExtractorItem;
import dfischer.utils.Cookie;
import dfischer.utils.CookieHandler;
import dfischer.utils.DigestAuthContext;
import dfischer.utils.DNSCache;
import dfischer.utils.DNSTranslationTable;
import dfischer.utils.DynamicProtobufContentParser;
import dfischer.utils.ExternalParamFile;
import dfischer.utils.FileCache;
import dfischer.utils.GenericPluginInterface;
import dfischer.utils.GetRealTimeUserInputFieldsInterface;
import dfischer.utils.HtmlContentParser;
import dfischer.utils.HtmlHeaderCookieExtractor;
import dfischer.utils.HttpLoadTest;
import dfischer.utils.HttpLoadTestIncrementUserThread;
import dfischer.utils.HttpLoadTestUserContext;
import dfischer.utils.HttpSocketPool;
import dfischer.utils.HttpTestURL;
import dfischer.utils.HttpTestURLDNSContext;
import dfischer.utils.HttpTestURLThreadHandler;
import dfischer.utils.InlineScriptExecutionException;
import dfischer.utils.InlineScriptExecutor;
import dfischer.utils.InnerLoopContext;
import dfischer.utils.JSONHtmlBasedExtractor;
import dfischer.utils.JSONPathBasedExtractor;
import dfischer.utils.JSONPathBasedExtractorItem;
import dfischer.utils.Lib;
import dfischer.utils.LoadtestInlineScriptContext;
import dfischer.utils.LoadtestInlineScriptVar;
import dfischer.utils.LoadtestPluginClassLoader;
import dfischer.utils.LoadtestPluginContext;
import dfischer.utils.NextProxyConfig;
import dfischer.utils.ParseArgs;
import dfischer.utils.ParseUrl;
import dfischer.utils.PerformanceData;
import dfischer.utils.PerformanceDataTickExtension;
import dfischer.utils.ProtobufFieldAndValueElement;
import dfischer.utils.ProtobufLib;
import dfischer.utils.RealTimeUserInputField;
import dfischer.utils.ScreenshotImage;
import dfischer.utils.SetThreadStepInterface;
import dfischer.utils.SSLInit;
import dfischer.utils.SSLSessionCacheStatistic;
import dfischer.utils.SSLSessionCacheStatisticInterface;
import dfischer.utils.SuspendResumeInterface;
import dfischer.utils.SymmetricEncrypt;
import dfischer.utils.SymmetricEncryptContext;
import dfischer.utils.TextLineTokenExtractor;
import dfischer.utils.TextLineTokenExtractorItem;
import dfischer.utils.ThreadStepInterface;
import dfischer.utils.UserInputField;
import dfischer.utils.UserTransactionContext;
import dfischer.utils.UserTransactionRuntimeHandler;
import dfischer.utils.VarInputFileReader;
import dfischer.utils.VarRandomInputFileReader;
import dfischer.utils.VaryingLoadInterface;
import dfischer.utils.VaryingTestDurationInterface;
import dfischer.utils.XmlContentParser;
import dfischer.utils.XmlDoctypeCommentParser;
import dfischer.utils.ZoneTime;
import dfischer.proxysniffer.ProxySnifferVarSourceInlineScript;
import dfischer.utils.WebSocketPluginInterface;
import dfischer.utils.BoundaryBasedExtractor;
import dfischer.utils.BoundaryBasedExtractorItem;
import dfischer.utils.RegExpBasedExtractor;
import dfischer.utils.RegExpBasedExtractorItem;
import dfischer.utils.XpathBasedExtractor;
import dfischer.utils.XpathBasedExtractorItem;
import dfischer.proxysniffer.WebSocketData;
import dfischer.utils.HttpTestWebsocketContext;
import dfischer.websocket.*;
import replay.ReplaySnapShotsDump;


/**
 * Automatically generated load test program.
 */
public class UpdateEmoloyeeProfile_PROD_SM extends HttpLoadTest implements Runnable, ThreadStepInterface, SetThreadStepInterface, SSLSessionCacheStatisticInterface, VaryingLoadInterface, VaryingTestDurationInterface, SuspendResumeInterface, GetRealTimeUserInputFieldsInterface
{
	public static final String prxVersion = "V5.5-F";
	public static final int    prxCharEncoding = 3;                         // 1 = OS Default, 2 = ISO-8859-1, 3 = UTF-8
	public static final String testDescription = "recording";

	public static String USER_AGENT_1 = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0";

	private static final boolean CONTAINS_PARALLEL_EXECUTED_URLS = false;
	private static final int MAX_PARALLEL_THREADS_PER_USER = 6;                       // default value for max. parallel executed URLs per user
	private static int maxParallelThreadsPerUser = MAX_PARALLEL_THREADS_PER_USER;     // configured value for max. parallel executed URLs per user

	private static final boolean CONTAINS_EXTERNAL_RESOURCES = false;       // note: external resources are typically additional Java library files (*.jar files) invoked by self-developed plug-ins. Consider that Input Files and the Main Class of Plug-Ins are NOT external resources in this context because ZebraTester knows already their declarations.

	// --- WebSocket Object ---
	WebSocketData webSocketData = null;                                     // WebSocket Object that contains data of recorded WebSocket frames.
	WebSocketPluginInterface[] webSocketPluginsForURL = null;               // all assiciated web socket plugins for specific URL.

	// --- proxy configuration ---
	private static boolean proxyEnabled = false;                             // if false: do not use a proxy server
	private static boolean proxyCacheDisabled = true;
	private static String  proxyHttpHost = "";
	private static int     proxyHttpPort = -1;
	private static String  proxyHttpsHost = "";
	private static int     proxyHttpsPort = -1;
	private static String  noProxyFor = "";
	private static String  proxyAuthorization = null;
	private static NextProxyConfig commonNextProxyConfig = null;
	private NextProxyConfig userNextProxyConfig = null;
	
	private static int plannedStartupDelay = 200;                           // startup delay between concurrent users in milliseconds, see main argument "-sdelay"
	private static int plannedTestDuration = -1;                            // planned load test duration in seconds, 0 = unlimited, see main argument "-d"
	private static int maxPlannedLoops = 0;  								// maximum planned loops per user, 0 = unlimited, see main argument "-maxloops"
	private static int pacing = 0;  								        // pacing for loops per user, 0 = no pacing, see main argument "-pacing"
	private static int plannedRequestTimeout = 0;                           // planned request timeout in seconds, see main argument "-t"
	private static int plannedConnectTimeout = 0;                           // planned TCP/IP socket connect timeout in seconds (default = use plannedRequestTimeout), see main argument "-tconnect"
	
	private static String defaultTimeZone = "PST";                          // use main argument -tz <timezone> to alter
	private static char defaultNumberGroupingSeparator = '\'';              // use main argument -dgs a|c to alter
	private static String sslProtocolVersion = "all";                       // applied ssl protocol version: "all" = v3/tls/tls11/tls12, use main argument -ssl to set a fixed protocol version
	private static boolean sslcmode = false;                                // support of deficient ssl servers, use main argument -sslcmode to enable
	private static boolean sslECC = true;                                   // elliptic curve cryptography (ECC) is enabled by default, use main argument -noECC to disable
	private static boolean sslSNI = true;                                   // server name indication (SNI) is enabled by default, use main argument -nosni to disable
	private static boolean sslSNICirical = false;                           // the SNI TLS extension is by default set as non-critical, use main argument -snicritical to set as critical
	private static boolean useTlsSessionTickets = false;                    // Session Tickets can only be used with TLS, use main argument -tlssessiontickets to set to use
	private static final long loopErrorDelay = 20;                          // error delay (in milliseconds) applied if a loop of a virtual user has failed
	private static final String THREAD_NAME = "T000000";                    // internal
	private static Integer dumpLock = new Integer(0);                       // internal
	private static Integer inputFileLock = new Integer(0);                  // internal
	private volatile int threadStep = ThreadStepInterface.THREAD_NO_STEP;   // internal
	private boolean urlCallPassed = false;                                  // internal
	private String localIpAddress = null;                                   // internal
	private static long downlinkBandwidth = 0;                              // max. downlink bandwidth per user. 0 = unlimited. use main argument -downlink <kbps> to alter
	private static long uplinkBandwidth = 0;                                // max. uplink bandwidth per user. 0 = unlimited. use main argument -uplink <kbps> to alter
	private static boolean dnsPerLoop = false;								// true if main argument "-dnsperloop" is set = perform new DNS resolves for each executed loop. normally false
	private HttpTestURLDNSContext userDNSContext = null;                    // user specific DNS context - normally null when no special DNS servers are used
	
	private static volatile boolean debugFailedLoops = false;               // true if main argument "-dfl" is set
	private static volatile boolean debugLoops = false;                     // true if main argument "-dl" is set
	private static volatile boolean debugHttp = false;                      // true if main argument "-dh" is set
	private static volatile boolean debugContent = false;                   // true if main argument "-dc" is set
	private static volatile boolean debugCookies = false;                   // true if main argument "-dC" is set
	private static volatile boolean debugKeepAlive = false;                 // true if main argument "-dK" is set
	private static volatile boolean debugSsl = false;                       // true if main argument "-dssl" is set
	
	private static String resultFile = null;                                // name of binary test result file or null
	private static String browserLanguage = null;                           // name of browser language, argument -browserlang <text>
	private static boolean replayMode = false;                              // indicated the replay mode of the load test, use main argument -replay to enable it
	
	private final static String httpProtocolVersion = "1.1";      // applied HTTP protocol version V1.1
	
	private static ExternalParamFile externalParamFile = null;                              // used only for very large parameter values (commonly unused)
	private static final String EXTERNAL_PARAM_FILE = "UpdateEmoloyeeProfile_PROD_SMExtParams.dat";// input file name for very large parameter values
	private static FileCache requestFileCache = new FileCache();  // file cache for large XML, SOAP and ASCII requests
	
	private int requestTimeout = -1;                              // thread input data from constructor, timeout per url request in seconds
	private int remainingLoops = -1;                              // thread input data from constructor, number of loops per thread (optional)
	private boolean checkLoopCount = false;                       // thread input data from constructor, number of loops per thread (optional)
	private int threadNumber = -1;                                // thread input data from constructor, internal thread number
	private int threadLoopCounter = 0;                            // internal loop counter per thread
	private volatile int userResumeStartWaitDelay = 0;            // internal, user specific delay when the load test execution is resumed
	private volatile boolean decrementEndOfLoopFlag = false;	  // internal flag to decrement the simulated user at runtime
	private volatile boolean incrementUserFlag = false;           // internal flag to increment the simulated user at runtime
	private volatile long incrementUserStartTime = -1;            // internal start time when increment the simulated user at runtime
	private static AtomicInteger totalLoopCounter = new AtomicInteger(0);    // internal overall loop counter

	private LoadtestPluginContext userPluginContext = null;       // plug-in context per user
	private LoadtestInlineScriptContext inlineScriptContext = null;          // re-used, scratch, the returned context of an inline script that runs at item or URL exec scope

	private Object sslSessionCache = null;                        // internal ssl session cache per thread
	private SSLSessionCacheStatistic sslStatistic = null;         // internal ssl session cache statistic per thread
	private static int sslSessionCacheTimeout = 300;              // timeout of ssl session cache in seconds, 0 = session cache disabled
	private static int sslHandshakeRandomGeneratorType = -1;      // invalid initial value, use the default secure random generator for SSL handshakes
	private HttpSocketPool socketPool = null;                     // re-used, scratch, internal socket pool per thread and loop
	private CookieHandler cookieHandler = null;                   // re-used, scratch, internal cookie handler per thread and loop

	private HttpTestURL testURL = null;                           // re-used, scratch, http request and response
	private HttpTestURLThreadHandler pageThreadHandler = null;    // re-used, scratch, support for parallel processing of http request within a page
	private int httpStatus = -1;                                  // re-used, scratch, http response status code from webserver
	private HtmlContentParser htmlContentParser = null;           // re-used, scratch, used to extract vars from http response
	private XmlContentParser xmlContentParser = null;             // re-used, scratch, used to extract vars from http response
	private JSONHtmlBasedExtractor jsonHtmlBasedExtractor = null; // re-used, scratch, used to extract vars from http response
	private DynamicProtobufContentParser protobufContentParser = null;  // re-used, scratch, used to extract vars from http response
	private TextLineTokenExtractor textLineTokenExtractor = null; // re-used, scratch, used to extract vars from http response
	private ContentTokenExtractor contentTokenExtractor = null;   // re-used, scratch, used to extract vars from http response
	private BoundaryBasedExtractor boundaryBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private RegExpBasedExtractor regExpBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private XpathBasedExtractor xpathBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private JSONPathBasedExtractor jsonPathBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	
	private volatile UserTransactionRuntimeHandler transactionHandler = new UserTransactionRuntimeHandler();		// re-used, support to manage user-defined transactions
	private Map<String,String> transactionContextMap = new HashMap<>();		// used to correctly measure the user-defined transactions

	private String C_BelizePlusLanding1 = null;          // var declaration from web admin var handler: scope = per loop
	private String vscrbdec = null;                      // var declaration from web admin var handler: scope = per loop
	private String vScrb = null;                         // var declaration from web admin var handler: scope = per loop
	private String C_UploadHash = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_RequestID = null;                   // var declaration from web admin var handler: scope = per loop
	private String C_SpID = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_CSRFToken2 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_Token2 = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_CSRFToken1 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_AjaxsecretKey = null;               // var declaration from web admin var handler: scope = per loop
	private String C_Token1 = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_CompanyGUID = null;                 // var declaration from web admin var handler: scope = per loop
	private String vSignature = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_zsessionID1 = null;                 // var declaration from web admin var handler: scope = per loop
	private String C_DeleteID = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_IDPName = null;                     // var declaration from web admin var handler: scope = per loop
	private String C_XsrfProtection = null;              // var declaration from web admin var handler: scope = per loop
	private String C_Signature2 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_Signature1 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_EventID2 = null;                    // var declaration from web admin var handler: scope = per loop
	private String vSAMLResponse3 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_EventID1 = null;                    // var declaration from web admin var handler: scope = per loop
	private String vSAMLResponse2 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest9 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest8 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_Login = null;                       // var declaration from web admin var handler: scope = per loop
	private String C_MoD2 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest7 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_MoD1 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest6 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest5 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_TenantID = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest4 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest3 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest2 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest1 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_RequestURI = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_AuthenticityToken1 = null;          // var declaration from web admin var handler: scope = per loop
	private String C_SAMLResponse1 = null;               // var declaration from web admin var handler: scope = per loop
	private String C_RelayState1 = null;                 // var declaration from web admin var handler: scope = per loop
	private String C_V2 = null;                          // var declaration from web admin var handler: scope = per loop
	private String C_V1 = null;                          // var declaration from web admin var handler: scope = per loop
	private String C_Merge1 = null;                      // var declaration from web admin var handler: scope = per loop
	
	/**
	 * constructor: called from load test plug-ins (scope = global).
	 */
	public UpdateEmoloyeeProfile_PROD_SM()
	{
		super();
	}


	/**
	 * constructor: called when a user is created (per user).
	 */
	public UpdateEmoloyeeProfile_PROD_SM(int maxLoops, int requestTimeout, int threadNumber)
	{
		super();
		this.requestTimeout = requestTimeout;
		this.remainingLoops = maxLoops;
		this.checkLoopCount = (maxLoops > 0);
		this.threadNumber = threadNumber;
		this.sslSessionCache = SSLInit.getNewSslSessionCache(sslSessionCacheTimeout);
		this.sslStatistic = new SSLSessionCacheStatistic();
		if (isMultihomed() && (!ipPerLoop()))
			this.localIpAddress = getNextMultihomedIpAddress();
		if (dnsCache != null)
			userDNSContext = new HttpTestURLDNSContext(dnsCache, threadNumber);
		
		applyNextProxySettingsFromFileIfExists();
		
		if (commonNextProxyConfig != null)
			// set proxy configuration data per user 
			userNextProxyConfig = new NextProxyConfig(commonNextProxyConfig);
		
		// initialize context for plug-ins which are executed per user
		userPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, this, threadNumber);
		if(replayMode)
		{
			replaySnapShotsDump = new ReplaySnapShotsDump();
		}
	}


	/**
	 * internal method: called when a user starts a loop.
	 * contains the recorded session which is called by users x loops.
	 * 
	 * @param totalLoopCounter total number of loops (0..n-1) counted overall threads. This value is unique per loop.
	 * 
	 * @return  true:  loop successful completed.
	 *          false: loop failed.
	 */
	private boolean execute(int totalLoopCounter) throws Exception
	{
		markStartOfLoop();
		threadStep = 0;                 // internal - start loop at thread step 0
		
		// enable DNS resolves per loop?
		if (dnsPerLoop)
			userDNSContext = new HttpTestURLDNSContext(dnsCache.clone(false), threadNumber);
		
		// debug http headers?
		Object httpLogVectorObject = null;
		if (debugHttp)
			httpLogVectorObject = this;
		
		// create socket pool per loop
		sslSessionCache = SSLInit.getNewSslSessionCache(sslSessionCacheTimeout);		// reset the SSL session cache to get new SSL session IDs for this loop
		socketPool = new HttpSocketPool(this, sslProtocolVersion, sslSessionCache, sslStatistic, sslcmode);
		if (plannedConnectTimeout > 0)
			socketPool.setConnectTimeout(plannedConnectTimeout);
		if (sslHandshakeRandomGeneratorType != -1)
			socketPool.setSslHandshakeRandomGeneratorType(sslHandshakeRandomGeneratorType);
		socketPool.setSupportEllipticCurves(sslECC);
		socketPool.setHintUseSNI(sslSNI);
		socketPool.setSniCritical(sslSNICirical);
		socketPool.setUseTlsSessionTickets(useTlsSessionTickets);
		if (debugKeepAlive)
		{
			socketPool.setlogVectorObject(this);
			if (debugSsl)
				socketPool.enableSslLog();
		}
		
		if (downlinkBandwidth > 0)
			socketPool.setDownlinkBandwidth(downlinkBandwidth);
		if (uplinkBandwidth > 0)
			socketPool.setUplinkBandwidth(uplinkBandwidth);
		
		if (isMultihomed())
		{
			if (ipPerLoop())
				localIpAddress = getNextMultihomedIpAddress();
			socketPool.setClientIpAddress(localIpAddress);
			log();
			log("multihomed client ip address = " + localIpAddress);
		}
		
		// setup cookie handler per loop
		cookieHandler = new CookieHandler();
		if (debugCookies)
			cookieHandler.setLogVectorInterface(this);
		
		// customised vars from web admin var handler: scope = per loop
		htmlContentParser = null;
		xmlContentParser = null;
		jsonHtmlBasedExtractor = null;
		protobufContentParser = null;
		C_BelizePlusLanding1 = null;
		vscrbdec = "";
		vScrb = null;
		C_UploadHash = null;
		C_RequestID = null;
		C_SpID = null;
		C_CSRFToken2 = null;
		C_Token2 = null;
		C_CSRFToken1 = null;
		C_AjaxsecretKey = null;
		C_Token1 = null;
		C_CompanyGUID = null;
		vSignature = null;
		C_zsessionID1 = null;
		C_DeleteID = null;
		C_IDPName = null;
		C_XsrfProtection = null;
		C_Signature2 = null;
		C_Signature1 = null;
		C_EventID2 = null;
		vSAMLResponse3 = null;
		C_EventID1 = null;
		vSAMLResponse2 = null;
		C_SAMLRequest9 = null;
		C_SAMLRequest8 = null;
		C_Login = null;
		C_MoD2 = null;
		C_SAMLRequest7 = null;
		C_MoD1 = null;
		C_SAMLRequest6 = null;
		C_SAMLRequest5 = null;
		C_TenantID = null;
		C_SAMLRequest4 = null;
		C_SAMLRequest3 = null;
		C_SAMLRequest2 = null;
		C_SAMLRequest1 = null;
		C_RequestURI = null;
		C_AuthenticityToken1 = null;
		C_SAMLResponse1 = null;
		C_RelayState1 = null;
		C_V2 = null;
		C_V1 = null;
		C_Merge1 = null;
		log();
		log("<<< C_BelizePlusLanding1 = " + C_BelizePlusLanding1);
		log("<<< vscrbdec = " + vscrbdec);
		log("<<< vScrb = " + vScrb);
		log("<<< C_UploadHash = " + C_UploadHash);
		log("<<< C_RequestID = " + C_RequestID);
		log("<<< C_SpID = " + C_SpID);
		log("<<< C_CSRFToken2 = " + C_CSRFToken2);
		log("<<< C_Token2 = " + C_Token2);
		log("<<< C_CSRFToken1 = " + C_CSRFToken1);
		log("<<< C_AjaxsecretKey = " + C_AjaxsecretKey);
		log("<<< C_Token1 = " + C_Token1);
		log("<<< C_CompanyGUID = " + C_CompanyGUID);
		log("<<< vSignature = " + vSignature);
		log("<<< C_zsessionID1 = " + C_zsessionID1);
		log("<<< C_DeleteID = " + C_DeleteID);
		log("<<< C_IDPName = " + C_IDPName);
		log("<<< C_XsrfProtection = " + C_XsrfProtection);
		log("<<< C_Signature2 = " + C_Signature2);
		log("<<< C_Signature1 = " + C_Signature1);
		log("<<< C_EventID2 = " + C_EventID2);
		log("<<< vSAMLResponse3 = " + vSAMLResponse3);
		log("<<< C_EventID1 = " + C_EventID1);
		log("<<< vSAMLResponse2 = " + vSAMLResponse2);
		log("<<< C_SAMLRequest9 = " + C_SAMLRequest9);
		log("<<< C_SAMLRequest8 = " + C_SAMLRequest8);
		log("<<< C_Login = " + C_Login);
		log("<<< C_MoD2 = " + C_MoD2);
		log("<<< C_SAMLRequest7 = " + C_SAMLRequest7);
		log("<<< C_MoD1 = " + C_MoD1);
		log("<<< C_SAMLRequest6 = " + C_SAMLRequest6);
		log("<<< C_SAMLRequest5 = " + C_SAMLRequest5);
		log("<<< C_TenantID = " + C_TenantID);
		log("<<< C_SAMLRequest4 = " + C_SAMLRequest4);
		log("<<< C_SAMLRequest3 = " + C_SAMLRequest3);
		log("<<< C_SAMLRequest2 = " + C_SAMLRequest2);
		log("<<< C_SAMLRequest1 = " + C_SAMLRequest1);
		log("<<< C_RequestURI = " + C_RequestURI);
		log("<<< C_AuthenticityToken1 = " + C_AuthenticityToken1);
		log("<<< C_SAMLResponse1 = " + C_SAMLResponse1);
		log("<<< C_RelayState1 = " + C_RelayState1);
		log("<<< C_V2 = " + C_V2);
		log("<<< C_V1 = " + C_V1);
		log("<<< C_Merge1 = " + C_Merge1);
		
		// initialize context for plug-ins which are executed per loop
		LoadtestPluginContext loopPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, this, threadNumber, socketPool, cookieHandler);
		



		// --- VIRTUAL PAGE #0 ---
		if (!executePage_0(totalLoopCounter, loopPluginContext, new InnerLoopContext(), 0,0, httpLogVectorObject))
			return false;



		// --- PAGE BREAK: Test [0] ---
		log();
		log();
		log("# Page #1: LaunchURL");
		log("# ------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #1: LaunchURL", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 1 failed
		
		// page 1 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [52] ---
		log();
		log();
		log("# Page #2: CompanyID");
		log("# ------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #2: CompanyID", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 2 failed
		
		// page 2 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [62] ---
		log();
		log();
		log("# Page #3: email");
		log("# --------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #3: email", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 3 failed
		
		// page 3 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [64] ---
		log();
		log();
		log("# Page #4: LogOn");
		log("# --------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #4: LogOn", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 4 failed
		
		// page 4 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [141] ---
		log();
		log();
		log("# Page #5: MyEmployeeProfile");
		log("# --------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #5: MyEmployeeProfile", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 5 failed
		
		// page 5 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [232] ---
		log();
		log();
		log("# Page #6: addLangskills");
		log("# ----------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #6: addLangskills", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 6 failed
			synchResponsesParallelRequestsPage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 6 failed
		
		// page 6 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [238] ---
		log();
		log();
		log("# Page #7: EnterSkillsDetails");
		log("# ---------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #7: EnterSkillsDetails", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 7 failed
		
		// page 7 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [248] ---
		log();
		log();
		log("# Page #8: SaveDetails");
		log("# --------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #8: SaveDetails", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_8(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 8 failed
			synchResponsesParallelRequestsPage_8(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_8(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 8 failed
		
		// page 8 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [253] ---
		log();
		log();
		log("# Page #9: EditSkills");
		log("# -------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #9: EditSkills", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_9(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 9 failed
			synchResponsesParallelRequestsPage_9(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_9(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 9 failed
		
		// page 9 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [259] ---
		log();
		log();
		log("# Page #10: SaveDelete");
		log("# --------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #10: SaveDelete", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_10(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 10 failed
			synchResponsesParallelRequestsPage_10(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_10(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 10 failed
		
		// page 10 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [264] ---
		log();
		log();
		log("# Page #11: LogOut");
		log("# ----------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #11: LogOut", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_11(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 11 failed
			synchResponsesParallelRequestsPage_11(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_11_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 11 failed
			synchResponsesParallelRequestsPage_11(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_11(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 11 failed
		
		// page 11 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);
		
		
		// loop successful done
		// --------------------
		
		markEndOfPage(performanceData);
		
		endOfExecuteLoop(true, null, -1, loopPluginContext);
		log();
		return true;
	}		// end of execute()
		
		
		
	/**
	 * internal method: called when a user has completed a loop.
	 */
	private void endOfExecuteLoop(boolean loopPassed, HttpTestURL testURL, int threadStep, LoadtestPluginContext loopPluginContext) throws Exception
	{
		// log URL if last call has failed
		if ((!loopPassed) && (testURL != null))
			log(testURL);
		
		// update plugin context
		loopPluginContext.setLoopPassed(loopPassed);
		if ((testURL != null) && (loopPluginContext.getHttpTestURL() == null))
			loopPluginContext.setHttpTestURL(testURL);
		if ((threadStep != -1) && (loopPluginContext.getThreadStep() == -1))
			loopPluginContext.setThreadStep(threadStep);
	}


	/**
	 * Recorded http requests of page #0.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_0(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{

		// all http requests of page #0 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #1: LaunchURL
		// # ------------------



		// --- HTTP REQUEST: Test [1] <- WEB ADMIN Index 1 ---
		String requestProt0001 = "https";
		String requestHost0001 = "performancemanager4.successfactors.com";
		int    requestPort0001 = 443;
		String requestFile0001 = "/sf/";
		String requestHeader0001 = "GET " + requestFile0001 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0001, requestHost0001, requestPort0001, requestHeader0001, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0001 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 18783
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors Business Execution Suite");		// Test [1] <- Index 1
		if(replayMode)
		{
			long proxyDataRecordId =1614262309173L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_AjaxsecretKey'
		ContentTokenExtractorItem contentTokenExtractorItem0001_1 = new ContentTokenExtractorItem("ajaxSecKey", "\t\n\r \"(),={}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0001_1);

		contentTokenExtractor.extractTokens();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_EventID1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0001_1 = new BoundaryBasedExtractorItem( "EID=" , "&CLOC",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0001_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_AjaxsecretKey'
			C_AjaxsecretKey = contentTokenExtractorItem0001_1.getResultToken();
			log("<<< C_AjaxsecretKey = " + C_AjaxsecretKey);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_AjaxsecretKey!= null && C_AjaxsecretKey.trim().length() == 0)
			{
				C_AjaxsecretKey = "";
				log("runtime note: the extraction of a new value for the variable 'C_AjaxsecretKey' ends up with an empty string - a substitute value was set");
				log("<<< C_AjaxsecretKey = " + C_AjaxsecretKey);
			}
		}
		catch (Exception e) { C_AjaxsecretKey = null; log(e); }
		if (C_AjaxsecretKey == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_AjaxsecretKey' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_EventID1'
			C_EventID1 = boundaryBasedContentExtractorItem0001_1.getResultText();
			log("<<< C_EventID1 = " + C_EventID1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_EventID1!= null && C_EventID1.trim().length() == 0)
			{
				C_EventID1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_EventID1' ends up with an empty string - a substitute value was set");
				log("<<< C_EventID1 = " + C_EventID1);
			}
		}
		catch (Exception e) { C_EventID1 = null; log(e); }
		if (C_EventID1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_EventID1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [2] <- WEB ADMIN Index 2 ---
		String requestProt0002 = "https";
		String requestHost0002 = "performancemanager4.successfactors.com";
		int    requestPort0002 = 443;
		String requestFile0002 = "/ui/extlib/XMLHttpRequest_1.0.5_sf.17/XMLHttpRequest.js";
		String requestHeader0002 = "GET " + requestFile0002 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0002, requestHost0002, requestPort0002, requestHeader0002, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0002 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2721
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [2] <- Index 2
		if(replayMode)
		{
			long proxyDataRecordId =1614262309689L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [3] <- WEB ADMIN Index 3 ---
		String requestProt0003 = "https";
		String requestHost0003 = "performancemanager4.successfactors.com";
		int    requestPort0003 = 443;
		String requestFile0003 = "/ui/extlib/yui_2.9_sf.3/js/yahoo-dom-event/yahoo-dom-event.js";
		String requestHeader0003 = "GET " + requestFile0003 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0003, requestHost0003, requestPort0003, requestHeader0003, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0003 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 13255
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [3] <- Index 3
		if(replayMode)
		{
			long proxyDataRecordId =1614262309830L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [4] <- WEB ADMIN Index 4 ---
		String requestProt0004 = "https";
		String requestHost0004 = "performancemanager4.successfactors.com";
		int    requestPort0004 = 443;
		String requestFile0004 = "/ui/extlib/yui_2.9_sf.3/js/animation/animation.js";
		String requestHeader0004 = "GET " + requestFile0004 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0004, requestHost0004, requestPort0004, requestHeader0004, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0004 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4887
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [4] <- Index 4
		if(replayMode)
		{
			long proxyDataRecordId =1614262309838L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [5] <- WEB ADMIN Index 5 ---
		String requestProt0005 = "https";
		String requestHost0005 = "performancemanager4.successfactors.com";
		int    requestPort0005 = 443;
		String requestFile0005 = "/ui/perflog/js/perflog_07617187397ffed9380c6b31948d3234.js";
		String requestHeader0005 = "GET " + requestFile0005 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0005, requestHost0005, requestPort0005, requestHeader0005, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0005 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4196
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [5] <- Index 5
		if(replayMode)
		{
			long proxyDataRecordId =1614262309853L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [6] <- WEB ADMIN Index 6 ---
		String requestProt0006 = "https";
		String requestHost0006 = "performancemanager4.successfactors.com";
		int    requestPort0006 = 443;
		String requestFile0006 = "/ui/extlib/yui_2.9_sf.3/js/connection/connection.js";
		String requestHeader0006 = "GET " + requestFile0006 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0006, requestHost0006, requestPort0006, requestHeader0006, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0006 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4707
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [6] <- Index 6
		if(replayMode)
		{
			long proxyDataRecordId =1614262309860L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [7] <- WEB ADMIN Index 7 ---
		String requestProt0007 = "https";
		String requestHost0007 = "performancemanager4.successfactors.com";
		int    requestPort0007 = 443;
		String requestFile0007 = "/ui/extlib/yui_2.9_sf.3/js/autocomplete/autocomplete.js";
		String requestHeader0007 = "GET " + requestFile0007 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0007, requestHost0007, requestPort0007, requestHeader0007, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0007 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15497
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [7] <- Index 7
		if(replayMode)
		{
			long proxyDataRecordId =1614262309867L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [8] <- WEB ADMIN Index 8 ---
		String requestProt0008 = "https";
		String requestHost0008 = "performancemanager4.successfactors.com";
		int    requestPort0008 = 443;
		String requestFile0008 = "/ui/juic/js/InterstitialUtil_1f1a1807326bb0d8ceaa3c1c842340d9.js";
		String requestHeader0008 = "GET " + requestFile0008 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0008, requestHost0008, requestPort0008, requestHeader0008, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0008 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [8] <- Index 8
		if(replayMode)
		{
			long proxyDataRecordId =1614262309968L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [9] <- WEB ADMIN Index 9 ---
		String requestProt0009 = "https";
		String requestHost0009 = "performancemanager4.successfactors.com";
		int    requestPort0009 = 443;
		String requestFile0009 = "/ui/extlib/jshash_2.2/sha256.js";
		String requestHeader0009 = "GET " + requestFile0009 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0009, requestHost0009, requestPort0009, requestHeader0009, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0009 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2403
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [9] <- Index 9
		if(replayMode)
		{
			long proxyDataRecordId =1614262309972L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [10] <- WEB ADMIN Index 10 ---
		String requestProt0010 = "https";
		String requestHost0010 = "performancemanager4.successfactors.com";
		int    requestPort0010 = 443;
		String requestFile0010 = "/ui/juic/js/GlobalFunctions_7c6c0000b683cb791f25f3210a0a1731.js";
		String requestHeader0010 = "GET " + requestFile0010 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0010, requestHost0010, requestPort0010, requestHeader0010, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0010 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 910
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [10] <- Index 10
		if(replayMode)
		{
			long proxyDataRecordId =1614262309979L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [11] <- WEB ADMIN Index 11 ---
		String requestProt0011 = "https";
		String requestHost0011 = "performancemanager4.successfactors.com";
		int    requestPort0011 = 443;
		String requestFile0011 = "/ui/surj/js/core/config-util_1f1411d7d63c13c9fff25c556f656cd6.js";
		String requestHeader0011 = "GET " + requestFile0011 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0011, requestHost0011, requestPort0011, requestHeader0011, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0011 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 771
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [11] <- Index 11
		if(replayMode)
		{
			long proxyDataRecordId =1614262309982L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [12] <- WEB ADMIN Index 12 ---
		String requestProt0012 = "https";
		String requestHost0012 = "performancemanager4.successfactors.com";
		int    requestPort0012 = 443;
		String requestFile0012 = "/ui/uicore/css/revolutionfont-Icons_e66c293a573ac22c088d0dae05237b02.css";
		String requestHeader0012 = "GET " + requestFile0012 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0012, requestHost0012, requestPort0012, requestHeader0012, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0012 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 675
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [12] <- Index 12
		if(replayMode)
		{
			long proxyDataRecordId =1614262309992L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [13] <- WEB ADMIN Index 13 ---
		String requestProt0013 = "https";
		String requestHost0013 = "performancemanager4.successfactors.com";
		int    requestPort0013 = 443;
		String requestFile0013 = "/ui/extlib/jquery_3.5.1/jquery.js";
		String requestHeader0013 = "GET " + requestFile0013 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0013, requestHost0013, requestPort0013, requestHeader0013, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0013 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 34457
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [13] <- Index 13
		if(replayMode)
		{
			long proxyDataRecordId =1614262310005L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [14] <- WEB ADMIN Index 14 ---
		String requestProt0014 = "https";
		String requestHost0014 = "performancemanager4.successfactors.com";
		int    requestPort0014 = 443;
		String requestFile0014 = "/ui/sfgrp/js/SURJUtil_305d4ce02664e4587a9021eb38d00f50.js";
		String requestHeader0014 = "GET " + requestFile0014 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0014, requestHost0014, requestPort0014, requestHeader0014, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0014 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10044
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [14] <- Index 14
		if(replayMode)
		{
			long proxyDataRecordId =1614262310065L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [15] <- WEB ADMIN Index 15 ---
		String requestProt0015 = "https";
		String requestHost0015 = "performancemanager4.successfactors.com";
		int    requestPort0015 = 443;
		String requestFile0015 = "/ui/sfgrp/js/SURJStartup_e37f0d7ec1c3eb1b17908d9f79657ea2.js";
		String requestHeader0015 = "GET " + requestFile0015 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0015, requestHost0015, requestPort0015, requestHeader0015, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0015 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3245
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [15] <- Index 15
		if(replayMode)
		{
			long proxyDataRecordId =1614262310079L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [16] <- WEB ADMIN Index 16 ---
		String requestProt0016 = "https";
		String requestHost0016 = "performancemanager4.successfactors.com";
		int    requestPort0016 = 443;
		String requestFile0016 = "/ui/surj/js/core/surj-ui-config_85207fa07871c8bab0e0d7288e8d18eb.js";
		String requestHeader0016 = "GET " + requestFile0016 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0016, requestHost0016, requestPort0016, requestHeader0016, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0016 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2989
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [16] <- Index 16
		if(replayMode)
		{
			long proxyDataRecordId =1614262310081L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [17] <- WEB ADMIN Index 17 ---
		String requestProt0017 = "https";
		String requestHost0017 = "performancemanager4.successfactors.com";
		int    requestPort0017 = 443;
		String requestFile0017 = "/ui/surj/resources_1.4/lite/resources/sap-ui-core-nojQuery.js";
		String requestHeader0017 = "GET " + requestFile0017 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0017, requestHost0017, requestPort0017, requestHeader0017, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0017 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 67
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [17] <- Index 17
		if(replayMode)
		{
			long proxyDataRecordId =1614262310086L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [18] <- WEB ADMIN Index 18 ---
		String requestProt0018 = "https";
		String requestHost0018 = "performancemanager4.successfactors.com";
		int    requestPort0018 = 443;
		String requestFile0018 = "/ui/sapui5/lite_1.78.6/common-0.js";
		String requestHeader0018 = "GET " + requestFile0018 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0018, requestHost0018, requestPort0018, requestHeader0018, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0018 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 203907
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [18] <- Index 18
		if(replayMode)
		{
			long proxyDataRecordId =1614262310108L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [19] <- WEB ADMIN Index 19 ---
		String requestProt0019 = "https";
		String requestHost0019 = "performancemanager4.successfactors.com";
		int    requestPort0019 = 443;
		String requestFile0019 = "/ui/sapui5/lite_1.78.6/common-1.js";
		String requestHeader0019 = "GET " + requestFile0019 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0019, requestHost0019, requestPort0019, requestHeader0019, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0019 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 181765
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [19] <- Index 19
		if(replayMode)
		{
			long proxyDataRecordId =1614262310159L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [20] <- WEB ADMIN Index 20 ---
		String requestProt0020 = "https";
		String requestHost0020 = "performancemanager4.successfactors.com";
		int    requestPort0020 = 443;
		String requestFile0020 = "/ui/sapui5/lite_1.78.6/common-2.js";
		String requestHeader0020 = "GET " + requestFile0020 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0020, requestHost0020, requestPort0020, requestHeader0020, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0020 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 195939
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [20] <- Index 20
		if(replayMode)
		{
			long proxyDataRecordId =1614262310174L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 2 of 3)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [21] <- WEB ADMIN Index 21 ---
		String requestProt0021 = "https";
		String requestHost0021 = "performancemanager4.successfactors.com";
		int    requestPort0021 = 443;
		String requestFile0021 = "/ui/login/css/bizx/BizXLogin_56dd8c62b0aa5492158e8b0dfebe8064.css";
		String requestHeader0021 = "GET " + requestFile0021 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0021, requestHost0021, requestPort0021, requestHeader0021, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0021 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2537
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [21] <- Index 21
		if(replayMode)
		{
			long proxyDataRecordId =1614262310184L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [22] <- WEB ADMIN Index 22 ---
		String requestProt0022 = "https";
		String requestHost0022 = "performancemanager4.successfactors.com";
		int    requestPort0022 = 443;
		String requestFile0022 = "/ui/sapui5/lite_1.78.6/common-3.js";
		String requestHeader0022 = "GET " + requestFile0022 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0022, requestHost0022, requestPort0022, requestHeader0022, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0022 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 199680
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [22] <- Index 22
		if(replayMode)
		{
			long proxyDataRecordId =1614262310188L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [23] <- WEB ADMIN Index 23 ---
		String requestProt0023 = "https";
		String requestHost0023 = "performancemanager4.successfactors.com";
		int    requestPort0023 = 443;
		String requestFile0023 = "/ui/sfgrp/js/loginBizX_8bfd80dba2b30a79c927f231e20d21ef.js";
		String requestHeader0023 = "GET " + requestFile0023 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0023, requestHost0023, requestPort0023, requestHeader0023, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0023 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8412
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [23] <- Index 23
		if(replayMode)
		{
			long proxyDataRecordId =1614262310189L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [24] <- WEB ADMIN Index 24 ---
		String requestProt0024 = "https";
		String requestHost0024 = "performancemanager4.successfactors.com";
		int    requestPort0024 = 443;
		String requestFile0024 = "/ui/surj/js/LastPageVisitedUtil_a912d80b1d360ccc66c9d0b67d597c10.js";
		String requestHeader0024 = "GET " + requestFile0024 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0024, requestHost0024, requestPort0024, requestHeader0024, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0024 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1615
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [24] <- Index 24
		if(replayMode)
		{
			long proxyDataRecordId =1614262310264L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [25] <- WEB ADMIN Index 25 ---
		String requestProt0025 = "https";
		String requestHost0025 = "performancemanager4.successfactors.com";
		int    requestPort0025 = 443;
		String requestFile0025 = "/ui/uicore/img/successfactors-large_abf7640c2701d6e38bbb0fe0d0fa326b.gif";
		String requestHeader0025 = "GET " + requestFile0025 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0025, requestHost0025, requestPort0025, requestHeader0025, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0025 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 2621
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [25] <- Index 25
		if(replayMode)
		{
			long proxyDataRecordId =1614262310281L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [26] <- WEB ADMIN Index 26 ---
		String requestProt0026 = "https";
		String requestHost0026 = "performancemanager4.successfactors.com";
		int    requestPort0026 = 443;
		String requestFile0026 = "/ui/surj/resources_0D669CF44A13E0E9F573CB4E8C114330/sap/sf/surj/shell/library-preload.js";
		String requestHeader0026 = "GET " + requestFile0026 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001f03f82b7-5712-4801-9d27-3e882de5f02929820909-1501-babe-face-00000000000301a0029c-f702-440f-9420-aece2de6bc20HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0026, requestHost0026, requestPort0026, requestHeader0026, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0026 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 104710
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [26] <- Index 26
		if(replayMode)
		{
			long proxyDataRecordId =1614262310789L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [27] <- WEB ADMIN Index 27 ---
		String requestProt0027 = "https";
		String requestHost0027 = "performancemanager4.successfactors.com";
		int    requestPort0027 = 443;
		String requestFile0027 = "/ui/sapui5/main_1.78.6/sap/ui/core/themes/sap_belize/library.css";
		String requestHeader0027 = "GET " + requestFile0027 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0027, requestHost0027, requestPort0027, requestHeader0027, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0027 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 21654
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [27] <- Index 27
		if(replayMode)
		{
			long proxyDataRecordId =1614262310949L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [28] <- WEB ADMIN Index 28 ---
		String requestProt0028 = "https";
		String requestHost0028 = "performancemanager4.successfactors.com";
		int    requestPort0028 = 443;
		String requestFile0028 = "/ui/sapui5/main_1.78.6/sap/m/themes/sap_belize/library.css";
		String requestHeader0028 = "GET " + requestFile0028 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0028, requestHost0028, requestPort0028, requestHeader0028, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0028 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 124609
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [28] <- Index 28
		if(replayMode)
		{
			long proxyDataRecordId =1614262310974L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [29] <- WEB ADMIN Index 29 ---
		String requestProt0029 = "https";
		String requestHost0029 = "performancemanager4.successfactors.com";
		int    requestPort0029 = 443;
		String requestFile0029 = "/ui/sapui5/lite_1.78.6/themes/sap_belize/library.css";
		String requestHeader0029 = "GET " + requestFile0029 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0029, requestHost0029, requestPort0029, requestHeader0029, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0029 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 53403
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [29] <- Index 29
		if(replayMode)
		{
			long proxyDataRecordId =1614262310977L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [30] <- WEB ADMIN Index 30 ---
		String requestProt0030 = "https";
		String requestHost0030 = "performancemanager4.successfactors.com";
		int    requestPort0030 = 443;
		String requestFile0030 = "/ui/sapui5/lite_1.78.6/messagebundle-preload_en.js";
		String requestHeader0030 = "GET " + requestFile0030 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001a3dda2dd-9092-4d59-8322-871c2a07902029820909-1501-babe-face-000000000003f67fb2fd-e242-43da-9923-1658216ee52eHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0030, requestHost0030, requestPort0030, requestHeader0030, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0030 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12667
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [30] <- Index 30
		if(replayMode)
		{
			long proxyDataRecordId =1614262310988L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [31] <- WEB ADMIN Index 31 ---
		String requestProt0031 = "https";
		String requestHost0031 = "performancemanager4.successfactors.com";
		int    requestPort0031 = 443;
		String requestFile0031 = "/ui/surj/resources_0D669CF44A13E0E9F573CB4E8C114330/sap/sf/surj/shell/themes/sap_belize/library.css";
		String requestHeader0031 = "GET " + requestFile0031 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0031, requestHost0031, requestPort0031, requestHeader0031, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0031 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 8944
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [31] <- Index 31
		if(replayMode)
		{
			long proxyDataRecordId =1614262311108L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [32] <- WEB ADMIN Index 32 ---
		String requestProt0032 = "https";
		String requestHost0032 = "performancemanager4.successfactors.com";
		int    requestPort0032 = 443;
		String requestFile0032 = "/ui/sapui5/main_1.78.6/sap/ui/layout/themes/sap_belize/library.css";
		String requestHeader0032 = "GET " + requestFile0032 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0032, requestHost0032, requestPort0032, requestHeader0032, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0032 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 24608
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [32] <- Index 32
		if(replayMode)
		{
			long proxyDataRecordId =1614262311130L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [33] <- WEB ADMIN Index 33 ---
		String requestProt0033 = "https";
		String requestHost0033 = "performancemanager4.successfactors.com";
		int    requestPort0033 = 443;
		String requestFile0033 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/patch/sap-ui-core-Popup-PATCH.js";
		String requestHeader0033 = "GET " + requestFile0033 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500017babb29d-bdc2-4332-832d-887a2b6a732129820909-1501-babe-face-00000000000393faf2b6-a932-4114-b728-1c14263d3a2cHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0033, requestHost0033, requestPort0033, requestHeader0033, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0033 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 415
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [33] <- Index 33
		if(replayMode)
		{
			long proxyDataRecordId =1614262311230L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [34] <- WEB ADMIN Index 34 ---
		String requestProt0034 = "https";
		String requestHost0034 = "performancemanager4.successfactors.com";
		int    requestPort0034 = 443;
		String requestFile0034 = "/ui/login/img/topnav/belize_light_bg_132a77170450d7007fd6f1b60109ccd6.png";
		String requestHeader0034 = "GET " + requestFile0034 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0034, requestHost0034, requestPort0034, requestHeader0034, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0034 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 3765
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [34] <- Index 34
		if(replayMode)
		{
			long proxyDataRecordId =1614262311231L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [35] <- WEB ADMIN Index 35 ---
		String requestProt0035 = "https";
		String requestHost0035 = "performancemanager4.successfactors.com";
		int    requestPort0035 = 443;
		String requestFile0035 = "/ui/sapui5/main_1.78.6/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		String requestHeader0035 = "GET " + requestFile0035 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0035, requestHost0035, requestPort0035, requestHeader0035, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0035 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [35] <- Index 35
		if(replayMode)
		{
			long proxyDataRecordId =1614262311237L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [36] <- WEB ADMIN Index 36 ---
		String requestProt0036 = "https";
		String requestHost0036 = "performancemanager4.successfactors.com";
		int    requestPort0036 = 443;
		String requestFile0036 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/patch/sap-m-Wizard-PATCH.js";
		String requestHeader0036 = "GET " + requestFile0036 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 010005000106ec224e-6422-4ce5-8b2a-f23b22d0532e29820909-1501-babe-face-000000000003ea9b62f9-ad02-432e-be29-dd51257fed2aHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0036, requestHost0036, requestPort0036, requestHeader0036, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0036 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 323
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [36] <- Index 36
		if(replayMode)
		{
			long proxyDataRecordId =1614262311380L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [37] <- WEB ADMIN Index 37 ---
		String requestProt0037 = "https";
		String requestHost0037 = "performancemanager4.successfactors.com";
		int    requestPort0037 = 443;
		String requestFile0037 = "/favicon.ico";
		String requestHeader0037 = "GET " + requestFile0037 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0037, requestHost0037, requestPort0037, requestHeader0037, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0037 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/X-ICON", header text fragment = [verification disabled], recorded content size = 1406
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/X-ICON", null, null);		// Test [37] <- Index 37
		if(replayMode)
		{
			long proxyDataRecordId =1614262311381L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [38] <- WEB ADMIN Index 38 ---
		String requestProt0038 = "https";
		String requestHost0038 = "performancemanager4.successfactors.com";
		int    requestPort0038 = 443;
		String requestFile0038 = "/ui/sapui5/main_1.78.6/sap/m/Wizard.js";
		String requestHeader0038 = "GET " + requestFile0038 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500012ef1123f-f2d2-4f99-9c2e-c25c203f212029820909-1501-babe-face-00000000000330669292-d662-48f0-b026-20a32590fe2cHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0038, requestHost0038, requestPort0038, requestHeader0038, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0038 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4183
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [38] <- Index 38
		if(replayMode)
		{
			long proxyDataRecordId =1614262311498L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [39] <- WEB ADMIN Index 39 ---
		String requestProt0039 = "https";
		String requestHost0039 = "performancemanager4.successfactors.com";
		int    requestPort0039 = 443;
		String requestFile0039 = "/ui/sapui5/main_1.78.6/sap/m/WizardProgressNavigator.js";
		String requestHeader0039 = "GET " + requestFile0039 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001d7723273-5582-4935-b922-622b2b4a332329820909-1501-babe-face-000000000003022bd276-a8f2-4ea2-942b-b9182b663725HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0039, requestHost0039, requestPort0039, requestHeader0039, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0039 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2582
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [39] <- Index 39
		if(replayMode)
		{
			long proxyDataRecordId =1614262311614L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [40] <- WEB ADMIN Index 40 ---
		String requestProt0040 = "https";
		String requestHost0040 = "performancemanager4.successfactors.com";
		int    requestPort0040 = 443;
		String requestFile0040 = "/ui/sapui5/main_1.78.6/sap/m/WizardProgressNavigatorRenderer.js";
		String requestHeader0040 = "GET " + requestFile0040 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500012a96928f-46c2-4311-ad28-203924b7b62029820909-1501-babe-face-00000000000385cce207-ecb2-45b7-b623-2f1129a6f32fHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0040, requestHost0040, requestPort0040, requestHeader0040, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0040 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1266
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [40] <- Index 40
		if(replayMode)
		{
			long proxyDataRecordId =1614262311803L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 3 of 3)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [41] <- WEB ADMIN Index 41 ---
		String requestProt0041 = "https";
		String requestHost0041 = "performancemanager4.successfactors.com";
		int    requestPort0041 = 443;
		String requestFile0041 = "/ui/sapui5/main_1.78.6/sap/m/WizardRenderer.js";
		String requestHeader0041 = "GET " + requestFile0041 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 010005000181282244-9432-4d38-a421-d09821be002d29820909-1501-babe-face-000000000003904852a8-abd2-444b-9d2d-2ae4207ccc22HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0041, requestHost0041, requestPort0041, requestHeader0041, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0041 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 743
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [41] <- Index 41
		if(replayMode)
		{
			long proxyDataRecordId =1614262311935L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [42] <- WEB ADMIN Index 42 ---
		String requestProt0042 = "https";
		String requestHost0042 = "performancemanager4.successfactors.com";
		int    requestPort0042 = 443;
		String requestFile0042 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/patch/DragAndDrop-PATCH.js";
		String requestHeader0042 = "GET " + requestFile0042 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 010005000181860298-fb42-431c-bd2b-5b7e2e10992629820909-1501-babe-face-000000000003efb3523b-f3c2-4d43-b124-f2412c262025HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0042, requestHost0042, requestPort0042, requestHeader0042, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0042 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 192
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [42] <- Index 42
		if(replayMode)
		{
			long proxyDataRecordId =1614262312053L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [43] <- WEB ADMIN Index 43 ---
		String requestProt0043 = "https";
		String requestHost0043 = "performancemanager4.successfactors.com";
		int    requestPort0043 = 443;
		String requestFile0043 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/patch/sap-m-SuggestionsPopover-PATCH.js";
		String requestHeader0043 = "GET " + requestFile0043 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500016f2ca230-7782-46ba-ae22-1f332f36692c29820909-1501-babe-face-000000000003b0b9e2d9-e5d2-4951-8426-9f7824872628HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0043, requestHost0043, requestPort0043, requestHeader0043, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0043 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 223
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [43] <- Index 43
		if(replayMode)
		{
			long proxyDataRecordId =1614262312187L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [44] <- WEB ADMIN Index 44 ---
		String requestProt0044 = "https";
		String requestHost0044 = "performancemanager4.successfactors.com";
		int    requestPort0044 = 443;
		String requestFile0044 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/patch/sap-m-MultiInput-PATCH.js";
		String requestHeader0044 = "GET " + requestFile0044 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001ffc632cf-4d72-4554-a328-bb7b2f8ffc2129820909-1501-babe-face-000000000003950cd228-9f02-4ede-a620-080b222a6f27HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0044, requestHost0044, requestPort0044, requestHeader0044, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0044 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 317
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [44] <- Index 44
		if(replayMode)
		{
			long proxyDataRecordId =1614262312366L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [45] <- WEB ADMIN Index 45 ---
		String requestProt0045 = "https";
		String requestHost0045 = "performancemanager4.successfactors.com";
		int    requestPort0045 = 443;
		String requestFile0045 = "/messagebundle/_/vmod_ee00a45d/ui/login/resources/sap/sf/login/i18n/messagebundle_en.properties";
		String requestHeader0045 = "GET " + requestFile0045 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001808412de-5e32-4902-862f-b6132acef92a29820909-1501-babe-face-000000000003566e0264-b7f2-426a-8622-0bc42a58fa2bHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0045, requestHost0045, requestPort0045, requestHeader0045, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0045 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 3043
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [45] <- Index 45
		if(replayMode)
		{
			long proxyDataRecordId =1614262312551L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [46] <- WEB ADMIN Index 46 ---
		String requestProt0046 = "https";
		String requestHost0046 = "performancemanager4.successfactors.com";
		int    requestPort0046 = 443;
		String requestFile0046 = "/ui/login/img/logos/SF_Logo_Lg-Black_1bb78e4680d8a1d50d3813c5900759df.png";
		String requestHeader0046 = "GET " + requestFile0046 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0046, requestHost0046, requestPort0046, requestHeader0046, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0046 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 7116
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [46] <- Index 46
		if(replayMode)
		{
			long proxyDataRecordId =1614262312857L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [47] <- WEB ADMIN Index 47 ---
		String requestProt0047 = "https";
		String requestHost0047 = "performancemanager4.successfactors.com";
		int    requestPort0047 = 443;
		String requestFile0047 = "/ui/surj/resources_1.4/SF-supp-icons.ttf";
		String requestHeader0047 = "GET " + requestFile0047 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0047, requestHost0047, requestPort0047, requestHeader0047, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0047 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-TTF", header text fragment = [verification disabled], recorded content size = 42072
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-TTF", null, null);		// Test [47] <- Index 47
		if(replayMode)
		{
			long proxyDataRecordId =1614262312881L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [48] <- WEB ADMIN Index 48 ---
		String requestProt0048 = "https";
		String requestHost0048 = "performancemanager4.successfactors.com";
		int    requestPort0048 = 443;
		String requestFile0048 = "/ui/sapui5/main_1.71.10/sap/ui/core/themes/base/fonts/SAP-icons.woff2";
		String requestHeader0048 = "GET " + requestFile0048 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0048, requestHost0048, requestPort0048, requestHeader0048, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0048 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 97220
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [48] <- Index 48
		if(replayMode)
		{
			long proxyDataRecordId =1614262312885L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [49] <- WEB ADMIN Index 49 ---
		String requestProt0049 = "https";
		String requestHost0049 = "performancemanager4.successfactors.com";
		int    requestPort0049 = 443;
		String requestFile0049 = "/ui/login/img/sf_logo_new_dark_bbca44d394a268f0a40b207fdf794ae9.png";
		String requestHeader0049 = "GET " + requestFile0049 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0049, requestHost0049, requestPort0049, requestHeader0049, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0049 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 1792
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [49] <- Index 49
		if(replayMode)
		{
			long proxyDataRecordId =1614262312896L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [50] <- WEB ADMIN Index 50 ---
		String requestProt0050 = "https";
		String requestHost0050 = "performancemanager4.successfactors.com";
		int    requestPort0050 = 443;
		String requestFile0050 = "/perfLogServlet" +
				"?callId=7873298888-0" +
				"&eventId=" + C_EventID1 +		// recorded value = EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296
				"&moduleId=LOGIN" +
				"&pageId=LOGIN" +
				"&pageQualifier=BIZX_LOGIN" +
				"&ST=1614262309457" +
				"&STC=1614262308919" +
				"&ETC=1614262313000" +
				"&MEM=1617" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=9" +
				"&UCPU=20" +
				"&CPU=20" +
				"&FRE=0" +
				"&FWR=0" +
				"&CCON=0" +
				"&CSUP=0" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=22" +
				"&cssNum=7" +
				"&renderTime=2655" +
				"&TTB=22" +
				"&RSR=714" +
				"&DIA=2227";
		requestFile0050 = Lib.replaceTextPattern(requestFile0050, "EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1, 0);		// search and replace request file fragment "EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296" with variable 'C_EventID1' on all occurrences

		String requestContent0050 = 
				"OPTR_INFO=f03f82b7-5712-4801-9d27-3e882de5f029!1614262310779!1614262310896!0" +
				"&OPTR_INFO=a3dda2dd-9092-4d59-8322-871c2a079020!1614262310956!1614262311080!0" +
				"&OPTR_INFO=66cbf90b-7773-11eb-9dce-e7f903d24901!0!1614262311146!1" +
				"&OPTR_INFO=7babb29d-bdc2-4332-832d-887a2b6a7321!1614262311198!1614262311312!0" +
				"&OPTR_INFO=06ec224e-6422-4ce5-8b2a-f23b22d0532e!1614262311329!1614262311461!0" +
				"&OPTR_INFO=2ef1123f-f2d2-4f99-9c2e-c25c203f2120!1614262311463!1614262311578!0" +
				"&OPTR_INFO=d7723273-5582-4935-b922-622b2b4a3323!1614262311583!1614262311702!0" +
				"&OPTR_INFO=2a96928f-46c2-4311-ad28-203924b7b620!1614262311770!1614262311887!0" +
				"&OPTR_INFO=81282244-9432-4d38-a421-d09821be002d!1614262311903!1614262312011!0" +
				"&OPTR_INFO=81860298-fb42-431c-bd2b-5b7e2e109926!1614262312019!1614262312147!0" +
				"&OPTR_INFO=6f2ca230-7782-46ba-ae22-1f332f36692c!1614262312152!1614262312275!0" +
				"&OPTR_INFO=ffc632cf-4d72-4554-a328-bb7b2f8ffc21!1614262312332!1614262312448!0" +
				"&OPTR_INFO=808412de-5e32-4902-862f-b6132acef92a!1614262312516!1614262312635!0";
		String requestHeader0050 = "POST " + requestFile0050 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Req-Hash: Zt4WxfCFq8admuqSmM3KiScaxfDalbikS5m-h7D2yr3KV9zi6inK1wbczd0KhqFPkZbgl2Kek4BPc5ygUIhPdJBBh47nZN8KU-siVVwSBT6jDEwTJjU63_B_O_E3AiIBGlUF94\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Content-Length: " + requestContent0050.length() + "\r\n" + 		// Content-Length: 988
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0050, requestHost0050, requestPort0050, requestHeader0050, requestContent0050.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0050 = null;		// support garbage collector to reduce memory
		requestContent0050 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [50] <- Index 50
		if(replayMode)
		{
			long proxyDataRecordId =1614262313021L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [51] <- WEB ADMIN Index 51 ---
		String requestProt0051 = "https";
		String requestHost0051 = "performancemanager4.successfactors.com";
		int    requestPort0051 = 443;
		String requestFile0051 = "/perfLogServlet" +
				"?callId=7873298888-X" +
				"&moduleId=LOGIN" +
				"&pageId=LOGIN" +
				"&pageQualifier=BIZX_LOGIN" +
				"&ST=1614262308919" +
				"&ET=1614262313019" +
				"&TTB=22" +
				"&RSR=714" +
				"&DIA=2227" +
				"&DCP=4099";
		String requestHeader0051 = "GET " + requestFile0051 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Req-Hash: xU62CTXMHlIq9E6BCj2E0z-sBTLUBwol7h9KzgH26CIk-CXxCzwCJEQ62TzJ4Rwl7jT7Djg4B898puLprO9ojBb5zQvr1wfG-wzDzxiXq89-wfXmtO1jt6ztvdOLn7eOm7yMmK\r\n" + 
				"Content-Type: text/plain; charset=UTF-8\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296-X\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0051, requestHost0051, requestPort0051, requestHeader0051, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0051 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [51] <- Index 51
		if(replayMode)
		{
			long proxyDataRecordId =1614262313032L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #2: CompanyID
		// # ------------------



		// --- HTTP REQUEST: Test [53] <- WEB ADMIN Index 53 ---
		String requestProt0053 = "https";
		String requestHost0053 = "performancemanager4.successfactors.com";
		int    requestPort0053 = 443;
		String requestFile0053 = "/login" +
				"?_s.crb=" + C_AjaxsecretKey;		// recorded value = Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d
		requestFile0053 = Lib.replaceTextPattern(requestFile0053, "Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey, 0);		// search and replace request file fragment "Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d" with variable 'C_AjaxsecretKey' on all occurrences

		String requestContent0053 = 
				"company=Teck" +
				"&loginMethod=PWD" +
				"&referer=%2Fsf%2F" +
				"&bplte_userid=" +
				"&ajax=1";
		byte[] requestContentBinary0053 = requestContent0053.getBytes("UTF-8");
		String requestHeader0053 = "POST " + requestFile0053 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500012dab92f2-0b22-4204-8c23-10742e53e12429820909-1501-babe-face-000000000003ba00b203-2132-4202-bd20-68822e1fbf24HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296-1\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Content-Length: " + requestContentBinary0053.length + "\r\n" + 		// Content-Length: 66
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0053, requestHost0053, requestPort0053, requestHeader0053, requestContentBinary0053, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0053 = null;		// support garbage collector to reduce memory
		requestContent0053 = null;		// support garbage collector to reduce memory
		requestContentBinary0053 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [53] <- Index 53
		if(replayMode)
		{
			long proxyDataRecordId =1614262332086L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [54] <- WEB ADMIN Index 54 ---
		String requestProt0054 = "https";
		String requestHost0054 = "performancemanager4.successfactors.com";
		int    requestPort0054 = 443;
		String requestFile0054 = "/saml2/Login" +
				"?company=Teck" +
				"&RelayState=/login?_s.crb=Eh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d";
		requestFile0054 = Lib.replaceTextPattern(requestFile0054, "Eh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d", java.net.URLEncoder.encode(C_AjaxsecretKey), 0);		// search and replace request file fragment "Eh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d" with variable 'C_AjaxsecretKey' on all occurrences

		String requestHeader0054 = "GET " + requestFile0054 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500012dab92f2-0b22-4204-8c23-10742e53e12429820909-1501-babe-face-000000000003ba00b203-2132-4202-bd20-68822e1fbf24HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296-1\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0054, requestHost0054, requestPort0054, requestHeader0054, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0054 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1176
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "s://teck.accounts.ondemand.com/saml2/idp/sso/?SAMLRequest=");		// Test [54] <- Index 54
		if(replayMode)
		{
			long proxyDataRecordId =1614262332497L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Signature1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0054_1 = new BoundaryBasedExtractorItem( "Signature=" , "\">",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0054_1);

		// setup var extractor for 'C_SAMLRequest1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0054_2 = new BoundaryBasedExtractorItem( "SAMLRequest=" , "&RelayState",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0054_2);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Signature1'
			C_Signature1 = boundaryBasedContentExtractorItem0054_1.getResultText();
			log("<<< C_Signature1 = " + C_Signature1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Signature1!= null && C_Signature1.trim().length() == 0)
			{
				C_Signature1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Signature1' ends up with an empty string - a substitute value was set");
				log("<<< C_Signature1 = " + C_Signature1);
			}
		}
		catch (Exception e) { C_Signature1 = null; log(e); }
		if (C_Signature1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Signature1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_SAMLRequest1'
			C_SAMLRequest1 = boundaryBasedContentExtractorItem0054_2.getResultText();
			log("<<< C_SAMLRequest1 = " + C_SAMLRequest1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest1!= null && C_SAMLRequest1.trim().length() == 0)
			{
				C_SAMLRequest1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest1' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest1 = " + C_SAMLRequest1);
			}
		}
		catch (Exception e) { C_SAMLRequest1 = null; log(e); }
		if (C_SAMLRequest1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [55] <- WEB ADMIN Index 55 ---
		String requestProt0055 = "https";
		String requestHost0055 = "performancemanager4.successfactors.com";
		int    requestPort0055 = 443;
		String requestFile0055 = "/perfLogServlet" +
				"?callId=7873298888-1" +
				"&moduleId=LOGIN" +
				"&pageId=LOGIN" +
				"&pageQualifier=BIZX_LOGIN" +
				"&ST=1614262332069" +
				"&ET=1614262333063" +
				"&MEM=9488" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=29" +
				"&UCPU=30" +
				"&CPU=30" +
				"&FRE=0" +
				"&FWR=0" +
				"&CCON=0" +
				"&CSUP=2" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=2" +
				"&cssNum=0" +
				"&renderTime=892" +
				"&TTB=22" +
				"&RSR=714" +
				"&DIA=2227" +
				"&DCP=4099";
		String requestContent0055 = 
				"OPTR_INFO=2dab92f2-0b22-4204-8c23-10742e53e124!0!1614262332962!1";
		String requestHeader0055 = "POST " + requestFile0055 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Req-Hash: D3h7T0YyXKV9TIxzLHFQKnBrNWlcRlJyIFswFFYPJzIQD2dwUKC3c3diRpOdRrqjKUTMnr05doGgHK4nYnFd7W7-eqRqTmNeTpGmdoMBCUpdVpRkJUA5LEYYP_cBI_MQEjXy14\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296-1\r\n" + 
				"X-Ajax-Token: Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Content-Length: " + requestContent0055.length() + "\r\n" + 		// Content-Length: 64
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0055, requestHost0055, requestPort0055, requestHeader0055, requestContent0055.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Eh0%2bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%2bxnhzw%3d", C_AjaxsecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091149-1240296", C_EventID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0055 = null;		// support garbage collector to reduce memory
		requestContent0055 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [55] <- Index 55
		if(replayMode)
		{
			long proxyDataRecordId =1614262333079L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [56] <- WEB ADMIN Index 56 ---
		log();
		log("# title: SuccessFactors - Teck: Log On");
		String requestProt0056 = "https";
		String requestHost0056 = "teck.accounts.ondemand.com";
		int    requestPort0056 = 443;
		String requestFile0056 = "/saml2/idp/sso/" +
				"?SAMLRequest=" + C_SAMLRequest1 +		// recorded value = fZJLT8MwEIT%2FirV352EaGqymqFAhKvGoIHDggoyzAYvEDl6Hwr8npAXBASSf7NmZ8WfPDt%2Fahr2iJ%2BNsAWmUAEOrXWXsYwE35QnP4XA%2BI9U2opOLPjzZK3zpkQIbBi3J7UkBvbfSKTIkrWqRZNDyenF%2BJkWUyM674LRrgC2HQWNVGMOeQuhIxnFA%2FRwprV1vA0XOVtgqW0XatfHoHpuqi4lcDOzEeY1jiwJq1RACWy0LuNfTpM6TbMKzqRB8ku1prrSYcrU%2FOajSPD%2FAh3SQEvW4shSUDQWIRKQ8EVxkZTqRqRhWNM3yO2DrXd8jY7cc%2Frvcw1ZE8rQs13x9eV0Cu%2F3iOQhgR0%2BO6f4ntv%2BNFRH6T1Iw%2FyK12Wwi6rVGolrp4DyNlMoB4Cz%2BmfL9YheD7Wq5do3R72zRNG5z7FEFLCD4HkegrQp%2FF0mjdNwxFa9HqewtdahNbbCCeL6L%2Ff015h8%3D
				"&RelayState=%2Flogin%3F_s.crb%3DEh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d" +
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=" + C_Signature1;		// recorded value = O%2FnQMy4XikKbrdeDR0Uuc98S6WNsNMUpYD6363Hbgpl8%2F3Qj61xqb24X6NU8MKFeC2wFFYNoJZ%2FNwl%2F4lbxkXDLmpvEiMnv8VgDZ3VInFq3yxCmG5%2Fgp9KEDZ6h5EQ3VPFGKWTvWxqchqPNGo7iCOyIEZ9YvPT6UQi6NtxJ6RiM%3D
		requestFile0056 = Lib.replaceTextPattern(requestFile0056, "Eh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d", java.net.URLEncoder.encode(C_AjaxsecretKey), 0);		// search and replace request file fragment "Eh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d" with variable 'C_AjaxsecretKey' on all occurrences
		requestFile0056 = Lib.replaceTextPattern(requestFile0056, "O%2FnQMy4XikKbrdeDR0Uuc98S6WNsNMUpYD6363Hbgpl8%2F3Qj61xqb24X6NU8MKFeC2wFFYNoJZ%2FNwl%2F4lbxkXDLmpvEiMnv8VgDZ3VInFq3yxCmG5%2Fgp9KEDZ6h5EQ3VPFGKWTvWxqchqPNGo7iCOyIEZ9YvPT6UQi6NtxJ6RiM%3D", C_Signature1, 0);		// search and replace request file fragment "O%2FnQMy4XikKbrdeDR0Uuc98S6WNsNMUpYD6363Hbgpl8%2F3Qj61xqb24X6NU8MKFeC2wFFYNoJZ%2FNwl%2F4lbxkXDLmpvEiMnv8VgDZ3VInFq3yxCmG5%2Fgp9KEDZ6h5EQ3VPFGKWTvWxqchqPNGo7iCOyIEZ9YvPT6UQi6NtxJ6RiM%3D" with variable 'C_Signature1' on all occurrences
		requestFile0056 = Lib.replaceTextPattern(requestFile0056, "fZJLT8MwEIT%2FirV352EaGqymqFAhKvGoIHDggoyzAYvEDl6Hwr8npAXBASSf7NmZ8WfPDt%2Fahr2iJ%2BNsAWmUAEOrXWXsYwE35QnP4XA%2BI9U2opOLPjzZK3zpkQIbBi3J7UkBvbfSKTIkrWqRZNDyenF%2BJkWUyM674LRrgC2HQWNVGMOeQuhIxnFA%2FRwprV1vA0XOVtgqW0XatfHoHpuqi4lcDOzEeY1jiwJq1RACWy0LuNfTpM6TbMKzqRB8ku1prrSYcrU%2FOajSPD%2FAh3SQEvW4shSUDQWIRKQ8EVxkZTqRqRhWNM3yO2DrXd8jY7cc%2Frvcw1ZE8rQs13x9eV0Cu%2F3iOQhgR0%2BO6f4ntv%2BNFRH6T1Iw%2FyK12Wwi6rVGolrp4DyNlMoB4Cz%2BmfL9YheD7Wq5do3R72zRNG5z7FEFLCD4HkegrQp%2FF0mjdNwxFa9HqewtdahNbbCCeL6L%2Ff015h8%3D", C_SAMLRequest1, 0);		// search and replace request file fragment "fZJLT8MwEIT%2FirV352EaGqymqFAhKvGoIHDggoyzAYvEDl6Hwr8npAXBASSf7NmZ8WfPDt%2Fahr2iJ%2BNsAWmUAEOrXWXsYwE35QnP4XA%2BI9U2opOLPjzZK3zpkQIbBi3J7UkBvbfSKTIkrWqRZNDyenF%2BJkWUyM674LRrgC2HQWNVGMOeQuhIxnFA%2FRwprV1vA0XOVtgqW0XatfHoHpuqi4lcDOzEeY1jiwJq1RACWy0LuNfTpM6TbMKzqRB8ku1prrSYcrU%2FOajSPD%2FAh3SQEvW4shSUDQWIRKQ8EVxkZTqRqRhWNM3yO2DrXd8jY7cc%2Frvcw1ZE8rQs13x9eV0Cu%2F3iOQhgR0%2BO6f4ntv%2BNFRH6T1Iw%2FyK12Wwi6rVGolrp4DyNlMoB4Cz%2BmfL9YheD7Wq5do3R72zRNG5z7FEFLCD4HkegrQp%2FF0mjdNwxFa9HqewtdahNbbCCeL6L%2Ff015h8%3D" with variable 'C_SAMLRequest1' on all occurrences

		String requestHeader0056 = "GET " + requestFile0056 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0056, requestHost0056, requestPort0056, requestHeader0056, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0056 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3483
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors - Teck");		// Test [56] <- Index 56
		if(replayMode)
		{
			long proxyDataRecordId =1614262333934L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SpID'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0056_1 = new BoundaryBasedExtractorItem( "Login' data-spid='" , "' data-spname",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0056_1);

		// setup var extractor for 'C_CSRFToken1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0056_2 = new BoundaryBasedExtractorItem( "\"csrf-token\" content=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0056_2);

		// setup var extractor for 'C_XsrfProtection'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0056_3 = new BoundaryBasedExtractorItem( "name=\"xsrfProtection\" value=\"" , "\" >",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0056_3);

		// setup var extractor for 'C_Login'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0056_4 = new BoundaryBasedExtractorItem( "assets/login-" , ".js\">",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0056_4);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SpID'
			C_SpID = boundaryBasedContentExtractorItem0056_1.getResultText();
			log("<<< C_SpID = " + C_SpID);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SpID!= null && C_SpID.trim().length() == 0)
			{
				C_SpID = "";
				log("runtime note: the extraction of a new value for the variable 'C_SpID' ends up with an empty string - a substitute value was set");
				log("<<< C_SpID = " + C_SpID);
			}
		}
		catch (Exception e) { C_SpID = null; log(e); }
		if (C_SpID == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SpID' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_CSRFToken1'
			C_CSRFToken1 = boundaryBasedContentExtractorItem0056_2.getResultText();
			log("<<< C_CSRFToken1 = " + C_CSRFToken1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_CSRFToken1!= null && C_CSRFToken1.trim().length() == 0)
			{
				C_CSRFToken1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_CSRFToken1' ends up with an empty string - a substitute value was set");
				log("<<< C_CSRFToken1 = " + C_CSRFToken1);
			}
		}
		catch (Exception e) { C_CSRFToken1 = null; log(e); }
		if (C_CSRFToken1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_CSRFToken1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_XsrfProtection'
			C_XsrfProtection = boundaryBasedContentExtractorItem0056_3.getResultText();
			log("<<< C_XsrfProtection = " + C_XsrfProtection);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_XsrfProtection!= null && C_XsrfProtection.trim().length() == 0)
			{
				C_XsrfProtection = "";
				log("runtime note: the extraction of a new value for the variable 'C_XsrfProtection' ends up with an empty string - a substitute value was set");
				log("<<< C_XsrfProtection = " + C_XsrfProtection);
			}
		}
		catch (Exception e) { C_XsrfProtection = null; log(e); }
		if (C_XsrfProtection == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_XsrfProtection' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Login'
			C_Login = boundaryBasedContentExtractorItem0056_4.getResultText();
			log("<<< C_Login = " + C_Login);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Login!= null && C_Login.trim().length() == 0)
			{
				C_Login = "";
				log("runtime note: the extraction of a new value for the variable 'C_Login' ends up with an empty string - a substitute value was set");
				log("<<< C_Login = " + C_Login);
			}
		}
		catch (Exception e) { C_Login = null; log(e); }
		if (C_Login == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Login' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [57] <- WEB ADMIN Index 57 ---
		String requestProt0057 = "https";
		String requestHost0057 = "teck.accounts.ondemand.com";
		int    requestPort0057 = 443;
		String requestFile0057 = "/universalui/assets/ids-7f95baa671871b6a0aae8f925a11defd85b56678bc98351daaf9ffc52a47b2d2.css";
		String requestHeader0057 = "GET " + requestFile0057 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0057, requestHost0057, requestPort0057, requestHeader0057, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("77+9dWvvv73vv73vv70Z77+977+977+9T9Wo77+9bO+/vRzvv71HPH5aVu+/vWHvv73vv70rI++/ve+/ve+/vToxNjE0MjYyMzM0MTY1", C_XsrfProtection);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0057 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 20714
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [57] <- Index 57
		if(replayMode)
		{
			long proxyDataRecordId =1614262334262L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [58] <- WEB ADMIN Index 58 ---
		String requestProt0058 = "https";
		String requestHost0058 = "teck.accounts.ondemand.com";
		int    requestPort0058 = 443;
		String requestFile0058 = "/universalui/assets/sap-ias-logo-powered-by-1371dbe016cf3ff1e9f04af5c4a34c065e40bb7a37792210788899d3309170fc.svg";
		String requestHeader0058 = "GET " + requestFile0058 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0058, requestHost0058, requestPort0058, requestHeader0058, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("77+9dWvvv73vv73vv70Z77+977+977+9T9Wo77+9bO+/vRzvv71HPH5aVu+/vWHvv73vv70rI++/ve+/ve+/vToxNjE0MjYyMzM0MTY1", C_XsrfProtection);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0058 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/SVG+XML", header text fragment = [verification disabled], recorded content size = 3264
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/SVG+XML", null, null);		// Test [58] <- Index 58
		if(replayMode)
		{
			long proxyDataRecordId =1614262334567L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [59] <- WEB ADMIN Index 59 ---
		String requestProt0059 = "https";
		String requestHost0059 = "teck.accounts.ondemand.com";
		int    requestPort0059 = 443;
		String requestFile0059 = "/universalui/assets/application-6d6b6e04a18900f64323d6b651921ef42030f64a652f113d3f5bd134cfbece49.js";
		String requestHeader0059 = "GET " + requestFile0059 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0059, requestHost0059, requestPort0059, requestHeader0059, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("77+9dWvvv73vv73vv70Z77+977+977+9T9Wo77+9bO+/vRzvv71HPH5aVu+/vWHvv73vv70rI++/ve+/ve+/vToxNjE0MjYyMzM0MTY1", C_XsrfProtection);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0059 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 64002
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [59] <- Index 59
		if(replayMode)
		{
			long proxyDataRecordId =1614262335083L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [60] <- WEB ADMIN Index 60 ---
		String requestProt0060 = "https";
		String requestHost0060 = "teck.accounts.ondemand.com";
		int    requestPort0060 = 443;
		String requestFile0060 = "/universalui/assets/login-76164bba98bcef23fd84be65f08c9b1b914fcac88bfaad45a3f71f63d8365ffb.js";
		requestFile0060 = Lib.replaceTextPattern(requestFile0060, "76164bba98bcef23fd84be65f08c9b1b914fcac88bfaad45a3f71f63d8365ffb", C_Login, 0);		// search and replace request file fragment "76164bba98bcef23fd84be65f08c9b1b914fcac88bfaad45a3f71f63d8365ffb" with variable 'C_Login' on all occurrences

		String requestHeader0060 = "GET " + requestFile0060 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0060, requestHost0060, requestPort0060, requestHeader0060, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("77+9dWvvv73vv73vv70Z77+977+977+9T9Wo77+9bO+/vRzvv71HPH5aVu+/vWHvv73vv70rI++/ve+/ve+/vToxNjE0MjYyMzM0MTY1", C_XsrfProtection);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0060 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 405
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [60] <- Index 60
		if(replayMode)
		{
			long proxyDataRecordId =1614262335136L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [61] <- WEB ADMIN Index 61 ---
		String requestProt0061 = "https";
		String requestHost0061 = "teck.accounts.ondemand.com";
		int    requestPort0061 = 443;
		String requestFile0061 = "/universalui/assets/cursor_focus-cba94039b8a27fc28e2ab27b0a264a1a6a92531ae21b701c31dfc2f48b82eea6.js";
		String requestHeader0061 = "GET " + requestFile0061 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0061, requestHost0061, requestPort0061, requestHeader0061, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("77+9dWvvv73vv73vv70Z77+977+977+9T9Wo77+9bO+/vRzvv71HPH5aVu+/vWHvv73vv70rI++/ve+/ve+/vToxNjE0MjYyMzM0MTY1", C_XsrfProtection);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0061 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 187
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [61] <- Index 61
		if(replayMode)
		{
			long proxyDataRecordId =1614262335783L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #3: email
		// # --------------



		// --- HTTP REQUEST: Test [63] <- WEB ADMIN Index 63 ---
		log();
		log("# title: SuccessFactors - Teck: Log On");
		String requestProt0063 = "https";
		String requestHost0063 = "teck.accounts.ondemand.com";
		int    requestPort0063 = 443;
		String requestFile0063 = "/saml2/idp/sso/" +
				"?SAMLRequest=" + C_SAMLRequest1 +		// recorded value = fZJLT8MwEIT%2FirV352EaGqymqFAhKvGoIHDggoyzAYvEDl6Hwr8npAXBASSf7NmZ8WfPDt%2Fahr2iJ%2BNsAWmUAEOrXWXsYwE35QnP4XA%2BI9U2opOLPjzZK3zpkQIbBi3J7UkBvbfSKTIkrWqRZNDyenF%2BJkWUyM674LRrgC2HQWNVGMOeQuhIxnFA%2FRwprV1vA0XOVtgqW0XatfHoHpuqi4lcDOzEeY1jiwJq1RACWy0LuNfTpM6TbMKzqRB8ku1prrSYcrU%2FOajSPD%2FAh3SQEvW4shSUDQWIRKQ8EVxkZTqRqRhWNM3yO2DrXd8jY7cc%2Frvcw1ZE8rQs13x9eV0Cu%2F3iOQhgR0%2BO6f4ntv%2BNFRH6T1Iw%2FyK12Wwi6rVGolrp4DyNlMoB4Cz%2BmfL9YheD7Wq5do3R72zRNG5z7FEFLCD4HkegrQp%2FF0mjdNwxFa9HqewtdahNbbCCeL6L%2Ff015h8%3D
				"&RelayState=%2Flogin%3F_s.crb%3DEh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d" +
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=" + C_Signature1;		// recorded value = O%2FnQMy4XikKbrdeDR0Uuc98S6WNsNMUpYD6363Hbgpl8%2F3Qj61xqb24X6NU8MKFeC2wFFYNoJZ%2FNwl%2F4lbxkXDLmpvEiMnv8VgDZ3VInFq3yxCmG5%2Fgp9KEDZ6h5EQ3VPFGKWTvWxqchqPNGo7iCOyIEZ9YvPT6UQi6NtxJ6RiM%3D
		requestFile0063 = Lib.replaceTextPattern(requestFile0063, "Eh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d", java.net.URLEncoder.encode(C_AjaxsecretKey), 0);		// search and replace request file fragment "Eh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d" with variable 'C_AjaxsecretKey' on all occurrences
		requestFile0063 = Lib.replaceTextPattern(requestFile0063, "O%2FnQMy4XikKbrdeDR0Uuc98S6WNsNMUpYD6363Hbgpl8%2F3Qj61xqb24X6NU8MKFeC2wFFYNoJZ%2FNwl%2F4lbxkXDLmpvEiMnv8VgDZ3VInFq3yxCmG5%2Fgp9KEDZ6h5EQ3VPFGKWTvWxqchqPNGo7iCOyIEZ9YvPT6UQi6NtxJ6RiM%3D", C_Signature1, 0);		// search and replace request file fragment "O%2FnQMy4XikKbrdeDR0Uuc98S6WNsNMUpYD6363Hbgpl8%2F3Qj61xqb24X6NU8MKFeC2wFFYNoJZ%2FNwl%2F4lbxkXDLmpvEiMnv8VgDZ3VInFq3yxCmG5%2Fgp9KEDZ6h5EQ3VPFGKWTvWxqchqPNGo7iCOyIEZ9YvPT6UQi6NtxJ6RiM%3D" with variable 'C_Signature1' on all occurrences
		requestFile0063 = Lib.replaceTextPattern(requestFile0063, "fZJLT8MwEIT%2FirV352EaGqymqFAhKvGoIHDggoyzAYvEDl6Hwr8npAXBASSf7NmZ8WfPDt%2Fahr2iJ%2BNsAWmUAEOrXWXsYwE35QnP4XA%2BI9U2opOLPjzZK3zpkQIbBi3J7UkBvbfSKTIkrWqRZNDyenF%2BJkWUyM674LRrgC2HQWNVGMOeQuhIxnFA%2FRwprV1vA0XOVtgqW0XatfHoHpuqi4lcDOzEeY1jiwJq1RACWy0LuNfTpM6TbMKzqRB8ku1prrSYcrU%2FOajSPD%2FAh3SQEvW4shSUDQWIRKQ8EVxkZTqRqRhWNM3yO2DrXd8jY7cc%2Frvcw1ZE8rQs13x9eV0Cu%2F3iOQhgR0%2BO6f4ntv%2BNFRH6T1Iw%2FyK12Wwi6rVGolrp4DyNlMoB4Cz%2BmfL9YheD7Wq5do3R72zRNG5z7FEFLCD4HkegrQp%2FF0mjdNwxFa9HqewtdahNbbCCeL6L%2Ff015h8%3D", C_SAMLRequest1, 0);		// search and replace request file fragment "fZJLT8MwEIT%2FirV352EaGqymqFAhKvGoIHDggoyzAYvEDl6Hwr8npAXBASSf7NmZ8WfPDt%2Fahr2iJ%2BNsAWmUAEOrXWXsYwE35QnP4XA%2BI9U2opOLPjzZK3zpkQIbBi3J7UkBvbfSKTIkrWqRZNDyenF%2BJkWUyM674LRrgC2HQWNVGMOeQuhIxnFA%2FRwprV1vA0XOVtgqW0XatfHoHpuqi4lcDOzEeY1jiwJq1RACWy0LuNfTpM6TbMKzqRB8ku1prrSYcrU%2FOajSPD%2FAh3SQEvW4shSUDQWIRKQ8EVxkZTqRqRhWNM3yO2DrXd8jY7cc%2Frvcw1ZE8rQs13x9eV0Cu%2F3iOQhgR0%2BO6f4ntv%2BNFRH6T1Iw%2FyK12Wwi6rVGolrp4DyNlMoB4Cz%2BmfL9YheD7Wq5do3R72zRNG5z7FEFLCD4HkegrQp%2FF0mjdNwxFa9HqewtdahNbbCCeL6L%2Ff015h8%3D" with variable 'C_SAMLRequest1' on all occurrences

		String requestContent0063 = 
				"utf8=%E2%9C%93" +
				"&authenticity_token=" + java.net.URLEncoder.encode(C_CSRFToken1) +		// recorded value = 60zj6e9m3POpQKNc3jCV%2FWvPbJT2ulJiBe9x%2BDmtYu1zJe%2FlFvS746x2OpJQDW7DIB80hioDfGkXWJ5YSiKnKw%3D%3D
				"&xsrfProtection=" + java.net.URLEncoder.encode(C_XsrfProtection) +		// recorded value = 77%2B9dWvvv73vv73vv70Z77%2B977%2B977%2B9T9Wo77%2B9bO%2B%2FvRzvv71HPH5aVu%2B%2FvWHvv73vv70rI%2B%2B%2Fve%2B%2Fve%2B%2FvToxNjE0MjYyMzM0MTY1
				"&method=GET" +
				"&idpSSOEndpoint=https%3A%2F%2Fteck.accounts.ondemand.com%2Fsaml2%2Fidp%2Fsso%2F" +
				"&SAMLRequest=" + C_SAMLRequest1 +		// recorded value = fZJLT8MwEIT%2FirV352EaGqymqFAhKvGoIHDggoyzAYvEDl6Hwr8npAXBASSf7NmZ8WfPDt%2Fahr2iJ%2BNsAWmUAEOrXWXsYwE35QnP4XA%2BI9U2opOLPjzZK3zpkQIbBi3J7UkBvbfSKTIkrWqRZNDyenF%2BJkWUyM674LRrgC2HQWNVGMOeQuhIxnFA%2FRwprV1vA0XOVtgqW0XatfHoHpuqi4lcDOzEeY1jiwJq1RACWy0LuNfTpM6TbMKzqRB8ku1prrSYcrU%2FOajSPD%2FAh3SQEvW4shSUDQWIRKQ8EVxkZTqRqRhWNM3yO2DrXd8jY7cc%2Frvcw1ZE8rQs13x9eV0Cu%2F3iOQhgR0%2BO6f4ntv%2BNFRH6T1Iw%2FyK12Wwi6rVGolrp4DyNlMoB4Cz%2BmfL9YheD7Wq5do3R72zRNG5z7FEFLCD4HkegrQp%2FF0mjdNwxFa9HqewtdahNbbCCeL6L%2Ff015h8%3D
				"&RelayState=%2Flogin%3F_s.crb%3DEh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d" +
				"&Signature=" + C_Signature1 +		// recorded value = O%2FnQMy4XikKbrdeDR0Uuc98S6WNsNMUpYD6363Hbgpl8%2F3Qj61xqb24X6NU8MKFeC2wFFYNoJZ%2FNwl%2F4lbxkXDLmpvEiMnv8VgDZ3VInFq3yxCmG5%2Fgp9KEDZ6h5EQ3VPFGKWTvWxqchqPNGo7iCOyIEZ9YvPT6UQi6NtxJ6RiM%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&targetUrl=" +
				"&sourceUrl=" +
				"&org=" +
				"&spId=" + C_SpID +		// recorded value = 5f2d6e8977f0162cf3470508
				"&spName=https%3A%2F%2Fwww.successfactors.com%2FTeck" +
				"&mobileSSOToken=" +
				"&tfaToken=" +
				"&css=" +
				"&j_username=balash.akbari%40teck.com";
		byte[][] searchPattern0063_0 = new byte[1][];
		searchPattern0063_0[0] = Base64Decoder.decodeToBytes("NjB6ajZlOW0zUE9wUUtOYzNqQ1YlMkZXdlBiSlQydWxKaUJlOXglMkJEbXRZdTF6SmUlMkZsRnZTNzQ2eDJPcEpRRFc3RElCODBoaW9EZkdrWFdKNVlTaUtuS3clM0QlM0Q=");
		byte[] binarySearchPattern0063_0   = Lib.mergeByteArrays(searchPattern0063_0);		// note: the search pattern value is base 64 encoded. decoded value = 60zj6e9m3POpQKNc3jCV%2FWvPbJT2ulJiBe9x%2BDmtYu1zJe%2FlFvS746x2OpJQDW7DIB80hioDfGkXWJ5YSiKnKw%3D%3D
		requestContent0063 = new String(Lib.binaryReplace(requestContent0063.getBytes(), binarySearchPattern0063_0, java.net.URLEncoder.encode(C_CSRFToken1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0063_1 = new byte[1][];
		searchPattern0063_1[0] = Base64Decoder.decodeToBytes("RWgwJTI1MmJqVWpzU2NPc05lU0JxZmtUb3ljeGZoa0FweFg0WWxTUkwlMjUyYnhuaHp3JTI1M2Q=");
		byte[] binarySearchPattern0063_1   = Lib.mergeByteArrays(searchPattern0063_1);		// note: the search pattern value is base 64 encoded. decoded value = Eh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d
		requestContent0063 = new String(Lib.binaryReplace(requestContent0063.getBytes(), binarySearchPattern0063_1, java.net.URLEncoder.encode(C_AjaxsecretKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0063_2 = new byte[1][];
		searchPattern0063_2[0] = Base64Decoder.decodeToBytes("NzclMkI5ZFd2dnY3M3Z2NzN2djcwWjc3JTJCOTc3JTJCOTc3JTJCOVQ5V283NyUyQjliTyUyQiUyRnZSenZ2NzFIUEg1YVZ1JTJCJTJGdldIdnY3M3Z2NzBySSUyQiUyQiUyRnZlJTJCJTJGdmUlMkIlMkZ2VG94TmpFME1qWXlNek0wTVRZMQ==");
		byte[] binarySearchPattern0063_2   = Lib.mergeByteArrays(searchPattern0063_2);		// note: the search pattern value is base 64 encoded. decoded value = 77%2B9dWvvv73vv73vv70Z77%2B977%2B977%2B9T9Wo77%2B9bO%2B%2FvRzvv71HPH5aVu%2B%2FvWHvv73vv70rI%2B%2B%2Fve%2B%2Fve%2B%2FvToxNjE0MjYyMzM0MTY1
		requestContent0063 = new String(Lib.binaryReplace(requestContent0063.getBytes(), binarySearchPattern0063_2, java.net.URLEncoder.encode(C_XsrfProtection).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0063 = Lib.replaceTextPattern(requestContent0063, "5f2d6e8977f0162cf3470508", C_SpID, 0);		// search and replace content fragment "5f2d6e8977f0162cf3470508" with variable 'C_SpID' on all occurrences
		requestContent0063 = Lib.replaceTextPattern(requestContent0063, "O%2FnQMy4XikKbrdeDR0Uuc98S6WNsNMUpYD6363Hbgpl8%2F3Qj61xqb24X6NU8MKFeC2wFFYNoJZ%2FNwl%2F4lbxkXDLmpvEiMnv8VgDZ3VInFq3yxCmG5%2Fgp9KEDZ6h5EQ3VPFGKWTvWxqchqPNGo7iCOyIEZ9YvPT6UQi6NtxJ6RiM%3D", C_Signature1, 0);		// search and replace content fragment "O%2FnQMy4XikKbrdeDR0Uuc98S6WNsNMUpYD6363Hbgpl8%2F3Qj61xqb24X6NU8MKFeC2wFFYNoJZ%2FNwl%2F4lbxkXDLmpvEiMnv8VgDZ3VInFq3yxCmG5%2Fgp9KEDZ6h5EQ3VPFGKWTvWxqchqPNGo7iCOyIEZ9YvPT6UQi6NtxJ6RiM%3D" with variable 'C_Signature1' on all occurrences
		requestContent0063 = Lib.replaceTextPattern(requestContent0063, "fZJLT8MwEIT%2FirV352EaGqymqFAhKvGoIHDggoyzAYvEDl6Hwr8npAXBASSf7NmZ8WfPDt%2Fahr2iJ%2BNsAWmUAEOrXWXsYwE35QnP4XA%2BI9U2opOLPjzZK3zpkQIbBi3J7UkBvbfSKTIkrWqRZNDyenF%2BJkWUyM674LRrgC2HQWNVGMOeQuhIxnFA%2FRwprV1vA0XOVtgqW0XatfHoHpuqi4lcDOzEeY1jiwJq1RACWy0LuNfTpM6TbMKzqRB8ku1prrSYcrU%2FOajSPD%2FAh3SQEvW4shSUDQWIRKQ8EVxkZTqRqRhWNM3yO2DrXd8jY7cc%2Frvcw1ZE8rQs13x9eV0Cu%2F3iOQhgR0%2BO6f4ntv%2BNFRH6T1Iw%2FyK12Wwi6rVGolrp4DyNlMoB4Cz%2BmfL9YheD7Wq5do3R72zRNG5z7FEFLCD4HkegrQp%2FF0mjdNwxFa9HqewtdahNbbCCeL6L%2Ff015h8%3D", C_SAMLRequest1, 0);		// search and replace content fragment "fZJLT8MwEIT%2FirV352EaGqymqFAhKvGoIHDggoyzAYvEDl6Hwr8npAXBASSf7NmZ8WfPDt%2Fahr2iJ%2BNsAWmUAEOrXWXsYwE35QnP4XA%2BI9U2opOLPjzZK3zpkQIbBi3J7UkBvbfSKTIkrWqRZNDyenF%2BJkWUyM674LRrgC2HQWNVGMOeQuhIxnFA%2FRwprV1vA0XOVtgqW0XatfHoHpuqi4lcDOzEeY1jiwJq1RACWy0LuNfTpM6TbMKzqRB8ku1prrSYcrU%2FOajSPD%2FAh3SQEvW4shSUDQWIRKQ8EVxkZTqRqRhWNM3yO2DrXd8jY7cc%2Frvcw1ZE8rQs13x9eV0Cu%2F3iOQhgR0%2BO6f4ntv%2BNFRH6T1Iw%2FyK12Wwi6rVGolrp4DyNlMoB4Cz%2BmfL9YheD7Wq5do3R72zRNG5z7FEFLCD4HkegrQp%2FF0mjdNwxFa9HqewtdahNbbCCeL6L%2Ff015h8%3D" with variable 'C_SAMLRequest1' on all occurrences

		String requestHeader0063 = "POST " + requestFile0063 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0063.length() + "\r\n" + 		// Content-Length: 1415
				"Origin: https://teck.accounts.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0063, requestHost0063, requestPort0063, requestHeader0063, requestContent0063.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("77+9dWvvv73vv73vv70Z77+977+977+9T9Wo77+9bO+/vRzvv71HPH5aVu+/vWHvv73vv70rI++/ve+/ve+/vToxNjE0MjYyMzM0MTY1", C_XsrfProtection);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0063 = null;		// support garbage collector to reduce memory
		requestContent0063 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3785
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "E-Mail or User Name");		// Test [63] <- Index 63
		if(replayMode)
		{
			long proxyDataRecordId =1614262363599L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_CSRFToken2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0063_1 = new BoundaryBasedExtractorItem( "csrf-token\" content=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0063_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_CSRFToken2'
			C_CSRFToken2 = boundaryBasedContentExtractorItem0063_1.getResultText();
			log("<<< C_CSRFToken2 = " + C_CSRFToken2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_CSRFToken2!= null && C_CSRFToken2.trim().length() == 0)
			{
				C_CSRFToken2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_CSRFToken2' ends up with an empty string - a substitute value was set");
				log("<<< C_CSRFToken2 = " + C_CSRFToken2);
			}
		}
		catch (Exception e) { C_CSRFToken2 = null; log(e); }
		if (C_CSRFToken2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_CSRFToken2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #4: LogOn
		// # --------------



		// --- HTTP REQUEST: Test [65] <- WEB ADMIN Index 65 ---
		String requestProt0065 = "https";
		String requestHost0065 = "teck.accounts.ondemand.com";
		int    requestPort0065 = 443;
		String requestFile0065 = "/saml2/idp/sso/" +
				"?SAMLRequest=" + C_SAMLRequest1 +		// recorded value = fZJLT8MwEIT%2FirV352EaGqymqFAhKvGoIHDggoyzAYvEDl6Hwr8npAXBASSf7NmZ8WfPDt%2Fahr2iJ%2BNsAWmUAEOrXWXsYwE35QnP4XA%2BI9U2opOLPjzZK3zpkQIbBi3J7UkBvbfSKTIkrWqRZNDyenF%2BJkWUyM674LRrgC2HQWNVGMOeQuhIxnFA%2FRwprV1vA0XOVtgqW0XatfHoHpuqi4lcDOzEeY1jiwJq1RACWy0LuNfTpM6TbMKzqRB8ku1prrSYcrU%2FOajSPD%2FAh3SQEvW4shSUDQWIRKQ8EVxkZTqRqRhWNM3yO2DrXd8jY7cc%2Frvcw1ZE8rQs13x9eV0Cu%2F3iOQhgR0%2BO6f4ntv%2BNFRH6T1Iw%2FyK12Wwi6rVGolrp4DyNlMoB4Cz%2BmfL9YheD7Wq5do3R72zRNG5z7FEFLCD4HkegrQp%2FF0mjdNwxFa9HqewtdahNbbCCeL6L%2Ff015h8%3D
				"&RelayState=%2Flogin%3F_s.crb%3DEh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d" +
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=" + C_Signature1;		// recorded value = O%2FnQMy4XikKbrdeDR0Uuc98S6WNsNMUpYD6363Hbgpl8%2F3Qj61xqb24X6NU8MKFeC2wFFYNoJZ%2FNwl%2F4lbxkXDLmpvEiMnv8VgDZ3VInFq3yxCmG5%2Fgp9KEDZ6h5EQ3VPFGKWTvWxqchqPNGo7iCOyIEZ9YvPT6UQi6NtxJ6RiM%3D
		requestFile0065 = Lib.replaceTextPattern(requestFile0065, "Eh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d", java.net.URLEncoder.encode(C_AjaxsecretKey), 0);		// search and replace request file fragment "Eh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d" with variable 'C_AjaxsecretKey' on all occurrences
		requestFile0065 = Lib.replaceTextPattern(requestFile0065, "O%2FnQMy4XikKbrdeDR0Uuc98S6WNsNMUpYD6363Hbgpl8%2F3Qj61xqb24X6NU8MKFeC2wFFYNoJZ%2FNwl%2F4lbxkXDLmpvEiMnv8VgDZ3VInFq3yxCmG5%2Fgp9KEDZ6h5EQ3VPFGKWTvWxqchqPNGo7iCOyIEZ9YvPT6UQi6NtxJ6RiM%3D", C_Signature1, 0);		// search and replace request file fragment "O%2FnQMy4XikKbrdeDR0Uuc98S6WNsNMUpYD6363Hbgpl8%2F3Qj61xqb24X6NU8MKFeC2wFFYNoJZ%2FNwl%2F4lbxkXDLmpvEiMnv8VgDZ3VInFq3yxCmG5%2Fgp9KEDZ6h5EQ3VPFGKWTvWxqchqPNGo7iCOyIEZ9YvPT6UQi6NtxJ6RiM%3D" with variable 'C_Signature1' on all occurrences
		requestFile0065 = Lib.replaceTextPattern(requestFile0065, "fZJLT8MwEIT%2FirV352EaGqymqFAhKvGoIHDggoyzAYvEDl6Hwr8npAXBASSf7NmZ8WfPDt%2Fahr2iJ%2BNsAWmUAEOrXWXsYwE35QnP4XA%2BI9U2opOLPjzZK3zpkQIbBi3J7UkBvbfSKTIkrWqRZNDyenF%2BJkWUyM674LRrgC2HQWNVGMOeQuhIxnFA%2FRwprV1vA0XOVtgqW0XatfHoHpuqi4lcDOzEeY1jiwJq1RACWy0LuNfTpM6TbMKzqRB8ku1prrSYcrU%2FOajSPD%2FAh3SQEvW4shSUDQWIRKQ8EVxkZTqRqRhWNM3yO2DrXd8jY7cc%2Frvcw1ZE8rQs13x9eV0Cu%2F3iOQhgR0%2BO6f4ntv%2BNFRH6T1Iw%2FyK12Wwi6rVGolrp4DyNlMoB4Cz%2BmfL9YheD7Wq5do3R72zRNG5z7FEFLCD4HkegrQp%2FF0mjdNwxFa9HqewtdahNbbCCeL6L%2Ff015h8%3D", C_SAMLRequest1, 0);		// search and replace request file fragment "fZJLT8MwEIT%2FirV352EaGqymqFAhKvGoIHDggoyzAYvEDl6Hwr8npAXBASSf7NmZ8WfPDt%2Fahr2iJ%2BNsAWmUAEOrXWXsYwE35QnP4XA%2BI9U2opOLPjzZK3zpkQIbBi3J7UkBvbfSKTIkrWqRZNDyenF%2BJkWUyM674LRrgC2HQWNVGMOeQuhIxnFA%2FRwprV1vA0XOVtgqW0XatfHoHpuqi4lcDOzEeY1jiwJq1RACWy0LuNfTpM6TbMKzqRB8ku1prrSYcrU%2FOajSPD%2FAh3SQEvW4shSUDQWIRKQ8EVxkZTqRqRhWNM3yO2DrXd8jY7cc%2Frvcw1ZE8rQs13x9eV0Cu%2F3iOQhgR0%2BO6f4ntv%2BNFRH6T1Iw%2FyK12Wwi6rVGolrp4DyNlMoB4Cz%2BmfL9YheD7Wq5do3R72zRNG5z7FEFLCD4HkegrQp%2FF0mjdNwxFa9HqewtdahNbbCCeL6L%2Ff015h8%3D" with variable 'C_SAMLRequest1' on all occurrences

		String requestContent0065 = 
				"utf8=%E2%9C%93" +
				"&authenticity_token=" + java.net.URLEncoder.encode(C_CSRFToken2) +		// recorded value = ca2Vb3QxDg9Nw3gNHiGTlJTXzNY3P0a2jjQ7jSOSTgtKxN7aRaVOS7BwUk9TqRXAn%2F4wTgiXXSu5iNYjC1ljpw%3D%3D
				"&xsrfProtection=" + java.net.URLEncoder.encode(C_XsrfProtection) +		// recorded value = 77%2B9dWvvv73vv73vv70Z77%2B977%2B977%2B9T9Wo77%2B9bO%2B%2FvRzvv71HPH5aVu%2B%2FvWHvv73vv70rI%2B%2B%2Fve%2B%2Fve%2B%2FvToxNjE0MjYyMzM0MTY1
				"&method=GET" +
				"&idpSSOEndpoint=https%3A%2F%2Fteck.accounts.ondemand.com%2Fsaml2%2Fidp%2Fsso%2F" +
				"&SAMLRequest=" + C_SAMLRequest1 +		// recorded value = fZJLT8MwEIT%2FirV352EaGqymqFAhKvGoIHDggoyzAYvEDl6Hwr8npAXBASSf7NmZ8WfPDt%2Fahr2iJ%2BNsAWmUAEOrXWXsYwE35QnP4XA%2BI9U2opOLPjzZK3zpkQIbBi3J7UkBvbfSKTIkrWqRZNDyenF%2BJkWUyM674LRrgC2HQWNVGMOeQuhIxnFA%2FRwprV1vA0XOVtgqW0XatfHoHpuqi4lcDOzEeY1jiwJq1RACWy0LuNfTpM6TbMKzqRB8ku1prrSYcrU%2FOajSPD%2FAh3SQEvW4shSUDQWIRKQ8EVxkZTqRqRhWNM3yO2DrXd8jY7cc%2Frvcw1ZE8rQs13x9eV0Cu%2F3iOQhgR0%2BO6f4ntv%2BNFRH6T1Iw%2FyK12Wwi6rVGolrp4DyNlMoB4Cz%2BmfL9YheD7Wq5do3R72zRNG5z7FEFLCD4HkegrQp%2FF0mjdNwxFa9HqewtdahNbbCCeL6L%2Ff015h8%3D
				"&RelayState=%2Flogin%3F_s.crb%3DEh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d" +
				"&Signature=" + C_Signature1 +		// recorded value = O%2FnQMy4XikKbrdeDR0Uuc98S6WNsNMUpYD6363Hbgpl8%2F3Qj61xqb24X6NU8MKFeC2wFFYNoJZ%2FNwl%2F4lbxkXDLmpvEiMnv8VgDZ3VInFq3yxCmG5%2Fgp9KEDZ6h5EQ3VPFGKWTvWxqchqPNGo7iCOyIEZ9YvPT6UQi6NtxJ6RiM%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&targetUrl=" +
				"&sourceUrl=" +
				"&org=" +
				"&spId=" + C_SpID +		// recorded value = 5f2d6e8977f0162cf3470508
				"&spName=https%3A%2F%2Fwww.successfactors.com%2FTeck" +
				"&mobileSSOToken=" +
				"&tfaToken=" +
				"&css=" +
				"&j_username=balash.akbari%40teck.com" +
				"&j_password=PerfAutoTest01%21";
		byte[][] searchPattern0065_0 = new byte[1][];
		searchPattern0065_0[0] = Base64Decoder.decodeToBytes("Y2EyVmIzUXhEZzlOdzNnTkhpR1RsSlRYek5ZM1AwYTJqalE3alNPU1RndEt4TjdhUmFWT1M3QndVazlUcVJYQW4lMkY0d1RnaVhYU3U1aU5ZakMxbGpwdyUzRCUzRA==");
		byte[] binarySearchPattern0065_0   = Lib.mergeByteArrays(searchPattern0065_0);		// note: the search pattern value is base 64 encoded. decoded value = ca2Vb3QxDg9Nw3gNHiGTlJTXzNY3P0a2jjQ7jSOSTgtKxN7aRaVOS7BwUk9TqRXAn%2F4wTgiXXSu5iNYjC1ljpw%3D%3D
		requestContent0065 = new String(Lib.binaryReplace(requestContent0065.getBytes(), binarySearchPattern0065_0, java.net.URLEncoder.encode(C_CSRFToken2).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0065_1 = new byte[1][];
		searchPattern0065_1[0] = Base64Decoder.decodeToBytes("RWgwJTI1MmJqVWpzU2NPc05lU0JxZmtUb3ljeGZoa0FweFg0WWxTUkwlMjUyYnhuaHp3JTI1M2Q=");
		byte[] binarySearchPattern0065_1   = Lib.mergeByteArrays(searchPattern0065_1);		// note: the search pattern value is base 64 encoded. decoded value = Eh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d
		requestContent0065 = new String(Lib.binaryReplace(requestContent0065.getBytes(), binarySearchPattern0065_1, java.net.URLEncoder.encode(C_AjaxsecretKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0065_2 = new byte[1][];
		searchPattern0065_2[0] = Base64Decoder.decodeToBytes("NzclMkI5ZFd2dnY3M3Z2NzN2djcwWjc3JTJCOTc3JTJCOTc3JTJCOVQ5V283NyUyQjliTyUyQiUyRnZSenZ2NzFIUEg1YVZ1JTJCJTJGdldIdnY3M3Z2NzBySSUyQiUyQiUyRnZlJTJCJTJGdmUlMkIlMkZ2VG94TmpFME1qWXlNek0wTVRZMQ==");
		byte[] binarySearchPattern0065_2   = Lib.mergeByteArrays(searchPattern0065_2);		// note: the search pattern value is base 64 encoded. decoded value = 77%2B9dWvvv73vv73vv70Z77%2B977%2B977%2B9T9Wo77%2B9bO%2B%2FvRzvv71HPH5aVu%2B%2FvWHvv73vv70rI%2B%2B%2Fve%2B%2Fve%2B%2FvToxNjE0MjYyMzM0MTY1
		requestContent0065 = new String(Lib.binaryReplace(requestContent0065.getBytes(), binarySearchPattern0065_2, java.net.URLEncoder.encode(C_XsrfProtection).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0065 = Lib.replaceTextPattern(requestContent0065, "5f2d6e8977f0162cf3470508", C_SpID, 0);		// search and replace content fragment "5f2d6e8977f0162cf3470508" with variable 'C_SpID' on all occurrences
		requestContent0065 = Lib.replaceTextPattern(requestContent0065, "O%2FnQMy4XikKbrdeDR0Uuc98S6WNsNMUpYD6363Hbgpl8%2F3Qj61xqb24X6NU8MKFeC2wFFYNoJZ%2FNwl%2F4lbxkXDLmpvEiMnv8VgDZ3VInFq3yxCmG5%2Fgp9KEDZ6h5EQ3VPFGKWTvWxqchqPNGo7iCOyIEZ9YvPT6UQi6NtxJ6RiM%3D", C_Signature1, 0);		// search and replace content fragment "O%2FnQMy4XikKbrdeDR0Uuc98S6WNsNMUpYD6363Hbgpl8%2F3Qj61xqb24X6NU8MKFeC2wFFYNoJZ%2FNwl%2F4lbxkXDLmpvEiMnv8VgDZ3VInFq3yxCmG5%2Fgp9KEDZ6h5EQ3VPFGKWTvWxqchqPNGo7iCOyIEZ9YvPT6UQi6NtxJ6RiM%3D" with variable 'C_Signature1' on all occurrences
		requestContent0065 = Lib.replaceTextPattern(requestContent0065, "fZJLT8MwEIT%2FirV352EaGqymqFAhKvGoIHDggoyzAYvEDl6Hwr8npAXBASSf7NmZ8WfPDt%2Fahr2iJ%2BNsAWmUAEOrXWXsYwE35QnP4XA%2BI9U2opOLPjzZK3zpkQIbBi3J7UkBvbfSKTIkrWqRZNDyenF%2BJkWUyM674LRrgC2HQWNVGMOeQuhIxnFA%2FRwprV1vA0XOVtgqW0XatfHoHpuqi4lcDOzEeY1jiwJq1RACWy0LuNfTpM6TbMKzqRB8ku1prrSYcrU%2FOajSPD%2FAh3SQEvW4shSUDQWIRKQ8EVxkZTqRqRhWNM3yO2DrXd8jY7cc%2Frvcw1ZE8rQs13x9eV0Cu%2F3iOQhgR0%2BO6f4ntv%2BNFRH6T1Iw%2FyK12Wwi6rVGolrp4DyNlMoB4Cz%2BmfL9YheD7Wq5do3R72zRNG5z7FEFLCD4HkegrQp%2FF0mjdNwxFa9HqewtdahNbbCCeL6L%2Ff015h8%3D", C_SAMLRequest1, 0);		// search and replace content fragment "fZJLT8MwEIT%2FirV352EaGqymqFAhKvGoIHDggoyzAYvEDl6Hwr8npAXBASSf7NmZ8WfPDt%2Fahr2iJ%2BNsAWmUAEOrXWXsYwE35QnP4XA%2BI9U2opOLPjzZK3zpkQIbBi3J7UkBvbfSKTIkrWqRZNDyenF%2BJkWUyM674LRrgC2HQWNVGMOeQuhIxnFA%2FRwprV1vA0XOVtgqW0XatfHoHpuqi4lcDOzEeY1jiwJq1RACWy0LuNfTpM6TbMKzqRB8ku1prrSYcrU%2FOajSPD%2FAh3SQEvW4shSUDQWIRKQ8EVxkZTqRqRhWNM3yO2DrXd8jY7cc%2Frvcw1ZE8rQs13x9eV0Cu%2F3iOQhgR0%2BO6f4ntv%2BNFRH6T1Iw%2FyK12Wwi6rVGolrp4DyNlMoB4Cz%2BmfL9YheD7Wq5do3R72zRNG5z7FEFLCD4HkegrQp%2FF0mjdNwxFa9HqewtdahNbbCCeL6L%2Ff015h8%3D" with variable 'C_SAMLRequest1' on all occurrences

		String requestHeader0065 = "POST " + requestFile0065 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0065.length() + "\r\n" + 		// Content-Length: 1440
				"Origin: https://teck.accounts.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0065, requestHost0065, requestPort0065, requestHeader0065, requestContent0065.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("77+9dWvvv73vv73vv70Z77+977+977+9T9Wo77+9bO+/vRzvv71HPH5aVu+/vWHvv73vv70rI++/ve+/ve+/vToxNjE0MjYyMzM0MTY1", C_XsrfProtection);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0065 = null;		// support garbage collector to reduce memory
		requestContent0065 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [65] <- Index 65
		if(replayMode)
		{
			long proxyDataRecordId =1614262377239L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [66] <- WEB ADMIN Index 66 ---
		log();
		log("# title: SAML Response from Identity Authentication");
		String requestProt0066 = "https";
		String requestHost0066 = "teck.accounts.ondemand.com";
		int    requestPort0066 = 443;
		String requestFile0066 = "/saml2/idp/sso" +
				"?redirect=true";
		String requestHeader0066 = "GET " + requestFile0066 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0066, requestHost0066, requestPort0066, requestHeader0066, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0066 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 5813
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "You have now been authenticated. Your request has been forwarded to the target system for processing.");		// Test [66] <- Index 66
		if(replayMode)
		{
			long proxyDataRecordId =1614262378390L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_AuthenticityToken1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0066_1 = new BoundaryBasedExtractorItem( "authenticity_token\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0066_1);

		// setup var extractor for 'C_SAMLResponse1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0066_2 = new BoundaryBasedExtractorItem( "id=\"SAMLResponse\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0066_2);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_AuthenticityToken1'
			C_AuthenticityToken1 = boundaryBasedContentExtractorItem0066_1.getResultText();
			log("<<< C_AuthenticityToken1 = " + C_AuthenticityToken1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_AuthenticityToken1!= null && C_AuthenticityToken1.trim().length() == 0)
			{
				C_AuthenticityToken1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_AuthenticityToken1' ends up with an empty string - a substitute value was set");
				log("<<< C_AuthenticityToken1 = " + C_AuthenticityToken1);
			}
		}
		catch (Exception e) { C_AuthenticityToken1 = null; log(e); }
		if (C_AuthenticityToken1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_AuthenticityToken1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_SAMLResponse1'
			C_SAMLResponse1 = boundaryBasedContentExtractorItem0066_2.getResultText();
			log("<<< C_SAMLResponse1 = " + C_SAMLResponse1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLResponse1!= null && C_SAMLResponse1.trim().length() == 0)
			{
				C_SAMLResponse1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLResponse1' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLResponse1 = " + C_SAMLResponse1);
			}
		}
		catch (Exception e) { C_SAMLResponse1 = null; log(e); }
		if (C_SAMLResponse1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLResponse1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [67] <- WEB ADMIN Index 67 ---
		String requestProt0067 = "https";
		String requestHost0067 = "performancemanager4.successfactors.com";
		int    requestPort0067 = 443;
		String requestFile0067 = "/saml2/SAMLAssertionConsumer" +
				"?company=Teck";
		String requestContent0067 = 
				"utf8=%E2%9C%93" +
				"&authenticity_token=" + java.net.URLEncoder.encode(C_AuthenticityToken1) +		// recorded value = MrFhOB9KFZTzmTmyvpYdFrwCsOmCus4YQoxo27KBrymcRxkuL1TOVDojMeRcnhEGAK416WLofwteh62Jk2qH7w%3D%3D
				"&SAMLResponse=" + java.net.URLEncoder.encode(C_SAMLResponse1) +		// recorded value = PFJlc3BvbnNlIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOm5zMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgeG1sbnM6bnMzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIiB4bWxuczpuczQ9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jIyIgRGVzdGluYXRpb249Imh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2FtbDIvU0FNTEFzc2VydGlvbkNvbnN1bWVyP2NvbXBhbnk9VGVjayIgSUQ9IlJFUy1TU08tN2I4MTFmZGEtMzJlZC00NTE2LWIwYmMtYzUyODFhZDJkZjZlIiBJblJlc3BvbnNlVG89Il9jNzBmODA1NC01NzIyLTQ1M2MtYWMyNy1hNjQ5ZDE4ODllYjEiIElzc3VlSW5zdGFudD0iMjAyMS0wMi0yNVQxNDoxMjo1OC4yODVaIiBWZXJzaW9uPSIyLjAiPjxuczI6SXNzdWVyPmh0dHBzOi8vdGVjay5hY2NvdW50cy5vbmRlbWFuZC5jb208L25zMjpJc3N1ZXI%2BPFN0YXR1cz48U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8%2BPC9TdGF0dXM%2BPEFzc2VydGlvbiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgeG1sbnM6bnMyPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIiB4bWxuczpuczM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jIyIgSUQ9IkEtNTQ3MDM2ZmQtM2E0MS00ZjAwLTgzMjctNDU3NjMzZmEyY2RjIiBJc3N1ZUluc3RhbnQ9IjIwMjEtMDItMjVUMTQ6MTI6NTguMjg1WiIgVmVyc2lvbj0iMi4wIj48SXNzdWVyPmh0dHBzOi8vdGVjay5hY2NvdW50cy5vbmRlbWFuZC5jb208L0lzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI0EtNTQ3MDM2ZmQtM2E0MS00ZjAwLTgzMjctNDU3NjMzZmEyY2RjIj48ZHM6VHJhbnNmb3Jtcz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8%2BPC9kczpUcmFuc2Zvcm1zPjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPjxkczpEaWdlc3RWYWx1ZT5tUDBCTW9jUFIxTzFqQURKQlRtT1dLNXNibW89PC9kczpEaWdlc3RWYWx1ZT48L2RzOlJlZmVyZW5jZT48L2RzOlNpZ25lZEluZm8%2BPGRzOlNpZ25hdHVyZVZhbHVlPmFENlJpcW53MWRwVnY2b3c2MEYrWnFPOTNFcG1aRFFuUFVTUTltVmczSUlIL0g5a1hBMXZtTVpCZWJPUi9uSDZTTjhybXlaYVk3cU5uaUhaL3ROc0JxWmkzc3prbVh2Q2dRMXBPTFhEbktqZnNQZ0xKa0t3NGhFTGMzQ3NKOURCTWUxcTFnWDdqaVRwZjNYRUdpQ29ObVpyVlM4ZmtPU2wzVVFVUFB4WmxqVTNxdDUwV3M2VkNiUFVmMGQ1a1hCQk5ETUw2SGlPUHhrRFRmN212Y2tIdERwTDdDbnZMKzBuL1B1NmFxQTZmUUI5WVlOUkgxcFMvS0R5bk81UUY4NjM0U0VZSkhyUlBhYkFiV3duMzlEd2Z2YXhxUWZKSTZyZTE2WnBEdkw1RitvVGphZTRVejljM3J6ZnhFSHZqZytzYXo0Q3pVaklSUEJuOG5vaUlIdWRpUT09PC9kczpTaWduYXR1cmVWYWx1ZT48ZHM6S2V5SW5mbz48ZHM6WDUwOURhdGE%2BPGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlEQ0RDQ0FmQ2dBd0lCQVFJR0FXMjFNa2hHTUEwR0NTcUdTSWIzRFFFQkN3VUFNRU14Q3pBSkJnTlZCQVlUQWtSRk1ROHdEUVlEVlFRS0V3WlRRVkF0VTBVeEl6QWhCZ05WQkFNVEduUmxZMnN1WVdOamIzVnVkSE11YjI1a1pXMWhibVF1WTI5dE1CNFhEVEU1TVRBeE1ERXdNak0xTkZvWERUSTVNVEF4TURFd01qTTFORm93UXpFTE1Ba0dBMVVFQmhNQ1JFVXhEekFOQmdOVkJBb1RCbE5CVUMxVFJURWpNQ0VHQTFVRUF4TWFkR1ZqYXk1aFkyTnZkVzUwY3k1dmJtUmxiV0Z1WkM1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDcVNXdk4va2xpV2tSMmJHNVhDZHFQbGJPOVhZclRxV1l1My9CVmtONE9pM0NzWUhsdEVMTTVuNzJHMWFwK2RyREhWMHBPMzlkaWY2M2o1VWZuVVRXNEErVWxrOHdSaXZndk1VRXJVNHc2NGZmU2tlaTFSR1RkWUk5ZDkxMndxOERCOGVlMmM0K3ZGR28yQUd5aFFpQk5ST1JGdzRoNHJZOWZQaWhHMHg3eUJoSlNhT2UveEkrbFdONFlnb1BEWXlwUSt6TEZTOUVjcEVwLzFvNytXRCtXblBRYU8zMFhGUVVSbFVXdXluak02eW5GT1VFdVhKZVJHV0k1aHlsaC9jcWJVV2JBVnc3VjNqYWJLMVpsUlJjNktDZjF1U3JVdlJDRExnamR1VjBNWXhFOC8ySTAvdXh6eFBMUXE5eHhaYTNUbE1sbUF2bVc0R2k3T0JvWUl5aW5BZ01CQUFHQ0FnQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNoQVAxcnJDbXpiUTRPR2ZTNzVXaHNkSC9hYi9RZjhtYThoV2x3UEpFZHJDMkJLK1JMUk5wOVY2bHM1dngwUExyRi9VbElmRENUNWJYOGRMS3N0U294RG1rMERiOU11bDdRV2YvcWlpaTYrQ1U4NWIwUW5CU1dqUnhVTmZycUx2OGtsYS9oTHM2Y3FqWTlmbXhzZllFTll3LzFMNmsza0Fkb3ZYcUloL2Y2eGhlWkZtWmFNRGEwN0dsRytjdm9nODdlTUxXOXF3WHlCSGZvNWZYcXdhOElvU2JMRTNidVV3MWVqaHc1c2EzMzhwQ1UzeStvWGU1YXVsOSt1NUgvL0xGT3J3a1NZOFdPZll1V1NMaHhiSGNLUDlNVEdEOWZmcThyOW1PSzhaUG14RU9JYVQyNEVqMzA5aHZ1Q00zcUhRRHpld0dmWUp1UTZMQWxuQVFIenFUbTwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE%2BPGRzOktleVZhbHVlPjxkczpSU0FLZXlWYWx1ZT48ZHM6TW9kdWx1cz5xa2xyemY1SllscEVkbXh1VnduYWo1V3p2VjJLMDZsbUx0L3dWWkRlRG90d3JHQjViUkN6T1orOWh0V3FmbmF3eDFkS1R0L1hZbit0NCtWSDUxRTF1QVBsSlpQTUVZcjRMekZCSzFPTU91SDMwcEhvdFVSazNXQ1BYZmRkc0t2QXdmSG50bk9QcnhScU5nQnNvVUlnVFVUa1JjT0llSzJQWHo0b1J0TWU4Z1lTVW1qbnY4U1BwVmplR0lLRHcyTXFVUHN5eFV2UkhLUktmOWFPL2xnL2xwejBHanQ5RnhVRkVaVkZyc3A0ek9zcHhUbEJMbHlYa1JsaU9ZY3BZZjNLbTFGbXdGY08xZDQybXl0V1pVVVhPaWduOWJrcTFMMFFneTRJM2JsZERHTVJQUDlpTlA3c2M4VHkwS3ZjY1dXdDA1VEpaZ0w1bHVCb3V6Z2FHQ01vcHc9PTwvZHM6TW9kdWx1cz48ZHM6RXhwb25lbnQ%2BQVFBQjwvZHM6RXhwb25lbnQ%2BPC9kczpSU0FLZXlWYWx1ZT48L2RzOktleVZhbHVlPjwvZHM6S2V5SW5mbz48L2RzOlNpZ25hdHVyZT48U3ViamVjdD48TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPlRlc3RBdXRvbWF0aW9uPC9OYW1lSUQ%2BPFN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJfYzcwZjgwNTQtNTcyMi00NTNjLWFjMjctYTY0OWQxODg5ZWIxIiBOb3RPbk9yQWZ0ZXI9IjIwMjEtMDItMjVUMTQ6MjI6NTguMjg1WiIgUmVjaXBpZW50PSJodHRwczovL3BlcmZvcm1hbmNlbWFuYWdlcjQuc3VjY2Vzc2ZhY3RvcnMuY29tL3NhbWwyL1NBTUxBc3NlcnRpb25Db25zdW1lcj9jb21wYW55PVRlY2siLz48L1N1YmplY3RDb25maXJtYXRpb24%2BPC9TdWJqZWN0PjxDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAyMS0wMi0yNVQxNDowNzo1OC4yODVaIiBOb3RPbk9yQWZ0ZXI9IjIwMjEtMDItMjVUMTQ6MjI6NTguMjg1WiI%2BPEF1ZGllbmNlUmVzdHJpY3Rpb24%2BPEF1ZGllbmNlPmh0dHBzOi8vd3d3LnN1Y2Nlc3NmYWN0b3JzLmNvbS9UZWNrPC9BdWRpZW5jZT48L0F1ZGllbmNlUmVzdHJpY3Rpb24%2BPC9Db25kaXRpb25zPjxBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMjEtMDItMjVUMTQ6MTI6NTguMjg1WiIgU2Vzc2lvbkluZGV4PSJTLVNQLTk5MWQ3ZWE5LTMyMjEtNDRmMC05ZTFkLWJhMTA4ODk2MGI2YiIgU2Vzc2lvbk5vdE9uT3JBZnRlcj0iMjAyMS0wMi0yNlQwMjoxMjo1OC4yODVaIj48QXV0aG5Db250ZXh0PjxBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZFByb3RlY3RlZFRyYW5zcG9ydDwvQXV0aG5Db250ZXh0Q2xhc3NSZWY%2BPC9BdXRobkNvbnRleHQ%2BPC9BdXRoblN0YXRlbWVudD48QXR0cmlidXRlU3RhdGVtZW50PjxBdHRyaWJ1dGUgTmFtZT0idXNlcl91dWlkIj48QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj40NzQ1NjJmOC1kMmEwLTQ3MjQtYWI0ZC1kNmRhOWM1NzY0MmM8L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgTmFtZT0ibWFpbCI%2BPEF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BYmFsYXNoLmFrYmFyaUB0ZWNrLmNvbTwvQXR0cmlidXRlVmFsdWU%2BPC9BdHRyaWJ1dGU%2BPEF0dHJpYnV0ZSBOYW1lPSJsYXN0X25hbWUiPjxBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPkF1dG9tYXRpb248L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgTmFtZT0iZmlyc3RfbmFtZSI%2BPEF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BVGVzdDwvQXR0cmlidXRlVmFsdWU%2BPC9BdHRyaWJ1dGU%2BPC9BdHRyaWJ1dGVTdGF0ZW1lbnQ%2BPC9Bc3NlcnRpb24%2BPC9SZXNwb25zZT4%3D
				"&RelayState=%2Flogin%3F_s.crb%3DEh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d";
		byte[][] searchPattern0067_0 = new byte[1][];
		searchPattern0067_0[0] = Base64Decoder.decodeToBytes("RWgwJTI1MmJqVWpzU2NPc05lU0JxZmtUb3ljeGZoa0FweFg0WWxTUkwlMjUyYnhuaHp3JTI1M2Q=");
		byte[] binarySearchPattern0067_0   = Lib.mergeByteArrays(searchPattern0067_0);		// note: the search pattern value is base 64 encoded. decoded value = Eh0%252bjUjsScOsNeSBqfkToycxfhkApxX4YlSRL%252bxnhzw%253d
		requestContent0067 = new String(Lib.binaryReplace(requestContent0067.getBytes(), binarySearchPattern0067_0, java.net.URLEncoder.encode(C_AjaxsecretKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0067_1 = new byte[1][];
		searchPattern0067_1[0] = Base64Decoder.decodeToBytes("TXJGaE9COUtGWlR6bVRteXZwWWRGcndDc09tQ3VzNFlRb3hvMjdLQnJ5bWNSeGt1TDFUT1ZEb2pNZVJjbmhFR0FLNDE2V0xvZnd0ZWg2MkprMnFIN3clM0QlM0Q=");
		byte[] binarySearchPattern0067_1   = Lib.mergeByteArrays(searchPattern0067_1);		// note: the search pattern value is base 64 encoded. decoded value = MrFhOB9KFZTzmTmyvpYdFrwCsOmCus4YQoxo27KBrymcRxkuL1TOVDojMeRcnhEGAK416WLofwteh62Jk2qH7w%3D%3D
		requestContent0067 = new String(Lib.binaryReplace(requestContent0067.getBytes(), binarySearchPattern0067_1, java.net.URLEncoder.encode(C_AuthenticityToken1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0067_2 = new byte[1][];
		searchPattern0067_2[0] = Base64Decoder.decodeToBytes("UEZKbGMzQnZibk5sSUhodGJHNXpQU0oxY200NmIyRnphWE02Ym1GdFpYTTZkR002VTBGTlREb3lMakE2Y0hKdmRHOWpiMndpSUhodGJHNXpPbTV6TWowaWRYSnVPbTloYzJsek9tNWhiV1Z6T25Sak9sTkJUVXc2TWk0d09tRnpjMlZ5ZEdsdmJpSWdlRzFzYm5NNmJuTXpQU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh5TURBd0x6QTVMM2h0YkdSemFXY2pJaUI0Yld4dWN6cHVjelE5SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01ERXZNRFF2ZUcxc1pXNWpJeUlnUkdWemRHbHVZWFJwYjI0OUltaDBkSEJ6T2k4dmNHVnlabTl5YldGdVkyVnRZVzVoWjJWeU5DNXpkV05qWlhOelptRmpkRzl5Y3k1amIyMHZjMkZ0YkRJdlUwRk5URUZ6YzJWeWRHbHZia052Ym5OMWJXVnlQMk52YlhCaGJuazlWR1ZqYXlJZ1NVUTlJbEpGVXkxVFUwOHROMkk0TVRGbVpHRXRNekpsWkMwME5URTJMV0l3WW1NdFl6VXlPREZoWkRKa1pqWmxJaUJKYmxKbGMzQnZibk5sVkc4OUlsOWpOekJtT0RBMU5DMDFOekl5TFRRMU0yTXRZV015TnkxaE5qUTVaREU0T0RsbFlqRWlJRWx6YzNWbFNXNXpkR0Z1ZEQwaU1qQXlNUzB3TWkweU5WUXhORG94TWpvMU9DNHlPRFZhSWlCV1pYSnphVzl1UFNJeUxqQWlQanh1Y3pJNlNYTnpkV1Z5UG1oMGRIQnpPaTh2ZEdWamF5NWhZMk52ZFc1MGN5NXZibVJsYldGdVpDNWpiMjA4TDI1ek1qcEpjM04xWlhJJTJCUEZOMFlYUjFjejQ4VTNSaGRIVnpRMjlrWlNCV1lXeDFaVDBpZFhKdU9tOWhjMmx6T201aGJXVnpPblJqT2xOQlRVdzZNaTR3T25OMFlYUjFjenBUZFdOalpYTnpJaTglMkJQQzlUZEdGMGRYTSUyQlBFRnpjMlZ5ZEdsdmJpQjRiV3h1Y3owaWRYSnVPbTloYzJsek9tNWhiV1Z6T25Sak9sTkJUVXc2TWk0d09tRnpjMlZ5ZEdsdmJpSWdlRzFzYm5NNmJuTXlQU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh5TURBd0x6QTVMM2h0YkdSemFXY2pJaUI0Yld4dWN6cHVjek05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01ERXZNRFF2ZUcxc1pXNWpJeUlnU1VROUlrRXROVFEzTURNMlptUXRNMkUwTVMwMFpqQXdMVGd6TWpjdE5EVTNOak16Wm1FeVkyUmpJaUJKYzNOMVpVbHVjM1JoYm5ROUlqSXdNakV0TURJdE1qVlVNVFE2TVRJNk5UZ3VNamcxV2lJZ1ZtVnljMmx2YmowaU1pNHdJajQ4U1hOemRXVnlQbWgwZEhCek9pOHZkR1ZqYXk1aFkyTnZkVzUwY3k1dmJtUmxiV0Z1WkM1amIyMDhMMGx6YzNWbGNqNDhaSE02VTJsbmJtRjBkWEpsSUhodGJHNXpPbVJ6UFNKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eU1EQXdMekE1TDNodGJHUnphV2NqSWo0OFpITTZVMmxuYm1Wa1NXNW1iejQ4WkhNNlEyRnViMjVwWTJGc2FYcGhkR2x2YmsxbGRHaHZaQ0JCYkdkdmNtbDBhRzA5SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01ERXZNVEF2ZUcxc0xXVjRZeTFqTVRSdUl5SXZQanhrY3pwVGFXZHVZWFIxY21WTlpYUm9iMlFnUVd4bmIzSnBkR2h0UFNKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eU1EQXdMekE1TDNodGJHUnphV2NqY25OaExYTm9ZVEVpTHo0OFpITTZVbVZtWlhKbGJtTmxJRlZTU1QwaUkwRXROVFEzTURNMlptUXRNMkUwTVMwMFpqQXdMVGd6TWpjdE5EVTNOak16Wm1FeVkyUmpJajQ4WkhNNlZISmhibk5tYjNKdGN6NDhaSE02VkhKaGJuTm1iM0p0SUVGc1oyOXlhWFJvYlQwaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzh3T1M5NGJXeGtjMmxuSTJWdWRtVnNiM0JsWkMxemFXZHVZWFIxY21VaUx6NDhaSE02VkhKaGJuTm1iM0p0SUVGc1oyOXlhWFJvYlQwaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNUzh4TUM5NGJXd3RaWGhqTFdNeE5HNGpJaTglMkJQQzlrY3pwVWNtRnVjMlp2Y20xelBqeGtjenBFYVdkbGMzUk5aWFJvYjJRZ1FXeG5iM0pwZEdodFBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF3THpBNUwzaHRiR1J6YVdjamMyaGhNU0l2UGp4a2N6cEVhV2RsYzNSV1lXeDFaVDV0VURCQ1RXOWpVRkl4VHpGcVFVUktRbFJ0VDFkTE5YTmliVzg5UEM5a2N6cEVhV2RsYzNSV1lXeDFaVDQ4TDJSek9sSmxabVZ5Wlc1alpUNDhMMlJ6T2xOcFoyNWxaRWx1Wm04JTJCUEdSek9sTnBaMjVoZEhWeVpWWmhiSFZsUG1GRU5sSnBjVzUzTVdSd1ZuWTJiM2MyTUVZclduRlBPVE5GY0cxYVJGRnVVRlZUVVRsdFZtY3pTVWxJTDBnNWExaEJNWFp0VFZwQ1pXSlBVaTl1U0RaVFRqaHliWGxhWVZrM2NVNXVhVWhhTDNST2MwSnhXbWt6YzNwcmJWaDJRMmRSTVhCUFRGaEVia3RxWm5OUVoweEthMHQzTkdoRlRHTXpRM05LT1VSQ1RXVXhjVEZuV0RkcWFWUndaak5ZUlVkcFEyOU9iVnB5VmxNNFptdFBVMnd6VlZGVlVGQjRXbXhxVlROeGREVXdWM00yVmtOaVVGVm1NR1ExYTFoQ1FrNUVUVXcyU0dsUFVIaHJSRlJtTjIxMlkydElkRVJ3VERkRGJuWk1LekJ1TDFCMU5tRnhRVFptVVVJNVdWbE9Va2d4Y0ZNdlMwUjViazgxVVVZNE5qTTBVMFZaU2toeVVsQmhZa0ZpVjNkdU16bEVkMloyWVhoeFVXWktTVFp5WlRFMlduQkVka3cxUml0dlZHcGhaVFJWZWpsak0zSjZabmhGU0hacVp5dHpZWG8wUTNwVmFrbFNVRUp1T0c1dmFVbElkV1JwVVQwOVBDOWtjenBUYVdkdVlYUjFjbVZXWVd4MVpUNDhaSE02UzJWNVNXNW1iejQ4WkhNNldEVXdPVVJoZEdFJTJCUEdSek9sZzFNRGxEWlhKMGFXWnBZMkYwWlQ1TlNVbEVRMFJEUTBGbVEyZEJkMGxDUVZGSlIwRlhNakZOYTJoSFRVRXdSME5UY1VkVFNXSXpSRkZGUWtOM1ZVRk5SVTE0UTNwQlNrSm5UbFpDUVZsVVFXdFNSazFST0hkRVVWbEVWbEZSUzBWM1dsUlJWa0YwVlRCVmVFbDZRV2hDWjA1V1FrRk5WRWR1VW14Wk1uTjFXVmRPYW1JelZuVmtTRTExWWpJMWExcFhNV2hpYlZGMVdUSTVkRTFDTkZoRVZFVTFUVlJCZUUxRVJYZE5hazB4VGtadldFUlVTVFZOVkVGNFRVUkZkMDFxVFRGT1JtOTNVWHBGVEUxQmEwZEJNVlZGUW1oTlExSkZWWGhFZWtGT1FtZE9Wa0pCYjFSQ2JFNUNWVU14VkZKVVJXcE5RMFZIUVRGVlJVRjRUV0ZrUjFacVlYazFhRmt5VG5aa1Z6VXdZM2sxZG1KdFVteGlWMFoxV2tNMWFtSXlNSGRuWjBWcFRVRXdSME5UY1VkVFNXSXpSRkZGUWtGUlZVRkJORWxDUkhkQmQyZG5SVXRCYjBsQ1FWRkRjVk5YZGs0dmEyeHBWMnRTTW1KSE5WaERaSEZRYkdKUE9WaFpjbFJ4VjFsMU15OUNWbXRPTkU5cE0wTnpXVWhzZEVWTVRUVnVOekpITVdGd0syUnlSRWhXTUhCUE16bGthV1kyTTJvMVZXWnVWVlJYTkVFclZXeHJPSGRTYVhabmRrMVZSWEpWTkhjMk5HWm1VMnRsYVRGU1IxUmtXVWs1WkRreE1uZHhPRVJDT0dWbE1tTTBLM1pHUjI4eVFVZDVhRkZwUWs1U1QxSkdkelJvTkhKWk9XWlFhV2hITUhnM2VVSm9TbE5oVDJVdmVFa3JiRmRPTkZsbmIxQkVXWGx3VVN0NlRFWlRPVVZqY0VWd0x6RnZOeXRYUkN0WGJsQlJZVTh6TUZoR1VWVlNiRlZYZFhsdWFrMDJlVzVHVDFWRmRWaEtaVkpIVjBrMWFIbHNhQzlqY1dKVlYySkJWbmMzVmpOcVlXSkxNVnBzVWxKak5rdERaakYxVTNKVmRsSkRSRXhuYW1SMVZqQk5XWGhGT0M4eVNUQXZkWGg2ZUZCTVVYRTVlSGhhWVROVWJFMXNiVUYyYlZjMFIyazNUMEp2V1VsNWFXNUJaMDFDUVVGSFEwRm5RVUZOUVRCSFExTnhSMU5KWWpORVVVVkNRM2RWUVVFMFNVSkJVVU5vUVZBeGNuSkRiWHBpVVRSUFIyWlROelZYYUhOa1NDOWhZaTlSWmpodFlUaG9WMngzVUVwRlpISkRNa0pMSzFKTVVrNXdPVlkyYkhNMWRuZ3dVRXh5Umk5VmJFbG1SRU5VTldKWU9HUk1TM04wVTI5NFJHMXJNRVJpT1UxMWJEZFJWMll2Y1dscGFUWXJRMVU0TldJd1VXNUNVMWRxVW5oVlRtWnljVXgyT0d0c1lTOW9USE0yWTNGcVdUbG1iWGh6WmxsRlRsbDNMekZNTm1zemEwRmtiM1pZY1Vsb0wyWTJlR2hsV2tadFdtRk5SR0V3TjBkc1J5dGpkbTluT0RkbFRVeFhPWEYzV0hsQ1NHWnZOV1pZY1hkaE9FbHZVMkpNUlROaWRWVjNNV1ZxYUhjMWMyRXpNemh3UTFVemVTdHZXR1UxWVhWc09TdDFOVWd2TDB4R1QzSjNhMU5aT0ZkUFpsbDFWMU5NYUhoaVNHTkxVRGxOVkVkRU9XWm1jVGh5T1cxUFN6aGFVRzE0UlU5SllWUXlORVZxTXpBNWFIWjFRMDB6Y1VoUlJIcGxkMGRtV1VwMVVUWk1RV3h1UVZGSWVuRlViVHd2WkhNNldEVXdPVU5sY25ScFptbGpZWFJsUGp3dlpITTZXRFV3T1VSaGRHRSUyQlBHUnpPa3RsZVZaaGJIVmxQanhrY3pwU1UwRkxaWGxXWVd4MVpUNDhaSE02VFc5a2RXeDFjejV4YTJ4eWVtWTFTbGxzY0VWa2JYaDFWbmR1WVdvMVYzcDJWakpMTURac2JVeDBMM2RXV2tSbFJHOTBkM0pIUWpWaVVrTjZUMW9yT1doMFYzRm1ibUYzZURGa1MxUjBMMWhaYml0ME5DdFdTRFV4UlRGMVFWQnNTbHBRVFVWWmNqUk1la1pDU3pGUFRVOTFTRE13Y0VodmRGVlNhek5YUTFCWVptUmtjMHQyUVhkbVNHNTBiazlRY25oU2NVNW5Rbk52VlVsblZGVlVhMUpqVDBsbFN6SlFXSG8wYjFKMFRXVTRaMWxUVlcxcWJuWTRVMUJ3Vm1wbFIwbExSSGN5VFhGVlVITjVlRlYyVWtoTFVrdG1PV0ZQTDJ4bkwyeHdlakJIYW5RNVJuaFZSa1ZhVmtaeWMzQTBlazl6Y0hoVWJFSk1iSGxZYTFKc2FVOVpZM0JaWmpOTGJURkdiWGRHWTA4eFpEUXliWGwwVjFwVlZWaFBhV2R1T1dKcmNURk1NRkZuZVRSSk0ySnNaRVJIVFZKUVVEbHBUbEEzYzJNNFZIa3dTM1pqWTFkWGREQTFWRXBhWjB3MWJIVkNiM1Y2WjJGSFEwMXZjSGM5UFR3dlpITTZUVzlrZFd4MWN6NDhaSE02Ulhod2IyNWxiblElMkJRVkZCUWp3dlpITTZSWGh3YjI1bGJuUSUyQlBDOWtjenBTVTBGTFpYbFdZV3gxWlQ0OEwyUnpPa3RsZVZaaGJIVmxQand2WkhNNlMyVjVTVzVtYno0OEwyUnpPbE5wWjI1aGRIVnlaVDQ4VTNWaWFtVmpkRDQ4VG1GdFpVbEVJRVp2Y20xaGREMGlkWEp1T205aGMybHpPbTVoYldWek9uUmpPbE5CVFV3Nk1TNHhPbTVoYldWcFpDMW1iM0p0WVhRNmRXNXpjR1ZqYVdacFpXUWlQbFJsYzNSQmRYUnZiV0YwYVc5dVBDOU9ZVzFsU1VRJTJCUEZOMVltcGxZM1JEYjI1bWFYSnRZWFJwYjI0Z1RXVjBhRzlrUFNKMWNtNDZiMkZ6YVhNNmJtRnRaWE02ZEdNNlUwRk5URG95TGpBNlkyMDZZbVZoY21WeUlqNDhVM1ZpYW1WamRFTnZibVpwY20xaGRHbHZia1JoZEdFZ1NXNVNaWE53YjI1elpWUnZQU0pmWXpjd1pqZ3dOVFF0TlRjeU1pMDBOVE5qTFdGak1qY3RZVFkwT1dReE9EZzVaV0l4SWlCT2IzUlBiazl5UVdaMFpYSTlJakl3TWpFdE1ESXRNalZVTVRRNk1qSTZOVGd1TWpnMVdpSWdVbVZqYVhCcFpXNTBQU0pvZEhSd2N6b3ZMM0JsY21admNtMWhibU5sYldGdVlXZGxjalF1YzNWalkyVnpjMlpoWTNSdmNuTXVZMjl0TDNOaGJXd3lMMU5CVFV4QmMzTmxjblJwYjI1RGIyNXpkVzFsY2o5amIyMXdZVzU1UFZSbFkyc2lMejQ4TDFOMVltcGxZM1JEYjI1bWFYSnRZWFJwYjI0JTJCUEM5VGRXSnFaV04wUGp4RGIyNWthWFJwYjI1eklFNXZkRUpsWm05eVpUMGlNakF5TVMwd01pMHlOVlF4TkRvd056bzFPQzR5T0RWYUlpQk9iM1JQYms5eVFXWjBaWEk5SWpJd01qRXRNREl0TWpWVU1UUTZNakk2TlRndU1qZzFXaUklMkJQRUYxWkdsbGJtTmxVbVZ6ZEhKcFkzUnBiMjQlMkJQRUYxWkdsbGJtTmxQbWgwZEhCek9pOHZkM2QzTG5OMVkyTmxjM05tWVdOMGIzSnpMbU52YlM5VVpXTnJQQzlCZFdScFpXNWpaVDQ4TDBGMVpHbGxibU5sVW1WemRISnBZM1JwYjI0JTJCUEM5RGIyNWthWFJwYjI1elBqeEJkWFJvYmxOMFlYUmxiV1Z1ZENCQmRYUm9ia2x1YzNSaGJuUTlJakl3TWpFdE1ESXRNalZVTVRRNk1USTZOVGd1TWpnMVdpSWdVMlZ6YzJsdmJrbHVaR1Y0UFNKVExWTlFMVGs1TVdRM1pXRTVMVE15TWpFdE5EUm1NQzA1WlRGa0xXSmhNVEE0T0RrMk1HSTJZaUlnVTJWemMybHZiazV2ZEU5dVQzSkJablJsY2owaU1qQXlNUzB3TWkweU5sUXdNam94TWpvMU9DNHlPRFZhSWo0OFFYVjBhRzVEYjI1MFpYaDBQanhCZFhSb2JrTnZiblJsZUhSRGJHRnpjMUpsWmo1MWNtNDZiMkZ6YVhNNmJtRnRaWE02ZEdNNlUwRk5URG95TGpBNllXTTZZMnhoYzNObGN6cFFZWE56ZDI5eVpGQnliM1JsWTNSbFpGUnlZVzV6Y0c5eWREd3ZRWFYwYUc1RGIyNTBaWGgwUTJ4aGMzTlNaV1klMkJQQzlCZFhSb2JrTnZiblJsZUhRJTJCUEM5QmRYUm9ibE4wWVhSbGJXVnVkRDQ4UVhSMGNtbGlkWFJsVTNSaGRHVnRaVzUwUGp4QmRIUnlhV0oxZEdVZ1RtRnRaVDBpZFhObGNsOTFkV2xrSWo0OFFYUjBjbWxpZFhSbFZtRnNkV1VnZUcxc2JuTTZlSE05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01ERXZXRTFNVTJOb1pXMWhJaUI0Yld4dWN6cDRjMms5SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01ERXZXRTFNVTJOb1pXMWhMV2x1YzNSaGJtTmxJaUI0YzJrNmRIbHdaVDBpZUhNNmMzUnlhVzVuSWo0ME56UTFOakptT0Mxa01tRXdMVFEzTWpRdFlXSTBaQzFrTm1SaE9XTTFOelkwTW1NOEwwRjBkSEpwWW5WMFpWWmhiSFZsUGp3dlFYUjBjbWxpZFhSbFBqeEJkSFJ5YVdKMWRHVWdUbUZ0WlQwaWJXRnBiQ0klMkJQRUYwZEhKcFluVjBaVlpoYkhWbElIaHRiRzV6T25oelBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF4TDFoTlRGTmphR1Z0WVNJZ2VHMXNibk02ZUhOcFBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF4TDFoTlRGTmphR1Z0WVMxcGJuTjBZVzVqWlNJZ2VITnBPblI1Y0dVOUluaHpPbk4wY21sdVp5SSUyQlltRnNZWE5vTG1GclltRnlhVUIwWldOckxtTnZiVHd2UVhSMGNtbGlkWFJsVm1Gc2RXVSUyQlBDOUJkSFJ5YVdKMWRHVSUyQlBFRjBkSEpwWW5WMFpTQk9ZVzFsUFNKc1lYTjBYMjVoYldVaVBqeEJkSFJ5YVdKMWRHVldZV3gxWlNCNGJXeHVjenA0Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNUzlZVFV4VFkyaGxiV0VpSUhodGJHNXpPbmh6YVQwaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNUzlZVFV4VFkyaGxiV0V0YVc1emRHRnVZMlVpSUhoemFUcDBlWEJsUFNKNGN6cHpkSEpwYm1jaVBrRjFkRzl0WVhScGIyNDhMMEYwZEhKcFluVjBaVlpoYkhWbFBqd3ZRWFIwY21saWRYUmxQanhCZEhSeWFXSjFkR1VnVG1GdFpUMGlabWx5YzNSZmJtRnRaU0klMkJQRUYwZEhKcFluVjBaVlpoYkhWbElIaHRiRzV6T25oelBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF4TDFoTlRGTmphR1Z0WVNJZ2VHMXNibk02ZUhOcFBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF4TDFoTlRGTmphR1Z0WVMxcGJuTjBZVzVqWlNJZ2VITnBPblI1Y0dVOUluaHpPbk4wY21sdVp5SSUyQlZHVnpkRHd2UVhSMGNtbGlkWFJsVm1Gc2RXVSUyQlBDOUJkSFJ5YVdKMWRHVSUyQlBDOUJkSFJ5YVdKMWRHVlRkR0YwWlcxbGJuUSUyQlBDOUJjM05sY25ScGIyNCUyQlBDOVNaWE53YjI1elpUNCUzRA==");
		byte[] binarySearchPattern0067_2   = Lib.mergeByteArrays(searchPattern0067_2);		// note: the search pattern value is base 64 encoded. decoded value = PFJlc3BvbnNlIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOm5zMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgeG1sbnM6bnMzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIiB4bWxuczpuczQ9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jIyIgRGVzdGluYXRpb249Imh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2FtbDIvU0FNTEFzc2VydGlvbkNvbnN1bWVyP2NvbXBhbnk9VGVjayIgSUQ9IlJFUy1TU08tN2I4MTFmZGEtMzJlZC00NTE2LWIwYmMtYzUyODFhZDJkZjZlIiBJblJlc3BvbnNlVG89Il9jNzBmODA1NC01NzIyLTQ1M2MtYWMyNy1hNjQ5ZDE4ODllYjEiIElzc3VlSW5zdGFudD0iMjAyMS0wMi0yNVQxNDoxMjo1OC4yODVaIiBWZXJzaW9uPSIyLjAiPjxuczI6SXNzdWVyPmh0dHBzOi8vdGVjay5hY2NvdW50cy5vbmRlbWFuZC5jb208L25zMjpJc3N1ZXI%2BPFN0YXR1cz48U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8%2BPC9TdGF0dXM%2BPEFzc2VydGlvbiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgeG1sbnM6bnMyPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIiB4bWxuczpuczM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jIyIgSUQ9IkEtNTQ3MDM2ZmQtM2E0MS00ZjAwLTgzMjctNDU3NjMzZmEyY2RjIiBJc3N1ZUluc3RhbnQ9IjIwMjEtMDItMjVUMTQ6MTI6NTguMjg1WiIgVmVyc2lvbj0iMi4wIj48SXNzdWVyPmh0dHBzOi8vdGVjay5hY2NvdW50cy5vbmRlbWFuZC5jb208L0lzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI0EtNTQ3MDM2ZmQtM2E0MS00ZjAwLTgzMjctNDU3NjMzZmEyY2RjIj48ZHM6VHJhbnNmb3Jtcz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8%2BPC9kczpUcmFuc2Zvcm1zPjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPjxkczpEaWdlc3RWYWx1ZT5tUDBCTW9jUFIxTzFqQURKQlRtT1dLNXNibW89PC9kczpEaWdlc3RWYWx1ZT48L2RzOlJlZmVyZW5jZT48L2RzOlNpZ25lZEluZm8%2BPGRzOlNpZ25hdHVyZVZhbHVlPmFENlJpcW53MWRwVnY2b3c2MEYrWnFPOTNFcG1aRFFuUFVTUTltVmczSUlIL0g5a1hBMXZtTVpCZWJPUi9uSDZTTjhybXlaYVk3cU5uaUhaL3ROc0JxWmkzc3prbVh2Q2dRMXBPTFhEbktqZnNQZ0xKa0t3NGhFTGMzQ3NKOURCTWUxcTFnWDdqaVRwZjNYRUdpQ29ObVpyVlM4ZmtPU2wzVVFVUFB4WmxqVTNxdDUwV3M2VkNiUFVmMGQ1a1hCQk5ETUw2SGlPUHhrRFRmN212Y2tIdERwTDdDbnZMKzBuL1B1NmFxQTZmUUI5WVlOUkgxcFMvS0R5bk81UUY4NjM0U0VZSkhyUlBhYkFiV3duMzlEd2Z2YXhxUWZKSTZyZTE2WnBEdkw1RitvVGphZTRVejljM3J6ZnhFSHZqZytzYXo0Q3pVaklSUEJuOG5vaUlIdWRpUT09PC9kczpTaWduYXR1cmVWYWx1ZT48ZHM6S2V5SW5mbz48ZHM6WDUwOURhdGE%2BPGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlEQ0RDQ0FmQ2dBd0lCQVFJR0FXMjFNa2hHTUEwR0NTcUdTSWIzRFFFQkN3VUFNRU14Q3pBSkJnTlZCQVlUQWtSRk1ROHdEUVlEVlFRS0V3WlRRVkF0VTBVeEl6QWhCZ05WQkFNVEduUmxZMnN1WVdOamIzVnVkSE11YjI1a1pXMWhibVF1WTI5dE1CNFhEVEU1TVRBeE1ERXdNak0xTkZvWERUSTVNVEF4TURFd01qTTFORm93UXpFTE1Ba0dBMVVFQmhNQ1JFVXhEekFOQmdOVkJBb1RCbE5CVUMxVFJURWpNQ0VHQTFVRUF4TWFkR1ZqYXk1aFkyTnZkVzUwY3k1dmJtUmxiV0Z1WkM1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDcVNXdk4va2xpV2tSMmJHNVhDZHFQbGJPOVhZclRxV1l1My9CVmtONE9pM0NzWUhsdEVMTTVuNzJHMWFwK2RyREhWMHBPMzlkaWY2M2o1VWZuVVRXNEErVWxrOHdSaXZndk1VRXJVNHc2NGZmU2tlaTFSR1RkWUk5ZDkxMndxOERCOGVlMmM0K3ZGR28yQUd5aFFpQk5ST1JGdzRoNHJZOWZQaWhHMHg3eUJoSlNhT2UveEkrbFdONFlnb1BEWXlwUSt6TEZTOUVjcEVwLzFvNytXRCtXblBRYU8zMFhGUVVSbFVXdXluak02eW5GT1VFdVhKZVJHV0k1aHlsaC9jcWJVV2JBVnc3VjNqYWJLMVpsUlJjNktDZjF1U3JVdlJDRExnamR1VjBNWXhFOC8ySTAvdXh6eFBMUXE5eHhaYTNUbE1sbUF2bVc0R2k3T0JvWUl5aW5BZ01CQUFHQ0FnQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNoQVAxcnJDbXpiUTRPR2ZTNzVXaHNkSC9hYi9RZjhtYThoV2x3UEpFZHJDMkJLK1JMUk5wOVY2bHM1dngwUExyRi9VbElmRENUNWJYOGRMS3N0U294RG1rMERiOU11bDdRV2YvcWlpaTYrQ1U4NWIwUW5CU1dqUnhVTmZycUx2OGtsYS9oTHM2Y3FqWTlmbXhzZllFTll3LzFMNmsza0Fkb3ZYcUloL2Y2eGhlWkZtWmFNRGEwN0dsRytjdm9nODdlTUxXOXF3WHlCSGZvNWZYcXdhOElvU2JMRTNidVV3MWVqaHc1c2EzMzhwQ1UzeStvWGU1YXVsOSt1NUgvL0xGT3J3a1NZOFdPZll1V1NMaHhiSGNLUDlNVEdEOWZmcThyOW1PSzhaUG14RU9JYVQyNEVqMzA5aHZ1Q00zcUhRRHpld0dmWUp1UTZMQWxuQVFIenFUbTwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE%2BPGRzOktleVZhbHVlPjxkczpSU0FLZXlWYWx1ZT48ZHM6TW9kdWx1cz5xa2xyemY1SllscEVkbXh1VnduYWo1V3p2VjJLMDZsbUx0L3dWWkRlRG90d3JHQjViUkN6T1orOWh0V3FmbmF3eDFkS1R0L1hZbit0NCtWSDUxRTF1QVBsSlpQTUVZcjRMekZCSzFPTU91SDMwcEhvdFVSazNXQ1BYZmRkc0t2QXdmSG50bk9QcnhScU5nQnNvVUlnVFVUa1JjT0llSzJQWHo0b1J0TWU4Z1lTVW1qbnY4U1BwVmplR0lLRHcyTXFVUHN5eFV2UkhLUktmOWFPL2xnL2xwejBHanQ5RnhVRkVaVkZyc3A0ek9zcHhUbEJMbHlYa1JsaU9ZY3BZZjNLbTFGbXdGY08xZDQybXl0V1pVVVhPaWduOWJrcTFMMFFneTRJM2JsZERHTVJQUDlpTlA3c2M4VHkwS3ZjY1dXdDA1VEpaZ0w1bHVCb3V6Z2FHQ01vcHc9PTwvZHM6TW9kdWx1cz48ZHM6RXhwb25lbnQ%2BQVFBQjwvZHM6RXhwb25lbnQ%2BPC9kczpSU0FLZXlWYWx1ZT48L2RzOktleVZhbHVlPjwvZHM6S2V5SW5mbz48L2RzOlNpZ25hdHVyZT48U3ViamVjdD48TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPlRlc3RBdXRvbWF0aW9uPC9OYW1lSUQ%2BPFN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJfYzcwZjgwNTQtNTcyMi00NTNjLWFjMjctYTY0OWQxODg5ZWIxIiBOb3RPbk9yQWZ0ZXI9IjIwMjEtMDItMjVUMTQ6MjI6NTguMjg1WiIgUmVjaXBpZW50PSJodHRwczovL3BlcmZvcm1hbmNlbWFuYWdlcjQuc3VjY2Vzc2ZhY3RvcnMuY29tL3NhbWwyL1NBTUxBc3NlcnRpb25Db25zdW1lcj9jb21wYW55PVRlY2siLz48L1N1YmplY3RDb25maXJtYXRpb24%2BPC9TdWJqZWN0PjxDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAyMS0wMi0yNVQxNDowNzo1OC4yODVaIiBOb3RPbk9yQWZ0ZXI9IjIwMjEtMDItMjVUMTQ6MjI6NTguMjg1WiI%2BPEF1ZGllbmNlUmVzdHJpY3Rpb24%2BPEF1ZGllbmNlPmh0dHBzOi8vd3d3LnN1Y2Nlc3NmYWN0b3JzLmNvbS9UZWNrPC9BdWRpZW5jZT48L0F1ZGllbmNlUmVzdHJpY3Rpb24%2BPC9Db25kaXRpb25zPjxBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMjEtMDItMjVUMTQ6MTI6NTguMjg1WiIgU2Vzc2lvbkluZGV4PSJTLVNQLTk5MWQ3ZWE5LTMyMjEtNDRmMC05ZTFkLWJhMTA4ODk2MGI2YiIgU2Vzc2lvbk5vdE9uT3JBZnRlcj0iMjAyMS0wMi0yNlQwMjoxMjo1OC4yODVaIj48QXV0aG5Db250ZXh0PjxBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZFByb3RlY3RlZFRyYW5zcG9ydDwvQXV0aG5Db250ZXh0Q2xhc3NSZWY%2BPC9BdXRobkNvbnRleHQ%2BPC9BdXRoblN0YXRlbWVudD48QXR0cmlidXRlU3RhdGVtZW50PjxBdHRyaWJ1dGUgTmFtZT0idXNlcl91dWlkIj48QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj40NzQ1NjJmOC1kMmEwLTQ3MjQtYWI0ZC1kNmRhOWM1NzY0MmM8L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgTmFtZT0ibWFpbCI%2BPEF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BYmFsYXNoLmFrYmFyaUB0ZWNrLmNvbTwvQXR0cmlidXRlVmFsdWU%2BPC9BdHRyaWJ1dGU%2BPEF0dHJpYnV0ZSBOYW1lPSJsYXN0X25hbWUiPjxBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPkF1dG9tYXRpb248L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgTmFtZT0iZmlyc3RfbmFtZSI%2BPEF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BVGVzdDwvQXR0cmlidXRlVmFsdWU%2BPC9BdHRyaWJ1dGU%2BPC9BdHRyaWJ1dGVTdGF0ZW1lbnQ%2BPC9Bc3NlcnRpb24%2BPC9SZXNwb25zZT4%3D
		requestContent0067 = new String(Lib.binaryReplace(requestContent0067.getBytes(), binarySearchPattern0067_2, java.net.URLEncoder.encode(C_SAMLResponse1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0067 = "POST " + requestFile0067 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0067.length() + "\r\n" + 		// Content-Length: 7426
				"Origin: https://teck.accounts.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0067, requestHost0067, requestPort0067, requestHeader0067, requestContent0067.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0067 = null;		// support garbage collector to reduce memory
		requestContent0067 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [67] <- Index 67
		if(replayMode)
		{
			long proxyDataRecordId =1614262379466L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		htmlContentParser = new HtmlContentParser(testURL, this);
		try
		{
			// extract var 'vScrb'
			vScrb = testURL.getRedirectLocation().getParameter("_s.crb");		// recorded value = TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d
			log("<<< vScrb = " + vScrb);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && vScrb!= null && vScrb.trim().length() == 0)
			{
				vScrb = "";
				log("runtime note: the extraction of a new value for the variable 'vScrb' ends up with an empty string - a substitute value was set");
				log("<<< vScrb = " + vScrb);
			}
		}
		catch (Exception e) { vScrb = null; log(e); }
		if (vScrb == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'vScrb' from http redirection";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated
		
		// execute inline script "htmldecode"
		inlineScriptContext = executeInlineScript_1615295372496(testURL, urlCallPassed, threadStep - 1, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// special case: url already executed but inline script aborted - set URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			threadStep--;
			if (urlCallPassed)
				modPassed(performanceData, threadStep, -1);
			else
				modFailed(performanceData, threadStep, -1);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}






		// --- HTTP REQUEST: Test [68] <- WEB ADMIN Index 68 ---
		String requestProt0068 = "https";
		String requestHost0068 = "teck.accounts.ondemand.com";
		int    requestPort0068 = 443;
		String requestFile0068 = "/favicon.ico";
		String requestHeader0068 = "GET " + requestFile0068 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0068, requestHost0068, requestPort0068, requestHeader0068, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0068 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/X-ICON", header text fragment = [verification disabled], recorded content size = 1150
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/X-ICON", null, null);		// Test [68] <- Index 68
		if(replayMode)
		{
			long proxyDataRecordId =1614262379584L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [69] <- WEB ADMIN Index 69 ---
		String requestProt0069 = "https";
		String requestHost0069 = "performancemanager4.successfactors.com";
		int    requestPort0069 = 443;
		String requestFile0069 = "/dpconsent" +
				"?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d";
		requestFile0069 = Lib.replaceTextPattern(requestFile0069, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0069 = "GET " + requestFile0069 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0069, requestHost0069, requestPort0069, requestHeader0069, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0069 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [69] <- Index 69
		if(replayMode)
		{
			long proxyDataRecordId =1614262380408L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'C_zsessionID1'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0069_1 = new BoundaryBasedExtractorItem( "zsessionid=" , ";",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0069_1);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_zsessionID1'
			C_zsessionID1 = boundaryBasedHeaderExtractorItem0069_1.getResultText();
			log("<<< C_zsessionID1 = " + C_zsessionID1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_zsessionID1!= null && C_zsessionID1.trim().length() == 0)
			{
				C_zsessionID1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_zsessionID1' ends up with an empty string - a substitute value was set");
				log("<<< C_zsessionID1 = " + C_zsessionID1);
			}
		}
		catch (Exception e) { C_zsessionID1 = null; log(e); }
		if (C_zsessionID1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_zsessionID1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [70] <- WEB ADMIN Index 70 ---
		log();
		log("# title: SuccessFactors: Home");
		String requestProt0070 = "https";
		String requestHost0070 = "performancemanager4.successfactors.com";
		int    requestPort0070 = 443;
		String requestFile0070 = "/sf/start" +
				"?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d";
		requestFile0070 = Lib.replaceTextPattern(requestFile0070, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0070 = "GET " + requestFile0070 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0070, requestHost0070, requestPort0070, requestHeader0070, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0070 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 30444
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors: Home");		// Test [70] <- Index 70
		if(replayMode)
		{
			long proxyDataRecordId =1614262380851L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_EventID2'
		ContentTokenExtractorItem contentTokenExtractorItem0070_1 = new ContentTokenExtractorItem("EID", "\t\n\r &(),={}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0070_1);

		contentTokenExtractor.extractTokens();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_BelizePlusLanding1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0070_1 = new BoundaryBasedExtractorItem( "belizePlusLanding" , "/.dcss",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0070_1);

		// setup var extractor for 'C_UploadHash'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0070_2 = new BoundaryBasedExtractorItem( "uploadIdHash\":\"" , "\",\"",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0070_2);

		// setup var extractor for 'C_CompanyGUID'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0070_3 = new BoundaryBasedExtractorItem( "companyGUID\":\"" , "\",\"",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0070_3);

		// setup var extractor for 'C_MoD2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0070_4 = new BoundaryBasedExtractorItem( "companyId=Teck&mod=" , "\"},\"productSwitche",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0070_4);

		// setup var extractor for 'C_MoD1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0070_5 = new BoundaryBasedExtractorItem( "dcss;mod=" , "\" type=\"text",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0070_5);

		// setup var extractor for 'C_Merge1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0070_6 = new BoundaryBasedExtractorItem( "merge_" , "/ui/sapui",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0070_6);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_BelizePlusLanding1'
			C_BelizePlusLanding1 = boundaryBasedContentExtractorItem0070_1.getResultText();
			log("<<< C_BelizePlusLanding1 = " + C_BelizePlusLanding1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_BelizePlusLanding1!= null && C_BelizePlusLanding1.trim().length() == 0)
			{
				C_BelizePlusLanding1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_BelizePlusLanding1' ends up with an empty string - a substitute value was set");
				log("<<< C_BelizePlusLanding1 = " + C_BelizePlusLanding1);
			}
		}
		catch (Exception e) { C_BelizePlusLanding1 = null; log(e); }
		if (C_BelizePlusLanding1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_BelizePlusLanding1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_UploadHash'
			C_UploadHash = boundaryBasedContentExtractorItem0070_2.getResultText();
			log("<<< C_UploadHash = " + C_UploadHash);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_UploadHash!= null && C_UploadHash.trim().length() == 0)
			{
				C_UploadHash = "";
				log("runtime note: the extraction of a new value for the variable 'C_UploadHash' ends up with an empty string - a substitute value was set");
				log("<<< C_UploadHash = " + C_UploadHash);
			}
		}
		catch (Exception e) { C_UploadHash = null; log(e); }
		if (C_UploadHash == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_UploadHash' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_CompanyGUID'
			C_CompanyGUID = boundaryBasedContentExtractorItem0070_3.getResultText();
			log("<<< C_CompanyGUID = " + C_CompanyGUID);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_CompanyGUID!= null && C_CompanyGUID.trim().length() == 0)
			{
				C_CompanyGUID = "";
				log("runtime note: the extraction of a new value for the variable 'C_CompanyGUID' ends up with an empty string - a substitute value was set");
				log("<<< C_CompanyGUID = " + C_CompanyGUID);
			}
		}
		catch (Exception e) { C_CompanyGUID = null; log(e); }
		if (C_CompanyGUID == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_CompanyGUID' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_EventID2'
			C_EventID2 = contentTokenExtractorItem0070_1.getResultToken();
			log("<<< C_EventID2 = " + C_EventID2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_EventID2!= null && C_EventID2.trim().length() == 0)
			{
				C_EventID2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_EventID2' ends up with an empty string - a substitute value was set");
				log("<<< C_EventID2 = " + C_EventID2);
			}
		}
		catch (Exception e) { C_EventID2 = null; log(e); }
		if (C_EventID2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_EventID2' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_MoD2'
			C_MoD2 = boundaryBasedContentExtractorItem0070_4.getResultText();
			log("<<< C_MoD2 = " + C_MoD2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_MoD2!= null && C_MoD2.trim().length() == 0)
			{
				C_MoD2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_MoD2' ends up with an empty string - a substitute value was set");
				log("<<< C_MoD2 = " + C_MoD2);
			}
		}
		catch (Exception e) { C_MoD2 = null; log(e); }
		if (C_MoD2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_MoD2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_MoD1'
			C_MoD1 = boundaryBasedContentExtractorItem0070_5.getResultText();
			log("<<< C_MoD1 = " + C_MoD1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_MoD1!= null && C_MoD1.trim().length() == 0)
			{
				C_MoD1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_MoD1' ends up with an empty string - a substitute value was set");
				log("<<< C_MoD1 = " + C_MoD1);
			}
		}
		catch (Exception e) { C_MoD1 = null; log(e); }
		if (C_MoD1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_MoD1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Merge1'
			C_Merge1 = boundaryBasedContentExtractorItem0070_6.getResultText();
			log("<<< C_Merge1 = " + C_Merge1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Merge1!= null && C_Merge1.trim().length() == 0)
			{
				C_Merge1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Merge1' ends up with an empty string - a substitute value was set");
				log("<<< C_Merge1 = " + C_Merge1);
			}
		}
		catch (Exception e) { C_Merge1 = null; log(e); }
		if (C_Merge1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Merge1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [71] <- WEB ADMIN Index 71 ---
		String requestProt0071 = "https";
		String requestHost0071 = "performancemanager4.successfactors.com";
		int    requestPort0071 = 443;
		String requestFile0071 = "/public/ui-dcss/Teck/_/3m!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!/.dcss;mod=5ef93424";
		requestFile0071 = Lib.replaceTextPattern(requestFile0071, "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1, 0);		// search and replace request file fragment "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!" with variable 'C_BelizePlusLanding1' on all occurrences
		requestFile0071 = Lib.replaceTextPattern(requestFile0071, "5ef93424", C_MoD1, 0);		// search and replace request file fragment "5ef93424" with variable 'C_MoD1' on all occurrences

		String requestHeader0071 = "GET " + requestFile0071 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0071, requestHost0071, requestPort0071, requestHeader0071, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0071 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 8973
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [71] <- Index 71
		if(replayMode)
		{
			long proxyDataRecordId =1614262383430L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [72] <- WEB ADMIN Index 72 ---
		String requestProt0072 = "https";
		String requestHost0072 = "performancemanager4.successfactors.com";
		int    requestPort0072 = 443;
		String requestFile0072 = "/ui/sapui5/main_1.78.6/sap/ui/thirdparty/jqueryui/jquery-ui-position.js";
		String requestHeader0072 = "GET " + requestFile0072 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0072, requestHost0072, requestPort0072, requestHeader0072, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0072 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2693
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [72] <- Index 72
		if(replayMode)
		{
			long proxyDataRecordId =1614262383436L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [73] <- WEB ADMIN Index 73 ---
		String requestProt0073 = "https";
		String requestHost0073 = "performancemanager4.successfactors.com";
		int    requestPort0073 = 443;
		String requestFile0073 = "/ui/topnav/img/belize_dark_bg_52da52583908a5afa7d86a9bc98e219d.png";
		String requestHeader0073 = "GET " + requestFile0073 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0073, requestHost0073, requestPort0073, requestHeader0073, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("5ef93424", C_MoD1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0073 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 32628
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [73] <- Index 73
		if(replayMode)
		{
			long proxyDataRecordId =1614262383756L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [74] <- WEB ADMIN Index 74 ---
		String requestProt0074 = "https";
		String requestHost0074 = "performancemanager4.successfactors.com";
		int    requestPort0074 = 443;
		String requestFile0074 = "/ui/homepage3/resources_9845F9D21661AFE5EFE157D7B537FA89/sap/ushell/library-preload.js";
		String requestHeader0074 = "GET " + requestFile0074 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0074, requestHost0074, requestPort0074, requestHeader0074, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0074 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 308290
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [74] <- Index 74
		if(replayMode)
		{
			long proxyDataRecordId =1614262383978L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [75] <- WEB ADMIN Index 75 ---
		String requestProt0075 = "https";
		String requestHost0075 = "performancemanager4.successfactors.com";
		int    requestPort0075 = 443;
		String requestFile0075 = "/ui/homepage3/resources_BB804D2AF6BEF70984AF2453CBEBF82B/sap/sf/homepage3/commons/library-preload.js";
		String requestHeader0075 = "GET " + requestFile0075 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0075, requestHost0075, requestPort0075, requestHeader0075, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0075 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5948
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [75] <- Index 75
		if(replayMode)
		{
			long proxyDataRecordId =1614262383980L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [76] <- WEB ADMIN Index 76 ---
		String requestProt0076 = "https";
		String requestHost0076 = "performancemanager4.successfactors.com";
		int    requestPort0076 = 443;
		String requestFile0076 = "/perfLogServlet" +
				"?callId=7979330776-0" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&ST=1614262381088" +
				"&STC=1614262379429" +
				"&ETC=1614262384095" +
				"&MEM=197696" +
				"&NRE=3118" +
				"&NWR=397" +
				"&SCPU=120" +
				"&SQLC=364" +
				"&SQLT=531" +
				"&SVT=2033" +
				"&UCPU=820" +
				"&CPU=940" +
				"&FRE=46" +
				"&FWR=0" +
				"&CCON=16" +
				"&CSUP=278" +
				"&CLOC=19" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=14" +
				"&cssNum=1" +
				"&renderTime=584" +
				"&RED=2" +
				"&TTB=16" +
				"&RSR=3957" +
				"&DIA=4537";
		String requestContent0076 = 
				"OPTR_INFO=917ec2ab-7773-11eb-9dce-e7f903d24901!0!1614262383966!1";
		String requestHeader0076 = "POST " + requestFile0076 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Req-Hash: ZNuneICCleKEfLOlX5fbaM4gfpFXfJGlb3d3O_xFcZNAKVVugYVFTWpCHptnNH7bFz_2F34dR2sHEFAFFJidTVMjNXJ3Z2ecTGWecY0amGJfLFd_cpQBV5h1KDt1M1oWVJF_R4\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0076.length() + "\r\n" + 		// Content-Length: 64
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0076, requestHost0076, requestPort0076, requestHeader0076, requestContent0076.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0076 = null;		// support garbage collector to reduce memory
		requestContent0076 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [76] <- Index 76
		if(replayMode)
		{
			long proxyDataRecordId =1614262384141L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [77] <- WEB ADMIN Index 77 ---
		String requestProt0077 = "https";
		String requestHost0077 = "performancemanager4.successfactors.com";
		int    requestPort0077 = 443;
		String requestFile0077 = "/public/ui-dcss/Teck/_/3m!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css";
		requestFile0077 = Lib.replaceTextPattern(requestFile0077, "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1, 0);		// search and replace request file fragment "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!" with variable 'C_BelizePlusLanding1' on all occurrences
		requestFile0077 = Lib.replaceTextPattern(requestFile0077, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0077 = "GET " + requestFile0077 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0077, requestHost0077, requestPort0077, requestHeader0077, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0077 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 14713
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [77] <- Index 77
		if(replayMode)
		{
			long proxyDataRecordId =1614262384303L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [78] <- WEB ADMIN Index 78 ---
		String requestProt0078 = "https";
		String requestHost0078 = "performancemanager4.successfactors.com";
		int    requestPort0078 = 443;
		String requestFile0078 = "/public/ui-dcss/Teck/_/3m!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library.css";
		requestFile0078 = Lib.replaceTextPattern(requestFile0078, "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1, 0);		// search and replace request file fragment "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!" with variable 'C_BelizePlusLanding1' on all occurrences
		requestFile0078 = Lib.replaceTextPattern(requestFile0078, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0078 = "GET " + requestFile0078 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0078, requestHost0078, requestPort0078, requestHeader0078, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0078 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 95187
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [78] <- Index 78
		if(replayMode)
		{
			long proxyDataRecordId =1614262384319L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [79] <- WEB ADMIN Index 79 ---
		String requestProt0079 = "https";
		String requestHost0079 = "performancemanager4.successfactors.com";
		int    requestPort0079 = 443;
		String requestFile0079 = "/ui/homepage3/resources_9845F9D21661AFE5EFE157D7B537FA89/sap/ushell/themes/sap_belize/library.css";
		String requestHeader0079 = "GET " + requestFile0079 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0079, requestHost0079, requestPort0079, requestHeader0079, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0079 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 55724
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [79] <- Index 79
		if(replayMode)
		{
			long proxyDataRecordId =1614262384333L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [80] <- WEB ADMIN Index 80 ---
		String requestProt0080 = "https";
		String requestHost0080 = "performancemanager4.successfactors.com";
		int    requestPort0080 = 443;
		String requestFile0080 = "/ui/homepage3/resources_BB804D2AF6BEF70984AF2453CBEBF82B/sap/sf/homepage3/commons/themes/sap_belize/library.css";
		String requestHeader0080 = "GET " + requestFile0080 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0080, requestHost0080, requestPort0080, requestHeader0080, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0080 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2684
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [80] <- Index 80
		if(replayMode)
		{
			long proxyDataRecordId =1614262384340L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [81] <- WEB ADMIN Index 81 ---
		String requestProt0081 = "https";
		String requestHost0081 = "performancemanager4.successfactors.com";
		int    requestPort0081 = 443;
		String requestFile0081 = "/messagebundle/Teck/vmod_614051fd-614fc7e3/common!/ui/sapui5/main/sap/ui/core/messagebundle_en_US.properties";
		String requestHeader0081 = "GET " + requestFile0081 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000184f9728f-7692-42e0-9828-b0422752e42829820909-1501-babe-face-000000000003fd2c321d-80a2-4098-9e2d-338020ec2a20HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-1\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0081, requestHost0081, requestPort0081, requestHeader0081, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0081 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 3355
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [81] <- Index 81
		if(replayMode)
		{
			long proxyDataRecordId =1614262384425L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [82] <- WEB ADMIN Index 82 ---
		String requestProt0082 = "https";
		String requestHost0082 = "performancemanager4.successfactors.com";
		int    requestPort0082 = 443;
		String requestFile0082 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TRS";
		String requestHeader0082 = "GET " + requestFile0082 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0082, requestHost0082, requestPort0082, requestHeader0082, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0082 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [82] <- Index 82
		if(replayMode)
		{
			long proxyDataRecordId =1614262384690L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [83] <- WEB ADMIN Index 83 ---
		String requestProt0083 = "https";
		String requestHost0083 = "performancemanager4.successfactors.com";
		int    requestPort0083 = 443;
		String requestFile0083 = "/messagebundle/Teck/vmod_cb499976-614fc7e3/sap.m!/ui/sapui5/main/sap/m/messagebundle_en_US.properties";
		String requestHeader0083 = "GET " + requestFile0083 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001f5eb02eb-e842-48fc-9226-4f9e20245d2329820909-1501-babe-face-000000000003982d4250-78e2-4250-892a-a4d02de70e23HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-1\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0083, requestHost0083, requestPort0083, requestHeader0083, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0083 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 7877
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [83] <- Index 83
		if(replayMode)
		{
			long proxyDataRecordId =1614262385028L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [84] <- WEB ADMIN Index 84 ---
		String requestProt0084 = "https";
		String requestHost0084 = "performancemanager4.successfactors.com";
		int    requestPort0084 = 443;
		String requestFile0084 = "/public/ui-dcss/Teck/_/3m!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		requestFile0084 = Lib.replaceTextPattern(requestFile0084, "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1, 0);		// search and replace request file fragment "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!" with variable 'C_BelizePlusLanding1' on all occurrences
		requestFile0084 = Lib.replaceTextPattern(requestFile0084, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0084 = "GET " + requestFile0084 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0084, requestHost0084, requestPort0084, requestHeader0084, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0084 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [84] <- Index 84
		if(replayMode)
		{
			long proxyDataRecordId =1614262385560L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 2 of 4)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [85] <- WEB ADMIN Index 85 ---
		String requestProt0085 = "https";
		String requestHost0085 = "performancemanager4.successfactors.com";
		int    requestPort0085 = 443;
		String requestFile0085 = "/perfLogServlet" +
				"?callId=7979330776-1" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&TRS=946" +
				"&ST=1614262384312" +
				"&ET=1614262385590" +
				"&MEM=0" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=0" +
				"&UCPU=0" +
				"&CPU=0" +
				"&FRE=0" +
				"&FWR=0" +
				"&CCON=0" +
				"&CSUP=0" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=23" +
				"&cssNum=8" +
				"&renderTime=1163" +
				"&RED=2" +
				"&TTB=16" +
				"&RSR=3957" +
				"&DIA=4537";
		String requestContent0085 = 
				"OPTR_INFO=1af62271-1562-46e7-aa24-c0d52825372b!1614262384313!1614262384321!0" +
				"&OPTR_INFO=84f9728f-7692-42e0-9828-b0422752e428!1614262384415!1614262384881!0" +
				"&OPTR_INFO=f5eb02eb-e842-48fc-9226-4f9e20245d23!1614262384992!1614262385476!0";
		String requestHeader0085 = "POST " + requestFile0085 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Req-Hash: EotCWHAIMol-V3p9KHalMop-QHc5R_tcL-A28E-CM0BaAC2Ql4W2hXAXMIhMYplbd1_XVGChPcxMYqt2RJimNVYFSWsNcIKnQWUPdKdRbkIIAYlCbHcw50Z_JFUMAVALQGs8vK\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-1\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0085.length() + "\r\n" + 		// Content-Length: 230
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0085, requestHost0085, requestPort0085, requestHeader0085, requestContent0085.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0085 = null;		// support garbage collector to reduce memory
		requestContent0085 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [85] <- Index 85
		if(replayMode)
		{
			long proxyDataRecordId =1614262385601L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [86] <- WEB ADMIN Index 86 ---
		String requestProt0086 = "https";
		String requestHost0086 = "performancemanager4.successfactors.com";
		int    requestPort0086 = 443;
		String requestFile0086 = "/ui/homepage3/resources_6FBE4A565787242BEE7A183800E4FE65/sap/sf/homepage3/core/Component-preload.js";
		String requestHeader0086 = "GET " + requestFile0086 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001c063025b-2d02-4e72-9d26-690022cec52d29820909-1501-babe-face-000000000003216192d8-6752-4ded-9222-4b082bd0f523HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0086, requestHost0086, requestPort0086, requestHeader0086, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0086 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 25536
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [86] <- Index 86
		if(replayMode)
		{
			long proxyDataRecordId =1614262385609L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [87] <- WEB ADMIN Index 87 ---
		String requestProt0087 = "https";
		String requestHost0087 = "performancemanager4.successfactors.com";
		int    requestPort0087 = 443;
		String requestFile0087 = "/ui/homepage3/resources_6FBE4A565787242BEE7A183800E4FE65/sap/sf/homepage3/core/css/homepage3.css";
		String requestHeader0087 = "GET " + requestFile0087 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0087, requestHost0087, requestPort0087, requestHeader0087, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0087 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 3592
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [87] <- Index 87
		if(replayMode)
		{
			long proxyDataRecordId =1614262385723L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [88] <- WEB ADMIN Index 88 ---
		String requestProt0088 = "https";
		String requestHost0088 = "performancemanager4.successfactors.com";
		int    requestPort0088 = 443;
		String requestFile0088 = "/messagebundle/Teck/vmod_a982bc7a-614fc7e3/ui/homepage3/resources/sap/sf/homepage3/app/i18n/messagebundle_en_US.properties";
		String requestHeader0088 = "GET " + requestFile0088 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500013e3a9219-dec2-43c1-9927-9a6325be2f2d29820909-1501-babe-face-00000000000357c69200-78e2-4609-b32a-33092b575428HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0088, requestHost0088, requestPort0088, requestHeader0088, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0088 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 3057
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [88] <- Index 88
		if(replayMode)
		{
			long proxyDataRecordId =1614262385734L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [89] <- WEB ADMIN Index 89 ---
		String requestProt0089 = "https";
		String requestHost0089 = "performancemanager4.successfactors.com";
		int    requestPort0089 = 443;
		String requestFile0089 = "/perfLogServlet" +
				"?callId=7979330776-X" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&TRS=946" +
				"&ST=1614262379429" +
				"&ET=1614262385917" +
				"&RED=2" +
				"&TTB=16" +
				"&RSR=3957" +
				"&DIA=4537" +
				"&DCP=6485";
		String requestHeader0089 = "GET " + requestFile0089 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Req-Hash: z-gzDjLYCDUmA-sJ8EFi3jsxB-bVAAXE0wLMzgDw6xLU-CDmK0oAGDQ__V-qACMa39IB5UII6EfL3yke-Uox8xX0DjA0zvfPywLDzA9907PitOPfxPyNj9rsuNOTndyAuPqXmq\r\n" + 
				"Content-Type: text/plain; charset=UTF-8\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-X\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0089, requestHost0089, requestPort0089, requestHeader0089, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0089 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [89] <- Index 89
		if(replayMode)
		{
			long proxyDataRecordId =1614262385965L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [90] <- WEB ADMIN Index 90 ---
		String requestProt0090 = "https";
		String requestHost0090 = "performancemanager4.successfactors.com";
		int    requestPort0090 = 443;
		String requestFile0090 = "/messagebundle/Teck/vmod_a982bc7a-614fc7e3/home!/ui/homepage3/resources/sap/ushell/renderers/fiori2/resources/resources_en_US.properties";
		String requestHeader0090 = "GET " + requestFile0090 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001aa51a25d-5482-4bff-b225-1c5a2b23022429820909-1501-babe-face-0000000000038b96b2ff-7be2-4756-b229-46da24e0992cHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0090, requestHost0090, requestPort0090, requestHeader0090, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0090 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 8414
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [90] <- Index 90
		if(replayMode)
		{
			long proxyDataRecordId =1614262386211L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [91] <- WEB ADMIN Index 91 ---
		String requestProt0091 = "https";
		String requestHost0091 = "performancemanager4.successfactors.com";
		int    requestPort0091 = 443;
		String requestFile0091 = "/ui/sapui5/main_1.78.6/sap/ui/core/themes/base/img/1x1.gif";
		String requestHeader0091 = "GET " + requestFile0091 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0091, requestHost0091, requestPort0091, requestHeader0091, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0091 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 807
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [91] <- Index 91
		if(replayMode)
		{
			long proxyDataRecordId =1614262386719L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [92] <- WEB ADMIN Index 92 ---
		String requestProt0092 = "https";
		String requestHost0092 = "performancemanager4.successfactors.com";
		int    requestPort0092 = 443;
		String requestFile0092 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TIP";
		String requestHeader0092 = "GET " + requestFile0092 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0092, requestHost0092, requestPort0092, requestHeader0092, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0092 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [92] <- Index 92
		if(replayMode)
		{
			long proxyDataRecordId =1614262386747L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [93] <- WEB ADMIN Index 93 ---
		String requestProt0093 = "https";
		String requestHost0093 = "performancemanager4.successfactors.com";
		int    requestPort0093 = 443;
		String requestFile0093 = "/xi/ui/commonshell/pages/smrf.xhtml" +
				"?js%5B%5D=%2Fui%2Fjuic%2Fjs%2Fcomponents%2FsfDom.js";
		String requestHeader0093 = "GET " + requestFile0093 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000184e8c20e-c4c2-494a-a52d-32b52e54392729820909-1501-babe-face-0000000000036d00929f-1892-45a9-8924-c13624834d2eHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0093, requestHost0093, requestPort0093, requestHeader0093, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0093 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3676
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "M['COMMON_DateFormatExample']=\"MM/DD/YYYY\";");		// Test [93] <- Index 93
		if(replayMode)
		{
			long proxyDataRecordId =1614262386748L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [94] <- WEB ADMIN Index 94 ---
		String requestProt0094 = "https";
		String requestHost0094 = "performancemanager4.successfactors.com";
		int    requestPort0094 = 443;
		String requestFile0094 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TML";
		String requestHeader0094 = "GET " + requestFile0094 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0094, requestHost0094, requestPort0094, requestHeader0094, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0094 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [94] <- Index 94
		if(replayMode)
		{
			long proxyDataRecordId =1614262386749L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [95] <- WEB ADMIN Index 95 ---
		String requestProt0095 = "https";
		String requestHost0095 = "performancemanager4.successfactors.com";
		int    requestPort0095 = 443;
		String requestFile0095 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/util/PanelManager.js";
		String requestHeader0095 = "GET " + requestFile0095 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500011777f233-e882-4642-b627-3bce2bdf032b29820909-1501-babe-face-000000000003881722c7-6282-4995-a32f-efe822fbf729HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0095, requestHost0095, requestPort0095, requestHeader0095, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0095 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1504
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [95] <- Index 95
		if(replayMode)
		{
			long proxyDataRecordId =1614262386798L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [96] <- WEB ADMIN Index 96 ---
		String requestProt0096 = "https";
		String requestHost0096 = "performancemanager4.successfactors.com";
		int    requestPort0096 = 443;
		String requestFile0096 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/util/Util.js";
		String requestHeader0096 = "GET " + requestFile0096 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001dd2ee2da-7562-4ff1-9b2b-a8fb2f70412629820909-1501-babe-face-000000000003515ee2bc-8be2-4428-a921-a3ad2371ca26HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0096, requestHost0096, requestPort0096, requestHeader0096, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0096 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 820
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [96] <- Index 96
		if(replayMode)
		{
			long proxyDataRecordId =1614262386905L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [97] <- WEB ADMIN Index 97 ---
		String requestProt0097 = "https";
		String requestHost0097 = "performancemanager4.successfactors.com";
		int    requestPort0097 = 443;
		String requestFile0097 = "/messagebundle/Teck/vmod_cb6bfb81-614fc7e3/ui/todo/resources/sap/sf/todo/i18n/messagebundle_en_US.properties";
		String requestHeader0097 = "GET " + requestFile0097 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001abf23272-f392-48ac-b922-f6bb20da502c29820909-1501-babe-face-000000000003f778d282-8762-4e8d-a323-eaf4282ad62bHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0097, requestHost0097, requestPort0097, requestHeader0097, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0097 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 1542
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [97] <- Index 97
		if(replayMode)
		{
			long proxyDataRecordId =1614262386997L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [98] <- WEB ADMIN Index 98 ---
		String requestProt0098 = "https";
		String requestHost0098 = "performancemanager4.successfactors.com";
		int    requestPort0098 = 443;
		String requestFile0098 = "/ui/sapui5/main_1.78.6/sap/ui/core/themes/base/fonts/SAP-icons.woff2";
		String requestHeader0098 = "GET " + requestFile0098 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0098, requestHost0098, requestPort0098, requestHeader0098, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0098 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 97220
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [98] <- Index 98
		if(replayMode)
		{
			long proxyDataRecordId =1614262387474L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [99] <- WEB ADMIN Index 99 ---
		String requestProt0099 = "https";
		String requestHost0099 = "performancemanager4.successfactors.com";
		int    requestPort0099 = 443;
		String requestFile0099 = "/messagebundle/Teck/vmod_ee00a45d-614fc7e3/ui/surj/resources/sap/sf/surj/shell/i18n/messagebundle_en_US.properties";
		String requestHeader0099 = "GET " + requestFile0099 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001b43f92c8-2692-47e8-ba26-3ed62ce7732729820909-1501-babe-face-000000000003ad72523f-c132-4459-ad2b-61012cbc1c22HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0099, requestHost0099, requestPort0099, requestHeader0099, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0099 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 4364
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [99] <- Index 99
		if(replayMode)
		{
			long proxyDataRecordId =1614262387495L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [100] <- WEB ADMIN Index 100 ---
		String requestProt0100 = "https";
		String requestHost0100 = "performancemanager4.successfactors.com";
		int    requestPort0100 = 443;
		String requestFile0100 = "/ui/notification/resources_F39F1DA045124E8F12EAD8F06CA84C63/sap/sf/notification/util/Util.js";
		String requestHeader0100 = "GET " + requestFile0100 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0100, requestHost0100, requestPort0100, requestHeader0100, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0100 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 824
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [100] <- Index 100
		if(replayMode)
		{
			long proxyDataRecordId =1614262387973L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [101] <- WEB ADMIN Index 101 ---
		String requestProt0101 = "https";
		String requestHost0101 = "performancemanager4.successfactors.com";
		int    requestPort0101 = 443;
		String requestFile0101 = "/xi/ajax/remoting/call/plaincall/showMeControllerProxy.signAPIUrl.dwr" +
				"?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d";
		requestFile0101 = Lib.replaceTextPattern(requestFile0101, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d" with variable 'vScrb' on all occurrences

		String requestContent0101 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/start?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423388" + "\r\n" + 
				"c0-scriptName=showMeControllerProxy" + "\r\n" + 
				"c0-methodName=signAPIUrl" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:%2Fmedia%2Fshowme_ab3a783e_706e_40dd_a87a_a8283cabf42b%2FHOME_TAB%2Fstatus" + "\r\n" + 
				"c0-param1=string:HOME_TAB" + "\r\n" + 
				"c0-param2=string:727a1820ae53fe16b4a90eb72d5a4387" + "\r\n" + 
				"batchId=0";
		requestContent0101 = Lib.replaceTextPattern(requestContent0101, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences
		requestContent0101 = Lib.replaceTextPattern(requestContent0101, "727a1820ae53fe16b4a90eb72d5a4387", C_UploadHash, 0);		// search and replace content fragment "727a1820ae53fe16b4a90eb72d5a4387" with variable 'C_UploadHash' on all occurrences
		requestContent0101 = Lib.replaceTextPattern(requestContent0101, "ab3a783e_706e_40dd_a87a_a8283cabf42b", C_CompanyGUID, 0);		// search and replace content fragment "ab3a783e_706e_40dd_a87a_a8283cabf42b" with variable 'C_CompanyGUID' on all occurrences

		String requestHeader0101 = "POST " + requestFile0101 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewid: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500019037c27c-1f92-4ef7-b22c-956823f5f42229820909-1501-babe-face-000000000003f885a253-dd02-478a-8a2c-17ea26b8ec2bHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0101.length() + "\r\n" + 		// Content-Length: 400
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0101, requestHost0101, requestPort0101, requestHeader0101, requestContent0101.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0101 = null;		// support garbage collector to reduce memory
		requestContent0101 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 406
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "dwr.engine._remoteHandleCallback('");		// Test [101] <- Index 101
		if(replayMode)
		{
			long proxyDataRecordId =1614262387976L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Token1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0101_1 = new BoundaryBasedExtractorItem( "status?token=" , "\");",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0101_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Token1'
			C_Token1 = boundaryBasedContentExtractorItem0101_1.getResultText();
			log("<<< C_Token1 = " + C_Token1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Token1!= null && C_Token1.trim().length() == 0)
			{
				C_Token1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Token1' ends up with an empty string - a substitute value was set");
				log("<<< C_Token1 = " + C_Token1);
			}
		}
		catch (Exception e) { C_Token1 = null; log(e); }
		if (C_Token1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Token1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [102] <- WEB ADMIN Index 102 ---
		String requestProt0102 = "https";
		String requestHost0102 = "performancemanager4.successfactors.com";
		int    requestPort0102 = 443;
		String requestFile0102 = "/ui/extlib/elastic_5.5.0/elastic-apm-rum.umd.min.js";
		String requestHeader0102 = "GET " + requestFile0102 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0102, requestHost0102, requestPort0102, requestHeader0102, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0102 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 18653
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [102] <- Index 102
		if(replayMode)
		{
			long proxyDataRecordId =1614262387992L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [103] <- WEB ADMIN Index 103 ---
		String requestProt0103 = "https";
		String requestHost0103 = "performancemanager4.successfactors.com";
		int    requestPort0103 = 443;
		String requestFile0103 = "/odata/v2/restricted/_Homepage3_/getHp3TileInitializer" +
				"?%24format=json" +
				"&_=1614262383705";
		String requestHeader0103 = "GET " + requestFile0103 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500015ec6f2b0-2942-478a-b22b-c8f826ab2e2729820909-1501-babe-face-00000000000378788225-e0c2-4846-be24-45782f90d623HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0103, requestHost0103, requestPort0103, requestHeader0103, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0103 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2458
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "}, \"tileCatalogAvailable\" : true");		// Test [103] <- Index 103
		if(replayMode)
		{
			long proxyDataRecordId =1614262388001L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [104] <- WEB ADMIN Index 104 ---
		String requestProt0104 = "https";
		String requestHost0104 = "performancemanager4.successfactors.com";
		int    requestPort0104 = 443;
		String requestFile0104 = "/companyLogoServlet/" +
				"?companyId=Teck" +
				"&mod=" + C_MoD2;		// recorded value = 1611970757165
		requestFile0104 = Lib.replaceTextPattern(requestFile0104, "1611970757165", C_MoD2, 0);		// search and replace request file fragment "1611970757165" with variable 'C_MoD2' on all occurrences

		String requestHeader0104 = "GET " + requestFile0104 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0104, requestHost0104, requestPort0104, requestHeader0104, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0104 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 1823
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [104] <- Index 104
		if(replayMode)
		{
			long proxyDataRecordId =1614262388015L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 3 of 4)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [105] <- WEB ADMIN Index 105 ---
		String requestProt0105 = "https";
		String requestHost0105 = "performancemanager4.successfactors.com";
		int    requestPort0105 = 443;
		String requestFile0105 = "/eduPhoto/view" +
				"?companyId=Teck" +
				"&photo_action=show" +
				"&photo_type=liveProfile" +
				"&user_id=TestAutomation" +
				"&mod=";
		String requestHeader0105 = "GET " + requestFile0105 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0105, requestHost0105, requestPort0105, requestHeader0105, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0105 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [105] <- Index 105
		if(replayMode)
		{
			long proxyDataRecordId =1614262388028L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [106] <- WEB ADMIN Index 106 ---
		String requestProt0106 = "https";
		String requestHost0106 = "performancemanager4.successfactors.com";
		int    requestPort0106 = 443;
		String requestFile0106 = "/ui/smrf/js/smrf_78d348cd3b31f54393eaff400a956dc0.js";
		String requestHeader0106 = "GET " + requestFile0106 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0106, requestHost0106, requestPort0106, requestHeader0106, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0106 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2083
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [106] <- Index 106
		if(replayMode)
		{
			long proxyDataRecordId =1614262388065L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [107] <- WEB ADMIN Index 107 ---
		String requestProt0107 = "https";
		String requestHost0107 = "performancemanager4.successfactors.com";
		int    requestPort0107 = 443;
		String requestFile0107 = "/ui/notification/resources_F39F1DA045124E8F12EAD8F06CA84C63/sap/sf/notification/main/service/DataService.js";
		String requestHeader0107 = "GET " + requestFile0107 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0107, requestHost0107, requestPort0107, requestHeader0107, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0107 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 748
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [107] <- Index 107
		if(replayMode)
		{
			long proxyDataRecordId =1614262388083L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [108] <- WEB ADMIN Index 108 ---
		String requestProt0108 = "https";
		String requestHost0108 = "performancemanager4.successfactors.com";
		int    requestPort0108 = 443;
		String requestFile0108 = "/ui/sfgrp/css/juicGlobal_1b129fc229faec7b392342e315cebbce.css";
		String requestHeader0108 = "GET " + requestFile0108 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0108, requestHost0108, requestPort0108, requestHeader0108, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0108 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 12393
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [108] <- Index 108
		if(replayMode)
		{
			long proxyDataRecordId =1614262388164L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [109] <- WEB ADMIN Index 109 ---
		String requestProt0109 = "https";
		String requestHost0109 = "performancemanager4.successfactors.com";
		int    requestPort0109 = 443;
		String requestFile0109 = "/odata/v4/NotificationService.svc/GetNumberOfNewNotifications(userId='TestAutomation')";
		String requestHeader0109 = "GET " + requestFile0109 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/json\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500011164c2cc-91b2-47b8-bf2e-b71e2b9b112729820909-1501-babe-face-000000000003da062271-aa22-492e-a624-ceee2c530b27HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0109, requestHost0109, requestPort0109, requestHeader0109, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0109 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 195
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"@odata.context\":\"https://performancemanager4.successfactors.com/odata/v4/NotificationService.sv");		// Test [109] <- Index 109
		if(replayMode)
		{
			long proxyDataRecordId =1614262388183L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [110] <- WEB ADMIN Index 110 ---
		String requestProt0110 = "https";
		String requestHost0110 = "performancemanager4.successfactors.com";
		int    requestPort0110 = 443;
		String requestFile0110 = "/ui/commonshell/js/createpageHeaderJsonData_94872b218be5f6ae190760dfd2b768ba.js";
		String requestHeader0110 = "GET " + requestFile0110 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0110, requestHost0110, requestPort0110, requestHeader0110, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0110 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 108
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [110] <- Index 110
		if(replayMode)
		{
			long proxyDataRecordId =1614262388284L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [111] <- WEB ADMIN Index 111 ---
		String requestProt0111 = "https";
		String requestHost0111 = "performancemanager4.successfactors.com";
		int    requestPort0111 = 443;
		String requestFile0111 = "/ui/juic/js/Util_ada164a354d018de59a64749919a0f42.js";
		String requestHeader0111 = "GET " + requestFile0111 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0111, requestHost0111, requestPort0111, requestHeader0111, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0111 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6351
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [111] <- Index 111
		if(replayMode)
		{
			long proxyDataRecordId =1614262388443L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [112] <- WEB ADMIN Index 112 ---
		String requestProt0112 = "https";
		String requestHost0112 = "performancemanager4.successfactors.com";
		int    requestPort0112 = 443;
		String requestFile0112 = "/ui/juic/js/core/component_ca4231790bc781dc49a1857b2a4e24d5.js";
		String requestHeader0112 = "GET " + requestFile0112 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0112, requestHost0112, requestPort0112, requestHeader0112, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0112 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3105
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [112] <- Index 112
		if(replayMode)
		{
			long proxyDataRecordId =1614262388571L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [113] <- WEB ADMIN Index 113 ---
		String requestProt0113 = "https";
		String requestHost0113 = "performancemanager4.successfactors.com";
		int    requestPort0113 = 443;
		String requestFile0113 = "/ui/sfgrp/js/juicUtils_4c0c3f18c54d5225edf728d86f4efcd5.js";
		String requestHeader0113 = "GET " + requestFile0113 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0113, requestHost0113, requestPort0113, requestHeader0113, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0113 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 27185
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [113] <- Index 113
		if(replayMode)
		{
			long proxyDataRecordId =1614262388721L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [114] <- WEB ADMIN Index 114 ---
		String requestProt0114 = "https";
		String requestHost0114 = "performancemanager4.successfactors.com";
		int    requestPort0114 = 443;
		String requestFile0114 = "/ui/uicore/img/photoNotAvailable_a0c897b28771df5c8ecfb20dfe63199d.gif";
		String requestHeader0114 = "GET " + requestFile0114 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0114, requestHost0114, requestPort0114, requestHeader0114, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0114 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 2510
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [114] <- Index 114
		if(replayMode)
		{
			long proxyDataRecordId =1614262388855L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [115] <- WEB ADMIN Index 115 ---
		String requestProt0115 = "https";
		String requestHost0115 = "performancemanager4.successfactors.com";
		int    requestPort0115 = 443;
		String requestFile0115 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/model/ApvReqModel.js";
		String requestHeader0115 = "GET " + requestFile0115 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0115, requestHost0115, requestPort0115, requestHeader0115, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0115 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [115] <- Index 115
		if(replayMode)
		{
			long proxyDataRecordId =1614262388922L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [116] <- WEB ADMIN Index 116 ---
		String requestProt0116 = "https";
		String requestHost0116 = "performancemanager4.successfactors.com";
		int    requestPort0116 = 443;
		String requestFile0116 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/model/PayrollHireModel.js";
		String requestHeader0116 = "GET " + requestFile0116 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0116, requestHost0116, requestPort0116, requestHeader0116, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0116 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 343
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [116] <- Index 116
		if(replayMode)
		{
			long proxyDataRecordId =1614262388923L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [117] <- WEB ADMIN Index 117 ---
		String requestProt0117 = "https";
		String requestHost0117 = "performancemanager4.successfactors.com";
		int    requestPort0117 = 443;
		String requestFile0117 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/model/LearningModel.js";
		String requestHeader0117 = "GET " + requestFile0117 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0117, requestHost0117, requestPort0117, requestHeader0117, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0117 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 328
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [117] <- Index 117
		if(replayMode)
		{
			long proxyDataRecordId =1614262388925L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [118] <- WEB ADMIN Index 118 ---
		String requestProt0118 = "https";
		String requestHost0118 = "performancemanager4.successfactors.com";
		int    requestPort0118 = 443;
		String requestFile0118 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/model/OnboardingModel.js";
		String requestHeader0118 = "GET " + requestFile0118 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0118, requestHost0118, requestPort0118, requestHeader0118, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0118 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 465
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [118] <- Index 118
		if(replayMode)
		{
			long proxyDataRecordId =1614262388926L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [119] <- WEB ADMIN Index 119 ---
		String requestProt0119 = "https";
		String requestHost0119 = "performancemanager4.successfactors.com";
		int    requestPort0119 = 443;
		String requestFile0119 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/model/ThirdPartyModel.js";
		String requestHeader0119 = "GET " + requestFile0119 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0119, requestHost0119, requestPort0119, requestHeader0119, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0119 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 453
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [119] <- Index 119
		if(replayMode)
		{
			long proxyDataRecordId =1614262388940L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [120] <- WEB ADMIN Index 120 ---
		String requestProt0120 = "https";
		String requestHost0120 = "azprod.ms.successfactors.com";
		int    requestPort0120 = 443;
		String requestFile0120 = "/mediaservice/api/v2/media/showme_ab3a783e_706e_40dd_a87a_a8283cabf42b/HOME_TAB/status" +
				"?token=" + C_Token1 +		// recorded value = 7dfd3ae4fac40606e7b2ce8d06bef91781884ecc6a3592f012bca1354a9d920b5a9723625cfd571afbf35a5a2036bc88bd696ff656a94f7fb2f2e6f513a2fb7b,-7330458847309444014,1614264188,1
				"&callback=sfDeferredUtilCallback2";
		requestFile0120 = Lib.replaceTextPattern(requestFile0120, "7dfd3ae4fac40606e7b2ce8d06bef91781884ecc6a3592f012bca1354a9d920b5a9723625cfd571afbf35a5a2036bc88bd696ff656a94f7fb2f2e6f513a2fb7b,-7330458847309444014,1614264188,1", C_Token1, 0);		// search and replace request file fragment "7dfd3ae4fac40606e7b2ce8d06bef91781884ecc6a3592f012bca1354a9d920b5a9723625cfd571afbf35a5a2036bc88bd696ff656a94f7fb2f2e6f513a2fb7b,-7330458847309444014,1614264188,1" with variable 'C_Token1' on all occurrences
		requestFile0120 = Lib.replaceTextPattern(requestFile0120, "ab3a783e_706e_40dd_a87a_a8283cabf42b", C_CompanyGUID, 0);		// search and replace request file fragment "ab3a783e_706e_40dd_a87a_a8283cabf42b" with variable 'C_CompanyGUID' on all occurrences

		String requestHeader0120 = "GET " + requestFile0120 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: azprod.ms.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0120, requestHost0120, requestPort0120, requestHeader0120, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0120 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 128
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [120] <- Index 120
		if(replayMode)
		{
			long proxyDataRecordId =1614262388995L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [121] <- WEB ADMIN Index 121 ---
		String requestProt0121 = "https";
		String requestHost0121 = "performancemanager4.successfactors.com";
		int    requestPort0121 = 443;
		String requestFile0121 = "/ui/sapui5/main_1.78.6/sap/ui/core/cldr/en.json";
		String requestHeader0121 = "GET " + requestFile0121 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001b87602d8-ed02-42c1-a627-768a2051112229820909-1501-babe-face-0000000000036abf028c-3f92-420d-9d2f-849524eb142aHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0121, requestHost0121, requestPort0121, requestHeader0121, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0121 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 17963
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [121] <- Index 121
		if(replayMode)
		{
			long proxyDataRecordId =1614262389016L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [122] <- WEB ADMIN Index 122 ---
		String requestProt0122 = "https";
		String requestHost0122 = "performancemanager4.successfactors.com";
		int    requestPort0122 = 443;
		String requestFile0122 = "/xi/ajax/remoting/call/plaincall/myInfoControllerProxy.getInitializer.dwr" +
				"?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d";
		requestFile0122 = Lib.replaceTextPattern(requestFile0122, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d" with variable 'vScrb' on all occurrences

		String requestContent0122 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/start?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423388" + "\r\n" + 
				"c0-scriptName=myInfoControllerProxy" + "\r\n" + 
				"c0-methodName=getInitializer" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:02%2F25%2F2021" + "\r\n" + 
				"batchId=1";
		requestContent0122 = Lib.replaceTextPattern(requestContent0122, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0122 = "POST " + requestFile0122 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewid: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000140b6626b-1ab2-4bd1-8122-878a22c13e2529820909-1501-babe-face-000000000003955312d5-b722-4881-b621-91552754562fHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0122.length() + "\r\n" + 		// Content-Length: 268
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0122, requestHost0122, requestPort0122, requestHeader0122, requestContent0122.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0122 = null;		// support garbage collector to reduce memory
		requestContent0122 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 758
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "s0.firstName=\"Test\";s0.fullName=\"Test Automation\"");		// Test [122] <- Index 122
		if(replayMode)
		{
			long proxyDataRecordId =1614262389139L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [123] <- WEB ADMIN Index 123 ---
		String requestProt0123 = "https";
		String requestHost0123 = "performancemanager4.successfactors.com";
		int    requestPort0123 = 443;
		String requestFile0123 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/popup/service/DueDateHelper.js";
		String requestHeader0123 = "GET " + requestFile0123 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0123, requestHost0123, requestPort0123, requestHeader0123, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0123 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 787
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [123] <- Index 123
		if(replayMode)
		{
			long proxyDataRecordId =1614262389147L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [124] <- WEB ADMIN Index 124 ---
		String requestProt0124 = "https";
		String requestHost0124 = "performancemanager4.successfactors.com";
		int    requestPort0124 = 443;
		String requestFile0124 = "/xi/ajax/remoting/call/plaincall/hp3TourControllerProxy.getTourPreference.dwr" +
				"?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d";
		requestFile0124 = Lib.replaceTextPattern(requestFile0124, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d" with variable 'vScrb' on all occurrences

		String requestContent0124 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/start?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423388" + "\r\n" + 
				"c0-scriptName=hp3TourControllerProxy" + "\r\n" + 
				"c0-methodName=getTourPreference" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=2";
		requestContent0124 = Lib.replaceTextPattern(requestContent0124, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0124 = "POST " + requestFile0124 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewid: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001e49fa207-f922-4be2-a229-dc0121517a2e29820909-1501-babe-face-000000000003b6a8c2f0-9212-45bf-8029-eb1a2dbc7e2aHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0124.length() + "\r\n" + 		// Content-Length: 240
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0124, requestHost0124, requestPort0124, requestHeader0124, requestContent0124.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0124 = null;		// support garbage collector to reduce memory
		requestContent0124 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 170
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "dwr.engine._remoteHandleCallback(");		// Test [124] <- Index 124
		if(replayMode)
		{
			long proxyDataRecordId =1614262389150L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 4 of 4)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [125] <- WEB ADMIN Index 125 ---
		String requestProt0125 = "https";
		String requestHost0125 = "performancemanager4.successfactors.com";
		int    requestPort0125 = 443;
		String requestFile0125 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/charting/ArcChart.js";
		String requestHeader0125 = "GET " + requestFile0125 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500016dbeb2d4-dac2-4a0c-8620-0066289e692129820909-1501-babe-face-000000000003824dc2cb-0cf2-479e-be28-434b2e361c21HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0125, requestHost0125, requestPort0125, requestHeader0125, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0125 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1192
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [125] <- Index 125
		if(replayMode)
		{
			long proxyDataRecordId =1614262389278L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [126] <- WEB ADMIN Index 126 ---
		String requestProt0126 = "https";
		String requestHost0126 = "performancemanager4.successfactors.com";
		int    requestPort0126 = 443;
		String requestFile0126 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/library.js";
		String requestHeader0126 = "GET " + requestFile0126 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001bed0d2ed-1c72-465a-b927-7ac02deaf42729820909-1501-babe-face-00000000000305b7024c-ec22-4a88-842e-26542426c72cHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0126, requestHost0126, requestPort0126, requestHeader0126, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0126 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 219
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [126] <- Index 126
		if(replayMode)
		{
			long proxyDataRecordId =1614262389387L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [127] <- WEB ADMIN Index 127 ---
		String requestProt0127 = "https";
		String requestHost0127 = "performancemanager4.successfactors.com";
		int    requestPort0127 = 443;
		String requestFile0127 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/themes/sap_belize/library.css";
		String requestHeader0127 = "GET " + requestFile0127 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0127, requestHost0127, requestPort0127, requestHeader0127, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0127 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1244
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [127] <- Index 127
		if(replayMode)
		{
			long proxyDataRecordId =1614262389481L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [128] <- WEB ADMIN Index 128 ---
		String requestProt0128 = "https";
		String requestHost0128 = "performancemanager4.successfactors.com";
		int    requestPort0128 = 443;
		String requestFile0128 = "/ui/sapui5/main_1.78.6/sap/ui/thirdparty/d3.js";
		String requestHeader0128 = "GET " + requestFile0128 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001951572fc-f6b2-4acd-9f2d-1eb02fc7b62229820909-1501-babe-face-00000000000355dde272-cb92-4631-af2c-83582a18232eHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0128, requestHost0128, requestPort0128, requestHeader0128, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0128 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 54186
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [128] <- Index 128
		if(replayMode)
		{
			long proxyDataRecordId =1614262389482L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [129] <- WEB ADMIN Index 129 ---
		String requestProt0129 = "https";
		String requestHost0129 = "performancemanager4.successfactors.com";
		int    requestPort0129 = 443;
		String requestFile0129 = "/odata/v2/restricted/AdminAlertType,AttachmentInternal,COAHStatusBean,COAdminLinkItemBean,COAdminTileLinkBean,COAdminTileLinkListBean,SLActivityBean,SLEmpActivitiesBean,SLEmpActivitiesBeanList,Tour,changeFavoriteLink,getAdminTileLinks,getInternalJobPostingCount,getPreApprovedJobReqCount,getSLActivityList/Tour" +
				"?%24format=json" +
				"&_=1614262383706";
		String requestHeader0129 = "GET " + requestFile0129 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001098212aa-2442-4003-9325-703a2ff9022229820909-1501-babe-face-00000000000361ad1244-3522-42de-8627-1d0725fd532dHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0129, requestHost0129, requestPort0129, requestHeader0129, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0129 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 47
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"d\" : {");		// Test [129] <- Index 129
		if(replayMode)
		{
			long proxyDataRecordId =1614262389646L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [130] <- WEB ADMIN Index 130 ---
		String requestProt0130 = "https";
		String requestHost0130 = "performancemanager4.successfactors.com";
		int    requestPort0130 = 443;
		String requestFile0130 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/charting/ArcChartRenderer.js";
		String requestHeader0130 = "GET " + requestFile0130 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001cb2282ef-7c42-4474-982d-d5fa2353a52129820909-1501-babe-face-0000000000031dac62f3-7922-4b36-9628-a0a22361892cHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0130, requestHost0130, requestPort0130, requestHeader0130, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0130 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 213
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [130] <- Index 130
		if(replayMode)
		{
			long proxyDataRecordId =1614262389725L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [131] <- WEB ADMIN Index 131 ---
		String requestProt0131 = "https";
		String requestHost0131 = "performancemanager4.successfactors.com";
		int    requestPort0131 = 443;
		String requestFile0131 = "/public/ui-dcss/Teck/_/3m!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Bold.woff2";
		requestFile0131 = Lib.replaceTextPattern(requestFile0131, "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1, 0);		// search and replace request file fragment "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!" with variable 'C_BelizePlusLanding1' on all occurrences
		requestFile0131 = Lib.replaceTextPattern(requestFile0131, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0131 = "GET " + requestFile0131 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0131, requestHost0131, requestPort0131, requestHeader0131, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0131 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 26732
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [131] <- Index 131
		if(replayMode)
		{
			long proxyDataRecordId =1614262389928L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [132] <- WEB ADMIN Index 132 ---
		String requestProt0132 = "https";
		String requestHost0132 = "performancemanager4.successfactors.com";
		int    requestPort0132 = 443;
		String requestFile0132 = "/eduPhoto/view" +
				"?companyId=Teck" +
				"&photo_action=show" +
				"&photo_type=userExpressivePhoto" +
				"&user_id=TestAutomation" +
				"&mod=250261566931509000";
		String requestHeader0132 = "GET " + requestFile0132 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0132, requestHost0132, requestPort0132, requestHeader0132, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0132 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/JPEG", header text fragment = [verification disabled], recorded content size = 206652
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/JPEG", null, null);		// Test [132] <- Index 132
		if(replayMode)
		{
			long proxyDataRecordId =1614262389980L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [133] <- WEB ADMIN Index 133 ---
		String requestProt0133 = "https";
		String requestHost0133 = "performancemanager4.successfactors.com";
		int    requestPort0133 = 443;
		String requestFile0133 = "/xi/ajax/remoting/call/plaincall/myInfoControllerProxy.getCompletePercent.dwr" +
				"?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d";
		requestFile0133 = Lib.replaceTextPattern(requestFile0133, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d" with variable 'vScrb' on all occurrences

		String requestContent0133 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/start?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423388" + "\r\n" + 
				"c0-scriptName=myInfoControllerProxy" + "\r\n" + 
				"c0-methodName=getCompletePercent" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:TestAutomation" + "\r\n" + 
				"batchId=3";
		requestContent0133 = Lib.replaceTextPattern(requestContent0133, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0133 = "POST " + requestFile0133 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewid: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500018cd71230-30d2-4d8d-9324-747c2ffb2c2429820909-1501-babe-face-000000000003b6ad623d-9562-49ac-b72a-7a332e969e25HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0133.length() + "\r\n" + 		// Content-Length: 272
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0133, requestHost0133, requestPort0133, requestHeader0133, requestContent0133.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0133 = null;		// support garbage collector to reduce memory
		requestContent0133 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 124
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "percent:0});");		// Test [133] <- Index 133
		if(replayMode)
		{
			long proxyDataRecordId =1614262389998L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [134] <- WEB ADMIN Index 134 ---
		String requestProt0134 = "https";
		String requestHost0134 = "performancemanager4.successfactors.com";
		int    requestPort0134 = 443;
		String requestFile0134 = "/odata/v2/restricted/TodoEntryV2,WfRequest/TodoEntryV2/$count" +
				"?%24filter=categoryId%20in%20%2714%27%2C%2717%27%2C%2718%27%2C%2721%27%2C%2724%27%2C%2725%27%2C%2729%27%2C%2739%27%2C%2746%27%20and%20status%20eq%202%20and%20wfRequestNav%2FwfRequestId%20ne%20null";
		String requestHeader0134 = "GET " + requestFile0134 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-CSRF-Token: TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500012235d25c-d512-4673-8623-e62822e9402829820909-1501-babe-face-0000000000032bd14202-6652-409b-ad20-67db2872cc23HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0134, requestHost0134, requestPort0134, requestHeader0134, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0134 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 21
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [134] <- Index 134
		if(replayMode)
		{
			long proxyDataRecordId =1614262390011L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [135] <- WEB ADMIN Index 135 ---
		String requestProt0135 = "https";
		String requestHost0135 = "performancemanager4.successfactors.com";
		int    requestPort0135 = 443;
		String requestFile0135 = "/xi/ajax/remoting/call/plaincall/hp3TodoPanelControllerProxy.getLearningTodoDetails.dwr" +
				"?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d";
		requestFile0135 = Lib.replaceTextPattern(requestFile0135, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d" with variable 'vScrb' on all occurrences

		String requestContent0135 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/start?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423388" + "\r\n" + 
				"c0-scriptName=hp3TodoPanelControllerProxy" + "\r\n" + 
				"c0-methodName=getLearningTodoDetails" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=4";
		requestContent0135 = Lib.replaceTextPattern(requestContent0135, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0135 = "POST " + requestFile0135 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewid: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001d6a5a2ad-1072-42fc-8423-e91c2481552829820909-1501-babe-face-000000000003626ec266-f772-402b-9828-c962264b8724HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0135.length() + "\r\n" + 		// Content-Length: 250
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0135, requestHost0135, requestPort0135, requestHeader0135, requestContent0135.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0135 = null;		// support garbage collector to reduce memory
		requestContent0135 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 163
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "lmsTraining:null,lmsSurvey:null,lmsApproval:null");		// Test [135] <- Index 135
		if(replayMode)
		{
			long proxyDataRecordId =1614262390031L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [136] <- WEB ADMIN Index 136 ---
		String requestProt0136 = "https";
		String requestHost0136 = "performancemanager4.successfactors.com";
		int    requestPort0136 = 443;
		String requestFile0136 = "/xi/ajax/remoting/call/plaincall/OnboardingHP3TileControllerProxy.getOnboardingTasksTile.dwr" +
				"?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d";
		requestFile0136 = Lib.replaceTextPattern(requestFile0136, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d" with variable 'vScrb' on all occurrences

		String requestContent0136 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/start?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423388" + "\r\n" + 
				"c0-scriptName=OnboardingHP3TileControllerProxy" + "\r\n" + 
				"c0-methodName=getOnboardingTasksTile" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=5";
		requestContent0136 = Lib.replaceTextPattern(requestContent0136, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0136 = "POST " + requestFile0136 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"viewid: /ui/homepage3/pages/index.xhtml\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001b2b902e7-0e22-4cc1-a224-fa712d13c42b29820909-1501-babe-face-00000000000377db5229-fea2-4ed1-9926-f4ad2c080f23HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0136.length() + "\r\n" + 		// Content-Length: 255
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0136, requestHost0136, requestPort0136, requestHeader0136, requestContent0136.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0136 = null;		// support garbage collector to reduce memory
		requestContent0136 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 117
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [136] <- Index 136
		if(replayMode)
		{
			long proxyDataRecordId =1614262390119L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [137] <- WEB ADMIN Index 137 ---
		String requestProt0137 = "https";
		String requestHost0137 = "performancemanager4.successfactors.com";
		int    requestPort0137 = 443;
		String requestFile0137 = "/odata/v2/restricted/TodoEntryV2/TodoEntryV2" +
				"?%24filter=categoryId%20eq%2057%20and%20status%20eq%202" +
				"&%24orderby=dueDate" +
				"&%24select=dueDate";
		String requestHeader0137 = "GET " + requestFile0137 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-CSRF-Token: TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000189bce22a-33e2-4056-ad27-a08123b55c2f29820909-1501-babe-face-000000000003623182e4-76f2-4ecc-8120-280d22097a2bHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0137, requestHost0137, requestPort0137, requestHeader0137, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0137 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 47
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"d\" : {");		// Test [137] <- Index 137
		if(replayMode)
		{
			long proxyDataRecordId =1614262390165L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [138] <- WEB ADMIN Index 138 ---
		String requestProt0138 = "https";
		String requestHost0138 = "performancemanager4.successfactors.com";
		int    requestPort0138 = 443;
		String requestFile0138 = "/odata/v2/restricted/AdminAlertType,AttachmentInternal,COAHStatusBean,COAdminLinkItemBean,COAdminTileLinkBean,COAdminTileLinkListBean,SLActivityBean,SLEmpActivitiesBean,SLEmpActivitiesBeanList,Tour,changeFavoriteLink,getAdminTileLinks,getInternalJobPostingCount,getPreApprovedJobReqCount,getSLActivityList/getInternalJobPostingCount" +
				"?%24format=json" +
				"&_=1614262383707";
		String requestHeader0138 = "GET " + requestFile0138 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000183d79232-6a82-4f8a-8f2f-7c7a2eae282d29820909-1501-babe-face-000000000003a6085224-7662-4e78-9f2d-cd702e1d6a23HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0138, requestHost0138, requestPort0138, requestHeader0138, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0138 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 65
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"getInternalJobPostingCount\" :");		// Test [138] <- Index 138
		if(replayMode)
		{
			long proxyDataRecordId =1614262390377L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [139] <- WEB ADMIN Index 139 ---
		String requestProt0139 = "https";
		String requestHost0139 = "performancemanager4.successfactors.com";
		int    requestPort0139 = 443;
		String requestFile0139 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TSL";
		String requestHeader0139 = "GET " + requestFile0139 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0139, requestHost0139, requestPort0139, requestHeader0139, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0139 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [139] <- Index 139
		if(replayMode)
		{
			long proxyDataRecordId =1614262390853L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [140] <- WEB ADMIN Index 140 ---
		String requestProt0140 = "https";
		String requestHost0140 = "performancemanager4.successfactors.com";
		int    requestPort0140 = 443;
		String requestFile0140 = "/perfLogServlet" +
				"?callId=7979330776-2" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&TRS=946" +
				"&TIP=3345" +
				"&TML=3345" +
				"&TSL=7453" +
				"&ST=1614262385600" +
				"&ET=1614262390929" +
				"&MEM=37059" +
				"&NRE=144" +
				"&NWR=102" +
				"&SCPU=10" +
				"&SQLC=37" +
				"&SQLT=58" +
				"&SVT=255" +
				"&UCPU=140" +
				"&CPU=150" +
				"&FRE=193" +
				"&FWR=0" +
				"&CCON=1" +
				"&CSUP=26" +
				"&CLOC=2" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=41" +
				"&cssNum=12" +
				"&renderTime=5223" +
				"&RED=2" +
				"&TTB=16" +
				"&RSR=3957" +
				"&DIA=4537" +
				"&DCP=6485";
		String requestContent0140 = 
				"OPTR_INFO=c063025b-2d02-4e72-9d26-690022cec52d!1614262385600!1614262385690!0" +
				"&OPTR_INFO=3e3a9219-dec2-43c1-9927-9a6325be2f2d!1614262385713!1614262386140!0" +
				"&OPTR_INFO=aa51a25d-5482-4bff-b225-1c5a2b230224!1614262386176!1614262386650!0" +
				"&OPTR_INFO=84e8c20e-c4c2-494a-a52d-32b52e543927!1614262386730!1614262387128!0" +
				"&OPTR_INFO=1777f233-e882-4642-b627-3bce2bdf032b!1614262386786!1614262386888!0" +
				"&OPTR_INFO=dd2ee2da-7562-4ff1-9b2b-a8fb2f704126!1614262386891!1614262386981!0" +
				"&OPTR_INFO=abf23272-f392-48ac-b922-f6bb20da502c!1614262386984!1614262387399!0" +
				"&OPTR_INFO=b43f92c8-2692-47e8-ba26-3ed62ce77327!1614262387484!1614262387913!0" +
				"&OPTR_INFO=9037c27c-1f92-4ef7-b22c-956823f5f422!1614262387961!1614262388330!0" +
				"&OPTR_INFO=5ec6f2b0-2942-478a-b22b-c8f826ab2e27!1614262387991!1614262388886!0" +
				"&OPTR_INFO=1164c2cc-91b2-47b8-bf2e-b71e2b9b1127!1614262388165!1614262389041!0" +
				"&OPTR_INFO=b87602d8-ed02-42c1-a627-768a20511122!1614262388989!1614262389119!0" +
				"&OPTR_INFO=40b6626b-1ab2-4bd1-8122-878a22c13e25!1614262389126!1614262389802!0" +
				"&OPTR_INFO=e49fa207-f922-4be2-a229-dc0121517a2e!1614262389133!1614262389665!0" +
				"&OPTR_INFO=6dbeb2d4-dac2-4a0c-8620-0066289e6921!1614262389267!1614262389375!0" +
				"&OPTR_INFO=bed0d2ed-1c72-465a-b927-7ac02deaf427!1614262389377!1614262389466!0" +
				"&OPTR_INFO=951572fc-f6b2-4acd-9f2d-1eb02fc7b622!1614262389469!1614262389592!0" +
				"&OPTR_INFO=098212aa-2442-4003-9325-703a2ff90222!1614262389627!1614262390151!0" +
				"&OPTR_INFO=cb2282ef-7c42-4474-982d-d5fa2353a521!1614262389708!1614262389812!0" +
				"&OPTR_INFO=8cd71230-30d2-4d8d-9324-747c2ffb2c24!1614262389962!1614262390367!0" +
				"&OPTR_INFO=2235d25c-d512-4673-8623-e62822e94028!1614262389977!1614262390464!0" +
				"&OPTR_INFO=d6a5a2ad-1072-42fc-8423-e91c24815528!1614262390007!1614262390401!0" +
				"&OPTR_INFO=b2b902e7-0e22-4cc1-a224-fa712d13c42b!1614262390012!1614262390531!0" +
				"&OPTR_INFO=89bce22a-33e2-4056-ad27-a08123b55c2f!1614262390016!1614262390586!0" +
				"&OPTR_INFO=83d79232-6a82-4f8a-8f2f-7c7a2eae282d!1614262390023!1614262390822!0";
		String requestHeader0140 = "POST " + requestFile0140 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Req-Hash: Qwfsu6uXvfDpwu0zcZi4g55apshGZ_8eja_WPWIZUYyaVYlrcqZHbubrfq_yOJRCdI8Kcpmvb62NOG_qEnxxKlE0MnxWVY_UOHcPXLlWZkICDXOlWbJPClANBZpXWW3yXlQBK4\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0140.length() + "\r\n" + 		// Content-Length: 1924
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0140, requestHost0140, requestPort0140, requestHeader0140, requestContent0140.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091301-1240644", C_EventID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0140 = null;		// support garbage collector to reduce memory
		requestContent0140 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [140] <- Index 140
		if(replayMode)
		{
			long proxyDataRecordId =1614262390952L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #5: MyEmployeeProfile
		// # --------------------------



		// --- HTTP REQUEST: Test [142] <- WEB ADMIN Index 142 ---
		String requestProt0142 = "https";
		String requestHost0142 = "performancemanager4.successfactors.com";
		int    requestPort0142 = 443;
		String requestFile0142 = "/xi/ui/peopleprofile/pages/index.xhtml" +
				"?bplte_company=Teck" +
				"&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d";
		requestFile0142 = Lib.replaceTextPattern(requestFile0142, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0142 = "GET " + requestFile0142 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0142, requestHost0142, requestPort0142, requestHeader0142, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0142 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 112131
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Edit without Route Change");		// Test [142] <- Index 142
		if(replayMode)
		{
			long proxyDataRecordId =1614262423484L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [143] <- WEB ADMIN Index 143 ---
		String requestProt0143 = "https";
		String requestHost0143 = "performancemanager4.successfactors.com";
		int    requestPort0143 = 443;
		String requestFile0143 = "/ui/sfgrp/css/peopleprofileGroupViewCSS_42bfde1147ff0d75a93fd9a4f5b8d8fc.css";
		String requestHeader0143 = "GET " + requestFile0143 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0143, requestHost0143, requestPort0143, requestHeader0143, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0143 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 26309
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [143] <- Index 143
		if(replayMode)
		{
			long proxyDataRecordId =1614262425095L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [144] <- WEB ADMIN Index 144 ---
		String requestProt0144 = "https";
		String requestHost0144 = "performancemanager4.successfactors.com";
		int    requestPort0144 = 443;
		String requestFile0144 = "/ui/ajaxservice/js/engine_116e1015e98245eacd3e1336ebb5e951.js";
		String requestHeader0144 = "GET " + requestFile0144 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0144, requestHost0144, requestPort0144, requestHeader0144, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0144 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6774
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [144] <- Index 144
		if(replayMode)
		{
			long proxyDataRecordId =1614262425223L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [145] <- WEB ADMIN Index 145 ---
		String requestProt0145 = "https";
		String requestHost0145 = "performancemanager4.successfactors.com";
		int    requestPort0145 = 443;
		String requestFile0145 = "/ui/surj/js/core/surj-ui-core_a844b39e00a5e4a465ac91a46fd40158.js";
		String requestHeader0145 = "GET " + requestFile0145 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0145, requestHost0145, requestPort0145, requestHeader0145, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0145 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1662
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [145] <- Index 145
		if(replayMode)
		{
			long proxyDataRecordId =1614262425238L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [146] <- WEB ADMIN Index 146 ---
		String requestProt0146 = "https";
		String requestHost0146 = "performancemanager4.successfactors.com";
		int    requestPort0146 = 443;
		String requestFile0146 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/.dcss;mod=e5951701";
		String requestHeader0146 = "GET " + requestFile0146 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0146, requestHost0146, requestPort0146, requestHeader0146, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0146 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 8989
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [146] <- Index 146
		if(replayMode)
		{
			long proxyDataRecordId =1614262425256L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [147] <- WEB ADMIN Index 147 ---
		String requestProt0147 = "https";
		String requestHost0147 = "performancemanager4.successfactors.com";
		int    requestPort0147 = 443;
		String requestFile0147 = "/ui/sapui5/lite_1.78.6/pp3-modules.js";
		String requestHeader0147 = "GET " + requestFile0147 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0147, requestHost0147, requestPort0147, requestHeader0147, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0147 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 156917
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [147] <- Index 147
		if(replayMode)
		{
			long proxyDataRecordId =1614262425270L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [148] <- WEB ADMIN Index 148 ---
		String requestProt0148 = "https";
		String requestHost0148 = "performancemanager4.successfactors.com";
		int    requestPort0148 = 443;
		String requestFile0148 = "/ui/ajaxservice/js/AjaxService_ad0f793e0a95e9692d56b84136745fa4.js";
		String requestHeader0148 = "GET " + requestFile0148 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0148, requestHost0148, requestPort0148, requestHeader0148, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0148 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3155
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [148] <- Index 148
		if(replayMode)
		{
			long proxyDataRecordId =1614262425285L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [149] <- WEB ADMIN Index 149 ---
		String requestProt0149 = "https";
		String requestHost0149 = "performancemanager4.successfactors.com";
		int    requestPort0149 = 443;
		String requestFile0149 = "/ui/juic/js/core/component-surj_65973e1ae2132ef8c48b9e87c0eb9e55.js";
		String requestHeader0149 = "GET " + requestFile0149 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0149, requestHost0149, requestPort0149, requestHeader0149, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0149 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1273
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [149] <- Index 149
		if(replayMode)
		{
			long proxyDataRecordId =1614262425407L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [150] <- WEB ADMIN Index 150 ---
		String requestProt0150 = "https";
		String requestHost0150 = "performancemanager4.successfactors.com";
		int    requestPort0150 = 443;
		String requestFile0150 = "/ui/juic/js/components/sfPersonAutoCompleteWrapper_405235381825d984c1b0b36a8650e81c.js";
		String requestHeader0150 = "GET " + requestFile0150 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0150, requestHost0150, requestPort0150, requestHeader0150, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0150 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2402
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, "UserName:");		// Test [150] <- Index 150
		if(replayMode)
		{
			long proxyDataRecordId =1614262425469L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [151] <- WEB ADMIN Index 151 ---
		String requestProt0151 = "https";
		String requestHost0151 = "performancemanager4.successfactors.com";
		int    requestPort0151 = 443;
		String requestFile0151 = "/ui/sfgrp/js/peopleprofileGlobalJS_cd7d2dab4cbd91692d20f069a1dc64b6.js";
		String requestHeader0151 = "GET " + requestFile0151 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0151, requestHost0151, requestPort0151, requestHeader0151, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0151 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3203
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [151] <- Index 151
		if(replayMode)
		{
			long proxyDataRecordId =1614262425470L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [152] <- WEB ADMIN Index 152 ---
		String requestProt0152 = "https";
		String requestHost0152 = "performancemanager4.successfactors.com";
		int    requestPort0152 = 443;
		String requestFile0152 = "/ui/admin/js/tutorial/admTutorialVideoLinks_865b0d37450f2421ba4075681bfbd369.js";
		String requestHeader0152 = "GET " + requestFile0152 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0152, requestHost0152, requestPort0152, requestHeader0152, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0152 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 707
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [152] <- Index 152
		if(replayMode)
		{
			long proxyDataRecordId =1614262425472L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [153] <- WEB ADMIN Index 153 ---
		String requestProt0153 = "https";
		String requestHost0153 = "performancemanager4.successfactors.com";
		int    requestPort0153 = 443;
		String requestFile0153 = "/ui/ect/js/common/ectSearchAdoptionUtils_13ffc762bec59b8780053740e1254a5f.js";
		String requestHeader0153 = "GET " + requestFile0153 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0153, requestHost0153, requestPort0153, requestHeader0153, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0153 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 984
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [153] <- Index 153
		if(replayMode)
		{
			long proxyDataRecordId =1614262425479L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [154] <- WEB ADMIN Index 154 ---
		String requestProt0154 = "https";
		String requestHost0154 = "performancemanager4.successfactors.com";
		int    requestPort0154 = 443;
		String requestFile0154 = "/ui/peopleprofile/resources_935D1FD2EC1699830991713C56DF6DA5/sap/extent/uilib/library-preload.js";
		String requestHeader0154 = "GET " + requestFile0154 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001f1fb8255-d112-4a5c-a125-83062180312929820909-1501-babe-face-0000000000039d671289-efc2-4543-b72d-13662bb95d26HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0154, requestHost0154, requestPort0154, requestHeader0154, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0154 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 175512
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [154] <- Index 154
		if(replayMode)
		{
			long proxyDataRecordId =1614262425617L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [155] <- WEB ADMIN Index 155 ---
		String requestProt0155 = "https";
		String requestHost0155 = "performancemanager4.successfactors.com";
		int    requestPort0155 = 443;
		String requestFile0155 = "/ui/sapui5/main_1.78.6/sap/ui/comp/library-preload.js";
		String requestHeader0155 = "GET " + requestFile0155 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001fee2626d-fdd2-4690-8820-b19e29c67d2329820909-1501-babe-face-0000000000035f33a24b-69e2-4902-b42d-30182abf3426HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0155, requestHost0155, requestPort0155, requestHeader0155, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0155 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 289296
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [155] <- Index 155
		if(replayMode)
		{
			long proxyDataRecordId =1614262425961L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [156] <- WEB ADMIN Index 156 ---
		String requestProt0156 = "https";
		String requestHost0156 = "performancemanager4.successfactors.com";
		int    requestPort0156 = 443;
		String requestFile0156 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css";
		requestFile0156 = Lib.replaceTextPattern(requestFile0156, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0156 = "GET " + requestFile0156 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0156, requestHost0156, requestPort0156, requestHeader0156, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0156 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 14705
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [156] <- Index 156
		if(replayMode)
		{
			long proxyDataRecordId =1614262426365L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [157] <- WEB ADMIN Index 157 ---
		String requestProt0157 = "https";
		String requestHost0157 = "performancemanager4.successfactors.com";
		int    requestPort0157 = 443;
		String requestFile0157 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library.css";
		requestFile0157 = Lib.replaceTextPattern(requestFile0157, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0157 = "GET " + requestFile0157 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0157, requestHost0157, requestPort0157, requestHeader0157, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0157 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 95194
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [157] <- Index 157
		if(replayMode)
		{
			long proxyDataRecordId =1614262426381L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [158] <- WEB ADMIN Index 158 ---
		String requestProt0158 = "https";
		String requestHost0158 = "performancemanager4.successfactors.com";
		int    requestPort0158 = 443;
		String requestFile0158 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/uxap/themes/sap_belize/library.css";
		requestFile0158 = Lib.replaceTextPattern(requestFile0158, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0158 = "GET " + requestFile0158 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0158, requestHost0158, requestPort0158, requestHeader0158, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0158 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 18860
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [158] <- Index 158
		if(replayMode)
		{
			long proxyDataRecordId =1614262426393L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [159] <- WEB ADMIN Index 159 ---
		String requestProt0159 = "https";
		String requestHost0159 = "performancemanager4.successfactors.com";
		int    requestPort0159 = 443;
		String requestFile0159 = "/ui/sapui5/main_1.78.6/sap/ui/comp/themes/sap_belize/library.css";
		String requestHeader0159 = "GET " + requestFile0159 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0159, requestHost0159, requestPort0159, requestHeader0159, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0159 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 5516
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [159] <- Index 159
		if(replayMode)
		{
			long proxyDataRecordId =1614262426400L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [160] <- WEB ADMIN Index 160 ---
		String requestProt0160 = "https";
		String requestHost0160 = "performancemanager4.successfactors.com";
		int    requestPort0160 = 443;
		String requestFile0160 = "/ui/peopleprofile/resources_9E9B9CEF3EE963ED5B0BC91CCE341886/sap/sf/peopleprofile/Component-preload.js";
		String requestHeader0160 = "GET " + requestFile0160 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001c72722b3-f9d2-4e58-b222-2a0428a56c2a29820909-1501-babe-face-000000000003cc86f234-f832-41b5-a328-5fd92fa79b2bHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0160, requestHost0160, requestPort0160, requestHeader0160, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0160 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 270617
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [160] <- Index 160
		if(replayMode)
		{
			long proxyDataRecordId =1614262426554L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [161] <- WEB ADMIN Index 161 ---
		String requestProt0161 = "https";
		String requestHost0161 = "performancemanager4.successfactors.com";
		int    requestPort0161 = 443;
		String requestFile0161 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		requestFile0161 = Lib.replaceTextPattern(requestFile0161, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0161 = "GET " + requestFile0161 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0161, requestHost0161, requestPort0161, requestHeader0161, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0161 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [161] <- Index 161
		if(replayMode)
		{
			long proxyDataRecordId =1614262426601L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 2 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [162] <- WEB ADMIN Index 162 ---
		String requestProt0162 = "https";
		String requestHost0162 = "performancemanager4.successfactors.com";
		int    requestPort0162 = 443;
		String requestFile0162 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/peopleprofile/resources_9E9B9CEF3EE963ED5B0BC91CCE341886/theming_aux!/ui/peopleprofile/resources_9E9B9CEF3EE963ED5B0BC91CCE341886/sap/sf/peopleprofile/themes/sap_belize/library.css";
		requestFile0162 = Lib.replaceTextPattern(requestFile0162, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0162 = "GET " + requestFile0162 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0162, requestHost0162, requestPort0162, requestHeader0162, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0162 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 35776
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [162] <- Index 162
		if(replayMode)
		{
			long proxyDataRecordId =1614262426983L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [163] <- WEB ADMIN Index 163 ---
		String requestProt0163 = "https";
		String requestHost0163 = "performancemanager4.successfactors.com";
		int    requestPort0163 = 443;
		String requestFile0163 = "/ui/sapui5/main_1.78.6/jquery.sap.dom.js";
		String requestHeader0163 = "GET " + requestFile0163 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500016db75224-e222-4b7c-ae29-26b92491d12129820909-1501-babe-face-000000000003b7f9e2fa-9e82-403a-bf21-5ce6257e4827HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0163, requestHost0163, requestPort0163, requestHeader0163, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0163 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 910
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [163] <- Index 163
		if(replayMode)
		{
			long proxyDataRecordId =1614262426988L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [164] <- WEB ADMIN Index 164 ---
		String requestProt0164 = "https";
		String requestHost0164 = "performancemanager4.successfactors.com";
		int    requestPort0164 = 443;
		String requestFile0164 = "/messagebundle/Teck/vmod_8b21ff4c-614fc7e3/ui/peopleprofile/resources/sap/sf/peopleprofile/i18n/messagebundle_en_US.properties";
		String requestHeader0164 = "GET " + requestFile0164 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001c8150241-56f2-437b-b227-448c28fcca2029820909-1501-babe-face-00000000000377292295-0f62-42b8-a927-774529bb5d29HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0164, requestHost0164, requestPort0164, requestHeader0164, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0164 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 18696
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [164] <- Index 164
		if(replayMode)
		{
			long proxyDataRecordId =1614262427107L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [165] <- WEB ADMIN Index 165 ---
		String requestProt0165 = "https";
		String requestHost0165 = "performancemanager4.successfactors.com";
		int    requestPort0165 = 443;
		String requestFile0165 = "/ui/sapui5/main_1.78.6/jquery.sap.history.js";
		String requestHeader0165 = "GET " + requestFile0165 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001c768b27a-6962-4dc3-b926-b582295a862d29820909-1501-babe-face-0000000000031ab102d5-5c52-4c53-812a-10662e368c2dHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0165, requestHost0165, requestPort0165, requestHeader0165, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0165 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1887
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [165] <- Index 165
		if(replayMode)
		{
			long proxyDataRecordId =1614262427756L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [166] <- WEB ADMIN Index 166 ---
		String requestProt0166 = "https";
		String requestHost0166 = "performancemanager4.successfactors.com";
		int    requestPort0166 = 443;
		String requestFile0166 = "/ui/sapui5/main_1.78.6/sap/ui/layout/form/ColumnLayout.js";
		String requestHeader0166 = "GET " + requestFile0166 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500018857622c-d712-4113-b22a-b0dc2fd3202f29820909-1501-babe-face-000000000003e33e22d2-e5a2-429b-ac2f-b07b28b3b724HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0166, requestHost0166, requestPort0166, requestHeader0166, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0166 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2426
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [166] <- Index 166
		if(replayMode)
		{
			long proxyDataRecordId =1614262427896L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [167] <- WEB ADMIN Index 167 ---
		String requestProt0167 = "https";
		String requestHost0167 = "performancemanager4.successfactors.com";
		int    requestPort0167 = 443;
		String requestFile0167 = "/ui/sapui5/main_1.78.6/sap/ui/layout/form/ColumnLayoutRenderer.js";
		String requestHeader0167 = "GET " + requestFile0167 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500016bdaa22d-7812-4d0a-9323-027e2f13452f29820909-1501-babe-face-000000000003dd8cc287-c7b2-41a8-bb2d-50312d555a27HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0167, requestHost0167, requestPort0167, requestHeader0167, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0167 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1176
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [167] <- Index 167
		if(replayMode)
		{
			long proxyDataRecordId =1614262428006L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [168] <- WEB ADMIN Index 168 ---
		String requestProt0168 = "https";
		String requestHost0168 = "performancemanager4.successfactors.com";
		int    requestPort0168 = 443;
		String requestFile0168 = "/ui/sapui5/main_1.78.6/sap/m/Avatar.js";
		String requestHeader0168 = "GET " + requestFile0168 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500014ac40230-a292-4aee-b029-7cc02a56c32629820909-1501-babe-face-00000000000370fe32ac-bb92-4976-9d25-7a4a20decb2dHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0168, requestHost0168, requestPort0168, requestHeader0168, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0168 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2327
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [168] <- Index 168
		if(replayMode)
		{
			long proxyDataRecordId =1614262428123L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [169] <- WEB ADMIN Index 169 ---
		String requestProt0169 = "https";
		String requestHost0169 = "performancemanager4.successfactors.com";
		int    requestPort0169 = 443;
		String requestFile0169 = "/ui/sapui5/main_1.78.6/sap/m/AvatarRenderer.js";
		String requestHeader0169 = "GET " + requestFile0169 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001fe1052d8-11e2-474f-8b22-e25c2cf3c92f29820909-1501-babe-face-0000000000039db5e21d-1dc2-4ee8-af27-5ec92414cf29HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0169, requestHost0169, requestPort0169, requestHeader0169, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0169 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 891
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [169] <- Index 169
		if(replayMode)
		{
			long proxyDataRecordId =1614262428242L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [170] <- WEB ADMIN Index 170 ---
		String requestProt0170 = "https";
		String requestHost0170 = "performancemanager4.successfactors.com";
		int    requestPort0170 = 443;
		String requestFile0170 = "/ui/sapui5/main_1.78.6/sap/m/Menu.js";
		String requestHeader0170 = "GET " + requestFile0170 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 010005000199b022cf-dcd2-4d6f-8a2e-dbc12ec2a62a29820909-1501-babe-face-00000000000356d1327a-6892-4d0d-9722-450a22524b2cHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0170, requestHost0170, requestPort0170, requestHeader0170, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0170 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3640
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [170] <- Index 170
		if(replayMode)
		{
			long proxyDataRecordId =1614262428345L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [171] <- WEB ADMIN Index 171 ---
		String requestProt0171 = "https";
		String requestHost0171 = "performancemanager4.successfactors.com";
		int    requestPort0171 = 443;
		String requestFile0171 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/unified/themes/sap_belize/library.css";
		requestFile0171 = Lib.replaceTextPattern(requestFile0171, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0171 = "GET " + requestFile0171 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0171, requestHost0171, requestPort0171, requestHeader0171, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0171 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 26529
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [171] <- Index 171
		if(replayMode)
		{
			long proxyDataRecordId =1614262428448L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [172] <- WEB ADMIN Index 172 ---
		String requestProt0172 = "https";
		String requestHost0172 = "performancemanager4.successfactors.com";
		int    requestPort0172 = 443;
		String requestFile0172 = "/ui/sapui5/main_1.78.6/sap/m/MenuListItem.js";
		String requestHeader0172 = "GET " + requestFile0172 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500010e76f2b6-a742-40fd-952b-236827206c2529820909-1501-babe-face-0000000000038cb812ad-fc82-46d1-9326-ba4121c45d2dHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0172, requestHost0172, requestPort0172, requestHeader0172, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0172 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 807
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [172] <- Index 172
		if(replayMode)
		{
			long proxyDataRecordId =1614262428462L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [173] <- WEB ADMIN Index 173 ---
		String requestProt0173 = "https";
		String requestHost0173 = "performancemanager4.successfactors.com";
		int    requestPort0173 = 443;
		String requestFile0173 = "/ui/sapui5/main_1.78.6/sap/m/MenuListItemRenderer.js";
		String requestHeader0173 = "GET " + requestFile0173 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 010005000157eba250-68b2-4ec1-8f2b-f3432995e42d29820909-1501-babe-face-0000000000032de9e2b2-9c92-4ab2-9829-09612b265b2cHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0173, requestHost0173, requestPort0173, requestHeader0173, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0173 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 685
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [173] <- Index 173
		if(replayMode)
		{
			long proxyDataRecordId =1614262428583L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [174] <- WEB ADMIN Index 174 ---
		String requestProt0174 = "https";
		String requestHost0174 = "performancemanager4.successfactors.com";
		int    requestPort0174 = 443;
		String requestFile0174 = "/ui/sapui5/main_1.78.6/sap/ui/unified/Menu.js";
		String requestHeader0174 = "GET " + requestFile0174 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001baa1726f-98f2-40b9-a728-fb3e20a0d92d29820909-1501-babe-face-000000000003142732ef-23b2-49f0-bd28-5b402c037420HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0174, requestHost0174, requestPort0174, requestHeader0174, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0174 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4693
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [174] <- Index 174
		if(replayMode)
		{
			long proxyDataRecordId =1614262428727L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [175] <- WEB ADMIN Index 175 ---
		String requestProt0175 = "https";
		String requestHost0175 = "performancemanager4.successfactors.com";
		int    requestPort0175 = 443;
		String requestFile0175 = "/ui/sapui5/main_1.78.6/sap/ui/unified/MenuItemBase.js";
		String requestHeader0175 = "GET " + requestFile0175 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001424572f9-7522-4158-ae2f-57fe2243e02b29820909-1501-babe-face-00000000000343ea920e-6c72-4afc-9325-632229ccda28HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0175, requestHost0175, requestPort0175, requestHeader0175, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0175 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 751
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [175] <- Index 175
		if(replayMode)
		{
			long proxyDataRecordId =1614262428851L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [176] <- WEB ADMIN Index 176 ---
		String requestProt0176 = "https";
		String requestHost0176 = "performancemanager4.successfactors.com";
		int    requestPort0176 = 443;
		String requestFile0176 = "/ui/sapui5/main_1.78.6/sap/ui/unified/MenuRenderer.js";
		String requestHeader0176 = "GET " + requestFile0176 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001457da223-8102-457c-8927-132927030c2f29820909-1501-babe-face-00000000000323a6c232-2d12-4776-8b25-94012edc4121HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0176, requestHost0176, requestPort0176, requestHeader0176, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0176 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 850
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [176] <- Index 176
		if(replayMode)
		{
			long proxyDataRecordId =1614262428983L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [177] <- WEB ADMIN Index 177 ---
		String requestProt0177 = "https";
		String requestHost0177 = "performancemanager4.successfactors.com";
		int    requestPort0177 = 443;
		String requestFile0177 = "/ui/sapui5/main_1.78.6/sap/ui/unified/MenuItem.js";
		String requestHeader0177 = "GET " + requestFile0177 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 010005000101883265-4f42-4344-a429-7da427f6b82229820909-1501-babe-face-000000000003f6cb32f6-46b2-4aac-a929-1d712ebc4e2eHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0177, requestHost0177, requestPort0177, requestHeader0177, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0177 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 940
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [177] <- Index 177
		if(replayMode)
		{
			long proxyDataRecordId =1614262429113L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [178] <- WEB ADMIN Index 178 ---
		String requestProt0178 = "https";
		String requestHost0178 = "performancemanager4.successfactors.com";
		int    requestPort0178 = 443;
		String requestFile0178 = "/ui/sapui5/main_1.78.6/sap/ui/dom/getFirstEditableInput.js";
		String requestHeader0178 = "GET " + requestFile0178 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001c733f24f-2302-41a6-8125-8b332514782929820909-1501-babe-face-000000000003b4f1c2f6-6d52-4468-8f25-249d21477921HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0178, requestHost0178, requestPort0178, requestHeader0178, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0178 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 353
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [178] <- Index 178
		if(replayMode)
		{
			long proxyDataRecordId =1614262429245L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [179] <- WEB ADMIN Index 179 ---
		String requestProt0179 = "https";
		String requestHost0179 = "performancemanager4.successfactors.com";
		int    requestPort0179 = 443;
		String requestFile0179 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library-parameters.json";
		requestFile0179 = Lib.replaceTextPattern(requestFile0179, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0179 = "GET " + requestFile0179 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000166f79259-63b2-4c9b-b62d-4c5d2981f32929820909-1501-babe-face-000000000003b65f82da-7a92-423e-882c-90e928321825HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0179, requestHost0179, requestPort0179, requestHeader0179, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0179 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 89850
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [179] <- Index 179
		if(replayMode)
		{
			long proxyDataRecordId =1614262429576L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [180] <- WEB ADMIN Index 180 ---
		String requestProt0180 = "https";
		String requestHost0180 = "performancemanager4.successfactors.com";
		int    requestPort0180 = 443;
		String requestFile0180 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library-parameters.json";
		requestFile0180 = Lib.replaceTextPattern(requestFile0180, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0180 = "GET " + requestFile0180 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001a3300221-ca92-480a-a02a-d4e62858c72e29820909-1501-babe-face-0000000000038fe602b9-6352-4155-b82a-3af326704229HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0180, requestHost0180, requestPort0180, requestHeader0180, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0180 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 23084
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [180] <- Index 180
		if(replayMode)
		{
			long proxyDataRecordId =1614262429832L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [181] <- WEB ADMIN Index 181 ---
		String requestProt0181 = "https";
		String requestHost0181 = "performancemanager4.successfactors.com";
		int    requestPort0181 = 443;
		String requestFile0181 = "/ui/sapui5/main_1.78.6/sap/ui/layout/themes/sap_belize/library-parameters.json";
		String requestHeader0181 = "GET " + requestFile0181 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500013c7fd23d-ffa2-477e-9d26-8fa8232df62f29820909-1501-babe-face-0000000000036f50c2f8-f3e2-4dd9-a42d-2d4b29427e29HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0181, requestHost0181, requestPort0181, requestHeader0181, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0181 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1220
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{\"_sap_ui_layout_ColumnLayout");		// Test [181] <- Index 181
		if(replayMode)
		{
			long proxyDataRecordId =1614262430076L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 3 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [182] <- WEB ADMIN Index 182 ---
		String requestProt0182 = "https";
		String requestHost0182 = "performancemanager4.successfactors.com";
		int    requestPort0182 = 443;
		String requestFile0182 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/uxap/themes/sap_belize/library-parameters.json";
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0182 = "GET " + requestFile0182 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000177ba7231-a9b2-4d31-a626-97e825528a2829820909-1501-babe-face-000000000003c613f288-7cc2-49e0-9820-c0972e171e25HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0182, requestHost0182, requestPort0182, requestHeader0182, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0182 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 377
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [182] <- Index 182
		if(replayMode)
		{
			long proxyDataRecordId =1614262430221L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [183] <- WEB ADMIN Index 183 ---
		String requestProt0183 = "https";
		String requestHost0183 = "performancemanager4.successfactors.com";
		int    requestPort0183 = 443;
		String requestFile0183 = "/ui/surj/resources_0D669CF44A13E0E9F573CB4E8C114330/sap/sf/surj/shell/themes/sap_belize/library-parameters.json";
		String requestHeader0183 = "GET " + requestFile0183 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500012d40c272-1312-4111-b620-31a727cfbd2d29820909-1501-babe-face-000000000003ee4de2d3-9a22-42ac-ba27-fa6d21486e2fHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0183, requestHost0183, requestPort0183, requestHeader0183, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0183 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 57
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{},\"scopes\":{\"sapContrast\":{}}}");		// Test [183] <- Index 183
		if(replayMode)
		{
			long proxyDataRecordId =1614262430433L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [184] <- WEB ADMIN Index 184 ---
		String requestProt0184 = "https";
		String requestHost0184 = "performancemanager4.successfactors.com";
		int    requestPort0184 = 443;
		String requestFile0184 = "/ui/sapui5/main_1.78.6/sap/ui/comp/themes/sap_belize/library-parameters.json";
		String requestHeader0184 = "GET " + requestFile0184 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500012ff2022e-0112-416b-bf27-4fb52a7c4b2529820909-1501-babe-face-0000000000033a8c722d-3a32-4bca-ad2f-60fa2764a826HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0184, requestHost0184, requestPort0184, requestHeader0184, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0184 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 57
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{},\"scopes\":{\"sapContrast\":{}}}");		// Test [184] <- Index 184
		if(replayMode)
		{
			long proxyDataRecordId =1614262430566L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [185] <- WEB ADMIN Index 185 ---
		String requestProt0185 = "https";
		String requestHost0185 = "performancemanager4.successfactors.com";
		int    requestPort0185 = 443;
		String requestFile0185 = "/ui/sapui5/lite_1.78.6/themes/sap_belize/library-parameters.json";
		String requestHeader0185 = "GET " + requestFile0185 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001d7df12c8-14e2-4319-b62b-94832549692f29820909-1501-babe-face-000000000003783dd2c6-c402-42e9-a92f-0b0f25fbac2bHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0185, requestHost0185, requestPort0185, requestHeader0185, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0185 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 286
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"_sap_ui_commons_TabStrip_BorderRadius\": \"0\"");		// Test [185] <- Index 185
		if(replayMode)
		{
			long proxyDataRecordId =1614262430664L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [186] <- WEB ADMIN Index 186 ---
		String requestProt0186 = "https";
		String requestHost0186 = "performancemanager4.successfactors.com";
		int    requestPort0186 = 443;
		String requestFile0186 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/peopleprofile/resources_9E9B9CEF3EE963ED5B0BC91CCE341886/theming_aux!/ui/peopleprofile/resources_9E9B9CEF3EE963ED5B0BC91CCE341886/sap/sf/peopleprofile/themes/sap_belize/library-parameters.json";
		requestFile0186 = Lib.replaceTextPattern(requestFile0186, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0186 = "GET " + requestFile0186 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000198504290-85a2-4ffc-b42c-ef122d03912e29820909-1501-babe-face-000000000003dcd4327c-ec52-4b1a-8a2f-305927761c23HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0186, requestHost0186, requestPort0186, requestHeader0186, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0186 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 5739
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [186] <- Index 186
		if(replayMode)
		{
			long proxyDataRecordId =1614262430784L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [187] <- WEB ADMIN Index 187 ---
		String requestProt0187 = "https";
		String requestHost0187 = "performancemanager4.successfactors.com";
		int    requestPort0187 = 443;
		String requestFile0187 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/unified/themes/sap_belize/library-parameters.json";
		requestFile0187 = Lib.replaceTextPattern(requestFile0187, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0187 = "GET " + requestFile0187 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500016c79b234-f742-4b88-ac23-b8a82670072d29820909-1501-babe-face-000000000003dccac2a3-f222-4c2f-8826-f96a2bead824HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0187, requestHost0187, requestPort0187, requestHeader0187, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0187 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 13851
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [187] <- Index 187
		if(replayMode)
		{
			long proxyDataRecordId =1614262430995L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [188] <- WEB ADMIN Index 188 ---
		String requestProt0188 = "https";
		String requestHost0188 = "performancemanager4.successfactors.com";
		int    requestPort0188 = 443;
		String requestFile0188 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/PeoplePicker.js";
		String requestHeader0188 = "GET " + requestFile0188 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 0100050001168ef2d8-a442-49be-a827-052c286ad22429820909-1501-babe-face-0000000000036a00d236-2cb2-4eef-8624-814a2b02dc22HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0188, requestHost0188, requestPort0188, requestHeader0188, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0188 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4727
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [188] <- Index 188
		if(replayMode)
		{
			long proxyDataRecordId =1614262431400L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [189] <- WEB ADMIN Index 189 ---
		String requestProt0189 = "https";
		String requestHost0189 = "performancemanager4.successfactors.com";
		int    requestPort0189 = 443;
		String requestFile0189 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/UserSelectItem.js";
		String requestHeader0189 = "GET " + requestFile0189 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500016c4f020f-7de2-43a7-9825-ccce29913a2e29820909-1501-babe-face-000000000003393f6282-c752-40de-a822-967e2ca1782fHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0189, requestHost0189, requestPort0189, requestHeader0189, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0189 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 459
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [189] <- Index 189
		if(replayMode)
		{
			long proxyDataRecordId =1614262431568L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [190] <- WEB ADMIN Index 190 ---
		String requestProt0190 = "https";
		String requestHost0190 = "performancemanager4.successfactors.com";
		int    requestPort0190 = 443;
		String requestFile0190 = "/messagebundle/Teck/vmod_ee00a45d-614fc7e3/ui/surj/resources/sap/sf/surj/commons/i18n/messagebundle_en_US.properties";
		String requestHeader0190 = "GET " + requestFile0190 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001777a424a-ddf2-4519-a026-11ca2bcde02629820909-1501-babe-face-000000000003489f5258-f072-461e-8a21-6dc72aa74e2dHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0190, requestHost0190, requestPort0190, requestHeader0190, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0190 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 705
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [190] <- Index 190
		if(replayMode)
		{
			long proxyDataRecordId =1614262431697L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [191] <- WEB ADMIN Index 191 ---
		String requestProt0191 = "https";
		String requestHost0191 = "performancemanager4.successfactors.com";
		int    requestPort0191 = 443;
		String requestFile0191 = "/ui/sapui5/main_1.78.6/sap/uxap/messagebundle_en.properties";
		String requestHeader0191 = "GET " + requestFile0191 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 01000500014b3aa299-f522-4753-bf26-815920e04d2e29820909-1501-babe-face-0000000000036da19217-6692-45c3-8629-6dd622819e2dHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0191, requestHost0191, requestPort0191, requestHeader0191, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0191 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 1341
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [191] <- Index 191
		if(replayMode)
		{
			long proxyDataRecordId =1614262432164L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [192] <- WEB ADMIN Index 192 ---
		String requestProt0192 = "https";
		String requestHost0192 = "performancemanager4.successfactors.com";
		int    requestPort0192 = 443;
		String requestFile0192 = "/ui/peopleprofile/resources_9E9B9CEF3EE963ED5B0BC91CCE341886/sap/sf/peopleprofile/configurations/BlockViewMappings.json";
		String requestHeader0192 = "GET " + requestFile0192 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 0100050001918db2b1-4812-49d9-8a2b-2ec72397402629820909-1501-babe-face-000000000003673b32ec-92a2-43fc-872a-4877247e8425HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0192, requestHost0192, requestPort0192, requestHeader0192, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0192 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 3624
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [192] <- Index 192
		if(replayMode)
		{
			long proxyDataRecordId =1614262432419L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [193] <- WEB ADMIN Index 193 ---
		String requestProt0193 = "https";
		String requestHost0193 = "performancemanager4.successfactors.com";
		int    requestPort0193 = 443;
		String requestFile0193 = "/ui/peopleprofile/resources_9E9B9CEF3EE963ED5B0BC91CCE341886/sap/sf/peopleprofile/configurations/LayoutConfig.json";
		String requestHeader0193 = "GET " + requestFile0193 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"OPTR_CXT: 010005000144c0b25e-20c2-49f7-bc26-600c2b22952f29820909-1501-babe-face-000000000003d8bf32ee-6072-4c54-b723-68db222a5a24HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0193, requestHost0193, requestPort0193, requestHeader0193, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0193 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1681
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"mainPayGroup\":\"FIRSTPAYGROUP\"");		// Test [193] <- Index 193
		if(replayMode)
		{
			long proxyDataRecordId =1614262432576L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [194] <- WEB ADMIN Index 194 ---
		String requestProt0194 = "https";
		String requestHost0194 = "performancemanager4.successfactors.com";
		int    requestPort0194 = 443;
		String requestFile0194 = "/ec/ajax/remoting/call/plaincall/employeeInfoControllerProxy.decodeUserId.dwr";
		String requestContent0194 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=employeeInfoControllerProxy" + "\r\n" + 
				"c0-methodName=decodeUserId" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:TestAutomation" + "\r\n" + 
				"batchId=0";
		requestContent0194 = Lib.replaceTextPattern(requestContent0194, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0194 = "POST " + requestFile0194 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001bd3c92a9-d2f2-45b6-bf25-4f5b210a602129820909-1501-babe-face-000000000003ac4542a4-9f52-4579-af2c-ec5d2c4f7e2bHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0194.length() + "\r\n" + 		// Content-Length: 321
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0194, requestHost0194, requestPort0194, requestHeader0194, requestContent0194.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0194 = null;		// support garbage collector to reduce memory
		requestContent0194 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 129
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "dwr.engine._remoteHandleCallback('0','0',\"TestAutomation\");");		// Test [194] <- Index 194
		if(replayMode)
		{
			long proxyDataRecordId =1614262432659L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [195] <- WEB ADMIN Index 195 ---
		String requestProt0195 = "https";
		String requestHost0195 = "performancemanager4.successfactors.com";
		int    requestPort0195 = 443;
		String requestFile0195 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/PeoplePickerRenderer.js";
		String requestHeader0195 = "GET " + requestFile0195 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"OPTR_CXT: 01000500013e3002dd-e6b2-4e7f-8c2b-382a2950f52729820909-1501-babe-face-00000000000377e142bb-f022-4883-8629-d9562f88d829HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0195, requestHost0195, requestPort0195, requestHeader0195, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0195 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 730
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [195] <- Index 195
		if(replayMode)
		{
			long proxyDataRecordId =1614262432772L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [196] <- WEB ADMIN Index 196 ---
		String requestProt0196 = "https";
		String requestHost0196 = "performancemanager4.successfactors.com";
		int    requestPort0196 = 443;
		String requestFile0196 = "/ui/surj/resources_0D669CF44A13E0E9F573CB4E8C114330/sap/sf/surj/shell/img/userphoto/UserPhotoPlaceholder_180x240.png";
		String requestHeader0196 = "GET " + requestFile0196 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0196, requestHost0196, requestPort0196, requestHeader0196, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0196 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 2670
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [196] <- Index 196
		if(replayMode)
		{
			long proxyDataRecordId =1614262432945L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [197] <- WEB ADMIN Index 197 ---
		String requestProt0197 = "https";
		String requestHost0197 = "performancemanager4.successfactors.com";
		int    requestPort0197 = 443;
		String requestFile0197 = "/ui/peopleprofile/resources_935D1FD2EC1699830991713C56DF6DA5/sap/extent/uilib/resources/speaker.svg";
		String requestHeader0197 = "GET " + requestFile0197 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0197, requestHost0197, requestPort0197, requestHeader0197, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0197 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/SVG+XML", header text fragment = [verification disabled], recorded content size = 661
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/SVG+XML", null, null);		// Test [197] <- Index 197
		if(replayMode)
		{
			long proxyDataRecordId =1614262432946L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [198] <- WEB ADMIN Index 198 ---
		String requestProt0198 = "https";
		String requestHost0198 = "performancemanager4.successfactors.com";
		int    requestPort0198 = 443;
		String requestFile0198 = "/ec/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.getHeader.dwr";
		String requestContent0198 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=employeeProfilePageConfigControllerProxy" + "\r\n" + 
				"c0-methodName=getHeader" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:TestAutomation" + "\r\n" + 
				"batchId=1";
		requestContent0198 = Lib.replaceTextPattern(requestContent0198, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0198 = "POST " + requestFile0198 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500012b48a234-32c2-40e6-9b21-a56a2c0ea02529820909-1501-babe-face-0000000000032165927e-1e42-4401-872e-c4d22d2fd52eHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0198.length() + "\r\n" + 		// Content-Length: 331
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0198, requestHost0198, requestPort0198, requestHeader0198, requestContent0198.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0198 = null;		// support garbage collector to reduce memory
		requestContent0198 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 796
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [198] <- Index 198
		if(replayMode)
		{
			long proxyDataRecordId =1614262433104L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [199] <- WEB ADMIN Index 199 ---
		String requestProt0199 = "https";
		String requestHost0199 = "performancemanager4.successfactors.com";
		int    requestPort0199 = 443;
		String requestFile0199 = "/ec/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.checkUserStatus.dwr";
		String requestContent0199 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=employeeProfilePageConfigControllerProxy" + "\r\n" + 
				"c0-methodName=checkUserStatus" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:TestAutomation" + "\r\n" + 
				"batchId=2";
		requestContent0199 = Lib.replaceTextPattern(requestContent0199, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0199 = "POST " + requestFile0199 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001d0c1823e-c582-405c-9d2c-d2952daa1f2f29820909-1501-babe-face-0000000000038e800256-9602-4f10-942b-d9572c677427HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0199.length() + "\r\n" + 		// Content-Length: 337
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0199, requestHost0199, requestPort0199, requestHeader0199, requestContent0199.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0199 = null;		// support garbage collector to reduce memory
		requestContent0199 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 182
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "{messageKey:\"OK\",targetUserId:\"TestAutomation\",targetUserStatus:'OK'});");		// Test [199] <- Index 199
		if(replayMode)
		{
			long proxyDataRecordId =1614262433118L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [200] <- WEB ADMIN Index 200 ---
		String requestProt0200 = "https";
		String requestHost0200 = "performancemanager4.successfactors.com";
		int    requestPort0200 = 443;
		String requestFile0200 = "/ui/pageaccess/js/pageAccess_a8762ad33a61a6ad48ee1b515cecc4cb.js";
		String requestHeader0200 = "GET " + requestFile0200 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0200, requestHost0200, requestPort0200, requestHeader0200, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0200 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 557
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [200] <- Index 200
		if(replayMode)
		{
			long proxyDataRecordId =1614262433170L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [201] <- WEB ADMIN Index 201 ---
		String requestProt0201 = "https";
		String requestHost0201 = "performancemanager4.successfactors.com";
		int    requestPort0201 = 443;
		String requestFile0201 = "/xi/ajax/remoting/call/plaincall/pageAccessControllerProxy.generatePageAccess.dwr";
		String requestContent0201 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=pageAccessControllerProxy" + "\r\n" + 
				"c0-methodName=generatePageAccess" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e2=string:EMPLOYEE_FILE" + "\r\n" + 
				"c0-e3=string:EMPLOYEE_FILE" + "\r\n" + 
				"c0-e4=string:PP3_MAIN" + "\r\n" + 
				"c0-e5=string:TestAutomation" + "\r\n" + 
				"c0-e6=null:null" + "\r\n" + 
				"c0-e8=string:TestAutomation" + "\r\n" + 
				"c0-e7=Object_Object:{targetUserId:reference:c0-e8}" + "\r\n" + 
				"c0-e1=Object_Object:{pageId:reference:c0-e2, moduleId:reference:c0-e3, pageQualifier:reference:c0-e4, userId:reference:c0-e5, proxyUserId:reference:c0-e6, pageDetail:reference:c0-e7}" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"batchId=3";
		requestContent0201 = Lib.replaceTextPattern(requestContent0201, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0201 = "POST " + requestFile0201 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001b281421a-4882-4576-ab26-6e8c2da88d2629820909-1501-babe-face-000000000003c046c227-f6e2-4213-8124-22f12406c82dHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0201.length() + "\r\n" + 		// Content-Length: 709
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0201, requestHost0201, requestPort0201, requestHeader0201, requestContent0201.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0201 = null;		// support garbage collector to reduce memory
		requestContent0201 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 117
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [201] <- Index 201
		if(replayMode)
		{
			long proxyDataRecordId =1614262433312L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 4 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [202] <- WEB ADMIN Index 202 ---
		String requestProt0202 = "https";
		String requestHost0202 = "performancemanager4.successfactors.com";
		int    requestPort0202 = 443;
		String requestFile0202 = "/perfLogServlet" +
				"?callId=9919215297-X" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&ST=1614262423212" +
				"&ET=1614262433325" +
				"&TTB=8" +
				"&RSR=1771" +
				"&DIA=3197" +
				"&DCP=10110";
		String requestHeader0202 = "GET " + requestFile0202 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Req-Hash: 2lUlL_EjCjQeA-sGBDAA0DwsBDkoIhDE_QjHzg1BzALEyiD_8WoSHUA1_V-q9SEb4S-k-SAC5SzZ19YB5UICA-fI1xUb3eXzruv3r89mrszKyw19uxv5_g9A-wvMpvbqmPXnqq\r\n" + 
				"Content-Type: text/plain; charset=UTF-8\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-X\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0202, requestHost0202, requestPort0202, requestHeader0202, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0202 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [202] <- Index 202
		if(replayMode)
		{
			long proxyDataRecordId =1614262433366L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [203] <- WEB ADMIN Index 203 ---
		String requestProt0203 = "https";
		String requestHost0203 = "performancemanager4.successfactors.com";
		int    requestPort0203 = 443;
		String requestFile0203 = "/ec/ajax/remoting/call/plaincall/quickcardControllerProxy.getTakeActionPermission.dwr";
		String requestContent0203 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=quickcardControllerProxy" + "\r\n" + 
				"c0-methodName=getTakeActionPermission" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:TestAutomation" + "\r\n" + 
				"c0-param1=string:" + "\r\n" + 
				"batchId=4";
		requestContent0203 = Lib.replaceTextPattern(requestContent0203, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0203 = "POST " + requestFile0203 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 010005000157ffd2ef-d842-4002-8b23-eff62608232829820909-1501-babe-face-000000000003cdea72c3-b0b2-4643-a120-48572ef77726HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0203.length() + "\r\n" + 		// Content-Length: 347
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0203, requestHost0203, requestPort0203, requestHeader0203, requestContent0203.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0203 = null;		// support garbage collector to reduce memory
		requestContent0203 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 118
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [203] <- Index 203
		if(replayMode)
		{
			long proxyDataRecordId =1614262433537L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [204] <- WEB ADMIN Index 204 ---
		String requestProt0204 = "https";
		String requestHost0204 = "performancemanager4.successfactors.com";
		int    requestPort0204 = 443;
		String requestFile0204 = "/ec/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.getPageConfig.dwr";
		String requestContent0204 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=employeeProfilePageConfigControllerProxy" + "\r\n" + 
				"c0-methodName=getPageConfig" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:TestAutomation" + "\r\n" + 
				"batchId=5";
		requestContent0204 = Lib.replaceTextPattern(requestContent0204, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0204 = "POST " + requestFile0204 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001bf8b121e-df22-46d6-a02f-8b152a72fc2029820909-1501-babe-face-00000000000353a3c2f5-5172-4fde-ba2b-7a6a2380462fHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0204.length() + "\r\n" + 		// Content-Length: 335
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0204, requestHost0204, requestPort0204, requestHeader0204, requestContent0204.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0204 = null;		// support garbage collector to reduce memory
		requestContent0204 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1683
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "Both Employee and Manager can view comments. Only Manager can enter comments after a discussion with the Employee.");		// Test [204] <- Index 204
		if(replayMode)
		{
			long proxyDataRecordId =1614262433544L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [205] <- WEB ADMIN Index 205 ---
		String requestProt0205 = "https";
		String requestHost0205 = "performancemanager4.successfactors.com";
		int    requestPort0205 = 443;
		String requestFile0205 = "/eduPhoto/view" +
				"?companyId=Teck" +
				"&photo_type=liveProfile" +
				"&user_id=TestAutomation" +
				"&mod=null";
		String requestHeader0205 = "GET " + requestFile0205 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0205, requestHost0205, requestPort0205, requestHeader0205, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0205 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [205] <- Index 205
		if(replayMode)
		{
			long proxyDataRecordId =1614262433883L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [206] <- WEB ADMIN Index 206 ---
		String requestProt0206 = "https";
		String requestHost0206 = "performancemanager4.successfactors.com";
		int    requestPort0206 = 443;
		String requestFile0206 = "/eduPhoto/view" +
				"?companyId=Teck" +
				"&photo_type=userExpressivePhoto" +
				"&user_id=TestAutomation" +
				"&mod=25026_1566931509000";
		String requestHeader0206 = "GET " + requestFile0206 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0206, requestHost0206, requestPort0206, requestHeader0206, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0206 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/JPEG", header text fragment = [verification disabled], recorded content size = 206652
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/JPEG", null, null);		// Test [206] <- Index 206
		if(replayMode)
		{
			long proxyDataRecordId =1614262433915L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [207] <- WEB ADMIN Index 207 ---
		String requestProt0207 = "https";
		String requestHost0207 = "performancemanager4.successfactors.com";
		int    requestPort0207 = 443;
		String requestFile0207 = "/ec/ajax/remoting/call/plaincall/quickcardControllerProxy.getGoToLinks.dwr";
		String requestContent0207 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=quickcardControllerProxy" + "\r\n" + 
				"c0-methodName=getGoToLinks" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:TestAutomation" + "\r\n" + 
				"batchId=6";
		requestContent0207 = Lib.replaceTextPattern(requestContent0207, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0207 = "POST " + requestFile0207 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001a1a3d282-12a2-4c2d-9921-846f29d73f2129820909-1501-babe-face-00000000000359b6b28a-0fc2-4e63-a62f-cf752d7d9521HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0207.length() + "\r\n" + 		// Content-Length: 318
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0207, requestHost0207, requestPort0207, requestHeader0207, requestContent0207.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0207 = null;		// support garbage collector to reduce memory
		requestContent0207 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 513
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [207] <- Index 207
		if(replayMode)
		{
			long proxyDataRecordId =1614262434008L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [208] <- WEB ADMIN Index 208 ---
		String requestProt0208 = "https";
		String requestHost0208 = "performancemanager4.successfactors.com";
		int    requestPort0208 = 443;
		String requestFile0208 = "/ec/ajax/remoting/call/plaincall/ecHelpControllerProxy.getHelp.dwr";
		String requestContent0208 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=ecHelpControllerProxy" + "\r\n" + 
				"c0-methodName=getHelp" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:block212" + "\r\n" + 
				"c0-e2=string:block1" + "\r\n" + 
				"c0-e3=string:languages" + "\r\n" + 
				"c0-e4=string:courses" + "\r\n" + 
				"c0-e5=string:education" + "\r\n" + 
				"c0-e6=string:awards" + "\r\n" + 
				"c0-e7=string:outsideWorkExperience" + "\r\n" + 
				"c0-e8=string:insideWorkExperience" + "\r\n" + 
				"c0-e9=string:community" + "\r\n" + 
				"c0-e10=string:memberships" + "\r\n" + 
				"c0-e11=string:leadExperience" + "\r\n" + 
				"c0-e12=string:projectExposure" + "\r\n" + 
				"c0-e13=string:certificates" + "\r\n" + 
				"c0-e14=string:specialAssign" + "\r\n" + 
				"c0-e15=string:promotability" + "\r\n" + 
				"c0-e16=string:preferredNextMove" + "\r\n" + 
				"c0-e17=string:mobility" + "\r\n" + 
				"c0-e18=string:block2276" + "\r\n" + 
				"c0-e19=string:block2275" + "\r\n" + 
				"c0-e20=string:block2278" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1,reference:c0-e2,reference:c0-e3,reference:c0-e4,reference:c0-e5,reference:c0-e6,reference:c0-e7,reference:c0-e8,reference:c0-e9,reference:c0-e10,reference:c0-e11,reference:c0-e12,reference:c0-e13,reference:c0-e14,reference:c0-e15,reference:c0-e16,reference:c0-e17,reference:c0-e18,reference:c0-e19,reference:c0-e20]" + "\r\n" + 
				"batchId=7";
		requestContent0208 = Lib.replaceTextPattern(requestContent0208, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0208 = "POST " + requestFile0208 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500014a21324f-7192-42ec-8b2f-9a052a54332b29820909-1501-babe-face-00000000000313253273-b4c2-43f8-a424-91d42997902dHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0208.length() + "\r\n" + 		// Content-Length: 1143
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0208, requestHost0208, requestPort0208, requestHeader0208, requestContent0208.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0208 = null;		// support garbage collector to reduce memory
		requestContent0208 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 518
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [208] <- Index 208
		if(replayMode)
		{
			long proxyDataRecordId =1614262434271L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [209] <- WEB ADMIN Index 209 ---
		String requestProt0209 = "https";
		String requestHost0209 = "performancemanager4.successfactors.com";
		int    requestPort0209 = 443;
		String requestFile0209 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Bold.woff2";
		requestFile0209 = Lib.replaceTextPattern(requestFile0209, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace request file fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0209 = "GET " + requestFile0209 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/font-woff2;q=1.0,application/font-woff;q=0.9,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: identity\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0209, requestHost0209, requestPort0209, requestHeader0209, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0209 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 26732
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [209] <- Index 209
		if(replayMode)
		{
			long proxyDataRecordId =1614262434422L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [210] <- WEB ADMIN Index 210 ---
		String requestProt0210 = "https";
		String requestHost0210 = "performancemanager4.successfactors.com";
		int    requestPort0210 = 443;
		String requestFile0210 = "/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr";
		String requestContent0210 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=backgroundControllerProxy" + "\r\n" + 
				"c0-methodName=getWithPermission" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:education" + "\r\n" + 
				"c0-param1=string:TestAutomation" + "\r\n" + 
				"batchId=8";
		requestContent0210 = Lib.replaceTextPattern(requestContent0210, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0210 = "POST " + requestFile0210 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001e9c6d252-d392-4b3d-9d23-d8082aa8ae2229820909-1501-babe-face-000000000003b8441217-b412-4266-9020-18472c5b182cHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0210.length() + "\r\n" + 		// Content-Length: 351
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0210, requestHost0210, requestPort0210, requestHeader0210, requestContent0210.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0210 = null;		// support garbage collector to reduce memory
		requestContent0210 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 480
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [210] <- Index 210
		if(replayMode)
		{
			long proxyDataRecordId =1614262434641L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [211] <- WEB ADMIN Index 211 ---
		String requestProt0211 = "https";
		String requestHost0211 = "performancemanager4.successfactors.com";
		int    requestPort0211 = 443;
		String requestFile0211 = "/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr";
		String requestContent0211 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=backgroundControllerProxy" + "\r\n" + 
				"c0-methodName=getWithPermission" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:courses" + "\r\n" + 
				"c0-param1=string:TestAutomation" + "\r\n" + 
				"batchId=9";
		requestContent0211 = Lib.replaceTextPattern(requestContent0211, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0211 = "POST " + requestFile0211 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001b238520b-3202-4c70-b72e-f69e2d015b2829820909-1501-babe-face-000000000003638312a1-ad32-4d53-a62b-8cf92076c22fHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0211.length() + "\r\n" + 		// Content-Length: 349
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0211, requestHost0211, requestPort0211, requestHeader0211, requestContent0211.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0211 = null;		// support garbage collector to reduce memory
		requestContent0211 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 933
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [211] <- Index 211
		if(replayMode)
		{
			long proxyDataRecordId =1614262434649L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [212] <- WEB ADMIN Index 212 ---
		String requestProt0212 = "https";
		String requestHost0212 = "performancemanager4.successfactors.com";
		int    requestPort0212 = 443;
		String requestFile0212 = "/ec/ajax/remoting/call/plaincall/employeeInfoForPP3ControllerProxy.getUserInfo.dwr";
		String requestContent0212 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=employeeInfoForPP3ControllerProxy" + "\r\n" + 
				"c0-methodName=getUserInfo" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:TestAutomation" + "\r\n" + 
				"c0-param1=string:block1" + "\r\n" + 
				"batchId=10";
		requestContent0212 = Lib.replaceTextPattern(requestContent0212, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0212 = "POST " + requestFile0212 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 01000500014c508270-19b2-4631-8c2d-e2df234daf2129820909-1501-babe-face-0000000000036a68321e-ded2-4a87-9b26-231b20314925HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0212.length() + "\r\n" + 		// Content-Length: 351
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0212, requestHost0212, requestPort0212, requestHeader0212, requestContent0212.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0212 = null;		// support garbage collector to reduce memory
		requestContent0212 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 709
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [212] <- Index 212
		if(replayMode)
		{
			long proxyDataRecordId =1614262434658L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [213] <- WEB ADMIN Index 213 ---
		String requestProt0213 = "https";
		String requestHost0213 = "performancemanager4.successfactors.com";
		int    requestPort0213 = 443;
		String requestFile0213 = "/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr";
		String requestContent0213 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=backgroundControllerProxy" + "\r\n" + 
				"c0-methodName=getWithPermission" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:languages" + "\r\n" + 
				"c0-param1=string:TestAutomation" + "\r\n" + 
				"batchId=11";
		requestContent0213 = Lib.replaceTextPattern(requestContent0213, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0213 = "POST " + requestFile0213 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001dacd42d6-ac32-42d9-bf2f-d4062d34462b29820909-1501-babe-face-000000000003593df277-5942-4e5a-8a2f-e77d22a71b2dHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0213.length() + "\r\n" + 		// Content-Length: 352
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0213, requestHost0213, requestPort0213, requestHeader0213, requestContent0213.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0213 = null;		// support garbage collector to reduce memory
		requestContent0213 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 851
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [213] <- Index 213
		if(replayMode)
		{
			long proxyDataRecordId =1614262434729L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [214] <- WEB ADMIN Index 214 ---
		String requestProt0214 = "https";
		String requestHost0214 = "performancemanager4.successfactors.com";
		int    requestPort0214 = 443;
		String requestFile0214 = "/ec/ajax/remoting/call/plaincall/peopleNavigationControllerProxy.getEmployeesHierarchy.dwr";
		String requestContent0214 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=peopleNavigationControllerProxy" + "\r\n" + 
				"c0-methodName=getEmployeesHierarchy" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:TestAutomation" + "\r\n" + 
				"batchId=12";
		requestContent0214 = Lib.replaceTextPattern(requestContent0214, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0214 = "POST " + requestFile0214 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001dc303283-a482-4d95-a323-a12c2796072529820909-1501-babe-face-0000000000032ca242f1-4492-432b-bc2e-bc0d21105a29HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0214.length() + "\r\n" + 		// Content-Length: 335
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0214, requestHost0214, requestPort0214, requestHeader0214, requestContent0214.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0214 = null;		// support garbage collector to reduce memory
		requestContent0214 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 644
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "s1[0]=\"managers\";s1[1]=\"peers\";s1[2]=\"reports\";");		// Test [214] <- Index 214
		if(replayMode)
		{
			long proxyDataRecordId =1614262435008L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [215] <- WEB ADMIN Index 215 ---
		String requestProt0215 = "https";
		String requestHost0215 = "performancemanager4.successfactors.com";
		int    requestPort0215 = 443;
		String requestFile0215 = "/ui/topnav/js/SFResponsiveHeader_f6a888dde49f266a05fd47137fcde137.js";
		String requestHeader0215 = "GET " + requestFile0215 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0215, requestHost0215, requestPort0215, requestHeader0215, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0215 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1956
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [215] <- Index 215
		if(replayMode)
		{
			long proxyDataRecordId =1614262435090L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [216] <- WEB ADMIN Index 216 ---
		String requestProt0216 = "https";
		String requestHost0216 = "performancemanager4.successfactors.com";
		int    requestPort0216 = 443;
		String requestFile0216 = "/ui/quickcard/js/quickcard_c9df854e03a109ef0fd65a767e9abeed.js";
		String requestHeader0216 = "GET " + requestFile0216 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0216, requestHost0216, requestPort0216, requestHeader0216, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0216 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1492
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [216] <- Index 216
		if(replayMode)
		{
			long proxyDataRecordId =1614262435336L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [217] <- WEB ADMIN Index 217 ---
		String requestProt0217 = "https";
		String requestHost0217 = "performancemanager4.successfactors.com";
		int    requestPort0217 = 443;
		String requestFile0217 = "/eduPhoto/view" +
				"?companyId=Teck" +
				"&photo_action=show" +
				"&photo_type=liveProfile" +
				"&user_id=TestAutomation" +
				"&mod=";
		String requestHeader0217 = "GET " + requestFile0217 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0217, requestHost0217, requestPort0217, requestHeader0217, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0217 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [217] <- Index 217
		if(replayMode)
		{
			long proxyDataRecordId =1614262435468L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [218] <- WEB ADMIN Index 218 ---
		String requestProt0218 = "https";
		String requestHost0218 = "performancemanager4.successfactors.com";
		int    requestPort0218 = 443;
		String requestFile0218 = "/ec/ajax/remoting/call/plaincall/EssMssGlobalAssignmentNavigationControllerProxy.getNavigationItems.dwr";
		String requestContent0218 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=EssMssGlobalAssignmentNavigationControllerProxy" + "\r\n" + 
				"c0-methodName=getNavigationItems" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:TestAutomation" + "\r\n" + 
				"c0-param1=string:ECT_MSS" + "\r\n" + 
				"c0-param2=string:" + "\r\n" + 
				"c0-param3=string:2021-02-25" + "\r\n" + 
				"batchId=13";
		requestContent0218 = Lib.replaceTextPattern(requestContent0218, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0218 = "POST " + requestFile0218 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 0100050001c9a842d3-3972-415b-ad22-502427e2532c29820909-1501-babe-face-0000000000031866c283-3742-425e-8522-604a223a0125HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0218.length() + "\r\n" + 		// Content-Length: 419
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0218, requestHost0218, requestPort0218, requestHeader0218, requestContent0218.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0218 = null;		// support garbage collector to reduce memory
		requestContent0218 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 217
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "selfUser:true,v12ProfileEnabled:true}");		// Test [218] <- Index 218
		if(replayMode)
		{
			long proxyDataRecordId =1614262435540L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [219] <- WEB ADMIN Index 219 ---
		String requestProt0219 = "https";
		String requestHost0219 = "performancemanager4.successfactors.com";
		int    requestPort0219 = 443;
		String requestFile0219 = "/ec/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.getTimeoffStatus.dwr";
		String requestContent0219 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=employeeProfilePageConfigControllerProxy" + "\r\n" + 
				"c0-methodName=getTimeoffStatus" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=null:null" + "\r\n" + 
				"c0-param1=string:TestAutomation" + "\r\n" + 
				"batchId=14";
		requestContent0219 = Lib.replaceTextPattern(requestContent0219, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0219 = "POST " + requestFile0219 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"OPTR_CXT: 010005000183b7e236-49d2-4050-8321-9e38269cb42529820909-1501-babe-face-000000000003388ac240-12f2-4ea1-8523-f95a2df2fa26HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0219.length() + "\r\n" + 		// Content-Length: 359
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0219, requestHost0219, requestPort0219, requestHeader0219, requestContent0219.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0219 = null;		// support garbage collector to reduce memory
		requestContent0219 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 160
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [219] <- Index 219
		if(replayMode)
		{
			long proxyDataRecordId =1614262435547L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [220] <- WEB ADMIN Index 220 ---
		String requestProt0220 = "https";
		String requestHost0220 = "performancemanager4.successfactors.com";
		int    requestPort0220 = 443;
		String requestFile0220 = "/ui/uicore/css/fiori_cf10b97cbd8bd62757fdfeee76770415.css";
		String requestHeader0220 = "GET " + requestFile0220 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0220, requestHost0220, requestPort0220, requestHeader0220, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0220 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1312
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [220] <- Index 220
		if(replayMode)
		{
			long proxyDataRecordId =1614262435562L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [221] <- WEB ADMIN Index 221 ---
		String requestProt0221 = "https";
		String requestHost0221 = "performancemanager4.successfactors.com";
		int    requestPort0221 = 443;
		String requestFile0221 = "/ui/trial/js/sfGuidedTourRegistry_23bd2cabcfceb9fa1570e1e63c403eb6.js";
		String requestHeader0221 = "GET " + requestFile0221 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0221, requestHost0221, requestPort0221, requestHeader0221, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0221 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 239
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [221] <- Index 221
		if(replayMode)
		{
			long proxyDataRecordId =1614262435577L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 5 of 5)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [222] <- WEB ADMIN Index 222 ---
		String requestProt0222 = "https";
		String requestHost0222 = "performancemanager4.successfactors.com";
		int    requestPort0222 = 443;
		String requestFile0222 = "/xi/ajax/remoting/call/plaincall/showMeControllerProxy.signAPIUrl.dwr";
		String requestContent0222 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=showMeControllerProxy" + "\r\n" + 
				"c0-methodName=signAPIUrl" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:%2Fmedia%2Fshowme_ab3a783e_706e_40dd_a87a_a8283cabf42b%2FEMPLOYEE_FILE_PP3_MAIN%2Fstatus" + "\r\n" + 
				"c0-param1=string:EMPLOYEE_FILE_PP3_MAIN" + "\r\n" + 
				"c0-param2=string:9ce05637f1a5f3199a8cabc66b3fb042" + "\r\n" + 
				"batchId=15";
		requestContent0222 = Lib.replaceTextPattern(requestContent0222, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences
		requestContent0222 = Lib.replaceTextPattern(requestContent0222, "ab3a783e_706e_40dd_a87a_a8283cabf42b", C_CompanyGUID, 0);		// search and replace content fragment "ab3a783e_706e_40dd_a87a_a8283cabf42b" with variable 'C_CompanyGUID' on all occurrences

		String requestHeader0222 = "POST " + requestFile0222 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-ea7d7bf32ce3d04767c38e95d6629026-1bc59afd2c86a7fd-01\r\n" + 
				"OPTR_CXT: 01000500010405a26d-59a2-401e-8720-6dca219f8f2629820909-1501-babe-face-0000000000033d6342b6-6212-4c58-8e2b-fe7e2a1afb29HTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0222.length() + "\r\n" + 		// Content-Length: 478
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0222, requestHost0222, requestPort0222, requestHeader0222, requestContent0222.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0222 = null;		// support garbage collector to reduce memory
		requestContent0222 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 420
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [222] <- Index 222
		if(replayMode)
		{
			long proxyDataRecordId =1614262435677L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Token2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0222_1 = new BoundaryBasedExtractorItem( "token=" , "\");",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0222_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Token2'
			C_Token2 = boundaryBasedContentExtractorItem0222_1.getResultText();
			log("<<< C_Token2 = " + C_Token2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Token2!= null && C_Token2.trim().length() == 0)
			{
				C_Token2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Token2' ends up with an empty string - a substitute value was set");
				log("<<< C_Token2 = " + C_Token2);
			}
		}
		catch (Exception e) { C_Token2 = null; log(e); }
		if (C_Token2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Token2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [223] <- WEB ADMIN Index 223 ---
		String requestProt0223 = "https";
		String requestHost0223 = "performancemanager4.successfactors.com";
		int    requestPort0223 = 443;
		String requestFile0223 = "/odata/v4/NotificationService.svc/GetNumberOfNewNotifications(userId='TestAutomation')";
		String requestHeader0223 = "GET " + requestFile0223 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/json\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"traceparent: 00-ea7d7bf32ce3d04767c38e95d6629026-3e4421c42ff0b548-01\r\n" + 
				"OPTR_CXT: 0100050001ba51b2ed-ce12-4336-972b-a8dd2ad7f02629820909-1501-babe-face-000000000003f2f4b235-f9b2-478b-a322-179e2b8fd72cHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0223, requestHost0223, requestPort0223, requestHeader0223, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0223 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 195
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [223] <- Index 223
		if(replayMode)
		{
			long proxyDataRecordId =1614262435718L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [224] <- WEB ADMIN Index 224 ---
		String requestProt0224 = "https";
		String requestHost0224 = "performancemanager4.successfactors.com";
		int    requestPort0224 = 443;
		String requestFile0224 = "/public/ui-resource/Teck/202;mod=3a197762f867d55aceaee0bb261f6b2b";
		String requestHeader0224 = "GET " + requestFile0224 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0224, requestHost0224, requestPort0224, requestHeader0224, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0224 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 2609
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [224] <- Index 224
		if(replayMode)
		{
			long proxyDataRecordId =1614262435726L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [225] <- WEB ADMIN Index 225 ---
		String requestProt0225 = "https";
		String requestHost0225 = "performancemanager4.successfactors.com";
		int    requestPort0225 = 443;
		String requestFile0225 = "/ec/ajax/remoting/call/plaincall/EDUPercentCompleteControllerProxy.getCompletePercentForPP3.dwr";
		String requestContent0225 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=EDUPercentCompleteControllerProxy" + "\r\n" + 
				"c0-methodName=getCompletePercentForPP3" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:TestAutomation" + "\r\n" + 
				"batchId=16";
		requestContent0225 = Lib.replaceTextPattern(requestContent0225, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0225 = "POST " + requestFile0225 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-ea7d7bf32ce3d04767c38e95d6629026-b04ee2a9eea09173-01\r\n" + 
				"OPTR_CXT: 010005000137fef203-13b2-45ef-b122-ddb323842a2629820909-1501-babe-face-000000000003e3bba24c-4402-41a1-ba20-11ba21eb692dHTTP    ;\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0225.length() + "\r\n" + 		// Content-Length: 340
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0225, requestHost0225, requestPort0225, requestHeader0225, requestContent0225.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0225 = null;		// support garbage collector to reduce memory
		requestContent0225 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 125
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [225] <- Index 225
		if(replayMode)
		{
			long proxyDataRecordId =1614262436011L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [226] <- WEB ADMIN Index 226 ---
		String requestProt0226 = "https";
		String requestHost0226 = "azprod.ms.successfactors.com";
		int    requestPort0226 = 443;
		String requestFile0226 = "/mediaservice/api/v2/media/showme_ab3a783e_706e_40dd_a87a_a8283cabf42b/EMPLOYEE_FILE_PP3_MAIN/status" +
				"?token=" + C_Token2 +		// recorded value = bacb6a1a8ac071f910a52bbb4c9cca43f8d1b7c759ec1c5596278745f950f010072e79ca7578ed43283e6255cb6886c85cd8d2754179245fea4c203192bf4475,3043664836473412406,1614264235,1
				"&callback=sfDeferredUtilCallback0";
		requestFile0226 = Lib.replaceTextPattern(requestFile0226, "bacb6a1a8ac071f910a52bbb4c9cca43f8d1b7c759ec1c5596278745f950f010072e79ca7578ed43283e6255cb6886c85cd8d2754179245fea4c203192bf4475,3043664836473412406,1614264235,1", C_Token2, 0);		// search and replace request file fragment "bacb6a1a8ac071f910a52bbb4c9cca43f8d1b7c759ec1c5596278745f950f010072e79ca7578ed43283e6255cb6886c85cd8d2754179245fea4c203192bf4475,3043664836473412406,1614264235,1" with variable 'C_Token2' on all occurrences
		requestFile0226 = Lib.replaceTextPattern(requestFile0226, "ab3a783e_706e_40dd_a87a_a8283cabf42b", C_CompanyGUID, 0);		// search and replace request file fragment "ab3a783e_706e_40dd_a87a_a8283cabf42b" with variable 'C_CompanyGUID' on all occurrences

		String requestHeader0226 = "GET " + requestFile0226 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: azprod.ms.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0226, requestHost0226, requestPort0226, requestHeader0226, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0226 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 142
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "state\":\"NotExists\"}");		// Test [226] <- Index 226
		if(replayMode)
		{
			long proxyDataRecordId =1614262436069L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [227] <- WEB ADMIN Index 227 ---
		String requestProt0227 = "https";
		String requestHost0227 = "performancemanager4.successfactors.com";
		int    requestPort0227 = 443;
		String requestFile0227 = "/perfLogServlet" +
				"?callId=9919215297-0" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=9269" +
				"&TIP=9983" +
				"&TML=10215" +
				"&ST=1614262423811" +
				"&STC=1614262423212" +
				"&ETC=1614262437013" +
				"&MEM=352679" +
				"&NRE=1171" +
				"&NWR=538" +
				"&SCPU=100" +
				"&SQLC=433" +
				"&SQLT=482" +
				"&SVT=2663" +
				"&UCPU=1370" +
				"&CPU=1470" +
				"&FRE=1993" +
				"&FWR=0" +
				"&CCON=41" +
				"&CSUP=687" +
				"&CLOC=346" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=40" +
				"&cssNum=14" +
				"&renderTime=11871" +
				"&TTB=8" +
				"&RSR=1771" +
				"&DIA=3197" +
				"&DCP=10110";
		String requestContent0227 = 
				"OPTR_INFO=f1fb8255-d112-4a5c-a125-830621803129!1614262425605!1614262425861!0" +
				"&OPTR_INFO=c71412cd-4782-4818-a32d-610f2d1cde24!1614262425917!1614262425927!0" +
				"&OPTR_INFO=fee2626d-fdd2-4690-8820-b19e29c67d23!1614262425948!1614262426245!0" +
				"&OPTR_INFO=6fb7522f-ce92-49e0-8c24-78c1296fef2f!1614262426385!1614262426395!0" +
				"&OPTR_INFO=aaf57751-7773-11eb-9dce-e7f903d24901!1614262423214!1614262426410!1" +
				"&OPTR_INFO=798e6254-6792-4519-a822-b824235b862f!1614262426425!1614262426428!0" +
				"&OPTR_INFO=f8dd32d7-59e2-4141-bc2f-7ea22b0ab821!1614262426430!1614262426433!0" +
				"&OPTR_INFO=358642a3-dcb2-4e00-a920-546420a0a920!1614262426434!1614262426437!0" +
				"&OPTR_INFO=51615271-d6d2-452c-822b-88462cde2b20!1614262426438!1614262426441!0" +
				"&OPTR_INFO=a55d9200-9762-42a7-9e20-4fc12d3b6d2c!1614262426461!1614262426464!0" +
				"&OPTR_INFO=53e76210-baf2-4ff7-b522-0b62286d292d!1614262426469!1614262426475!0" +
				"&OPTR_INFO=62e672fd-d102-4a61-b327-b9392e954426!1614262426476!1614262426480!0" +
				"&OPTR_INFO=8303625b-b0f2-4974-882e-ecc62387be27!1614262426485!1614262426489!0" +
				"&OPTR_INFO=efd962dc-f9a2-4b2d-af28-8cf32b25ed2a!1614262426491!1614262426494!0" +
				"&OPTR_INFO=a06ac2dc-e7e2-4656-9c2b-0bb22892212f!1614262426494!1614262426497!0" +
				"&OPTR_INFO=9413d293-a902-4fbc-a42c-53b72d7f2824!1614262426519!1614262426523!0" +
				"&OPTR_INFO=c72722b3-f9d2-4e58-b222-2a0428a56c2a!1614262426545!1614262426876!0" +
				"&OPTR_INFO=6db75224-e222-4b7c-ae29-26b92491d121!1614262426967!1614262427075!0" +
				"&OPTR_INFO=c8150241-56f2-437b-b227-448c28fcca20!1614262427083!1614262427634!0" +
				"&OPTR_INFO=c768b27a-6962-4dc3-b926-b582295a862d!1614262427733!1614262427842!0" +
				"&OPTR_INFO=8857622c-d712-4113-b22a-b0dc2fd3202f!1614262427881!1614262427984!0" +
				"&OPTR_INFO=6bdaa22d-7812-4d0a-9323-027e2f13452f!1614262427987!1614262428096!0" +
				"&OPTR_INFO=4ac40230-a292-4aee-b029-7cc02a56c326!1614262428104!1614262428229!0" +
				"&OPTR_INFO=fe1052d8-11e2-474f-8b22-e25c2cf3c92f!1614262428230!1614262428324!0" +
				"&OPTR_INFO=99b022cf-dcd2-4d6f-8a2e-dbc12ec2a62a!1614262428334!1614262428426!0" +
				"&OPTR_INFO=0e76f2b6-a742-40fd-952b-236827206c25!1614262428447!1614262428543!0" +
				"&OPTR_INFO=57eba250-68b2-4ec1-8f2b-f3432995e42d!1614262428545!1614262428694!0" +
				"&OPTR_INFO=baa1726f-98f2-40b9-a728-fb3e20a0d92d!1614262428698!1614262428813!0" +
				"&OPTR_INFO=424572f9-7522-4158-ae2f-57fe2243e02b!1614262428817!1614262428944!0" +
				"&OPTR_INFO=457da223-8102-457c-8927-132927030c2f!1614262428947!1614262429073!0" +
				"&OPTR_INFO=01883265-4f42-4344-a429-7da427f6b822!1614262429078!1614262429200!0" +
				"&OPTR_INFO=c733f24f-2302-41a6-8125-8b3325147829!1614262429213!1614262429337!0" +
				"&OPTR_INFO=40b54205-ba62-4fcb-b921-5e852b68bf2d!1614262429478!1614262429497!0" +
				"&OPTR_INFO=66f79259-63b2-4c9b-b62d-4c5d2981f329!1614262429559!1614262429777!0" +
				"&OPTR_INFO=a3300221-ca92-480a-a02a-d4e62858c72e!1614262429798!1614262430030!0" +
				"&OPTR_INFO=3c7fd23d-ffa2-477e-9d26-8fa8232df62f!1614262430041!1614262430177!0" +
				"&OPTR_INFO=77ba7231-a9b2-4d31-a626-97e825528a28!1614262430188!1614262430390!0" +
				"&OPTR_INFO=2d40c272-1312-4111-b620-31a727cfbd2d!1614262430397!1614262430526!0" +
				"&OPTR_INFO=2ff2022e-0112-416b-bf27-4fb52a7c4b25!1614262430530!1614262430650!0" +
				"&OPTR_INFO=d7df12c8-14e2-4319-b62b-94832549692f!1614262430652!1614262430769!0" +
				"&OPTR_INFO=98504290-85a2-4ffc-b42c-ef122d03912e!1614262430773!1614262430950!0" +
				"&OPTR_INFO=6c79b234-f742-4b88-ac23-b8a82670072d!1614262430959!1614262431167!0" +
				"&OPTR_INFO=1f9b327e-2652-4d23-ad25-f52127ddfa2d!1614262431226!1614262431241!0" +
				"&OPTR_INFO=d6e102cb-6b02-487b-992d-01002e12c42f!1614262431271!1614262431291!0" +
				"&OPTR_INFO=168ef2d8-a442-49be-a827-052c286ad224!1614262431388!1614262431492!0" +
				"&OPTR_INFO=d4086223-81d2-4106-ad2d-d75320fd2223!1614262431496!1614262431509!0" +
				"&OPTR_INFO=6c4f020f-7de2-43a7-9825-ccce29913a2e!1614262431540!1614262431652!0" +
				"&OPTR_INFO=777a424a-ddf2-4519-a026-11ca2bcde026!1614262431662!1614262432094!0" +
				"&OPTR_INFO=4b3aa299-f522-4753-bf26-815920e04d2e!1614262432143!1614262432312!0" +
				"&OPTR_INFO=918db2b1-4812-49d9-8a2b-2ec723974026!1614262432408!1614262432517!0" +
				"&OPTR_INFO=44c0b25e-20c2-49f7-bc26-600c2b22952f!1614262432535!1614262432779!0" +
				"&OPTR_INFO=bd3c92a9-d2f2-45b6-bf25-4f5b210a6021!1614262432619!1614262433106!0" +
				"&OPTR_INFO=3e3002dd-e6b2-4e7f-8c2b-382a2950f527!1614262432735!1614262432874!0" +
				"&OPTR_INFO=2b48a234-32c2-40e6-9b21-a56a2c0ea025!1614262433093!1614262433879!0" +
				"&OPTR_INFO=d0c1823e-c582-405c-9d2c-d2952daa1f2f!1614262433105!1614262433489!0" +
				"&OPTR_INFO=b281421a-4882-4576-ab26-6e8c2da88d26!1614262433265!1614262433736!0" +
				"&OPTR_INFO=57ffd2ef-d842-4002-8b23-eff626082328!1614262433481!1614262433996!0" +
				"&OPTR_INFO=bf8b121e-df22-46d6-a02f-8b152a72fc20!1614262433485!1614262434252!0" +
				"&OPTR_INFO=a1a3d282-12a2-4c2d-9921-846f29d73f21!1614262433995!1614262434972!0" +
				"&OPTR_INFO=4a21324f-7192-42ec-8b2f-9a052a54332b!1614262434255!1614262434724!0" +
				"&OPTR_INFO=e9c6d252-d392-4b3d-9d23-d8082aa8ae22!1614262434630!1614262435155!0" +
				"&OPTR_INFO=b238520b-3202-4c70-b72e-f69e2d015b28!1614262434636!1614262435094!0" +
				"&OPTR_INFO=4c508270-19b2-4631-8c2d-e2df234daf21!1614262434646!1614262435203!0" +
				"&OPTR_INFO=dacd42d6-ac32-42d9-bf2f-d4062d34462b!1614262434656!1614262435325!0" +
				"&OPTR_INFO=dc303283-a482-4d95-a323-a12c27960725!1614262434683!1614262435444!0" +
				"&OPTR_INFO=c9a842d3-3972-415b-ad22-502427e2532c!1614262435473!1614262436110!0" +
				"&OPTR_INFO=83b7e236-49d2-4050-8321-9e38269cb425!1614262435476!1614262435934!0" +
				"&OPTR_INFO=31d92281-f1c2-4b81-9d2a-cd922f7a022c!1614262435607!1614262435610!0" +
				"&OPTR_INFO=12152223-bc42-4880-bb29-2325212c4326!1614262435612!1614262435615!0" +
				"&OPTR_INFO=4b609281-e572-4ee2-b02b-b71e23934426!1614262435616!1614262435620!0" +
				"&OPTR_INFO=a01e929c-2e42-4d76-892a-60062090a12c!1614262435621!1614262435624!0" +
				"&OPTR_INFO=2b98e252-b622-44a8-aa21-f10d27c06d24!1614262435651!1614262435661!0" +
				"&OPTR_INFO=0405a26d-59a2-401e-8720-6dca219f8f26!1614262435665!1614262436026!0" +
				"&OPTR_INFO=ba51b2ed-ce12-4336-972b-a8dd2ad7f026!1614262435704!1614262436204!0" +
				"&OPTR_INFO=37fef203-13b2-45ef-b122-ddb323842a26!1614262435976!1614262436910!0";
		String requestHeader0227 = "POST " + requestFile0227 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Req-Hash: XutZkt8EnapXeNGwuceUfcGqiqNfmuvebLqkPmBaOubkm2KfqLlHm5D3ht0pespKxvnrfotRSIJ3LYXik5qaPbZAa6qwb3tLP3ynSZSkYXmhR6erpuu0d3VMdIVYLFpuJ1IKHq\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895\r\n" + 
				"traceparent: 00-47e4d59df160f94ced02b0aae5df9bb4-c2ffd7c244f39eb1-01\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0227.length() + "\r\n" + 		// Content-Length: 5774
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0227, requestHost0227, requestPort0227, requestHeader0227, requestContent0227.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0227 = null;		// support garbage collector to reduce memory
		requestContent0227 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [227] <- Index 227
		if(replayMode)
		{
			long proxyDataRecordId =1614262437035L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [228] <- WEB ADMIN Index 228 ---
		String requestProt0228 = "https";
		String requestHost0228 = "performancemanager4.successfactors.com";
		int    requestPort0228 = 443;
		String requestFile0228 = "/intake/v2/rum/events";
		String requestContent0228 = 
				requestFileCache.readFile(getSymmetricEncryptContext(), "UpdateEmoloyeeProfile_PROD_SM_RequestContent0228.txt").getFileDataAsString();		// note: consider duplicated definition of this file name near end of the load test program - used for ZIP-dialogue in Project Navigator
		requestContent0228 = Lib.replaceTextPattern(requestContent0228, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences
		requestContent0228 = Lib.replaceTextPattern(requestContent0228, "bacb6a1a8ac071f910a52bbb4c9cca43f8d1b7c759ec1c5596278745f950f010072e79ca7578ed43283e6255cb6886c85cd8d2754179245fea4c203192bf4475,3043664836473412406,1614264235,1", C_Token2, 0);		// search and replace content fragment "bacb6a1a8ac071f910a52bbb4c9cca43f8d1b7c759ec1c5596278745f950f010072e79ca7578ed43283e6255cb6886c85cd8d2754179245fea4c203192bf4475,3043664836473412406,1614264235,1" with variable 'C_Token2' on all occurrences
		requestContent0228 = Lib.replaceTextPattern(requestContent0228, "ab3a783e_706e_40dd_a87a_a8283cabf42b", C_CompanyGUID, 0);		// search and replace content fragment "ab3a783e_706e_40dd_a87a_a8283cabf42b" with variable 'C_CompanyGUID' on all occurrences
		requestContent0228 = Lib.replaceTextPattern(requestContent0228, "D2FBCA9166B3AFEB7104A5B9A96FB672", C_Merge1, 0);		// search and replace content fragment "D2FBCA9166B3AFEB7104A5B9A96FB672" with variable 'C_Merge1' on all occurrences

		String requestHeader0228 = "POST " + requestFile0228 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0228.length() + "\r\n" + 		// Content-Length: 129306
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0228, requestHost0228, requestPort0228, requestHeader0228, requestContent0228.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0228 = null;		// support garbage collector to reduce memory
		requestContent0228 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [228] <- Index 228
		if(replayMode)
		{
			long proxyDataRecordId =1614262437476L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [229] <- WEB ADMIN Index 229 ---
		String requestProt0229 = "https";
		String requestHost0229 = "performancemanager4.successfactors.com";
		int    requestPort0229 = 443;
		String requestFile0229 = "/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr";
		String requestContent0229 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=backgroundControllerProxy" + "\r\n" + 
				"c0-methodName=getWithPermission" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:awards" + "\r\n" + 
				"c0-param1=string:TestAutomation" + "\r\n" + 
				"batchId=17";
		requestContent0229 = Lib.replaceTextPattern(requestContent0229, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0229 = "POST " + requestFile0229 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-7881425f2732887b2e810e11ea4669fc-01fb207681e36204-01\r\n" + 
				"OPTR_CXT: 01000500010e6b623a-f062-4240-a92f-4f9229838a2229820909-1501-babe-face-000000000003b529b2aa-1432-46b9-8627-b25429f2552bHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-1\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0229.length() + "\r\n" + 		// Content-Length: 349
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0229, requestHost0229, requestPort0229, requestHeader0229, requestContent0229.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0229 = null;		// support garbage collector to reduce memory
		requestContent0229 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 811
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [229] <- Index 229
		if(replayMode)
		{
			long proxyDataRecordId =1614262449687L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [230] <- WEB ADMIN Index 230 ---
		String requestProt0230 = "https";
		String requestHost0230 = "performancemanager4.successfactors.com";
		int    requestPort0230 = 443;
		String requestFile0230 = "/perfLogServlet" +
				"?callId=9919215297-1" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=9269" +
				"&TIP=9983" +
				"&TML=10215" +
				"&TSL=25444" +
				"&ST=1614262449664" +
				"&ET=1614262450539" +
				"&MEM=4765" +
				"&NRE=5" +
				"&NWR=4" +
				"&SCPU=10" +
				"&SQLC=5" +
				"&SQLT=7" +
				"&SVT=37" +
				"&UCPU=20" +
				"&CPU=30" +
				"&FRE=0" +
				"&FWR=0" +
				"&CCON=3" +
				"&CSUP=10" +
				"&CLOC=4" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=40" +
				"&cssNum=14" +
				"&renderTime=770" +
				"&TTB=8" +
				"&RSR=1771" +
				"&DIA=3197" +
				"&DCP=10110";
		String requestContent0230 = 
				"OPTR_INFO=0e6b623a-f062-4240-a92f-4f9229838a22!1614262449665!1614262450435!0";
		String requestHeader0230 = "POST " + requestFile0230 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Req-Hash: aQqCktK8h9uBp7vu4OUbj77Xl6NNgLeqRJt8Q4BURpF5WZx2brCrebuXeL3vLK42ipZGNYOmYWQXBDehW2RFHWA3C0lqOmllFktiQo_HJSFnQIVqVatwNK7ZbteLHV6AFauqcq\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-1\r\n" + 
				"traceparent: 00-007e56eafdcca67f5cb8a97e62e9824b-cca1a5b7855b1bca-01\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0230.length() + "\r\n" + 		// Content-Length: 76
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0230, requestHost0230, requestPort0230, requestHeader0230, requestContent0230.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0230 = null;		// support garbage collector to reduce memory
		requestContent0230 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [230] <- Index 230
		if(replayMode)
		{
			long proxyDataRecordId =1614262450572L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [231] <- WEB ADMIN Index 231 ---
		String requestProt0231 = "https";
		String requestHost0231 = "performancemanager4.successfactors.com";
		int    requestPort0231 = 443;
		String requestFile0231 = "/intake/v2/rum/events";
		String requestContent0231 = 
				"{\"metadata\":{\"service\":{\"name\":\"bizx-cf-web\",\"agent\":{\"name\":\"rum-js\",\"version\":\"5.5.0\"},\"language\":{\"name\":\"javascript\"},\"environment\":\"production\"}}}" + "\r\n" + 
				"{\"transaction\":{\"id\":\"689d983a495aa185\",\"trace_id\":\"7881425f2732887b2e810e11ea4669fc\",\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"type\":\"http-request\",\"duration\":771,\"context\":{\"page\":{\"referer\":\"https://performancemanager4.successfactors.com/sf/start?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d\",\"url\":\"https://performancemanager4.successfactors.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d\"}},\"span_count\":{\"started\":1},\"sampled\":true}}" + "\r\n" + 
				"{\"span\":{\"id\":\"01fb207681e36204\",\"transaction_id\":\"689d983a495aa185\",\"parent_id\":\"689d983a495aa185\",\"trace_id\":\"7881425f2732887b2e810e11ea4669fc\",\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":1,\"duration\":770,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"type\":\"http-request\"},\"samples\":{\"transaction.duration.count\":{\"value\":1},\"transaction.duration.sum.us\":{\"value\":771},\"transaction.breakdown.count\":{\"value\":1}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"app\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":1}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"external\",\"subtype\":\"http\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":770}}}}";
		requestContent0231 = Lib.replaceTextPattern(requestContent0231, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0231 = "POST " + requestFile0231 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0231.length() + "\r\n" + 		// Content-Length: 2268
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0231, requestHost0231, requestPort0231, requestHeader0231, requestContent0231.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0231 = null;		// support garbage collector to reduce memory
		requestContent0231 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [231] <- Index 231
		if(replayMode)
		{
			long proxyDataRecordId =1614262450967L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #6.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #6: addLangskills
		// # ----------------------



		// --- HTTP REQUEST: Test [233] <- WEB ADMIN Index 233 ---
		String requestProt0233 = "https";
		String requestHost0233 = "performancemanager4.successfactors.com";
		int    requestPort0233 = 443;
		String requestFile0233 = "/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr";
		String requestContent0233 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=backgroundControllerProxy" + "\r\n" + 
				"c0-methodName=getWithPermission" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:languages" + "\r\n" + 
				"c0-param1=string:TestAutomation" + "\r\n" + 
				"batchId=18";
		requestContent0233 = Lib.replaceTextPattern(requestContent0233, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0233 = "POST " + requestFile0233 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-a90b239dbd1c42046eaa9c6d31114f51-a3883926928844c3-01\r\n" + 
				"OPTR_CXT: 0100050001441bc2bd-7b32-4183-982e-ed302578042229820909-1501-babe-face-000000000003316f8222-f132-4f05-9128-55672e57e62cHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0233.length() + "\r\n" + 		// Content-Length: 352
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0233, requestHost0233, requestPort0233, requestHeader0233, requestContent0233.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0233 = null;		// support garbage collector to reduce memory
		requestContent0233 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 851
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [233] <- Index 233
		if(replayMode)
		{
			long proxyDataRecordId =1614262467028L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [234] <- WEB ADMIN Index 234 ---
		String requestProt0234 = "https";
		String requestHost0234 = "performancemanager4.successfactors.com";
		int    requestPort0234 = 443;
		String requestFile0234 = "/ec/ajax/remoting/call/plaincall/ecHelpControllerProxy.getHelp.dwr";
		String requestContent0234 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=ecHelpControllerProxy" + "\r\n" + 
				"c0-methodName=getHelp" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=null:null" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"batchId=19";
		requestContent0234 = Lib.replaceTextPattern(requestContent0234, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0234 = "POST " + requestFile0234 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-a90b239dbd1c42046eaa9c6d31114f51-dfbb6e3c1cad42b7-01\r\n" + 
				"OPTR_CXT: 01000500010a65f2f1-ce02-4e35-882d-e7902481432729820909-1501-babe-face-00000000000395af126b-88a2-4ff3-9e29-9276291acd28HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0234.length() + "\r\n" + 		// Content-Length: 329
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0234, requestHost0234, requestPort0234, requestHeader0234, requestContent0234.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0234 = null;		// support garbage collector to reduce memory
		requestContent0234 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 519
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [234] <- Index 234
		if(replayMode)
		{
			long proxyDataRecordId =1614262467534L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [235] <- WEB ADMIN Index 235 ---
		String requestProt0235 = "https";
		String requestHost0235 = "performancemanager4.successfactors.com";
		int    requestPort0235 = 443;
		String requestFile0235 = "/ec/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.getBlockLink.dwr";
		String requestContent0235 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=employeeProfilePageConfigControllerProxy" + "\r\n" + 
				"c0-methodName=getBlockLink" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:block34" + "\r\n" + 
				"batchId=20";
		requestContent0235 = Lib.replaceTextPattern(requestContent0235, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0235 = "POST " + requestFile0235 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-a90b239dbd1c42046eaa9c6d31114f51-e9863439e78e0266-01\r\n" + 
				"OPTR_CXT: 010005000129b622ba-8dc2-401d-9f2b-9fdc247c362129820909-1501-babe-face-0000000000033bfbe2e2-cd92-4ef5-9a2f-b7f126f7a92bHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-2\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0235.length() + "\r\n" + 		// Content-Length: 328
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0235, requestHost0235, requestPort0235, requestHeader0235, requestContent0235.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0235 = null;		// support garbage collector to reduce memory
		requestContent0235 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 116
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [235] <- Index 235
		if(replayMode)
		{
			long proxyDataRecordId =1614262467560L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [236] <- WEB ADMIN Index 236 ---
		String requestProt0236 = "https";
		String requestHost0236 = "performancemanager4.successfactors.com";
		int    requestPort0236 = 443;
		String requestFile0236 = "/perfLogServlet" +
				"?callId=9919215297-2" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=9269" +
				"&TIP=9983" +
				"&TML=10215" +
				"&TSL=25444" +
				"&ST=1614262467010" +
				"&ET=1614262468044" +
				"&MEM=19314" +
				"&NRE=25" +
				"&NWR=23" +
				"&SCPU=10" +
				"&SQLC=30" +
				"&SQLT=39" +
				"&SVT=170" +
				"&UCPU=110" +
				"&CPU=120" +
				"&FRE=19" +
				"&FWR=0" +
				"&CCON=3" +
				"&CSUP=19" +
				"&CLOC=4" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=40" +
				"&cssNum=14" +
				"&renderTime=931" +
				"&TTB=8" +
				"&RSR=1771" +
				"&DIA=3197" +
				"&DCP=10110";
		String requestContent0236 = 
				"OPTR_INFO=441bc2bd-7b32-4183-982e-ed3025780422!1614262467010!1614262467550!0" +
				"&OPTR_INFO=0a65f2f1-ce02-4e35-882d-e79024814327!1614262467522!1614262467908!0" +
				"&OPTR_INFO=29b622ba-8dc2-401d-9f2b-9fdc247c3621!1614262467549!1614262467941!0";
		String requestHeader0236 = "POST " + requestFile0236 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Req-Hash: mhG1nLBPnwzjnwngmaW2XvXlz8ahyKrborJ7NGNlDdy5cKhnYsy_iriTkrxqOZlNbrqdTYugK4qwd2u9XaKpY2-GFExhP1NzHEEYI1h9OzFAMlV0JbGhVH-YS1OfS1YX6ZNAS4\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-2\r\n" + 
				"traceparent: 00-8b3cf7b924d9b6b256911088e5dd6fae-d49326244e5f2d7d-01\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0236.length() + "\r\n" + 		// Content-Length: 230
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0236, requestHost0236, requestPort0236, requestHeader0236, requestContent0236.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0236 = null;		// support garbage collector to reduce memory
		requestContent0236 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [236] <- Index 236
		if(replayMode)
		{
			long proxyDataRecordId =1614262468075L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [237] <- WEB ADMIN Index 237 ---
		String requestProt0237 = "https";
		String requestHost0237 = "performancemanager4.successfactors.com";
		int    requestPort0237 = 443;
		String requestFile0237 = "/intake/v2/rum/events";
		String requestContent0237 = 
				"{\"metadata\":{\"service\":{\"name\":\"bizx-cf-web\",\"agent\":{\"name\":\"rum-js\",\"version\":\"5.5.0\"},\"language\":{\"name\":\"javascript\"},\"environment\":\"production\"}}}" + "\r\n" + 
				"{\"transaction\":{\"id\":\"1d6d136a4a2e7f68\",\"trace_id\":\"a90b239dbd1c42046eaa9c6d31114f51\",\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"type\":\"http-request\",\"duration\":931,\"context\":{\"page\":{\"referer\":\"https://performancemanager4.successfactors.com/sf/start?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d\",\"url\":\"https://performancemanager4.successfactors.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d\"}},\"span_count\":{\"started\":3},\"sampled\":true}}" + "\r\n" + 
				"{\"span\":{\"id\":\"a3883926928844c3\",\"transaction_id\":\"1d6d136a4a2e7f68\",\"parent_id\":\"1d6d136a4a2e7f68\",\"trace_id\":\"a90b239dbd1c42046eaa9c6d31114f51\",\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":0,\"duration\":540,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"span\":{\"id\":\"dfbb6e3c1cad42b7\",\"transaction_id\":\"1d6d136a4a2e7f68\",\"parent_id\":\"1d6d136a4a2e7f68\",\"trace_id\":\"a90b239dbd1c42046eaa9c6d31114f51\",\"name\":\"POST /ec/ajax/remoting/call/plaincall/ecHelpControllerProxy.getHelp.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":511,\"duration\":386,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/ec/ajax/remoting/call/plaincall/ecHelpControllerProxy.getHelp.dwr\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"span\":{\"id\":\"e9863439e78e0266\",\"transaction_id\":\"1d6d136a4a2e7f68\",\"parent_id\":\"1d6d136a4a2e7f68\",\"trace_id\":\"a90b239dbd1c42046eaa9c6d31114f51\",\"name\":\"POST /ec/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.getBlockLink.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":539,\"duration\":392,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/ec/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.getBlockLink.dwr\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"type\":\"http-request\"},\"samples\":{\"transaction.duration.count\":{\"value\":1},\"transaction.duration.sum.us\":{\"value\":931},\"transaction.breakdown.count\":{\"value\":1}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"app\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":0}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"external\",\"subtype\":\"http\"},\"samples\":{\"span.self_time.count\":{\"value\":3},\"span.self_time.sum.us\":{\"value\":1318}}}}";
		requestContent0237 = Lib.replaceTextPattern(requestContent0237, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0237 = "POST " + requestFile0237 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0237.length() + "\r\n" + 		// Content-Length: 3691
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0237, requestHost0237, requestPort0237, requestHeader0237, requestContent0237.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0237 = null;		// support garbage collector to reduce memory
		requestContent0237 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [237] <- Index 237
		if(replayMode)
		{
			long proxyDataRecordId =1614262468479L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #6 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #7: EnterSkillsDetails
		// # ---------------------------



		// --- HTTP REQUEST: Test [239] <- WEB ADMIN Index 239 ---
		String requestProt0239 = "https";
		String requestHost0239 = "performancemanager4.successfactors.com";
		int    requestPort0239 = 443;
		String requestFile0239 = "/xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr";
		String requestContent0239 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=picklistControllerProxy" + "\r\n" + 
				"c0-methodName=getPicklistByPage" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=null:null" + "\r\n" + 
				"c0-param1=string:language" + "\r\n" + 
				"c0-e1=number:1" + "\r\n" + 
				"c0-e2=number:0" + "\r\n" + 
				"c0-e3=number:7" + "\r\n" + 
				"c0-e4=number:0" + "\r\n" + 
				"c0-e5=number:6" + "\r\n" + 
				"c0-e6=null:null" + "\r\n" + 
				"c0-e7=null:null" + "\r\n" + 
				"c0-e8=null:null" + "\r\n" + 
				"c0-param2=Object_Object:{pageNumber:reference:c0-e1, pageIndex:reference:c0-e2, pageSize:reference:c0-e3, startIndex:reference:c0-e4, endIndex:reference:c0-e5, filterType:reference:c0-e6, filterValue:reference:c0-e7, parentOptionId:reference:c0-e8}" + "\r\n" + 
				"c0-param3=number:0" + "\r\n" + 
				"c0-param4=boolean:true" + "\r\n" + 
				"c0-param5=null:null" + "\r\n" + 
				"batchId=21";
		requestContent0239 = Lib.replaceTextPattern(requestContent0239, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0239 = "POST " + requestFile0239 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-f014240e8174b61c71e6a7c3857cd102-5e31fcd2e8f4ae09-01\r\n" + 
				"OPTR_CXT: 0100050001348a62d3-e692-4610-b126-b6d929fd8c2329820909-1501-babe-face-0000000000038cdad27a-8bf2-426d-a22b-53b624c40f2bHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-3\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0239.length() + "\r\n" + 		// Content-Length: 771
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0239, requestHost0239, requestPort0239, requestHeader0239, requestContent0239.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0239 = null;		// support garbage collector to reduce memory
		requestContent0239 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 839
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [239] <- Index 239
		if(replayMode)
		{
			long proxyDataRecordId =1614262480486L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [240] <- WEB ADMIN Index 240 ---
		String requestProt0240 = "https";
		String requestHost0240 = "performancemanager4.successfactors.com";
		int    requestPort0240 = 443;
		String requestFile0240 = "/perfLogServlet" +
				"?callId=9919215297-3" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=9269" +
				"&TIP=9983" +
				"&TML=10215" +
				"&TSL=25444" +
				"&ST=1614262480468" +
				"&ET=1614262481492" +
				"&MEM=10564" +
				"&NRE=7" +
				"&NWR=6" +
				"&SCPU=10" +
				"&SQLC=6" +
				"&SQLT=181" +
				"&SVT=287" +
				"&UCPU=60" +
				"&CPU=70" +
				"&FRE=33" +
				"&FWR=0" +
				"&CCON=0" +
				"&CSUP=2" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=40" +
				"&cssNum=14" +
				"&renderTime=902" +
				"&TTB=8" +
				"&RSR=1771" +
				"&DIA=3197" +
				"&DCP=10110";
		String requestContent0240 = 
				"OPTR_INFO=348a62d3-e692-4610-b126-b6d929fd8c23!1614262480468!1614262481370!0";
		String requestHeader0240 = "POST " + requestFile0240 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Req-Hash: WPSJ-sLB-6BTda0O2gPOnuG3rtRUsb8jT_FPVWFWOKmLc37fYrO3lZuNf47LaptUUnVPa6q2UnZ_RXStVnxlCnJcOmZbHE_qMG_iOlUZLzNSUHFjBqyfXJp-JX8NaHJVLIZeKq\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-3\r\n" + 
				"traceparent: 00-4a089bc4f07863d69f766179320c0f85-8b7c79298762fb73-01\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0240.length() + "\r\n" + 		// Content-Length: 76
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0240, requestHost0240, requestPort0240, requestHeader0240, requestContent0240.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0240 = null;		// support garbage collector to reduce memory
		requestContent0240 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [240] <- Index 240
		if(replayMode)
		{
			long proxyDataRecordId =1614262481516L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [241] <- WEB ADMIN Index 241 ---
		String requestProt0241 = "https";
		String requestHost0241 = "performancemanager4.successfactors.com";
		int    requestPort0241 = 443;
		String requestFile0241 = "/intake/v2/rum/events";
		String requestContent0241 = 
				"{\"metadata\":{\"service\":{\"name\":\"bizx-cf-web\",\"agent\":{\"name\":\"rum-js\",\"version\":\"5.5.0\"},\"language\":{\"name\":\"javascript\"},\"environment\":\"production\"}}}" + "\r\n" + 
				"{\"transaction\":{\"id\":\"4c13a0556daccc94\",\"trace_id\":\"f014240e8174b61c71e6a7c3857cd102\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"type\":\"http-request\",\"duration\":902,\"context\":{\"page\":{\"referer\":\"https://performancemanager4.successfactors.com/sf/start?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d\",\"url\":\"https://performancemanager4.successfactors.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d\"}},\"span_count\":{\"started\":1},\"sampled\":true}}" + "\r\n" + 
				"{\"span\":{\"id\":\"5e31fcd2e8f4ae09\",\"transaction_id\":\"4c13a0556daccc94\",\"parent_id\":\"4c13a0556daccc94\",\"trace_id\":\"f014240e8174b61c71e6a7c3857cd102\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":0,\"duration\":902,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"type\":\"http-request\"},\"samples\":{\"transaction.duration.count\":{\"value\":1},\"transaction.duration.sum.us\":{\"value\":902},\"transaction.breakdown.count\":{\"value\":1}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"app\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":0}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"external\",\"subtype\":\"http\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":902}}}}";
		requestContent0241 = Lib.replaceTextPattern(requestContent0241, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0241 = "POST " + requestFile0241 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0241.length() + "\r\n" + 		// Content-Length: 2256
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0241, requestHost0241, requestPort0241, requestHeader0241, requestContent0241.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0241 = null;		// support garbage collector to reduce memory
		requestContent0241 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [241] <- Index 241
		if(replayMode)
		{
			long proxyDataRecordId =1614262481911L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [242] <- WEB ADMIN Index 242 ---
		String requestProt0242 = "https";
		String requestHost0242 = "performancemanager4.successfactors.com";
		int    requestPort0242 = 443;
		String requestFile0242 = "/xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr";
		String requestContent0242 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=picklistControllerProxy" + "\r\n" + 
				"c0-methodName=getPicklistByPage" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=null:null" + "\r\n" + 
				"c0-param1=string:languagerating" + "\r\n" + 
				"c0-e1=number:1" + "\r\n" + 
				"c0-e2=number:0" + "\r\n" + 
				"c0-e3=number:7" + "\r\n" + 
				"c0-e4=number:0" + "\r\n" + 
				"c0-e5=number:6" + "\r\n" + 
				"c0-e6=null:null" + "\r\n" + 
				"c0-e7=null:null" + "\r\n" + 
				"c0-e8=null:null" + "\r\n" + 
				"c0-param2=Object_Object:{pageNumber:reference:c0-e1, pageIndex:reference:c0-e2, pageSize:reference:c0-e3, startIndex:reference:c0-e4, endIndex:reference:c0-e5, filterType:reference:c0-e6, filterValue:reference:c0-e7, parentOptionId:reference:c0-e8}" + "\r\n" + 
				"c0-param3=number:0" + "\r\n" + 
				"c0-param4=boolean:false" + "\r\n" + 
				"c0-param5=null:null" + "\r\n" + 
				"batchId=22";
		requestContent0242 = Lib.replaceTextPattern(requestContent0242, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0242 = "POST " + requestFile0242 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-4fae682330b11254e66423137a9df491-ecbc977328a673a3-01\r\n" + 
				"OPTR_CXT: 010005000151c2b232-3482-42fa-9427-df652cfd102e29820909-1501-babe-face-0000000000036670326d-b5c2-49d7-bc23-6a982b9d212cHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-4\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0242.length() + "\r\n" + 		// Content-Length: 778
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0242, requestHost0242, requestPort0242, requestHeader0242, requestContent0242.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0242 = null;		// support garbage collector to reduce memory
		requestContent0242 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 733
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "Lower Intermediate");		// Test [242] <- Index 242
		if(replayMode)
		{
			long proxyDataRecordId =1614262487680L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [243] <- WEB ADMIN Index 243 ---
		String requestProt0243 = "https";
		String requestHost0243 = "performancemanager4.successfactors.com";
		int    requestPort0243 = 443;
		String requestFile0243 = "/perfLogServlet" +
				"?callId=9919215297-4" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=9269" +
				"&TIP=9983" +
				"&TML=10215" +
				"&TSL=25444" +
				"&ST=1614262487652" +
				"&ET=1614262488576" +
				"&MEM=11211" +
				"&NRE=10" +
				"&NWR=6" +
				"&SCPU=0" +
				"&SQLC=8" +
				"&SQLT=184" +
				"&SVT=314" +
				"&UCPU=50" +
				"&CPU=50" +
				"&FRE=33" +
				"&FWR=0" +
				"&CCON=0" +
				"&CSUP=5" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=40" +
				"&cssNum=14" +
				"&renderTime=823" +
				"&TTB=8" +
				"&RSR=1771" +
				"&DIA=3197" +
				"&DCP=10110";
		String requestContent0243 = 
				"OPTR_INFO=51c2b232-3482-42fa-9427-df652cfd102e!1614262487652!1614262488474!0";
		String requestHeader0243 = "POST " + requestFile0243 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Req-Hash: VByV-sLB-6BTda8O2gPOnuG3rudUsb4lTFJIVmFWOKmLc37fYrO3lZuLf47LaptUUnVPa6q9UHVvRXStVnxlCnJcOmZbI-RrMmFiOlUZLzNTTXxgBqyfXJpuM_eEbZacPGluHa\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-4\r\n" + 
				"traceparent: 00-e691d869cd5fdbe883b83a7ac7ccab53-a09efbab9936ccc5-01\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0243.length() + "\r\n" + 		// Content-Length: 76
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0243, requestHost0243, requestPort0243, requestHeader0243, requestContent0243.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0243 = null;		// support garbage collector to reduce memory
		requestContent0243 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [243] <- Index 243
		if(replayMode)
		{
			long proxyDataRecordId =1614262488611L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [244] <- WEB ADMIN Index 244 ---
		String requestProt0244 = "https";
		String requestHost0244 = "performancemanager4.successfactors.com";
		int    requestPort0244 = 443;
		String requestFile0244 = "/intake/v2/rum/events";
		String requestContent0244 = 
				"{\"metadata\":{\"service\":{\"name\":\"bizx-cf-web\",\"agent\":{\"name\":\"rum-js\",\"version\":\"5.5.0\"},\"language\":{\"name\":\"javascript\"},\"environment\":\"production\"}}}" + "\r\n" + 
				"{\"transaction\":{\"id\":\"6c3e88b8791bd4b5\",\"trace_id\":\"4fae682330b11254e66423137a9df491\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"type\":\"http-request\",\"duration\":822,\"context\":{\"page\":{\"referer\":\"https://performancemanager4.successfactors.com/sf/start?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d\",\"url\":\"https://performancemanager4.successfactors.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d\"}},\"span_count\":{\"started\":1},\"sampled\":true}}" + "\r\n" + 
				"{\"span\":{\"id\":\"ecbc977328a673a3\",\"transaction_id\":\"6c3e88b8791bd4b5\",\"parent_id\":\"6c3e88b8791bd4b5\",\"trace_id\":\"4fae682330b11254e66423137a9df491\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":0,\"duration\":822,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"type\":\"http-request\"},\"samples\":{\"transaction.duration.count\":{\"value\":1},\"transaction.duration.sum.us\":{\"value\":822},\"transaction.breakdown.count\":{\"value\":1}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"app\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":0}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"external\",\"subtype\":\"http\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":822}}}}";
		requestContent0244 = Lib.replaceTextPattern(requestContent0244, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0244 = "POST " + requestFile0244 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0244.length() + "\r\n" + 		// Content-Length: 2256
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0244, requestHost0244, requestPort0244, requestHeader0244, requestContent0244.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0244 = null;		// support garbage collector to reduce memory
		requestContent0244 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [244] <- Index 244
		if(replayMode)
		{
			long proxyDataRecordId =1614262489016L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [245] <- WEB ADMIN Index 245 ---
		String requestProt0245 = "https";
		String requestHost0245 = "performancemanager4.successfactors.com";
		int    requestPort0245 = 443;
		String requestFile0245 = "/xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr";
		String requestContent0245 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=picklistControllerProxy" + "\r\n" + 
				"c0-methodName=getPicklistByPage" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=null:null" + "\r\n" + 
				"c0-param1=string:yearsofexperience" + "\r\n" + 
				"c0-e1=number:1" + "\r\n" + 
				"c0-e2=number:0" + "\r\n" + 
				"c0-e3=number:7" + "\r\n" + 
				"c0-e4=number:0" + "\r\n" + 
				"c0-e5=number:6" + "\r\n" + 
				"c0-e6=null:null" + "\r\n" + 
				"c0-e7=null:null" + "\r\n" + 
				"c0-e8=null:null" + "\r\n" + 
				"c0-param2=Object_Object:{pageNumber:reference:c0-e1, pageIndex:reference:c0-e2, pageSize:reference:c0-e3, startIndex:reference:c0-e4, endIndex:reference:c0-e5, filterType:reference:c0-e6, filterValue:reference:c0-e7, parentOptionId:reference:c0-e8}" + "\r\n" + 
				"c0-param3=number:0" + "\r\n" + 
				"c0-param4=boolean:false" + "\r\n" + 
				"c0-param5=null:null" + "\r\n" + 
				"batchId=23";
		requestContent0245 = Lib.replaceTextPattern(requestContent0245, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0245 = "POST " + requestFile0245 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-807c509138a2d8a8e88daa7a5ffe3dd3-cad697a4acca5a11-01\r\n" + 
				"OPTR_CXT: 01000500012398b251-8632-4001-9b27-b7442186be2329820909-1501-babe-face-0000000000033ddd22c7-a742-4dcb-9b25-82c62526cf2bHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-5\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0245.length() + "\r\n" + 		// Content-Length: 781
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0245, requestHost0245, requestPort0245, requestHeader0245, requestContent0245.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0245 = null;		// support garbage collector to reduce memory
		requestContent0245 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 830
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "totalCount:");		// Test [245] <- Index 245
		if(replayMode)
		{
			long proxyDataRecordId =1614262492488L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [246] <- WEB ADMIN Index 246 ---
		String requestProt0246 = "https";
		String requestHost0246 = "performancemanager4.successfactors.com";
		int    requestPort0246 = 443;
		String requestFile0246 = "/perfLogServlet" +
				"?callId=9919215297-5" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=9269" +
				"&TIP=9983" +
				"&TML=10215" +
				"&TSL=25444" +
				"&ST=1614262492474" +
				"&ET=1614262493093" +
				"&MEM=8748" +
				"&NRE=5" +
				"&NWR=4" +
				"&SCPU=10" +
				"&SQLC=6" +
				"&SQLT=10" +
				"&SVT=54" +
				"&UCPU=30" +
				"&CPU=40" +
				"&FRE=0" +
				"&FWR=0" +
				"&CCON=0" +
				"&CSUP=2" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=40" +
				"&cssNum=14" +
				"&renderTime=517" +
				"&TTB=8" +
				"&RSR=1771" +
				"&DIA=3197" +
				"&DCP=10110";
		String requestContent0246 = 
				"OPTR_INFO=2398b251-8632-4001-9b27-b7442186be23!1614262492474!1614262492991!0";
		String requestHeader0246 = "POST " + requestFile0246 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Req-Hash: aQqCktK8h9uBpNvu4OUbj7ihZMpWm5GoVmxQNqqsTZRFPINzhsqvgJuLibZ6O24njrtTQ1ufV0ZoEjJES2JKMHw5C0lqPmxgFDViQo_HJSVnQphqVatwNK7ZbteLHV6AFauqcq\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-5\r\n" + 
				"traceparent: 00-3a9f15e86924dbf9a1369a94bf03e059-b8f580a62ffc5974-01\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0246.length() + "\r\n" + 		// Content-Length: 76
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0246, requestHost0246, requestPort0246, requestHeader0246, requestContent0246.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0246 = null;		// support garbage collector to reduce memory
		requestContent0246 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [246] <- Index 246
		if(replayMode)
		{
			long proxyDataRecordId =1614262493128L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [247] <- WEB ADMIN Index 247 ---
		String requestProt0247 = "https";
		String requestHost0247 = "performancemanager4.successfactors.com";
		int    requestPort0247 = 443;
		String requestFile0247 = "/intake/v2/rum/events";
		String requestContent0247 = 
				"{\"metadata\":{\"service\":{\"name\":\"bizx-cf-web\",\"agent\":{\"name\":\"rum-js\",\"version\":\"5.5.0\"},\"language\":{\"name\":\"javascript\"},\"environment\":\"production\"}}}" + "\r\n" + 
				"{\"transaction\":{\"id\":\"a3866bbef6bef547\",\"trace_id\":\"807c509138a2d8a8e88daa7a5ffe3dd3\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"type\":\"http-request\",\"duration\":516,\"context\":{\"page\":{\"referer\":\"https://performancemanager4.successfactors.com/sf/start?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d\",\"url\":\"https://performancemanager4.successfactors.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d\"}},\"span_count\":{\"started\":1},\"sampled\":true}}" + "\r\n" + 
				"{\"span\":{\"id\":\"cad697a4acca5a11\",\"transaction_id\":\"a3866bbef6bef547\",\"parent_id\":\"a3866bbef6bef547\",\"trace_id\":\"807c509138a2d8a8e88daa7a5ffe3dd3\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":0,\"duration\":516,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"type\":\"http-request\"},\"samples\":{\"transaction.duration.count\":{\"value\":1},\"transaction.duration.sum.us\":{\"value\":516},\"transaction.breakdown.count\":{\"value\":1}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"app\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":0}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/picklistControllerProxy.getPicklistByPage.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"external\",\"subtype\":\"http\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":516}}}}";
		requestContent0247 = Lib.replaceTextPattern(requestContent0247, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0247 = "POST " + requestFile0247 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0247.length() + "\r\n" + 		// Content-Length: 2256
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0247, requestHost0247, requestPort0247, requestHeader0247, requestContent0247.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0247 = null;		// support garbage collector to reduce memory
		requestContent0247 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [247] <- Index 247
		if(replayMode)
		{
			long proxyDataRecordId =1614262493517L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #7 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #8.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_8(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #8: SaveDetails
		// # --------------------



		// --- HTTP REQUEST: Test [249] <- WEB ADMIN Index 249 ---
		String requestProt0249 = "https";
		String requestHost0249 = "performancemanager4.successfactors.com";
		int    requestPort0249 = 443;
		String requestFile0249 = "/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.set.dwr";
		String requestContent0249 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=backgroundControllerProxy" + "\r\n" + 
				"c0-methodName=set" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:languages" + "\r\n" + 
				"c0-param1=string:TestAutomation" + "\r\n" + 
				"c0-param2=string:%7B%22bgRowDataVOList%22%3A%5B%7B%22orderPos%22%3A1%2C%22modified%22%3Atrue%2C%22id%22%3Anull%2C%22fieldDataVOMap%22%3A%7B%22language%22%3A%223781%22%2C%22fluency%22%3A%224267%22%2C%22years%22%3A%224273%22%7D%7D%5D%2C%22deletedRows%22%3A%5B%5D%7D" + "\r\n" + 
				"batchId=24";
		requestContent0249 = Lib.replaceTextPattern(requestContent0249, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0249 = "POST " + requestFile0249 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-ae283288beeaa1e03207c7c78d98c3df-7cb0a0e237c1d182-01\r\n" + 
				"OPTR_CXT: 01000500017228c26c-88d2-4869-842c-80f92587b92c29820909-1501-babe-face-000000000003002f8292-7942-4be7-8020-21b12fb4ee23HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-6\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0249.length() + "\r\n" + 		// Content-Length: 602
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0249, requestHost0249, requestPort0249, requestHeader0249, requestContent0249.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0249 = null;		// support garbage collector to reduce memory
		requestContent0249 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 497
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "\"label\\\":\\\"Basic\\\",\\\"disabled\\\":false,\\\"parentOptionId\\\":");		// Test [249] <- Index 249
		if(replayMode)
		{
			long proxyDataRecordId =1614262510996L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_DeleteID'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0249_1 = new BoundaryBasedExtractorItem( "{\\\"bgRowDataVOList\\\":[{\\\"id\\\":" , ",\\\"fieldDataVOMap\\",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0249_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_DeleteID'
			C_DeleteID = boundaryBasedContentExtractorItem0249_1.getResultText();
			log("<<< C_DeleteID = " + C_DeleteID);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_DeleteID!= null && C_DeleteID.trim().length() == 0)
			{
				C_DeleteID = "";
				log("runtime note: the extraction of a new value for the variable 'C_DeleteID' ends up with an empty string - a substitute value was set");
				log("<<< C_DeleteID = " + C_DeleteID);
			}
		}
		catch (Exception e) { C_DeleteID = null; log(e); }
		if (C_DeleteID == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_DeleteID' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [250] <- WEB ADMIN Index 250 ---
		String requestProt0250 = "https";
		String requestHost0250 = "performancemanager4.successfactors.com";
		int    requestPort0250 = 443;
		String requestFile0250 = "/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr";
		String requestContent0250 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=backgroundControllerProxy" + "\r\n" + 
				"c0-methodName=getWithPermission" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:languages" + "\r\n" + 
				"c0-param1=string:TestAutomation" + "\r\n" + 
				"batchId=25";
		requestContent0250 = Lib.replaceTextPattern(requestContent0250, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0250 = "POST " + requestFile0250 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-ae283288beeaa1e03207c7c78d98c3df-a912568c076b8420-01\r\n" + 
				"OPTR_CXT: 010005000198b5929a-d7c2-496b-932a-b24422061e2329820909-1501-babe-face-000000000003995ed279-5ac2-449c-972e-1f8c2cb2fb2bHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-6\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0250.length() + "\r\n" + 		// Content-Length: 352
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0250, requestHost0250, requestPort0250, requestHeader0250, requestContent0250.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0250 = null;		// support garbage collector to reduce memory
		requestContent0250 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 477
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "dwr.engine._remoteHandleCallback('");		// Test [250] <- Index 250
		if(replayMode)
		{
			long proxyDataRecordId =1614262511862L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [251] <- WEB ADMIN Index 251 ---
		String requestProt0251 = "https";
		String requestHost0251 = "performancemanager4.successfactors.com";
		int    requestPort0251 = 443;
		String requestFile0251 = "/perfLogServlet" +
				"?callId=9919215297-6" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=9269" +
				"&TIP=9983" +
				"&TML=10215" +
				"&TSL=25444" +
				"&ST=1614262510980" +
				"&ET=1614262512456" +
				"&MEM=36461" +
				"&NRE=184" +
				"&NWR=101" +
				"&SCPU=10" +
				"&SQLC=101" +
				"&SQLT=150" +
				"&SVT=530" +
				"&UCPU=190" +
				"&CPU=200" +
				"&FRE=14" +
				"&FWR=0" +
				"&CCON=5" +
				"&CSUP=47" +
				"&CLOC=10" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=40" +
				"&cssNum=14" +
				"&renderTime=1374" +
				"&TTB=8" +
				"&RSR=1771" +
				"&DIA=3197" +
				"&DCP=10110";
		String requestContent0251 = 
				"OPTR_INFO=7228c26c-88d2-4869-842c-80f92587b92c!1614262510980!1614262511847!0" +
				"&OPTR_INFO=98b5929a-d7c2-496b-932a-b24422061e23!1614262511843!1614262512354!0";
		String requestHeader0251 = "POST " + requestFile0251 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Req-Hash: N70S6vHrs4R3h6jl19TditFXkct536K8dZ0bcMeFYJZIRnd5cO1bkaaDWL8ehrdMTYNGL4aEb3J4OmDbgMS_YJJ7VJWeUF-NJ0V-SWJnIxZDS2NzHpt7PYB0Y2RvIWR9KHxkFK\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-6\r\n" + 
				"traceparent: 00-5138425042b4767ab32d941fac68087c-f65f9a22cd570a0e-01\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0251.length() + "\r\n" + 		// Content-Length: 153
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0251, requestHost0251, requestPort0251, requestHeader0251, requestContent0251.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0251 = null;		// support garbage collector to reduce memory
		requestContent0251 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [251] <- Index 251
		if(replayMode)
		{
			long proxyDataRecordId =1614262512497L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [252] <- WEB ADMIN Index 252 ---
		String requestProt0252 = "https";
		String requestHost0252 = "performancemanager4.successfactors.com";
		int    requestPort0252 = 443;
		String requestFile0252 = "/intake/v2/rum/events";
		String requestContent0252 = 
				"{\"metadata\":{\"service\":{\"name\":\"bizx-cf-web\",\"agent\":{\"name\":\"rum-js\",\"version\":\"5.5.0\"},\"language\":{\"name\":\"javascript\"},\"environment\":\"production\"}}}" + "\r\n" + 
				"{\"transaction\":{\"id\":\"81e61e530f11bac6\",\"trace_id\":\"ae283288beeaa1e03207c7c78d98c3df\",\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.set.dwr\",\"type\":\"http-request\",\"duration\":1374,\"context\":{\"page\":{\"referer\":\"https://performancemanager4.successfactors.com/sf/start?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d\",\"url\":\"https://performancemanager4.successfactors.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d\"}},\"span_count\":{\"started\":2},\"sampled\":true}}" + "\r\n" + 
				"{\"span\":{\"id\":\"7cb0a0e237c1d182\",\"transaction_id\":\"81e61e530f11bac6\",\"parent_id\":\"81e61e530f11bac6\",\"trace_id\":\"ae283288beeaa1e03207c7c78d98c3df\",\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.set.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":0,\"duration\":865,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.set.dwr\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"span\":{\"id\":\"a912568c076b8420\",\"transaction_id\":\"81e61e530f11bac6\",\"parent_id\":\"81e61e530f11bac6\",\"trace_id\":\"ae283288beeaa1e03207c7c78d98c3df\",\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":862,\"duration\":512,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.set.dwr\",\"type\":\"http-request\"},\"samples\":{\"transaction.duration.count\":{\"value\":1},\"transaction.duration.sum.us\":{\"value\":1374},\"transaction.breakdown.count\":{\"value\":1}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.set.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"app\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":0}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.set.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"external\",\"subtype\":\"http\"},\"samples\":{\"span.self_time.count\":{\"value\":2},\"span.self_time.sum.us\":{\"value\":1377}}}}";
		requestContent0252 = Lib.replaceTextPattern(requestContent0252, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0252 = "POST " + requestFile0252 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0252.length() + "\r\n" + 		// Content-Length: 2902
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0252, requestHost0252, requestPort0252, requestHeader0252, requestContent0252.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0252 = null;		// support garbage collector to reduce memory
		requestContent0252 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [252] <- Index 252
		if(replayMode)
		{
			long proxyDataRecordId =1614262512874L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #8 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #9.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_9(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #9: EditSkills
		// # -------------------



		// --- HTTP REQUEST: Test [254] <- WEB ADMIN Index 254 ---
		String requestProt0254 = "https";
		String requestHost0254 = "performancemanager4.successfactors.com";
		int    requestPort0254 = 443;
		String requestFile0254 = "/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr";
		String requestContent0254 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=backgroundControllerProxy" + "\r\n" + 
				"c0-methodName=getWithPermission" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:languages" + "\r\n" + 
				"c0-param1=string:TestAutomation" + "\r\n" + 
				"batchId=26";
		requestContent0254 = Lib.replaceTextPattern(requestContent0254, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0254 = "POST " + requestFile0254 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-6bd808b517fe2c0f033cbc6a7538a4fb-52916a446b8d42e2-01\r\n" + 
				"OPTR_CXT: 010005000137709284-96a2-405d-812a-82a92d85982829820909-1501-babe-face-00000000000391f3d256-37d2-4ebe-832c-be342721ac22HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-7\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0254.length() + "\r\n" + 		// Content-Length: 352
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0254, requestHost0254, requestPort0254, requestHeader0254, requestContent0254.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0254 = null;		// support garbage collector to reduce memory
		requestContent0254 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 477
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "{\\\"editable\\\":true,\\\"data\\\":");		// Test [254] <- Index 254
		if(replayMode)
		{
			long proxyDataRecordId =1614262532264L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [255] <- WEB ADMIN Index 255 ---
		String requestProt0255 = "https";
		String requestHost0255 = "performancemanager4.successfactors.com";
		int    requestPort0255 = 443;
		String requestFile0255 = "/ec/ajax/remoting/call/plaincall/ecHelpControllerProxy.getHelp.dwr";
		String requestContent0255 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=ecHelpControllerProxy" + "\r\n" + 
				"c0-methodName=getHelp" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=null:null" + "\r\n" + 
				"c0-param0=Array:[reference:c0-e1]" + "\r\n" + 
				"batchId=27";
		requestContent0255 = Lib.replaceTextPattern(requestContent0255, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0255 = "POST " + requestFile0255 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-6bd808b517fe2c0f033cbc6a7538a4fb-2456a3315965a2b7-01\r\n" + 
				"OPTR_CXT: 010005000132a832fb-22a2-44ac-b321-e9d92331622b29820909-1501-babe-face-000000000003ce04326a-af92-4f7e-842f-50e929f02424HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-7\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0255.length() + "\r\n" + 		// Content-Length: 329
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0255, requestHost0255, requestPort0255, requestHeader0255, requestContent0255.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0255 = null;		// support garbage collector to reduce memory
		requestContent0255 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 519
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [255] <- Index 255
		if(replayMode)
		{
			long proxyDataRecordId =1614262533145L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [256] <- WEB ADMIN Index 256 ---
		String requestProt0256 = "https";
		String requestHost0256 = "performancemanager4.successfactors.com";
		int    requestPort0256 = 443;
		String requestFile0256 = "/ec/ajax/remoting/call/plaincall/employeeProfilePageConfigControllerProxy.getBlockLink.dwr";
		String requestContent0256 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=employeeProfilePageConfigControllerProxy" + "\r\n" + 
				"c0-methodName=getBlockLink" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:block34" + "\r\n" + 
				"batchId=28";
		requestContent0256 = Lib.replaceTextPattern(requestContent0256, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0256 = "POST " + requestFile0256 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-6bd808b517fe2c0f033cbc6a7538a4fb-5bf7fb70e3c2cae1-01\r\n" + 
				"OPTR_CXT: 01000500015a217252-1842-4aa1-9621-9a9626b8f72a29820909-1501-babe-face-0000000000031bed827e-a9c2-4888-9d2b-503225cdcd23HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-7\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0256.length() + "\r\n" + 		// Content-Length: 328
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0256, requestHost0256, requestPort0256, requestHeader0256, requestContent0256.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0256 = null;		// support garbage collector to reduce memory
		requestContent0256 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 116
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [256] <- Index 256
		if(replayMode)
		{
			long proxyDataRecordId =1614262533296L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [257] <- WEB ADMIN Index 257 ---
		String requestProt0257 = "https";
		String requestHost0257 = "performancemanager4.successfactors.com";
		int    requestPort0257 = 443;
		String requestFile0257 = "/perfLogServlet" +
				"?callId=9919215297-7" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=9269" +
				"&TIP=9983" +
				"&TML=10215" +
				"&TSL=25444" +
				"&ST=1614262531962" +
				"&ET=1614262533850" +
				"&MEM=19333" +
				"&NRE=25" +
				"&NWR=27" +
				"&SCPU=10" +
				"&SQLC=33" +
				"&SQLT=67" +
				"&SVT=250" +
				"&UCPU=130" +
				"&CPU=140" +
				"&FRE=5" +
				"&FWR=0" +
				"&CCON=9" +
				"&CSUP=33" +
				"&CLOC=4" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=40" +
				"&cssNum=14" +
				"&renderTime=1786" +
				"&TTB=8" +
				"&RSR=1771" +
				"&DIA=3197" +
				"&DCP=10110";
		String requestContent0257 = 
				"OPTR_INFO=37709284-96a2-405d-812a-82a92d859828!1614262531962!1614262533169!0" +
				"&OPTR_INFO=32a832fb-22a2-44ac-b321-e9d92331622b!1614262533136!1614262533512!0" +
				"&OPTR_INFO=5a217252-1842-4aa1-9621-9a9626b8f72a!1614262533168!1614262533748!0";
		String requestHeader0257 = "POST " + requestFile0257 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Req-Hash: keGumKWMrwy8xfGwjbuqqvjuxeexqL9fm3pxN0ZqDdy5cK_nYs4_iriTkrxqP3lNbrqdUo_HULCtYn4_eqK_YnwCC0lyPnloF-6FPHFCLzt1IHR1NL3KS0N_WnanO1kNNKBbcq\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-7\r\n" + 
				"traceparent: 00-8ff448d663abe3fd5b656712f9869dc5-f01c43e57b2f5244-01\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0257.length() + "\r\n" + 		// Content-Length: 230
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0257, requestHost0257, requestPort0257, requestHeader0257, requestContent0257.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0257 = null;		// support garbage collector to reduce memory
		requestContent0257 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [257] <- Index 257
		if(replayMode)
		{
			long proxyDataRecordId =1614262533880L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [258] <- WEB ADMIN Index 258 ---
		String requestProt0258 = "https";
		String requestHost0258 = "performancemanager4.successfactors.com";
		int    requestPort0258 = 443;
		String requestFile0258 = "/intake/v2/rum/events";
		String requestContent0258 = 
				requestFileCache.readFile(getSymmetricEncryptContext(), "UpdateEmoloyeeProfile_PROD_SM_RequestContent0258.txt").getFileDataAsString();		// note: consider duplicated definition of this file name near end of the load test program - used for ZIP-dialogue in Project Navigator
		requestContent0258 = Lib.replaceTextPattern(requestContent0258, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0258 = "POST " + requestFile0258 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0258.length() + "\r\n" + 		// Content-Length: 6711
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0258, requestHost0258, requestPort0258, requestHeader0258, requestContent0258.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0258 = null;		// support garbage collector to reduce memory
		requestContent0258 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [258] <- Index 258
		if(replayMode)
		{
			long proxyDataRecordId =1614262533986L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #9 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #10.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_10(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #10: SaveDelete
		// # --------------------



		// --- HTTP REQUEST: Test [260] <- WEB ADMIN Index 260 ---
		String requestProt0260 = "https";
		String requestHost0260 = "performancemanager4.successfactors.com";
		int    requestPort0260 = 443;
		String requestFile0260 = "/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.set.dwr";
		String requestContent0260 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=backgroundControllerProxy" + "\r\n" + 
				"c0-methodName=set" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:languages" + "\r\n" + 
				"c0-param1=string:TestAutomation" + "\r\n" + 
				"c0-param2=string:%7B%22bgRowDataVOList%22%3A%5B%5D%2C%22deletedRows%22%3A%5B1934012%5D%7D" + "\r\n" + 
				"batchId=29";
		requestContent0260 = Lib.replaceTextPattern(requestContent0260, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences
		requestContent0260 = Lib.replaceTextPattern(requestContent0260, "1934012", C_DeleteID, 0);		// search and replace content fragment "1934012" with variable 'C_DeleteID' on all occurrences

		String requestHeader0260 = "POST " + requestFile0260 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-a3ce52f81d5429d119e4a03f01fb5052-f9b2b732c72c1da3-01\r\n" + 
				"OPTR_CXT: 010005000121d12213-4a82-417b-8421-ec3228c0db2729820909-1501-babe-face-00000000000368a8f27a-a422-47ea-992f-f5aa26e54c2eHTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-8\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0260.length() + "\r\n" + 		// Content-Length: 428
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0260, requestHost0260, requestPort0260, requestHeader0260, requestContent0260.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0260 = null;		// support garbage collector to reduce memory
		requestContent0260 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 140
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "bgRowDataVOList\\\":[]}");		// Test [260] <- Index 260
		if(replayMode)
		{
			long proxyDataRecordId =1614262557714L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [261] <- WEB ADMIN Index 261 ---
		String requestProt0261 = "https";
		String requestHost0261 = "performancemanager4.successfactors.com";
		int    requestPort0261 = 443;
		String requestFile0261 = "/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr";
		String requestContent0261 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423117" + "\r\n" + 
				"c0-scriptName=backgroundControllerProxy" + "\r\n" + 
				"c0-methodName=getWithPermission" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:languages" + "\r\n" + 
				"c0-param1=string:TestAutomation" + "\r\n" + 
				"batchId=30";
		requestContent0261 = Lib.replaceTextPattern(requestContent0261, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0261 = "POST " + requestFile0261 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"viewId: /ui/peopleprofile/pages/index.xhtml\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"traceparent: 00-a3ce52f81d5429d119e4a03f01fb5052-3a64b4e848c85081-01\r\n" + 
				"OPTR_CXT: 0100050001fd4a62f4-02e2-400f-a42a-58f32fa3772929820909-1501-babe-face-000000000003e9449216-84e2-4f03-b322-e5502d49d923HTTP    ;\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-8\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0261.length() + "\r\n" + 		// Content-Length: 352
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0261, requestHost0261, requestPort0261, requestHeader0261, requestContent0261.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0261 = null;		// support garbage collector to reduce memory
		requestContent0261 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 851
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "\\\"editable\\\":true,\\\"data\\\":");		// Test [261] <- Index 261
		if(replayMode)
		{
			long proxyDataRecordId =1614262558500L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [262] <- WEB ADMIN Index 262 ---
		String requestProt0262 = "https";
		String requestHost0262 = "performancemanager4.successfactors.com";
		int    requestPort0262 = 443;
		String requestFile0262 = "/perfLogServlet" +
				"?callId=9919215297-8" +
				"&moduleId=EMPLOYEE_FILE" +
				"&pageId=EMPLOYEE_FILE" +
				"&pageQualifier=PP3_MAIN" +
				"&TRS=9269" +
				"&TIP=9983" +
				"&TML=10215" +
				"&TSL=25444" +
				"&ST=1614262557700" +
				"&ET=1614262559160" +
				"&MEM=32770" +
				"&NRE=145" +
				"&NWR=98" +
				"&SCPU=20" +
				"&SQLC=83" +
				"&SQLT=160" +
				"&SVT=550" +
				"&UCPU=180" +
				"&CPU=200" +
				"&FRE=19" +
				"&FWR=0" +
				"&CCON=8" +
				"&CSUP=73" +
				"&CLOC=11" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=40" +
				"&cssNum=14" +
				"&renderTime=1358" +
				"&TTB=8" +
				"&RSR=1771" +
				"&DIA=3197" +
				"&DCP=10110";
		String requestContent0262 = 
				"OPTR_INFO=21d12213-4a82-417b-8421-ec3228c0db27!1614262557700!1614262558484!0" +
				"&OPTR_INFO=fd4a62f4-02e2-400f-a42a-58f32fa37729!1614262558481!1614262559058!0";
		String requestHeader0262 = "POST " + requestFile0262 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Req-Hash: nxqD8gioep_YtQDssPH8RMa3fAurvMq-d48Cjqt0JJd9bHVWsMigg24KmOmaU23FRXevfqaqS2p_Uo5-h57YV4JJYIMXDWJ1OmxcMGgZL-xLQXJgEoBQXJVFQGEYNJBBJ1wP7q\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe271s-20210225091343-1240895-8\r\n" + 
				"traceparent: 00-e60be6586318d6e9a7ec4b4eddbbf1c9-2461bc20610b0c75-01\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0262.length() + "\r\n" + 		// Content-Length: 153
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0262, requestHost0262, requestPort0262, requestHeader0262, requestContent0262.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0262 = null;		// support garbage collector to reduce memory
		requestContent0262 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [262] <- Index 262
		if(replayMode)
		{
			long proxyDataRecordId =1614262559189L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [263] <- WEB ADMIN Index 263 ---
		String requestProt0263 = "https";
		String requestHost0263 = "performancemanager4.successfactors.com";
		int    requestPort0263 = 443;
		String requestFile0263 = "/intake/v2/rum/events";
		String requestContent0263 = 
				"{\"metadata\":{\"service\":{\"name\":\"bizx-cf-web\",\"agent\":{\"name\":\"rum-js\",\"version\":\"5.5.0\"},\"language\":{\"name\":\"javascript\"},\"environment\":\"production\"}}}" + "\r\n" + 
				"{\"transaction\":{\"id\":\"6c20ac72d862f49d\",\"trace_id\":\"a3ce52f81d5429d119e4a03f01fb5052\",\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.set.dwr\",\"type\":\"http-request\",\"duration\":1360,\"context\":{\"page\":{\"referer\":\"https://performancemanager4.successfactors.com/sf/start?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d\",\"url\":\"https://performancemanager4.successfactors.com/xi/ui/peopleprofile/pages/index.xhtml?bplte_company=Teck&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d\"}},\"span_count\":{\"started\":2},\"sampled\":true}}" + "\r\n" + 
				"{\"span\":{\"id\":\"f9b2b732c72c1da3\",\"transaction_id\":\"6c20ac72d862f49d\",\"parent_id\":\"6c20ac72d862f49d\",\"trace_id\":\"a3ce52f81d5429d119e4a03f01fb5052\",\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.set.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":1,\"duration\":784,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.set.dwr\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"span\":{\"id\":\"3a64b4e848c85081\",\"transaction_id\":\"6c20ac72d862f49d\",\"parent_id\":\"6c20ac72d862f49d\",\"trace_id\":\"a3ce52f81d5429d119e4a03f01fb5052\",\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":782,\"duration\":578,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/ec/ajax/remoting/call/plaincall/backgroundControllerProxy.getWithPermission.dwr\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.set.dwr\",\"type\":\"http-request\"},\"samples\":{\"transaction.duration.count\":{\"value\":1},\"transaction.duration.sum.us\":{\"value\":1360},\"transaction.breakdown.count\":{\"value\":1}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.set.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"app\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":1}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /ec/ajax/remoting/call/plaincall/backgroundControllerProxy.set.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"external\",\"subtype\":\"http\"},\"samples\":{\"span.self_time.count\":{\"value\":2},\"span.self_time.sum.us\":{\"value\":1362}}}}";
		requestContent0263 = Lib.replaceTextPattern(requestContent0263, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace content fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0263 = "POST " + requestFile0263 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=EMPLOYEE_FILE&pageId=EMPLOYEE_FILE&pageQualifier=PP3_MAIN&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Content-Length: " + requestContent0263.length() + "\r\n" + 		// Content-Length: 2902
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0263, requestHost0263, requestPort0263, requestHeader0263, requestContent0263.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0263 = null;		// support garbage collector to reduce memory
		requestContent0263 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [263] <- Index 263
		if(replayMode)
		{
			long proxyDataRecordId =1614262559599L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #10 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #11.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_11(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #11: LogOut
		// # ----------------



		// --- HTTP REQUEST: Test [265] <- WEB ADMIN Index 265 ---
		String requestProt0265 = "https";
		String requestHost0265 = "performancemanager4.successfactors.com";
		int    requestPort0265 = 443;
		String requestFile0265 = "/sf/idp/SAML2/slo" +
				"?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d";
		requestFile0265 = Lib.replaceTextPattern(requestFile0265, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d" with variable 'vScrb' on all occurrences

		String requestContent0265 = 
				"LogoutUrl=https%3A%2F%2Fokkrtwkpyfmrqckrenxirty.us2.sac.successfactors.com%2Fapplication%2Flogout" +
				"&company=Teck";
		String requestHeader0265 = "POST " + requestFile0265 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0265.length() + "\r\n" + 		// Content-Length: 110
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0265, requestHost0265, requestPort0265, requestHeader0265, requestContent0265.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0265 = null;		// support garbage collector to reduce memory
		requestContent0265 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1997
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "function redirectToSPLogout() {");		// Test [265] <- Index 265
		if(replayMode)
		{
			long proxyDataRecordId =1614262571412L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest4'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0265_1 = new BoundaryBasedExtractorItem( "name=\"SAMLRequest\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0265_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest4'
			C_SAMLRequest4 = boundaryBasedContentExtractorItem0265_1.getResultText();
			log("<<< C_SAMLRequest4 = " + C_SAMLRequest4);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest4!= null && C_SAMLRequest4.trim().length() == 0)
			{
				C_SAMLRequest4 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest4' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest4 = " + C_SAMLRequest4);
			}
		}
		catch (Exception e) { C_SAMLRequest4 = null; log(e); }
		if (C_SAMLRequest4 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest4' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [266] <- WEB ADMIN Index 266 ---
		String requestProt0266 = "https";
		String requestHost0266 = "performancemanager4.successfactors.com";
		int    requestPort0266 = 443;
		String requestFile0266 = "/sf/idp/SAML2/slo" +
				"?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d";
		requestFile0266 = Lib.replaceTextPattern(requestFile0266, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d" with variable 'vScrb' on all occurrences

		String requestContent0266 = 
				"LogoutUrl=https%3A%2F%2Fteck.wfsaas.ca%2Fworkforce%2FSSO.do%3Faction%3DssoLogOff" +
				"&company=Teck";
		String requestHeader0266 = "POST " + requestFile0266 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0266.length() + "\r\n" + 		// Content-Length: 93
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0266, requestHost0266, requestPort0266, requestHeader0266, requestContent0266.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0266 = null;		// support garbage collector to reduce memory
		requestContent0266 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1989
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "function redirectToSPLogout() {");		// Test [266] <- Index 266
		if(replayMode)
		{
			long proxyDataRecordId =1614262571420L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0266_1 = new BoundaryBasedExtractorItem( "name=\"SAMLRequest\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0266_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest2'
			C_SAMLRequest2 = boundaryBasedContentExtractorItem0266_1.getResultText();
			log("<<< C_SAMLRequest2 = " + C_SAMLRequest2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest2!= null && C_SAMLRequest2.trim().length() == 0)
			{
				C_SAMLRequest2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest2' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest2 = " + C_SAMLRequest2);
			}
		}
		catch (Exception e) { C_SAMLRequest2 = null; log(e); }
		if (C_SAMLRequest2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [267] <- WEB ADMIN Index 267 ---
		String requestProt0267 = "https";
		String requestHost0267 = "performancemanager4.successfactors.com";
		int    requestPort0267 = 443;
		String requestFile0267 = "/sf/idp/SAML2/slo" +
				"?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d";
		requestFile0267 = Lib.replaceTextPattern(requestFile0267, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d" with variable 'vScrb' on all occurrences

		String requestContent0267 = 
				"LogoutUrl=https%3A%2F%2Fonboarding4.successfactors.com%2FONB%2FSSO%2FSAML20%2FSingleLogoutService.aspx" +
				"&company=Teck";
		String requestHeader0267 = "POST " + requestFile0267 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0267.length() + "\r\n" + 		// Content-Length: 115
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0267, requestHost0267, requestPort0267, requestHeader0267, requestContent0267.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0267 = null;		// support garbage collector to reduce memory
		requestContent0267 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1993
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [267] <- Index 267
		if(replayMode)
		{
			long proxyDataRecordId =1614262571640L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest5'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0267_1 = new BoundaryBasedExtractorItem( "name=\"SAMLRequest\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0267_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest5'
			C_SAMLRequest5 = boundaryBasedContentExtractorItem0267_1.getResultText();
			log("<<< C_SAMLRequest5 = " + C_SAMLRequest5);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest5!= null && C_SAMLRequest5.trim().length() == 0)
			{
				C_SAMLRequest5 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest5' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest5 = " + C_SAMLRequest5);
			}
		}
		catch (Exception e) { C_SAMLRequest5 = null; log(e); }
		if (C_SAMLRequest5 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest5' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [268] <- WEB ADMIN Index 268 ---
		String requestProt0268 = "https";
		String requestHost0268 = "performancemanager4.successfactors.com";
		int    requestPort0268 = 443;
		String requestFile0268 = "/sf/idp/SAML2/slo" +
				"?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d";
		requestFile0268 = Lib.replaceTextPattern(requestFile0268, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d" with variable 'vScrb' on all occurrences

		String requestContent0268 = 
				"LogoutUrl=https%3A%2F%2Fmy030334.payroll.ondemand.com%2Fsap%2Fsaml2%2Fsp%2Fslo%2F100" +
				"&company=Teck";
		String requestHeader0268 = "POST " + requestFile0268 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0268.length() + "\r\n" + 		// Content-Length: 97
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0268, requestHost0268, requestPort0268, requestHeader0268, requestContent0268.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0268 = null;		// support garbage collector to reduce memory
		requestContent0268 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1990
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "var ajaxSecKey=\"");		// Test [268] <- Index 268
		if(replayMode)
		{
			long proxyDataRecordId =1614262571651L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest8'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0268_1 = new BoundaryBasedExtractorItem( "name=\"SAMLRequest\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0268_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest8'
			C_SAMLRequest8 = boundaryBasedContentExtractorItem0268_1.getResultText();
			log("<<< C_SAMLRequest8 = " + C_SAMLRequest8);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest8!= null && C_SAMLRequest8.trim().length() == 0)
			{
				C_SAMLRequest8 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest8' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest8 = " + C_SAMLRequest8);
			}
		}
		catch (Exception e) { C_SAMLRequest8 = null; log(e); }
		if (C_SAMLRequest8 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest8' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [269] <- WEB ADMIN Index 269 ---
		String requestProt0269 = "https";
		String requestHost0269 = "performancemanager4.successfactors.com";
		int    requestPort0269 = 443;
		String requestFile0269 = "/sf/idp/SAML2/slo" +
				"?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d";
		requestFile0269 = Lib.replaceTextPattern(requestFile0269, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d" with variable 'vScrb' on all occurrences

		String requestContent0269 = 
				"LogoutUrl=https%3A%2F%2Fteck.plateau.com%2Flearning%2Fsaml%2FSSO" +
				"&company=Teck";
		String requestHeader0269 = "POST " + requestFile0269 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0269.length() + "\r\n" + 		// Content-Length: 77
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0269, requestHost0269, requestPort0269, requestHeader0269, requestContent0269.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0269 = null;		// support garbage collector to reduce memory
		requestContent0269 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1969
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "function autoCommitForm() {");		// Test [269] <- Index 269
		if(replayMode)
		{
			long proxyDataRecordId =1614262571669L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest3'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0269_1 = new BoundaryBasedExtractorItem( "name=\"SAMLRequest\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0269_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest3'
			C_SAMLRequest3 = boundaryBasedContentExtractorItem0269_1.getResultText();
			log("<<< C_SAMLRequest3 = " + C_SAMLRequest3);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest3!= null && C_SAMLRequest3.trim().length() == 0)
			{
				C_SAMLRequest3 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest3' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest3 = " + C_SAMLRequest3);
			}
		}
		catch (Exception e) { C_SAMLRequest3 = null; log(e); }
		if (C_SAMLRequest3 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest3' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [270] <- WEB ADMIN Index 270 ---
		String requestProt0270 = "https";
		String requestHost0270 = "performancemanager4.successfactors.com";
		int    requestPort0270 = 443;
		String requestFile0270 = "/sf/idp/SAML2/slo" +
				"?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d";
		requestFile0270 = Lib.replaceTextPattern(requestFile0270, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d" with variable 'vScrb' on all occurrences

		String requestContent0270 = 
				"LogoutUrl=https%3A%2F%2Fjob-v3.multiposting.fr%2Fsaml2%2F" +
				"&company=Teck";
		String requestHeader0270 = "POST " + requestFile0270 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0270.length() + "\r\n" + 		// Content-Length: 70
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0270, requestHost0270, requestPort0270, requestHeader0270, requestContent0270.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0270 = null;		// support garbage collector to reduce memory
		requestContent0270 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1962
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [270] <- Index 270
		if(replayMode)
		{
			long proxyDataRecordId =1614262571684L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest7'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0270_1 = new BoundaryBasedExtractorItem( "name=\"SAMLRequest\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0270_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest7'
			C_SAMLRequest7 = boundaryBasedContentExtractorItem0270_1.getResultText();
			log("<<< C_SAMLRequest7 = " + C_SAMLRequest7);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest7!= null && C_SAMLRequest7.trim().length() == 0)
			{
				C_SAMLRequest7 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest7' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest7 = " + C_SAMLRequest7);
			}
		}
		catch (Exception e) { C_SAMLRequest7 = null; log(e); }
		if (C_SAMLRequest7 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest7' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [271] <- WEB ADMIN Index 271 ---
		String requestProt0271 = "https";
		String requestHost0271 = "performancemanager4.successfactors.com";
		int    requestPort0271 = 443;
		String requestFile0271 = "/sf/idp/SAML2/slo" +
				"?_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d";
		requestFile0271 = Lib.replaceTextPattern(requestFile0271, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%2bHwvajrsco%3d" with variable 'vScrb' on all occurrences

		String requestContent0271 = 
				"LogoutUrl=https%3A%2F%2Fanalytics4.successfactors.com%2FProduction%2FHrmlLogout.aspx" +
				"&company=Teck";
		String requestHeader0271 = "POST " + requestFile0271 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0271.length() + "\r\n" + 		// Content-Length: 97
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0271, requestHost0271, requestPort0271, requestHeader0271, requestContent0271.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0271 = null;		// support garbage collector to reduce memory
		requestContent0271 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1975
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [271] <- Index 271
		if(replayMode)
		{
			long proxyDataRecordId =1614262571948L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest6'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0271_1 = new BoundaryBasedExtractorItem( "name=\"SAMLRequest\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0271_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest6'
			C_SAMLRequest6 = boundaryBasedContentExtractorItem0271_1.getResultText();
			log("<<< C_SAMLRequest6 = " + C_SAMLRequest6);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest6!= null && C_SAMLRequest6.trim().length() == 0)
			{
				C_SAMLRequest6 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest6' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest6 = " + C_SAMLRequest6);
			}
		}
		catch (Exception e) { C_SAMLRequest6 = null; log(e); }
		if (C_SAMLRequest6 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest6' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [272] <- WEB ADMIN Index 272 ---
		String requestProt0272 = "https";
		String requestHost0272 = "performancemanager4.successfactors.com";
		int    requestPort0272 = 443;
		String requestFile0272 = "/ui/uicore/css/xi_d41d8cd98f00b204e9800998ecf8427e.css";
		String requestHeader0272 = "GET " + requestFile0272 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0272, requestHost0272, requestPort0272, requestHeader0272, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0272 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [272] <- Index 272
		if(replayMode)
		{
			long proxyDataRecordId =1614262572021L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [273] <- WEB ADMIN Index 273 ---
		String requestProt0273 = "https";
		String requestHost0273 = "performancemanager4.successfactors.com";
		int    requestPort0273 = 443;
		String requestFile0273 = "/ui/uicore/css/xicommon_b2ba91d0973e2f2b556d59b67dfd2bc1.css";
		String requestHeader0273 = "GET " + requestFile0273 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0273, requestHost0273, requestPort0273, requestHeader0273, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0273 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 11785
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [273] <- Index 273
		if(replayMode)
		{
			long proxyDataRecordId =1614262572150L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [274] <- WEB ADMIN Index 274 ---
		String requestProt0274 = "https";
		String requestHost0274 = "performancemanager4.successfactors.com";
		int    requestPort0274 = 443;
		String requestFile0274 = "/ui/uicore/css/ext-custom_473ff6a53c9327806cfe3e6a15f6f177.css";
		String requestHeader0274 = "GET " + requestFile0274 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0274, requestHost0274, requestPort0274, requestHeader0274, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0274 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2075
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [274] <- Index 274
		if(replayMode)
		{
			long proxyDataRecordId =1614262572348L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [275] <- WEB ADMIN Index 275 ---
		String requestProt0275 = "https";
		String requestHost0275 = "performancemanager4.successfactors.com";
		int    requestPort0275 = 443;
		String requestFile0275 = "/ui/uicore/css/sysmsg_e5ae6c5bedbc0e4cac2f1ec64ce11153.css";
		String requestHeader0275 = "GET " + requestFile0275 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0275, requestHost0275, requestPort0275, requestHeader0275, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0275 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1136
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [275] <- Index 275
		if(replayMode)
		{
			long proxyDataRecordId =1614262572418L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [276] <- WEB ADMIN Index 276 ---
		String requestProt0276 = "https";
		String requestHost0276 = "teck.wfsaas.ca";
		int    requestPort0276 = 443;
		String requestFile0276 = "/workforce/SSO.do" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest2) +		// recorded value = nZJfb9owFMW%2FSuTXKn%2FsQUgtAkKLWJGgtEBpx8tkHDtYJXbIdQrbp59JS9VNWh%2F24od7r%2B%2F5nWP3h6dy772IGpTRKcJBhDyhucmVLlL0sBr7CRoO%2BsDKPano1BSmsQtxaARYz93UQF9bKWpqTQ0DBVSzUgC1nC5HsyklQUSr2ljDzR55mbuoNLOt2s7aCmgYWsGfg6MExiDgLDya%2BlmamotwuZwHuRky3s4DGAcwlxJ5kyxFPyKc5J0vnPgJJ5HfibrYT%2FA18TnudXoySbpYbt0oQCMmGizTNkUkItiPiE%2B6K9yhOKYYB3FMNshbCAZnqM987Fv%2FtAFRI299Cc110FtEtFWrP0bz%2BUYGbtfZHRpc0qhE7dyXTHPhDlaIuhNAw7kAkC4JU7uQTBmCDFVehedNJHSFiumf4col2Q8%2FolzAbp30JPsfMG98prH%2FHscBbisq91twF5CGSnAllcjRYOWefNRYU7avfqF75Xn%2FWUvnznUnOhenwa%2BbUZEt9SZ5iksmi6%2FkSon1an1QDxLmN%2BN8W63nd737YvYYnbrfy0O2OV096fh%2BsTnFrEx28%2BhWbFl2%2FVjMQH2Ld9PMju6Oafqm%2FZfae%2FWP3z34DQ%3D%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=KKycSGP%2F1xCczTWV6TWhddnWNf32jxLhjopPu7lIILiqFrFxOF8myQMIkbc9BPzZUBmc2fKbMGAfHzXavcsaww%2BzI9%2FDp5LtSxVlsICqi5Gdr1HlF21RzHGXYWz1sgkDxW3lpkAm56kXzH4xk2joEwtRQRREfj7PVQUfCHnXAbM%3D";
		requestFile0276 = Lib.replaceTextPattern(requestFile0276, "nZJfb9owFMW%2FSuTXKn%2FsQUgtAkKLWJGgtEBpx8tkHDtYJXbIdQrbp59JS9VNWh%2F24od7r%2B%2F5nWP3h6dy772IGpTRKcJBhDyhucmVLlL0sBr7CRoO%2BsDKPano1BSmsQtxaARYz93UQF9bKWpqTQ0DBVSzUgC1nC5HsyklQUSr2ljDzR55mbuoNLOt2s7aCmgYWsGfg6MExiDgLDya%2BlmamotwuZwHuRky3s4DGAcwlxJ5kyxFPyKc5J0vnPgJJ5HfibrYT%2FA18TnudXoySbpYbt0oQCMmGizTNkUkItiPiE%2B6K9yhOKYYB3FMNshbCAZnqM987Fv%2FtAFRI299Cc110FtEtFWrP0bz%2BUYGbtfZHRpc0qhE7dyXTHPhDlaIuhNAw7kAkC4JU7uQTBmCDFVehedNJHSFiumf4col2Q8%2FolzAbp30JPsfMG98prH%2FHscBbisq91twF5CGSnAllcjRYOWefNRYU7avfqF75Xn%2FWUvnznUnOhenwa%2BbUZEt9SZ5iksmi6%2FkSon1an1QDxLmN%2BN8W63nd737YvYYnbrfy0O2OV096fh%2BsTnFrEx28%2BhWbFl2%2FVjMQH2Ld9PMju6Oafqm%2FZfae%2FWP3z34DQ%3D%3D", java.net.URLEncoder.encode(C_SAMLRequest2), 0);		// search and replace request file fragment "nZJfb9owFMW%2FSuTXKn%2FsQUgtAkKLWJGgtEBpx8tkHDtYJXbIdQrbp59JS9VNWh%2F24od7r%2B%2F5nWP3h6dy772IGpTRKcJBhDyhucmVLlL0sBr7CRoO%2BsDKPano1BSmsQtxaARYz93UQF9bKWpqTQ0DBVSzUgC1nC5HsyklQUSr2ljDzR55mbuoNLOt2s7aCmgYWsGfg6MExiDgLDya%2BlmamotwuZwHuRky3s4DGAcwlxJ5kyxFPyKc5J0vnPgJJ5HfibrYT%2FA18TnudXoySbpYbt0oQCMmGizTNkUkItiPiE%2B6K9yhOKYYB3FMNshbCAZnqM987Fv%2FtAFRI299Cc110FtEtFWrP0bz%2BUYGbtfZHRpc0qhE7dyXTHPhDlaIuhNAw7kAkC4JU7uQTBmCDFVehedNJHSFiumf4col2Q8%2FolzAbp30JPsfMG98prH%2FHscBbisq91twF5CGSnAllcjRYOWefNRYU7avfqF75Xn%2FWUvnznUnOhenwa%2BbUZEt9SZ5iksmi6%2FkSon1an1QDxLmN%2BN8W63nd737YvYYnbrfy0O2OV096fh%2BsTnFrEx28%2BhWbFl2%2FVjMQH2Ld9PMju6Oafqm%2FZfae%2FWP3z34DQ%3D%3D" with variable 'C_SAMLRequest2' on all occurrences

		String requestHeader0276 = "GET " + requestFile0276 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.wfsaas.ca\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0276, requestHost0276, requestPort0276, requestHeader0276, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0276 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 836
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [276] <- Index 276
		if(replayMode)
		{
			long proxyDataRecordId =1614262573962L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [277] <- WEB ADMIN Index 277 ---
		log();
		log("# title: Login");
		String requestProt0277 = "https";
		String requestHost0277 = "teck.plateau.com";
		int    requestPort0277 = 443;
		String requestFile0277 = "/learning/saml/SSO" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest3) +		// recorded value = nZJdb9owFIb%2FSuTbKl8GQmaRVGgRKxKUFijtuJlMchKsJXbIcTq2Xz8nLVU3ab3YjS%2FO1%2Fuc93hyfa5K6xkaFEpGxHc8YoFMVSZkEZGH7cwOyXU8QV6VtGYLVahWr%2BHUAmrLdEpkL6mItI1kiqNAJnkFyHTKNtPlglHHY3WjtEpVSazENArJda921LpG5roa0u9OXXINvHVSVbkl8EYaArcb7m42K2LNk4h8G1EaZsOM25k38O0hHWf2IQ%2FA9nLwD%2BMx54MwNKWILcwlai51RKhHfdujNh1t%2FSHzA%2BZTZxQM9sRaA8cO4yPyst%2BYtQgNsXYXm0yGvJrCerXmvRkfT%2BRoZnX7k%2Fiyfw1NrpqKyxTMwwtohg62aQqIOU%2B1arB3BXNXZLXbTaKuCdRc%2FnS3xruJ%2Bx7lAnZrpOfJ%2F4BZs45G%2F7vcd%2Fw%2BIjK7BzcGSawhFbmAjMRbc%2BRpq1XV3%2FlC98Lz9pc2ZjuTncsMzvGvm2mRbOQ%2BfAoqnhef6ZWA3XZ3Eg85rm5m2aHere7G98Xy0TuPvlanZH%2B%2BepLB%2FXp%2FDngVHlfeLRx48umxWKL4EhwXiZ7e%2FYiiV%2B2%2F1N6if%2Fzn%2BDc%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=EasVCQxZnJMz7AWE%2B2ZPpvi9SxYHqa2ECwOYHaFGJgTRjUdtV2k3rscmuSmznTCy61%2BIQDKkQNMBFWtzyv%2FNJGxc3BqkHZ3qO8E5NfmpyQtlM0Y7tvw45ZZhKBZnwU7%2BWU9L8OBqF966liTaEbAI6BZqB8FitbhI4%2FkzqdLtLTM%3D";
		requestFile0277 = Lib.replaceTextPattern(requestFile0277, "nZJdb9owFIb%2FSuTbKl8GQmaRVGgRKxKUFijtuJlMchKsJXbIcTq2Xz8nLVU3ab3YjS%2FO1%2Fuc93hyfa5K6xkaFEpGxHc8YoFMVSZkEZGH7cwOyXU8QV6VtGYLVahWr%2BHUAmrLdEpkL6mItI1kiqNAJnkFyHTKNtPlglHHY3WjtEpVSazENArJda921LpG5roa0u9OXXINvHVSVbkl8EYaArcb7m42K2LNk4h8G1EaZsOM25k38O0hHWf2IQ%2FA9nLwD%2BMx54MwNKWILcwlai51RKhHfdujNh1t%2FSHzA%2BZTZxQM9sRaA8cO4yPyst%2BYtQgNsXYXm0yGvJrCerXmvRkfT%2BRoZnX7k%2Fiyfw1NrpqKyxTMwwtohg62aQqIOU%2B1arB3BXNXZLXbTaKuCdRc%2FnS3xruJ%2Bx7lAnZrpOfJ%2F4BZs45G%2F7vcd%2Fw%2BIjK7BzcGSawhFbmAjMRbc%2BRpq1XV3%2FlC98Lz9pc2ZjuTncsMzvGvm2mRbOQ%2BfAoqnhef6ZWA3XZ3Eg85rm5m2aHere7G98Xy0TuPvlanZH%2B%2BepLB%2FXp%2FDngVHlfeLRx48umxWKL4EhwXiZ7e%2FYiiV%2B2%2F1N6if%2Fzn%2BDc%3D", java.net.URLEncoder.encode(C_SAMLRequest3), 0);		// search and replace request file fragment "nZJdb9owFIb%2FSuTbKl8GQmaRVGgRKxKUFijtuJlMchKsJXbIcTq2Xz8nLVU3ab3YjS%2FO1%2Fuc93hyfa5K6xkaFEpGxHc8YoFMVSZkEZGH7cwOyXU8QV6VtGYLVahWr%2BHUAmrLdEpkL6mItI1kiqNAJnkFyHTKNtPlglHHY3WjtEpVSazENArJda921LpG5roa0u9OXXINvHVSVbkl8EYaArcb7m42K2LNk4h8G1EaZsOM25k38O0hHWf2IQ%2FA9nLwD%2BMx54MwNKWILcwlai51RKhHfdujNh1t%2FSHzA%2BZTZxQM9sRaA8cO4yPyst%2BYtQgNsXYXm0yGvJrCerXmvRkfT%2BRoZnX7k%2Fiyfw1NrpqKyxTMwwtohg62aQqIOU%2B1arB3BXNXZLXbTaKuCdRc%2FnS3xruJ%2Bx7lAnZrpOfJ%2F4BZs45G%2F7vcd%2Fw%2BIjK7BzcGSawhFbmAjMRbc%2BRpq1XV3%2FlC98Lz9pc2ZjuTncsMzvGvm2mRbOQ%2BfAoqnhef6ZWA3XZ3Eg85rm5m2aHere7G98Xy0TuPvlanZH%2B%2BepLB%2FXp%2FDngVHlfeLRx48umxWKL4EhwXiZ7e%2FYiiV%2B2%2F1N6if%2Fzn%2BDc%3D" with variable 'C_SAMLRequest3' on all occurrences

		String requestHeader0277 = "GET " + requestFile0277 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.plateau.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0277, requestHost0277, requestPort0277, requestHeader0277, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0277 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 523
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [277] <- Index 277
		if(replayMode)
		{
			long proxyDataRecordId =1614262574036L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [278] <- WEB ADMIN Index 278 ---
		String requestProt0278 = "https";
		String requestHost0278 = "okkrtwkpyfmrqckrenxirty.us2.sac.successfactors.com";
		int    requestPort0278 = 443;
		String requestFile0278 = "/application/logout" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest4) +		// recorded value = nZJdb9owFIb%2FSuTbKl8ehGARKrSIFYmWFijtuJmM4wQLYgcfpw379TOhVN209WI3vjhf73Nen8F1U%2B6dF65BKJmg0AuQwyVTmZBFgh6XYzdG18MB0HKPKzJVharNnB9qDsaxnRLIOZWgWkuiKAggkpYciGFkMbqdEuwFpNLKKKb2yElto5DUtGpbYyogvq92O21ed9UxL%2FWB7TSXjdDm6NWAPaDMg5oxDpBTZpQGj6nSp1W1F6yd4%2B9bKuRM0gT9CPqU5jzmbvdLyN1OHMRuH%2BPIzfI87oX9iG42PVsKUPOJBEOlSRAOcOgG2MXdZdghYUTC0OsFnTVy5pzCifSz5c7ypAaukbO6OGkz6M030qrpj359PpGCnXVaDQ0vFlVc50qXVDJuH1pw3fmbLZD7Iqv80yTs20BF5dFfcrYb%2BB9RLmB3VnqS%2Fg%2BYMz7RmH%2BXh17YRkTmtuDWIAkVZyIXPEPDpb2DUW1U2X7hhe7M835uC7udzU5kxpvhz5tRkS7kOn6OSpoXX%2FGV4Kvl6iAec5jdjLNNtZrd9x6K26eg6X4vD%2Bm6uXqW0cN83US0jLez4I5vaNp%2FKm5BfIu209SM7l%2BT5E37D7X36G8nP%2FwF
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=pxKXx3Lo%2Bic%2B452STRntRL0VmU3rVODqCpwvppM3xgy9fVjEm8O%2F04zh5YtDOwNmIwhzhydd8pMMjU9qkF%2FA5HfP%2BTvveMtJxqT3ZBgV05YF61WgQA4ozWfJ8vd%2Ffx6TUKrvK0xseYHcFcKezyWNpSqNhjufjjetCvQE%2F0jFTf8%3D";
		requestFile0278 = Lib.replaceTextPattern(requestFile0278, "nZJdb9owFIb%2FSuTbKl8ehGARKrSIFYmWFijtuJmM4wQLYgcfpw379TOhVN209WI3vjhf73Nen8F1U%2B6dF65BKJmg0AuQwyVTmZBFgh6XYzdG18MB0HKPKzJVharNnB9qDsaxnRLIOZWgWkuiKAggkpYciGFkMbqdEuwFpNLKKKb2yElto5DUtGpbYyogvq92O21ed9UxL%2FWB7TSXjdDm6NWAPaDMg5oxDpBTZpQGj6nSp1W1F6yd4%2B9bKuRM0gT9CPqU5jzmbvdLyN1OHMRuH%2BPIzfI87oX9iG42PVsKUPOJBEOlSRAOcOgG2MXdZdghYUTC0OsFnTVy5pzCifSz5c7ypAaukbO6OGkz6M030qrpj359PpGCnXVaDQ0vFlVc50qXVDJuH1pw3fmbLZD7Iqv80yTs20BF5dFfcrYb%2BB9RLmB3VnqS%2Fg%2BYMz7RmH%2BXh17YRkTmtuDWIAkVZyIXPEPDpb2DUW1U2X7hhe7M835uC7udzU5kxpvhz5tRkS7kOn6OSpoXX%2FGV4Kvl6iAec5jdjLNNtZrd9x6K26eg6X4vD%2Bm6uXqW0cN83US0jLez4I5vaNp%2FKm5BfIu209SM7l%2BT5E37D7X36G8nP%2FwF", java.net.URLEncoder.encode(C_SAMLRequest4), 0);		// search and replace request file fragment "nZJdb9owFIb%2FSuTbKl8ehGARKrSIFYmWFijtuJmM4wQLYgcfpw379TOhVN209WI3vjhf73Nen8F1U%2B6dF65BKJmg0AuQwyVTmZBFgh6XYzdG18MB0HKPKzJVharNnB9qDsaxnRLIOZWgWkuiKAggkpYciGFkMbqdEuwFpNLKKKb2yElto5DUtGpbYyogvq92O21ed9UxL%2FWB7TSXjdDm6NWAPaDMg5oxDpBTZpQGj6nSp1W1F6yd4%2B9bKuRM0gT9CPqU5jzmbvdLyN1OHMRuH%2BPIzfI87oX9iG42PVsKUPOJBEOlSRAOcOgG2MXdZdghYUTC0OsFnTVy5pzCifSz5c7ypAaukbO6OGkz6M030qrpj359PpGCnXVaDQ0vFlVc50qXVDJuH1pw3fmbLZD7Iqv80yTs20BF5dFfcrYb%2BB9RLmB3VnqS%2Fg%2BYMz7RmH%2BXh17YRkTmtuDWIAkVZyIXPEPDpb2DUW1U2X7hhe7M835uC7udzU5kxpvhz5tRkS7kOn6OSpoXX%2FGV4Kvl6iAec5jdjLNNtZrd9x6K26eg6X4vD%2Bm6uXqW0cN83US0jLez4I5vaNp%2FKm5BfIu209SM7l%2BT5E37D7X36G8nP%2FwF" with variable 'C_SAMLRequest4' on all occurrences

		String requestHeader0278 = "GET " + requestFile0278 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: okkrtwkpyfmrqckrenxirty.us2.sac.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0278, requestHost0278, requestPort0278, requestHeader0278, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0278 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2982
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [278] <- Index 278
		if(replayMode)
		{
			long proxyDataRecordId =1614262574248L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_RequestID'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0278_1 = new BoundaryBasedExtractorItem( "name=\"requestId\" value=\"" , "\"/>",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0278_1);

		// setup var extractor for 'C_IDPName'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0278_2 = new BoundaryBasedExtractorItem( "<input type=\"hidden\" name=\"idpName\" value=\"" , "\"/>",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0278_2);

		// setup var extractor for 'C_Signature2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0278_3 = new BoundaryBasedExtractorItem( "name=\"signature\" value=\"" , "\"/>",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0278_3);

		// setup var extractor for 'C_TenantID'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0278_4 = new BoundaryBasedExtractorItem( "<input type=\"hidden\" name=\"tenantId\" value=\"" , "\"/>",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0278_4);

		// setup var extractor for 'C_RequestURI'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0278_5 = new BoundaryBasedExtractorItem( "name=\"requestUrl\" value=\"" , "\"/>",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0278_5);

		// setup var extractor for 'C_RelayState1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0278_6 = new BoundaryBasedExtractorItem( "hidden\" name=\"relayState\" value=\"" , "\"/>",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0278_6);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_RequestID'
			C_RequestID = boundaryBasedContentExtractorItem0278_1.getResultText();
			log("<<< C_RequestID = " + C_RequestID);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_RequestID!= null && C_RequestID.trim().length() == 0)
			{
				C_RequestID = "";
				log("runtime note: the extraction of a new value for the variable 'C_RequestID' ends up with an empty string - a substitute value was set");
				log("<<< C_RequestID = " + C_RequestID);
			}
		}
		catch (Exception e) { C_RequestID = null; log(e); }
		if (C_RequestID == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_RequestID' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_IDPName'
			C_IDPName = boundaryBasedContentExtractorItem0278_2.getResultText();
			log("<<< C_IDPName = " + C_IDPName);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_IDPName!= null && C_IDPName.trim().length() == 0)
			{
				C_IDPName = "";
				log("runtime note: the extraction of a new value for the variable 'C_IDPName' ends up with an empty string - a substitute value was set");
				log("<<< C_IDPName = " + C_IDPName);
			}
		}
		catch (Exception e) { C_IDPName = null; log(e); }
		if (C_IDPName == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_IDPName' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Signature2'
			C_Signature2 = boundaryBasedContentExtractorItem0278_3.getResultText();
			log("<<< C_Signature2 = " + C_Signature2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Signature2!= null && C_Signature2.trim().length() == 0)
			{
				C_Signature2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Signature2' ends up with an empty string - a substitute value was set");
				log("<<< C_Signature2 = " + C_Signature2);
			}
		}
		catch (Exception e) { C_Signature2 = null; log(e); }
		if (C_Signature2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Signature2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_TenantID'
			C_TenantID = boundaryBasedContentExtractorItem0278_4.getResultText();
			log("<<< C_TenantID = " + C_TenantID);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_TenantID!= null && C_TenantID.trim().length() == 0)
			{
				C_TenantID = "";
				log("runtime note: the extraction of a new value for the variable 'C_TenantID' ends up with an empty string - a substitute value was set");
				log("<<< C_TenantID = " + C_TenantID);
			}
		}
		catch (Exception e) { C_TenantID = null; log(e); }
		if (C_TenantID == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_TenantID' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_RequestURI'
			C_RequestURI = boundaryBasedContentExtractorItem0278_5.getResultText();
			log("<<< C_RequestURI = " + C_RequestURI);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_RequestURI!= null && C_RequestURI.trim().length() == 0)
			{
				C_RequestURI = "";
				log("runtime note: the extraction of a new value for the variable 'C_RequestURI' ends up with an empty string - a substitute value was set");
				log("<<< C_RequestURI = " + C_RequestURI);
			}
		}
		catch (Exception e) { C_RequestURI = null; log(e); }
		if (C_RequestURI == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_RequestURI' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_RelayState1'
			C_RelayState1 = boundaryBasedContentExtractorItem0278_6.getResultText();
			log("<<< C_RelayState1 = " + C_RelayState1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_RelayState1!= null && C_RelayState1.trim().length() == 0)
			{
				C_RelayState1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_RelayState1' ends up with an empty string - a substitute value was set");
				log("<<< C_RelayState1 = " + C_RelayState1);
			}
		}
		catch (Exception e) { C_RelayState1 = null; log(e); }
		if (C_RelayState1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_RelayState1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [279] <- WEB ADMIN Index 279 ---
		log();
		log("# title: Onboarding");
		String requestProt0279 = "https";
		String requestHost0279 = "onboarding4.successfactors.com";
		int    requestPort0279 = 443;
		String requestFile0279 = "/ONB/SSO/SAML20/SingleLogoutService.aspx" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest5) +		// recorded value = nZJdb9owFIb%2FSuTbKh%2B2IIBFqGgjViQ%2BWkJpx81kHCdYI3bIcdpsv34mlKqbtl7sxhfnHJ%2F3Oa%2Fe4XVTHJwXUYHUKkLYC5AjFNepVHmEHtcTt4%2BuR0NgxYGUdKZzXZuVONYCjGN%2FKqDnVoTqSlHNQAJVrBBADafJeD6jxAtoWWmjuT4gJ7YfpWKmVdsbUwL1fa12mlUnyY4HNecCIGPc6Ao8rgt%2Fubjxk2Tpn9aRwE%2Fs3EGcURJRvUguPAZlg5xpHKFvPUK6XZ52XY77qdvBZODueoS5mA3ScNAJWNbHdhSgFlMFhikTIRIQ7AbEJd017lAcUoy9ASZb5KwEgxPqZ9cdWhRag6iQs7lYaTvozTjaqlUfDft8IwO76%2BQRGl08KkWV6apgigv7sFxUf%2FUKMl%2Bm5dkq3xZKpn74a8G%2FD%2F2PKBewhZWexv8D5kxONObf49jDbUWmbgtuDVJQCi4zKVI0WtsgjGujizYLF7ozz3veEnud7U5VKprRz7txHidq238OC5blt%2BRKis16c5SPGSzvJumu3Czvew%2F5%2FCloul%2BLY7xtrp5V%2BLDaNiEr%2BvtlsBA7Fg%2Be8jnIL%2BF%2BFpvx%2FWsUvWn%2FofZe%2FS3zo18%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=DUMncMk4H%2BJMOFr24Nnl5d32585KVkvG1t7oqsrPC6a5a%2BdRTN4%2FzpZSAzq9ftmefmaED1AldSxH4EK%2Frz%2FiNzjVKXSNtr6E93O%2BRjMQh5wbN945AF9XioXNvb7lGwC8yIcWud7ffQ4l9CcbJcoO1umJLInvXmPJJQJEm6k6Dd0%3D";
		requestFile0279 = Lib.replaceTextPattern(requestFile0279, "nZJdb9owFIb%2FSuTbKh%2B2IIBFqGgjViQ%2BWkJpx81kHCdYI3bIcdpsv34mlKqbtl7sxhfnHJ%2F3Oa%2Fe4XVTHJwXUYHUKkLYC5AjFNepVHmEHtcTt4%2BuR0NgxYGUdKZzXZuVONYCjGN%2FKqDnVoTqSlHNQAJVrBBADafJeD6jxAtoWWmjuT4gJ7YfpWKmVdsbUwL1fa12mlUnyY4HNecCIGPc6Ao8rgt%2Fubjxk2Tpn9aRwE%2Fs3EGcURJRvUguPAZlg5xpHKFvPUK6XZ52XY77qdvBZODueoS5mA3ScNAJWNbHdhSgFlMFhikTIRIQ7AbEJd017lAcUoy9ASZb5KwEgxPqZ9cdWhRag6iQs7lYaTvozTjaqlUfDft8IwO76%2BQRGl08KkWV6apgigv7sFxUf%2FUKMl%2Bm5dkq3xZKpn74a8G%2FD%2F2PKBewhZWexv8D5kxONObf49jDbUWmbgtuDVJQCi4zKVI0WtsgjGujizYLF7ozz3veEnud7U5VKprRz7txHidq238OC5blt%2BRKis16c5SPGSzvJumu3Czvew%2F5%2FCloul%2BLY7xtrp5V%2BLDaNiEr%2BvtlsBA7Fg%2Be8jnIL%2BF%2BFpvx%2FWsUvWn%2FofZe%2FS3zo18%3D", java.net.URLEncoder.encode(C_SAMLRequest5), 0);		// search and replace request file fragment "nZJdb9owFIb%2FSuTbKh%2B2IIBFqGgjViQ%2BWkJpx81kHCdYI3bIcdpsv34mlKqbtl7sxhfnHJ%2F3Oa%2Fe4XVTHJwXUYHUKkLYC5AjFNepVHmEHtcTt4%2BuR0NgxYGUdKZzXZuVONYCjGN%2FKqDnVoTqSlHNQAJVrBBADafJeD6jxAtoWWmjuT4gJ7YfpWKmVdsbUwL1fa12mlUnyY4HNecCIGPc6Ao8rgt%2Fubjxk2Tpn9aRwE%2Fs3EGcURJRvUguPAZlg5xpHKFvPUK6XZ52XY77qdvBZODueoS5mA3ScNAJWNbHdhSgFlMFhikTIRIQ7AbEJd017lAcUoy9ASZb5KwEgxPqZ9cdWhRag6iQs7lYaTvozTjaqlUfDft8IwO76%2BQRGl08KkWV6apgigv7sFxUf%2FUKMl%2Bm5dkq3xZKpn74a8G%2FD%2F2PKBewhZWexv8D5kxONObf49jDbUWmbgtuDVJQCi4zKVI0WtsgjGujizYLF7ozz3veEnud7U5VKprRz7txHidq238OC5blt%2BRKis16c5SPGSzvJumu3Czvew%2F5%2FCloul%2BLY7xtrp5V%2BLDaNiEr%2BvtlsBA7Fg%2Be8jnIL%2BF%2BFpvx%2FWsUvWn%2FofZe%2FS3zo18%3D" with variable 'C_SAMLRequest5' on all occurrences

		String requestHeader0279 = "GET " + requestFile0279 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0279, requestHost0279, requestPort0279, requestHeader0279, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0279 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1175
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Onboarding");		// Test [279] <- Index 279
		if(replayMode)
		{
			long proxyDataRecordId =1614262574509L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_V2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0279_1 = new BoundaryBasedExtractorItem( "XpressHR/Theme.ashx?v=" , "\" type=\"text/css\" rel",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0279_1);

		// setup var extractor for 'C_V1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0279_2 = new BoundaryBasedExtractorItem( "ashx?v=" , "\">",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0279_2);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_V2'
			C_V2 = boundaryBasedContentExtractorItem0279_1.getResultText();
			log("<<< C_V2 = " + C_V2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_V2!= null && C_V2.trim().length() == 0)
			{
				C_V2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_V2' ends up with an empty string - a substitute value was set");
				log("<<< C_V2 = " + C_V2);
			}
		}
		catch (Exception e) { C_V2 = null; log(e); }
		if (C_V2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_V2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_V1'
			C_V1 = boundaryBasedContentExtractorItem0279_2.getResultText();
			log("<<< C_V1 = " + C_V1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_V1!= null && C_V1.trim().length() == 0)
			{
				C_V1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_V1' ends up with an empty string - a substitute value was set");
				log("<<< C_V1 = " + C_V1);
			}
		}
		catch (Exception e) { C_V1 = null; log(e); }
		if (C_V1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_V1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [280] <- WEB ADMIN Index 280 ---
		log();
		log("# title: Object moved");
		String requestProt0280 = "https";
		String requestHost0280 = "analytics4.successfactors.com";
		int    requestPort0280 = 443;
		String requestFile0280 = "/Production/HrmlLogout.aspx" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest6) +		// recorded value = nZJNb9pAEIb%2FirXXyJ8YB68wEapFQYJAgJCUSzWs12ZVe9d41q3TX19jQpRWbQ697GG%2B3mfe2eFdU%2BTGd16hUDIiruUQg0umEiGziDxuJ%2BaA3I2GCEXulXSuMlXrNT%2FVHLXRdkqkl1RE6kpSBSiQSig4Us3oZryYU89yaFkprZjKiRG3jUKC7tSOWpdIbRsk5C9aMPQtrBnjiCkwrSq0mCrsVaWSmp077GlV5BcGC7BsiDGLI%2FLVTyDsOezWDBn0TD8AMA9%2BCGYv7Ifggx86jt%2BWItZ8JlGD1BHxHM81Hc%2F0%2BlvXp25AXc%2Fqh86eGGsOeIb7aJ%2B8Y6A18ooYu6t5bYa8WkU7teq9RR9PBGxnnXcko6srJa9SVRUgGW8fyHj1V3swtUVS2udJnt0GSpAv9pazb0P7PcoV7L6VnsX%2FA2ZMzjT63%2BWu5XYRkZgdeGuQxJIzkQqekNG2Pf241qrorn%2Blu%2FC8%2FbBNu12bncmEN6Of03EWb%2BR%2B8BwUkGafvBvBd9vdSTymuJxOkkO5W65uH7LFk9P0vxSneN%2FcPMvgYb1vAigGx6Vzzw8Qh0%2FZAsXn4DiP9Xj1I4petf9Qe4v%2B9stHvwA%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=kRD1hdCEXl%2Bg0bJBuUXxaf%2BkvasWurt9pPcn4oE6HBR3WXegrNB9XNbwutZrFIAjCDALZzfdbTL7P965dhpZTaXuGYVkPRY7ad%2BetybeEUsS6faqRV2gmhYturExS3nNPYHy2metp4hNP01E4SvI6vKQye8PjBBytmZh7XlEUyQ%3D";
		requestFile0280 = Lib.replaceTextPattern(requestFile0280, "nZJNb9pAEIb%2FirXXyJ8YB68wEapFQYJAgJCUSzWs12ZVe9d41q3TX19jQpRWbQ697GG%2B3mfe2eFdU%2BTGd16hUDIiruUQg0umEiGziDxuJ%2BaA3I2GCEXulXSuMlXrNT%2FVHLXRdkqkl1RE6kpSBSiQSig4Us3oZryYU89yaFkprZjKiRG3jUKC7tSOWpdIbRsk5C9aMPQtrBnjiCkwrSq0mCrsVaWSmp077GlV5BcGC7BsiDGLI%2FLVTyDsOezWDBn0TD8AMA9%2BCGYv7Ifggx86jt%2BWItZ8JlGD1BHxHM81Hc%2F0%2BlvXp25AXc%2Fqh86eGGsOeIb7aJ%2B8Y6A18ooYu6t5bYa8WkU7teq9RR9PBGxnnXcko6srJa9SVRUgGW8fyHj1V3swtUVS2udJnt0GSpAv9pazb0P7PcoV7L6VnsX%2FA2ZMzjT63%2BWu5XYRkZgdeGuQxJIzkQqekNG2Pf241qrorn%2Blu%2FC8%2FbBNu12bncmEN6Of03EWb%2BR%2B8BwUkGafvBvBd9vdSTymuJxOkkO5W65uH7LFk9P0vxSneN%2FcPMvgYb1vAigGx6Vzzw8Qh0%2FZAsXn4DiP9Xj1I4petf9Qe4v%2B9stHvwA%3D", java.net.URLEncoder.encode(C_SAMLRequest6), 0);		// search and replace request file fragment "nZJNb9pAEIb%2FirXXyJ8YB68wEapFQYJAgJCUSzWs12ZVe9d41q3TX19jQpRWbQ697GG%2B3mfe2eFdU%2BTGd16hUDIiruUQg0umEiGziDxuJ%2BaA3I2GCEXulXSuMlXrNT%2FVHLXRdkqkl1RE6kpSBSiQSig4Us3oZryYU89yaFkprZjKiRG3jUKC7tSOWpdIbRsk5C9aMPQtrBnjiCkwrSq0mCrsVaWSmp077GlV5BcGC7BsiDGLI%2FLVTyDsOezWDBn0TD8AMA9%2BCGYv7Ifggx86jt%2BWItZ8JlGD1BHxHM81Hc%2F0%2BlvXp25AXc%2Fqh86eGGsOeIb7aJ%2B8Y6A18ooYu6t5bYa8WkU7teq9RR9PBGxnnXcko6srJa9SVRUgGW8fyHj1V3swtUVS2udJnt0GSpAv9pazb0P7PcoV7L6VnsX%2FA2ZMzjT63%2BWu5XYRkZgdeGuQxJIzkQqekNG2Pf241qrorn%2Blu%2FC8%2FbBNu12bncmEN6Of03EWb%2BR%2B8BwUkGafvBvBd9vdSTymuJxOkkO5W65uH7LFk9P0vxSneN%2FcPMvgYb1vAigGx6Vzzw8Qh0%2FZAsXn4DiP9Xj1I4petf9Qe4v%2B9stHvwA%3D" with variable 'C_SAMLRequest6' on all occurrences

		String requestHeader0280 = "GET " + requestFile0280 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0280, requestHost0280, requestPort0280, requestHeader0280, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0280 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 2109
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [280] <- Index 280
		if(replayMode)
		{
			long proxyDataRecordId =1614262574585L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [281] <- WEB ADMIN Index 281 ---
		log();
		log("# title: Page not found");
		String requestProt0281 = "https";
		String requestHost0281 = "job-v3.multiposting.fr";
		int    requestPort0281 = 443;
		String requestFile0281 = "/saml2/" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest7) +		// recorded value = nZJdb9owFIb%2FSuTbKh%2FOIAWLUKFFrEhQWqC042ZynJPgjdghx2nZfv2ctFTdpPViN744X%2B9z3uPR1ak8OE9Qo9QqJtQLiANK6EyqIib3m6k7IFfjEfLyEFZsrgvdmBUcG0Dj2E6F7CUVk6ZWTHOUyBQvAZkRbD1ZzFnoBayqtdFCH4iT2EapuOnU9sZUyHz%2Fu07dp09e2RyMrHRbUHh57XeTfeLMkph8y2geRQEXbtAHcHsZT93BEAYuUAq9IM3yy7RvSxEbmCk0XJmYhEFI3SB0w%2F6G9hiNGKXeMBzuiLMCji3BR9CHblnWINTE2Z4dshny6gfr1Or3Pnw8kaOd1a5OxufVK6hzXZdcCbAPL6DuedgIAYg5F0bX6Ald%2Bpj7Mqv8dlLo20DF1U9%2FA%2BLHyH%2BPcga7sdKz5H%2FAnGlLY%2F5dTj3aRWTmduDWIIUVCJlLyMh4Y%2B87aYwuuxOf6V543r7R2m5nszOVwWn863pSJGu1GzxGJc%2BLz%2BGFhO1me5T3OS6vp1labZe3l3fF4iE49b%2BWx2R3unhU0d1qd4p4OdgvgxtIeTJ8KBYov0T7eWImt89x%2FKr9l9pb9I%2BvPP4N
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=PB0EhcPdNDXxB9K9ahkDv2gbqgyN%2BFx%2Bhgdsfr2CYQ%2BK0wxKTQNegESUL4eL7HicQxgm7jPuIxoGCTNSOXnQMq6L%2F7v4cBqxePfNxj94hHTt8Kg1Xy49aab92rQNWvRBJKI6oOW0XGd4RdtwyebbOAgO3s8qbbl0w39zf0mc5Xc%3D";
		requestFile0281 = Lib.replaceTextPattern(requestFile0281, "nZJdb9owFIb%2FSuTbKh%2FOIAWLUKFFrEhQWqC042ZynJPgjdghx2nZfv2ctFTdpPViN744X%2B9z3uPR1ak8OE9Qo9QqJtQLiANK6EyqIib3m6k7IFfjEfLyEFZsrgvdmBUcG0Dj2E6F7CUVk6ZWTHOUyBQvAZkRbD1ZzFnoBayqtdFCH4iT2EapuOnU9sZUyHz%2Fu07dp09e2RyMrHRbUHh57XeTfeLMkph8y2geRQEXbtAHcHsZT93BEAYuUAq9IM3yy7RvSxEbmCk0XJmYhEFI3SB0w%2F6G9hiNGKXeMBzuiLMCji3BR9CHblnWINTE2Z4dshny6gfr1Or3Pnw8kaOd1a5OxufVK6hzXZdcCbAPL6DuedgIAYg5F0bX6Ald%2Bpj7Mqv8dlLo20DF1U9%2FA%2BLHyH%2BPcga7sdKz5H%2FAnGlLY%2F5dTj3aRWTmduDWIIUVCJlLyMh4Y%2B87aYwuuxOf6V543r7R2m5nszOVwWn863pSJGu1GzxGJc%2BLz%2BGFhO1me5T3OS6vp1labZe3l3fF4iE49b%2BWx2R3unhU0d1qd4p4OdgvgxtIeTJ8KBYov0T7eWImt89x%2FKr9l9pb9I%2BvPP4N", java.net.URLEncoder.encode(C_SAMLRequest7), 0);		// search and replace request file fragment "nZJdb9owFIb%2FSuTbKh%2FOIAWLUKFFrEhQWqC042ZynJPgjdghx2nZfv2ctFTdpPViN744X%2B9z3uPR1ak8OE9Qo9QqJtQLiANK6EyqIib3m6k7IFfjEfLyEFZsrgvdmBUcG0Dj2E6F7CUVk6ZWTHOUyBQvAZkRbD1ZzFnoBayqtdFCH4iT2EapuOnU9sZUyHz%2Fu07dp09e2RyMrHRbUHh57XeTfeLMkph8y2geRQEXbtAHcHsZT93BEAYuUAq9IM3yy7RvSxEbmCk0XJmYhEFI3SB0w%2F6G9hiNGKXeMBzuiLMCji3BR9CHblnWINTE2Z4dshny6gfr1Or3Pnw8kaOd1a5OxufVK6hzXZdcCbAPL6DuedgIAYg5F0bX6Ald%2Bpj7Mqv8dlLo20DF1U9%2FA%2BLHyH%2BPcga7sdKz5H%2FAnGlLY%2F5dTj3aRWTmduDWIIUVCJlLyMh4Y%2B87aYwuuxOf6V543r7R2m5nszOVwWn863pSJGu1GzxGJc%2BLz%2BGFhO1me5T3OS6vp1labZe3l3fF4iE49b%2BWx2R3unhU0d1qd4p4OdgvgxtIeTJ8KBYov0T7eWImt89x%2FKr9l9pb9I%2BvPP4N" with variable 'C_SAMLRequest7' on all occurrences

		String requestHeader0281 = "GET " + requestFile0281 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: job-v3.multiposting.fr\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0281, requestHost0281, requestPort0281, requestHeader0281, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0281 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 404, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 5997
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {404}, null, null, null);		// Test [281] <- Index 281
		if(replayMode)
		{
			long proxyDataRecordId =1614262574660L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [282] <- WEB ADMIN Index 282 ---
		String requestProt0282 = "https";
		String requestHost0282 = "my030334.payroll.ondemand.com";
		int    requestPort0282 = 443;
		String requestFile0282 = "/sap/saml2/sp/slo/100" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest8) +		// recorded value = nZJdb9owFIb%2FSuTbKrEdIAOLUKFFrEhQWqC042YyjhOsJXbIcTbYr58JpeomrRe7s87X%2B57neHh7LAvvh6xBGR0jGhDkSS1MqnQeo6f1xO%2Bj29EQeFmEFZuZ3DR2KQ%2BNBOu5Tg3skopRU2tmOChgmpcSmBVsNZ7PWBgQVtXGGmEK5CWuUWluW7W9tRUwjMsT6ZBOpxtU%2FFSbogiMTmXJdRoIU2LgFW5FMLhHYTAlzuQ0idG3qJ%2BGMiWZH%2FY7O7%2Bb8dQfRD3u8x0VgnIieNZ1pQCNnGqwXNsYhSSkPgn9sLemXUYjRmkwoHSLvKXkcLb10SZFS4A1IGvkba7YXAa9QmKtWv0ezscTObhZZx5odOVRyToztQMgzhR4LutuAI0QEiDjwpoaLmAyrNIKnyeF2AUqrk94LcX3IX5v5Wrs3klPk%2F8x5k3Obuy%2Fy2lA24hK%2Fda4A6ShkkJlSqZotHZHHzfWlO3dr%2B4uft7%2B1spt57JTd%2Frj6NfdOE9Wett%2FiUqe5Z%2FDGyU3681BPWWwuJuku2qzePj0mM%2BfybH3tTwk2%2BPNi44el9tjxMv%2BfkHu5Y4ng%2Bd8DupLtJ8ldvzwM45ftf9Se4v%2B8b9HvwE%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=dVOqvn0QeQ%2Bfo2Xwdj%2FzAhlfwQ687mIR7COPrXOcBLdbUULVEGuGPdAU%2BIFvX0dRlQcPK07BckyBVwY6EXK%2Ba6RcnzGbXGmEfKH7c9aWVuEiXcgYpHAkv0C1k%2BU%2Bb3YgAXIoeDK0qpiSMi7JKZErAOk8cEDyaKv%2BUPbMiOcSybE%3D";
		requestFile0282 = Lib.replaceTextPattern(requestFile0282, "nZJdb9owFIb%2FSuTbKrEdIAOLUKFFrEhQWqC042YyjhOsJXbIcTbYr58JpeomrRe7s87X%2B57neHh7LAvvh6xBGR0jGhDkSS1MqnQeo6f1xO%2Bj29EQeFmEFZuZ3DR2KQ%2BNBOu5Tg3skopRU2tmOChgmpcSmBVsNZ7PWBgQVtXGGmEK5CWuUWluW7W9tRUwjMsT6ZBOpxtU%2FFSbogiMTmXJdRoIU2LgFW5FMLhHYTAlzuQ0idG3qJ%2BGMiWZH%2FY7O7%2Bb8dQfRD3u8x0VgnIieNZ1pQCNnGqwXNsYhSSkPgn9sLemXUYjRmkwoHSLvKXkcLb10SZFS4A1IGvkba7YXAa9QmKtWv0ezscTObhZZx5odOVRyToztQMgzhR4LutuAI0QEiDjwpoaLmAyrNIKnyeF2AUqrk94LcX3IX5v5Wrs3klPk%2F8x5k3Obuy%2Fy2lA24hK%2Fda4A6ShkkJlSqZotHZHHzfWlO3dr%2B4uft7%2B1spt57JTd%2Frj6NfdOE9Wett%2FiUqe5Z%2FDGyU3681BPWWwuJuku2qzePj0mM%2BfybH3tTwk2%2BPNi44el9tjxMv%2BfkHu5Y4ng%2Bd8DupLtJ8ldvzwM45ftf9Se4v%2B8b9HvwE%3D", java.net.URLEncoder.encode(C_SAMLRequest8), 0);		// search and replace request file fragment "nZJdb9owFIb%2FSuTbKrEdIAOLUKFFrEhQWqC042YyjhOsJXbIcTbYr58JpeomrRe7s87X%2B57neHh7LAvvh6xBGR0jGhDkSS1MqnQeo6f1xO%2Bj29EQeFmEFZuZ3DR2KQ%2BNBOu5Tg3skopRU2tmOChgmpcSmBVsNZ7PWBgQVtXGGmEK5CWuUWluW7W9tRUwjMsT6ZBOpxtU%2FFSbogiMTmXJdRoIU2LgFW5FMLhHYTAlzuQ0idG3qJ%2BGMiWZH%2FY7O7%2Bb8dQfRD3u8x0VgnIieNZ1pQCNnGqwXNsYhSSkPgn9sLemXUYjRmkwoHSLvKXkcLb10SZFS4A1IGvkba7YXAa9QmKtWv0ezscTObhZZx5odOVRyToztQMgzhR4LutuAI0QEiDjwpoaLmAyrNIKnyeF2AUqrk94LcX3IX5v5Wrs3klPk%2F8x5k3Obuy%2Fy2lA24hK%2Fda4A6ShkkJlSqZotHZHHzfWlO3dr%2B4uft7%2B1spt57JTd%2Frj6NfdOE9Wett%2FiUqe5Z%2FDGyU3681BPWWwuJuku2qzePj0mM%2BfybH3tTwk2%2BPNi44el9tjxMv%2BfkHu5Y4ng%2Bd8DupLtJ8ldvzwM45ftf9Se4v%2B8b9HvwE%3D" with variable 'C_SAMLRequest8' on all occurrences

		String requestHeader0282 = "GET " + requestFile0282 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: my030334.payroll.ondemand.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0282, requestHost0282, requestPort0282, requestHeader0282, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0282 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2758
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Note:");		// Test [282] <- Index 282
		if(replayMode)
		{
			long proxyDataRecordId =1614262574754L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		htmlContentParser = new HtmlContentParser(testURL, this);
		try
		{
			// extract var 'vSAMLResponse2'
			vSAMLResponse2 = htmlContentParser.getFormTable().getForm(0).getFormItemValue("SAMLResponse");		// recorded value = PHNhbWxwOkxvZ291dFJlc3BvbnNlIElEPSJTMDAxNjNlYjMtYjdiMC0xZWRiLTlkZWUtODBhMjMzOWVlMWFmIiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAyMS0wMi0yNVQxNDoxNjoxNFoiIEluUmVzcG9uc2VUbz0iXzY4ZDJlZDBmLTI4M2ItNGZhZC05NjVhLWFiMWNjMWEwY2FmNCIgRGVzdGluYXRpb249Imh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2YvaWRwL1NBTUwyL3Nsby9QT1NUIiB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48c2FtbDpJc3N1ZXIgeG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+WE9FQ0wxMDA8L3NhbWw6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkczpTaWduZWRJbmZvPjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+PGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPjxkczpSZWZlcmVuY2UgVVJJPSIjUzAwMTYzZWIzLWI3YjAtMWVkYi05ZGVlLTgwYTIzMzllZTFhZiI+PGRzOlRyYW5zZm9ybXM+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3Jtcz48ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48ZHM6RGlnZXN0VmFsdWU+VXMrQjNzSDJaV0dFUGMzMzNoSmo1Q3htRGFvPTwvZHM6RGlnZXN0VmFsdWU+PC9kczpSZWZlcmVuY2U+PC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5LaGtJVkdxbFE3WWlqbHdNL2EwTGFwb1NvT0VtL1Q4NnJhOUJobmRQWGpDbFpLRFZLUm5XQWlJUFd5YytwNG5QdjQ4cDBVNnZqZ2hYCkdBNnJtL2xiYkY3dGw4bE84REJuY0w1M0VHSlA4YmtuZ1hEK0xreHZTbzVNZ1FpYkFhTWdBcmJoc0ZtYUJJQ29MdDBJOVorYTNzL2gKeEd0YzBvNWNHQ29abng3UDBUUmViSEZoemI5UUE4R0Z0SHpabURTYVpjTE9aeE9kZU9CY1VqM2QzdzVuclpmd0huL05aRnUydU55TApWYVFHZWtBVGdMSzVhMzZwbnMzaGlIU21xT1p2WkZ4SlNHLzl2SisxRjJ4SlFvRmtxVFhnZmhEcDVZUnR6Wk5oYzgxeTlOMmJpcDBBCkdNT21QZ3J4eEw3SG5nbEkwTVdWa0ppeGpFbjBOU1BLS3dieXVnPT08L2RzOlNpZ25hdHVyZVZhbHVlPjwvZHM6U2lnbmF0dXJlPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6UmVzcG9uZGVyIi8+PHNhbWxwOlN0YXR1c01lc3NhZ2U+QW4gZXhjZXB0aW9uIHdhcyByYWlzZWQ8L3NhbWxwOlN0YXR1c01lc3NhZ2U+PC9zYW1scDpTdGF0dXM+PC9zYW1scDpMb2dvdXRSZXNwb25zZT4=
			log("<<< vSAMLResponse2 = " + vSAMLResponse2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && vSAMLResponse2!= null && vSAMLResponse2.trim().length() == 0)
			{
				vSAMLResponse2 = "";
				log("runtime note: the extraction of a new value for the variable 'vSAMLResponse2' ends up with an empty string - a substitute value was set");
				log("<<< vSAMLResponse2 = " + vSAMLResponse2);
			}
		}
		catch (Exception e) { vSAMLResponse2 = null; log(e); }
		if (vSAMLResponse2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'vSAMLResponse2' from html form parameter";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [283] <- WEB ADMIN Index 283 ---
		log();
		log("# title: Object moved");
		String requestProt0283 = "https";
		String requestHost0283 = "analytics4.successfactors.com";
		int    requestPort0283 = 443;
		String requestFile0283 = "/Production/Login.aspx" +
				"?ReturnUrl=%2fProduction%2fHrmlLogout.aspx%3fSAMLRequest%3dnZJNb9pAEIb%252FirXXyJ8YB68wEapFQYJAgJCUSzWs12ZVe9d41q3TX19jQpRWbQ697GG%252B3mfe2eFdU%252BTGd16hUDIiruUQg0umEiGziDxuJ%252BaA3I2GCEXulXSuMlXrNT%252FVHLXRdkqkl1RE6kpSBSiQSig4Us3oZryYU89yaFkprZjKiRG3jUKC7tSOWpdIbRsk5C9aMPQtrBnjiCkwrSq0mCrsVaWSmp077GlV5BcGC7BsiDGLI%252FLVTyDsOezWDBn0TD8AMA9%252BCGYv7Ifggx86jt%252BWItZ8JlGD1BHxHM81Hc%252F0%252BlvXp25AXc%252Fqh86eGGsOeIb7aJ%252B8Y6A18ooYu6t5bYa8WkU7teq9RR9PBGxnnXcko6srJa9SVRUgGW8fyHj1V3swtUVS2udJnt0GSpAv9pazb0P7PcoV7L6VnsX%252FA2ZMzjT63%252BWu5XYRkZgdeGuQxJIzkQqekNG2Pf241qrorn%252Blu%252FC8%252FbBNu12bncmEN6Of03EWb%252BR%252B8BwUkGafvBvBd9vdSTymuJxOkkO5W65uH7LFk9P0vxSneN%252FcPMvgYb1vAigGx6Vzzw8Qh0%252FZAsXn4DiP9Xj1I4petf9Qe4v%252B9stHvwA%253D%26SigAlg%3dhttp%253A%252F%252Fwww.w3.org%252F2000%252F09%252Fxmldsig%2523rsa-sha1%26Signature%3dkRD1hdCEXl%252Bg0bJBuUXxaf%252BkvasWurt9pPcn4oE6HBR3WXegrNB9XNbwutZrFIAjCDALZzfdbTL7P965dhpZTaXuGYVkPRY7ad%252BetybeEUsS6faqRV2gmhYturExS3nNPYHy2metp4hNP01E4SvI6vKQye8PjBBytmZh7XlEUyQ%253D" +
				"&SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest6) +		// recorded value = nZJNb9pAEIb%2FirXXyJ8YB68wEapFQYJAgJCUSzWs12ZVe9d41q3TX19jQpRWbQ697GG%2B3mfe2eFdU%2BTGd16hUDIiruUQg0umEiGziDxuJ%2BaA3I2GCEXulXSuMlXrNT%2FVHLXRdkqkl1RE6kpSBSiQSig4Us3oZryYU89yaFkprZjKiRG3jUKC7tSOWpdIbRsk5C9aMPQtrBnjiCkwrSq0mCrsVaWSmp077GlV5BcGC7BsiDGLI%2FLVTyDsOezWDBn0TD8AMA9%2BCGYv7Ifggx86jt%2BWItZ8JlGD1BHxHM81Hc%2F0%2BlvXp25AXc%2Fqh86eGGsOeIb7aJ%2B8Y6A18ooYu6t5bYa8WkU7teq9RR9PBGxnnXcko6srJa9SVRUgGW8fyHj1V3swtUVS2udJnt0GSpAv9pazb0P7PcoV7L6VnsX%2FA2ZMzjT63%2BWu5XYRkZgdeGuQxJIzkQqekNG2Pf241qrorn%2Blu%2FC8%2FbBNu12bncmEN6Of03EWb%2BR%2B8BwUkGafvBvBd9vdSTymuJxOkkO5W65uH7LFk9P0vxSneN%2FcPMvgYb1vAigGx6Vzzw8Qh0%2FZAsXn4DiP9Xj1I4petf9Qe4v%2B9stHvwA%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=kRD1hdCEXl%2Bg0bJBuUXxaf%2BkvasWurt9pPcn4oE6HBR3WXegrNB9XNbwutZrFIAjCDALZzfdbTL7P965dhpZTaXuGYVkPRY7ad%2BetybeEUsS6faqRV2gmhYturExS3nNPYHy2metp4hNP01E4SvI6vKQye8PjBBytmZh7XlEUyQ%3D";
		requestFile0283 = Lib.replaceTextPattern(requestFile0283, "nZJNb9pAEIb%2FirXXyJ8YB68wEapFQYJAgJCUSzWs12ZVe9d41q3TX19jQpRWbQ697GG%2B3mfe2eFdU%2BTGd16hUDIiruUQg0umEiGziDxuJ%2BaA3I2GCEXulXSuMlXrNT%2FVHLXRdkqkl1RE6kpSBSiQSig4Us3oZryYU89yaFkprZjKiRG3jUKC7tSOWpdIbRsk5C9aMPQtrBnjiCkwrSq0mCrsVaWSmp077GlV5BcGC7BsiDGLI%2FLVTyDsOezWDBn0TD8AMA9%2BCGYv7Ifggx86jt%2BWItZ8JlGD1BHxHM81Hc%2F0%2BlvXp25AXc%2Fqh86eGGsOeIb7aJ%2B8Y6A18ooYu6t5bYa8WkU7teq9RR9PBGxnnXcko6srJa9SVRUgGW8fyHj1V3swtUVS2udJnt0GSpAv9pazb0P7PcoV7L6VnsX%2FA2ZMzjT63%2BWu5XYRkZgdeGuQxJIzkQqekNG2Pf241qrorn%2Blu%2FC8%2FbBNu12bncmEN6Of03EWb%2BR%2B8BwUkGafvBvBd9vdSTymuJxOkkO5W65uH7LFk9P0vxSneN%2FcPMvgYb1vAigGx6Vzzw8Qh0%2FZAsXn4DiP9Xj1I4petf9Qe4v%2B9stHvwA%3D", java.net.URLEncoder.encode(C_SAMLRequest6), 0);		// search and replace request file fragment "nZJNb9pAEIb%2FirXXyJ8YB68wEapFQYJAgJCUSzWs12ZVe9d41q3TX19jQpRWbQ697GG%2B3mfe2eFdU%2BTGd16hUDIiruUQg0umEiGziDxuJ%2BaA3I2GCEXulXSuMlXrNT%2FVHLXRdkqkl1RE6kpSBSiQSig4Us3oZryYU89yaFkprZjKiRG3jUKC7tSOWpdIbRsk5C9aMPQtrBnjiCkwrSq0mCrsVaWSmp077GlV5BcGC7BsiDGLI%2FLVTyDsOezWDBn0TD8AMA9%2BCGYv7Ifggx86jt%2BWItZ8JlGD1BHxHM81Hc%2F0%2BlvXp25AXc%2Fqh86eGGsOeIb7aJ%2B8Y6A18ooYu6t5bYa8WkU7teq9RR9PBGxnnXcko6srJa9SVRUgGW8fyHj1V3swtUVS2udJnt0GSpAv9pazb0P7PcoV7L6VnsX%2FA2ZMzjT63%2BWu5XYRkZgdeGuQxJIzkQqekNG2Pf241qrorn%2Blu%2FC8%2FbBNu12bncmEN6Of03EWb%2BR%2B8BwUkGafvBvBd9vdSTymuJxOkkO5W65uH7LFk9P0vxSneN%2FcPMvgYb1vAigGx6Vzzw8Qh0%2FZAsXn4DiP9Xj1I4petf9Qe4v%2B9stHvwA%3D" with variable 'C_SAMLRequest6' on all occurrences

		String requestHeader0283 = "GET " + requestFile0283 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0283, requestHost0283, requestPort0283, requestHeader0283, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0283 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 139
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [283] <- Index 283
		if(replayMode)
		{
			long proxyDataRecordId =1614262574940L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [284] <- WEB ADMIN Index 284 ---
		String requestProt0284 = "https";
		String requestHost0284 = "onboarding4.successfactors.com";
		int    requestPort0284 = 443;
		String requestFile0284 = "/ONB/bundles/scripts.ashx" +
				"?v=" + C_V1;		// recorded value = W_I4YGvd9aXh6QqZymHPRcYdEF3WezRDFWPh79gvbhw1
		requestFile0284 = Lib.replaceTextPattern(requestFile0284, "W_I4YGvd9aXh6QqZymHPRcYdEF3WezRDFWPh79gvbhw1", C_V1, 0);		// search and replace request file fragment "W_I4YGvd9aXh6QqZymHPRcYdEF3WezRDFWPh79gvbhw1" with variable 'C_V1' on all occurrences

		String requestHeader0284 = "GET " + requestFile0284 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0284, requestHost0284, requestPort0284, requestHeader0284, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0284 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 159672
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [284] <- Index 284
		if(replayMode)
		{
			long proxyDataRecordId =1614262574973L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #11 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #11_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_11_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #11 (fragment 2 of 2)
		// -----------------------------------------



		// --- HTTP REQUEST: Test [285] <- WEB ADMIN Index 285 ---
		String requestProt0285 = "https";
		String requestHost0285 = "teck.plateau.com";
		int    requestPort0285 = 443;
		String requestFile0285 = "/learning/user/css/styles.css;mod=7dffb5a2";
		String requestHeader0285 = "GET " + requestFile0285 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.plateau.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0285, requestHost0285, requestPort0285, requestHeader0285, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0285 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 29702
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [285] <- Index 285
		if(replayMode)
		{
			long proxyDataRecordId =1614262575075L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [286] <- WEB ADMIN Index 286 ---
		String requestProt0286 = "https";
		String requestHost0286 = "performancemanager4.successfactors.com";
		int    requestPort0286 = 443;
		String requestFile0286 = "/sf/idp/SAML2/slo/POST";
		String requestContent0286 = 
				"SAMLResponse=" + java.net.URLEncoder.encode(vSAMLResponse2);		// recorded value = PHNhbWxwOkxvZ291dFJlc3BvbnNlIElEPSJTMDAxNjNlYjMtYjdiMC0xZWRiLTlkZWUtODBhMjMzOWVlMWFmIiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAyMS0wMi0yNVQxNDoxNjoxNFoiIEluUmVzcG9uc2VUbz0iXzY4ZDJlZDBmLTI4M2ItNGZhZC05NjVhLWFiMWNjMWEwY2FmNCIgRGVzdGluYXRpb249Imh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2YvaWRwL1NBTUwyL3Nsby9QT1NUIiB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48c2FtbDpJc3N1ZXIgeG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2BWE9FQ0wxMDA8L3NhbWw6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkczpTaWduZWRJbmZvPjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8%2BPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPjxkczpSZWZlcmVuY2UgVVJJPSIjUzAwMTYzZWIzLWI3YjAtMWVkYi05ZGVlLTgwYTIzMzllZTFhZiI%2BPGRzOlRyYW5zZm9ybXM%2BPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8%2BPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3Jtcz48ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48ZHM6RGlnZXN0VmFsdWU%2BVXMrQjNzSDJaV0dFUGMzMzNoSmo1Q3htRGFvPTwvZHM6RGlnZXN0VmFsdWU%2BPC9kczpSZWZlcmVuY2U%2BPC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5LaGtJVkdxbFE3WWlqbHdNL2EwTGFwb1NvT0VtL1Q4NnJhOUJobmRQWGpDbFpLRFZLUm5XQWlJUFd5YytwNG5QdjQ4cDBVNnZqZ2hYCkdBNnJtL2xiYkY3dGw4bE84REJuY0w1M0VHSlA4YmtuZ1hEK0xreHZTbzVNZ1FpYkFhTWdBcmJoc0ZtYUJJQ29MdDBJOVorYTNzL2gKeEd0YzBvNWNHQ29abng3UDBUUmViSEZoemI5UUE4R0Z0SHpabURTYVpjTE9aeE9kZU9CY1VqM2QzdzVuclpmd0huL05aRnUydU55TApWYVFHZWtBVGdMSzVhMzZwbnMzaGlIU21xT1p2WkZ4SlNHLzl2SisxRjJ4SlFvRmtxVFhnZmhEcDVZUnR6Wk5oYzgxeTlOMmJpcDBBCkdNT21QZ3J4eEw3SG5nbEkwTVdWa0ppeGpFbjBOU1BLS3dieXVnPT08L2RzOlNpZ25hdHVyZVZhbHVlPjwvZHM6U2lnbmF0dXJlPjxzYW1scDpTdGF0dXM%2BPHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6UmVzcG9uZGVyIi8%2BPHNhbWxwOlN0YXR1c01lc3NhZ2U%2BQW4gZXhjZXB0aW9uIHdhcyByYWlzZWQ8L3NhbWxwOlN0YXR1c01lc3NhZ2U%2BPC9zYW1scDpTdGF0dXM%2BPC9zYW1scDpMb2dvdXRSZXNwb25zZT4%3D
		String requestHeader0286 = "POST " + requestFile0286 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0286.length() + "\r\n" + 		// Content-Length: 2189
				"Origin: https://my030334.payroll.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0286, requestHost0286, requestPort0286, requestHeader0286, requestContent0286.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0286 = null;		// support garbage collector to reduce memory
		requestContent0286 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3016
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "TopNavLogout = window.parent.TopNavLogout;");		// Test [286] <- Index 286
		if(replayMode)
		{
			long proxyDataRecordId =1614262575130L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [287] <- WEB ADMIN Index 287 ---
		log();
		log("# title: SuccessFactors Workforce Analytics and Planning Customer Login");
		String requestProt0287 = "https";
		String requestHost0287 = "analytics4.successfactors.com";
		int    requestPort0287 = 443;
		String requestFile0287 = "/Production/Login.aspx";
		String requestHeader0287 = "GET " + requestFile0287 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0287, requestHost0287, requestPort0287, requestHeader0287, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0287 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 15300
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "A password reset link has been sent via email to");		// Test [287] <- Index 287
		if(replayMode)
		{
			long proxyDataRecordId =1614262575565L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [288] <- WEB ADMIN Index 288 ---
		String requestProt0288 = "https";
		String requestHost0288 = "onboarding4.successfactors.com";
		int    requestPort0288 = 443;
		String requestFile0288 = "/ONB/App_Themes/XpressHR/Theme.ashx" +
				"?v=" + C_V2;		// recorded value = A_33xzIDrOdjjrPvPpyr3cjL2_BEC7C5LcLAJ0qEOIY1
		requestFile0288 = Lib.replaceTextPattern(requestFile0288, "A_33xzIDrOdjjrPvPpyr3cjL2_BEC7C5LcLAJ0qEOIY1", C_V2, 0);		// search and replace request file fragment "A_33xzIDrOdjjrPvPpyr3cjL2_BEC7C5LcLAJ0qEOIY1" with variable 'C_V2' on all occurrences

		String requestHeader0288 = "GET " + requestFile0288 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0288, requestHost0288, requestPort0288, requestHeader0288, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0288 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 25411
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [288] <- Index 288
		if(replayMode)
		{
			long proxyDataRecordId =1614262575890L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [289] <- WEB ADMIN Index 289 ---
		String requestProt0289 = "https";
		String requestHost0289 = "authn.us2.hana.ondemand.com";
		int    requestPort0289 = 443;
		String requestFile0289 = "/saml2/sp/mds";
		String requestContent0289 = 
				"tenantId=" + C_TenantID +		// recorded value = NGFhMGZjNzYtMmUyYy00YWI5LWFlNmUtMGY0YjRhYWYxYzNh
				"&idpName=" + java.net.URLEncoder.encode(C_IDPName) +		// recorded value = aHR0cHM6Ly90ZWNrLmFjY291bnRzLm9uZGVtYW5kLmNvbQ%3D%3D
				"&requestUrl=" + java.net.URLEncoder.encode(C_RequestURI) +		// recorded value = aHR0cHM6Ly9va2tydHdrcHlmbXJxY2tyZW54aXJ0eS51czIuc2FjLnN1Y2Nlc3NmYWN0b3JzLmNvbS9hcHBsaWNhdGlvbi9sb2dvdXQ%2FU0FNTFJlcXVlc3Q9blpKZGI5b3dGSWIlMkZTdVRiS2w4ZWhHQVJLclNJRlltV0ZpanR1Sm1NNHdRTFlnY2ZwdzM3OVRPaFZOMjA5V0kzdmpoZjczTmVuOEYxVSUyQjZkRjY1QktKbWcwQXVRd3lWVG1aQkZnaDZYWXpkRzE4TUIwSEtQS3pKVmhhck5uQjlxRHNheG5STElPWldnV2t1aUtBZ2drcFljaUdGa01icWRFdXdGcE5MS0tLYjJ5RWx0bzVEVXRHcGJZeW9ndnE5Mk8yMWVkOVV4TCUyRldCN1RTWGpkRG02TldBUGFETWc1b3hEcEJUWnBRR2o2blNwMVcxRjZ5ZDQlMkI5Ykt1Uk0wZ1Q5Q1BxVTVqem1idmRMeU4xT0hNUnVIJTJCUEl6Zkk4N29YOWlHNDJQVnNLVVBPSkJFT2xTUkFPY09nRzJNWGRaZGdoWVVUQzBPc0ZuVFZ5NXB6Q2lmU3o1Yzd5cEFhdWtiTzZPR2t6Nk0wMzBxcnBqMzU5UHBHQ25YVmFEUTB2RmxWYzUwcVhWREp1SDFwdzNmbWJMWkQ3SXF2ODB5VHMyMEJGNWRGZmNyWWIlMkJCOVJMbUIzVm5xUyUyRmclMkJZTXo3Um1IJTJCWGgxN1lSa1RtdHVEV0lBa1ZaeUlYUEVQRHBiMkRVVzFVMlg3aGhlN004MzV1Qzd1ZHpVNWt4cHZoejV0UmtTN2tPbjZPU3BvWFglMkZHVjRLdmw2aUFlYzVqZGpMTk50WnJkOXg2SzI2ZWc2WDR2RCUyQm02dVhxVzBjTjgzVVMwakxlejRJNXZhTnAlMkZLbTVCZkl1MjA5U003bCUyQlQ1RTM3RDdYMzZHOG5QJTJGd0YmU2lnQWxnPWh0dHAlM0ElMkYlMkZ3d3cudzMub3JnJTJGMjAwMCUyRjA5JTJGeG1sZHNpZyUyM3JzYS1zaGExJlNpZ25hdHVyZT1weEtYeDNMbyUyQmljJTJCNDUyU1RSbnRSTDBWbVUzclZPRHFDcHd2cHBNM3hneTlmVmpFbThPJTJGMDR6aDVZdERPd05tSXdoemh5ZGQ4cE1NalU5cWtGJTJGQTVIZlAlMkJUdnZlTXRKeHFUM1pCZ1YwNVlGNjFXZ1FBNG96V2ZKOHZkJTJGZng2VFVLcnZLMHhzZVlIY0ZjS2V6eVdOcFNxTmhqdWZqamV0Q3ZRRSUyRjBqRlRmOCUzRA%3D%3D
				"&requestId=" + C_RequestID +		// recorded value = Uzg0NDI2YTk2LWVhZGEtNGFiMC1hOWQ4LThjOTAzOTEwMDcyYy0yaVlBZFBwa2lYZzVoQnFSRGlRMEViMWt4RkxOVTZLY3ZabzN6M2EwLk93
				"&relayState=" + java.net.URLEncoder.encode(C_RelayState1) +		// recorded value = b3VjcnNjeHRhZHV4ZHFseGx4Z2ptdGxycw%3D%3D
				"&action=sso" +
				"&signature=" + java.net.URLEncoder.encode(C_Signature2);		// recorded value = OR9R9KVK1vir%2B216wpmvnMNOuzmbf8POmGA%2FVOH2WrgFEYPlfX9AARUgJ8bIMgxn9c2GXCNByOraM00qvuxsa8QXGlDZuxjbkevNwCxIAziwByfF2WnjoFJQHokpW6j1YNiSavd21ympq1AKxqfU2BUyj6ieS4QHAKVLO4z2tqHTA337qJCqGdry%2FNuefvfS3aTeehtCjAZb4a5IdcmY3mEMLUwD%2Fu07taN0MYX5FEKd8KJuhBerEmkp%2FGJuHLb88RAJr2rzBdjqWDS4DKzVP%2BgeyJcMUgrIrJGHiU7bJcMVh5XorKgqhjl%2BzHbRFYzzELn6gSYI3%2FhpVMv928RJxw%3D%3D
		byte[][] searchPattern0289_0 = new byte[1][];
		searchPattern0289_0[0] = Base64Decoder.decodeToBytes("YUhSMGNITTZMeTkwWldOckxtRmpZMjkxYm5SekxtOXVaR1Z0WVc1a0xtTnZiUSUzRCUzRA==");
		byte[] binarySearchPattern0289_0   = Lib.mergeByteArrays(searchPattern0289_0);		// note: the search pattern value is base 64 encoded. decoded value = aHR0cHM6Ly90ZWNrLmFjY291bnRzLm9uZGVtYW5kLmNvbQ%3D%3D
		requestContent0289 = new String(Lib.binaryReplace(requestContent0289.getBytes(), binarySearchPattern0289_0, java.net.URLEncoder.encode(C_IDPName).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0289_1 = new byte[1][];
		searchPattern0289_1[0] = Base64Decoder.decodeToBytes("T1I5UjlLVksxdmlyJTJCMjE2d3Btdm5NTk91em1iZjhQT21HQSUyRlZPSDJXcmdGRVlQbGZYOUFBUlVnSjhiSU1neG45YzJHWENOQnlPcmFNMDBxdnV4c2E4UVhHbERadXhqYmtldk53Q3hJQXppd0J5ZkYyV25qb0ZKUUhva3BXNmoxWU5pU2F2ZDIxeW1wcTFBS3hxZlUyQlV5ajZpZVM0UUhBS1ZMTzR6MnRxSFRBMzM3cUpDcUdkcnklMkZOdWVmdmZTM2FUZWVodENqQVpiNGE1SWRjbVkzbUVNTFV3RCUyRnUwN3RhTjBNWVg1RkVLZDhLSnVoQmVyRW1rcCUyRkdKdUhMYjg4UkFKcjJyekJkanFXRFM0REt6VlAlMkJnZXlKY01VZ3JJckpHSGlVN2JKY01WaDVYb3JLZ3FoamwlMkJ6SGJSRll6ekVMbjZnU1lJMyUyRmhwVk12OTI4Ukp4dyUzRCUzRA==");
		byte[] binarySearchPattern0289_1   = Lib.mergeByteArrays(searchPattern0289_1);		// note: the search pattern value is base 64 encoded. decoded value = OR9R9KVK1vir%2B216wpmvnMNOuzmbf8POmGA%2FVOH2WrgFEYPlfX9AARUgJ8bIMgxn9c2GXCNByOraM00qvuxsa8QXGlDZuxjbkevNwCxIAziwByfF2WnjoFJQHokpW6j1YNiSavd21ympq1AKxqfU2BUyj6ieS4QHAKVLO4z2tqHTA337qJCqGdry%2FNuefvfS3aTeehtCjAZb4a5IdcmY3mEMLUwD%2Fu07taN0MYX5FEKd8KJuhBerEmkp%2FGJuHLb88RAJr2rzBdjqWDS4DKzVP%2BgeyJcMUgrIrJGHiU7bJcMVh5XorKgqhjl%2BzHbRFYzzELn6gSYI3%2FhpVMv928RJxw%3D%3D
		requestContent0289 = new String(Lib.binaryReplace(requestContent0289.getBytes(), binarySearchPattern0289_1, java.net.URLEncoder.encode(C_Signature2).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0289_2 = new byte[1][];
		searchPattern0289_2[0] = Base64Decoder.decodeToBytes("T1I5UjlLVksxdmlyJTJCMjE2d3Btdm5NTk91em1iZjhQT21HQSUyRlZPSDJXcmdGRVlQbGZYOUFBUlVnSjhiSU1neG45YzJHWENOQnlPcmFNMDBxdnV4c2E4UVhHbERadXhqYmtldk53Q3hJQXppd0J5ZkYyV25qb0ZKUUhva3BXNmoxWU5pU2F2ZDIxeW1wcTFBS3hxZlUyQlV5ajZpZVM0UUhBS1ZMTzR6MnRxSFRBMzM3cUpDcUdkcnklMkZOdWVmdmZTM2FUZWVodENqQVpiNGE1SWRjbVkzbUVNTFV3RCUyRnUwN3RhTjBNWVg1RkVLZDhLSnVoQmVyRW1rcCUyRkdKdUhMYjg4UkFKcjJyekJkanFXRFM0REt6VlAlMkJnZXlKY01VZ3JJckpHSGlVN2JKY01WaDVYb3JLZ3FoamwlMkJ6SGJSRll6ekVMbjZnU1lJMyUyRmhwVk12OTI4Ukp4dyUzRCUzRA==");
		byte[] binarySearchPattern0289_2   = Lib.mergeByteArrays(searchPattern0289_2);		// note: the search pattern value is base 64 encoded. decoded value = OR9R9KVK1vir%2B216wpmvnMNOuzmbf8POmGA%2FVOH2WrgFEYPlfX9AARUgJ8bIMgxn9c2GXCNByOraM00qvuxsa8QXGlDZuxjbkevNwCxIAziwByfF2WnjoFJQHokpW6j1YNiSavd21ympq1AKxqfU2BUyj6ieS4QHAKVLO4z2tqHTA337qJCqGdry%2FNuefvfS3aTeehtCjAZb4a5IdcmY3mEMLUwD%2Fu07taN0MYX5FEKd8KJuhBerEmkp%2FGJuHLb88RAJr2rzBdjqWDS4DKzVP%2BgeyJcMUgrIrJGHiU7bJcMVh5XorKgqhjl%2BzHbRFYzzELn6gSYI3%2FhpVMv928RJxw%3D%3D
		requestContent0289 = new String(Lib.binaryReplace(requestContent0289.getBytes(), binarySearchPattern0289_2, java.net.URLEncoder.encode(C_Signature1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0289_3 = new byte[1][];
		searchPattern0289_3[0] = Base64Decoder.decodeToBytes("YUhSMGNITTZMeTl2YTJ0eWRIZHJjSGxtYlhKeFkydHlaVzU0YVhKMGVTNTFjekl1YzJGakxuTjFZMk5sYzNObVlXTjBiM0p6TG1OdmJTOWhjSEJzYVdOaGRHbHZiaTlzYjJkdmRYUSUyRlUwRk5URkpsY1hWbGMzUTlibHBLWkdJNWIzZEdTV0lsTWtaVGRWUmlTMnc0WldoSFFWSkxjbE5KUmxsdFYwWnBhblIxU20xTk5IZFJURmxuWTJad2R6TTNPVlJQYUZaT01qQTVWMGt6ZG1wb1pqY3pUbVZ1T0VZeFZTVXlRalprUmpZMVFrdEtiV2N3UVhWUmQzbFdWRzFhUWtabmFEWllXWHBrUnpFNFRVSXdTRXRRUzNwS1ZtaGhjazV1UWpseFJITmhlRzVTVEVsUFdsZG5WMnQxYVV0QloyZHJjRmxqYVVkR2EwMWljV1JGZFhkR2NFNU1TMHRMWWpKNVJXeDBielZFVlhSSGNHSlplVzluZG5FNU1rOHlNV1ZrT1ZWNFRDVXlSbGRDTjFSVFdHcGtSRzAyVGxkQlVHRkVUV2MxYjNoRWNFSlVXbkJSUjJvMmJsTndNVmN4UmpaNVpEUWxNa0k1WWt0MVVrMHdaMVE1UTFCeFZUVnFlbTFpZG1STWVVNHhUMGhOVW5WSUpUSkNVRWw2WmtrNE4yOVlPV2xITkRKUVZuTkxWVkJQU2tKRlQyeFRVa0ZQWTA5blJ6Sk5XR1JhWkdkb1dWVlVRekJQYzBadVZGWjVOWEI2UTJsbVUzbzFZemQ1Y0VGaGRXdGlUelpQUjJ0Nk5rMHdNekJ4Y25CcU16VTVVSEJIUTI1WVZtRkVVVEIyUm14V1l6VXdjVmhXUkVwMVNERndkek5tYldKTVdrUTNTWEYyT0RCNVZITXlNRUpHTldSR1ptTnlXV0lsTWtKQ09WSk1iVUl6Vm01eFV5VXlSbWNsTWtKWlRYbzNVbTFJSlRKQ1dHZ3hOMWxTYTFSdGRIVkVWMGxCYTFaYWVVbFlVRVZRUkhCaU1rUlZWekZWTWxnM2FHaGxOMDA0TXpWMVF6ZDFaSHBWTld0NGNIWm9lalYwVW10VE4ydFBialpQVTNCdldGZ2xNa1pIVmpSTGRtdzJhVUZsWXpWcVpHcE1UazUwV25Ka09YZzJTekkyWldjMldEUjJSQ1V5UW0wMmRWaHhWekJqVGpnelZWTXdha3hsZWpSSk5YWmhUbkFsTWtaTGJUVkNaa2wxTWpBNVUwMDNiQ1V5UWxRMVJUTTNSRGRZTXpaSE9HNVFKVEpHZDBZbVUybG5RV3huUFdoMGRIQWxNMEVsTWtZbE1rWjNkM2N1ZHpNdWIzSm5KVEpHTWpBd01DVXlSakE1SlRKR2VHMXNaSE5wWnlVeU0zSnpZUzF6YUdFeEpsTnBaMjVoZEhWeVpUMXdlRXRZZUROTWJ5VXlRbWxqSlRKQ05EVXlVMVJTYm5SU1REQldiVlV6Y2xaUFJIRkRjSGQyY0hCTk0zaG5lVGxtVm1wRmJUaFBKVEpHTURSNmFEVlpkRVJQZDA1dFNYZG9lbWg1WkdRNGNFMU5hbFU1Y1d0R0pUSkdRVFZJWmxBbE1rSlVkblpsVFhSS2VIRlVNMXBDWjFZd05WbEdOakZYWjFGQk5HOTZWMlpLT0haa0pUSkdabmcyVkZWTGNuWkxNSGh6WlZsSVkwWmpTMlY2ZVZkT2NGTnhUbWhxZFdacWFtVjBRM1pSUlNVeVJqQnFSbFJtT0NVelJBJTNEJTNE");
		byte[] binarySearchPattern0289_3   = Lib.mergeByteArrays(searchPattern0289_3);		// note: the search pattern value is base 64 encoded. decoded value = aHR0cHM6Ly9va2tydHdrcHlmbXJxY2tyZW54aXJ0eS51czIuc2FjLnN1Y2Nlc3NmYWN0b3JzLmNvbS9hcHBsaWNhdGlvbi9sb2dvdXQ%2FU0FNTFJlcXVlc3Q9blpKZGI5b3dGSWIlMkZTdVRiS2w4ZWhHQVJLclNJRlltV0ZpanR1Sm1NNHdRTFlnY2ZwdzM3OVRPaFZOMjA5V0kzdmpoZjczTmVuOEYxVSUyQjZkRjY1QktKbWcwQXVRd3lWVG1aQkZnaDZYWXpkRzE4TUIwSEtQS3pKVmhhck5uQjlxRHNheG5STElPWldnV2t1aUtBZ2drcFljaUdGa01icWRFdXdGcE5MS0tLYjJ5RWx0bzVEVXRHcGJZeW9ndnE5Mk8yMWVkOVV4TCUyRldCN1RTWGpkRG02TldBUGFETWc1b3hEcEJUWnBRR2o2blNwMVcxRjZ5ZDQlMkI5Ykt1Uk0wZ1Q5Q1BxVTVqem1idmRMeU4xT0hNUnVIJTJCUEl6Zkk4N29YOWlHNDJQVnNLVVBPSkJFT2xTUkFPY09nRzJNWGRaZGdoWVVUQzBPc0ZuVFZ5NXB6Q2lmU3o1Yzd5cEFhdWtiTzZPR2t6Nk0wMzBxcnBqMzU5UHBHQ25YVmFEUTB2RmxWYzUwcVhWREp1SDFwdzNmbWJMWkQ3SXF2ODB5VHMyMEJGNWRGZmNyWWIlMkJCOVJMbUIzVm5xUyUyRmclMkJZTXo3Um1IJTJCWGgxN1lSa1RtdHVEV0lBa1ZaeUlYUEVQRHBiMkRVVzFVMlg3aGhlN004MzV1Qzd1ZHpVNWt4cHZoejV0UmtTN2tPbjZPU3BvWFglMkZHVjRLdmw2aUFlYzVqZGpMTk50WnJkOXg2SzI2ZWc2WDR2RCUyQm02dVhxVzBjTjgzVVMwakxlejRJNXZhTnAlMkZLbTVCZkl1MjA5U003bCUyQlQ1RTM3RDdYMzZHOG5QJTJGd0YmU2lnQWxnPWh0dHAlM0ElMkYlMkZ3d3cudzMub3JnJTJGMjAwMCUyRjA5JTJGeG1sZHNpZyUyM3JzYS1zaGExJlNpZ25hdHVyZT1weEtYeDNMbyUyQmljJTJCNDUyU1RSbnRSTDBWbVUzclZPRHFDcHd2cHBNM3hneTlmVmpFbThPJTJGMDR6aDVZdERPd05tSXdoemh5ZGQ4cE1NalU5cWtGJTJGQTVIZlAlMkJUdnZlTXRKeHFUM1pCZ1YwNVlGNjFXZ1FBNG96V2ZKOHZkJTJGZng2VFVLcnZLMHhzZVlIY0ZjS2V6eVdOcFNxTmhqdWZqamV0Q3ZRRSUyRjBqRlRmOCUzRA%3D%3D
		requestContent0289 = new String(Lib.binaryReplace(requestContent0289.getBytes(), binarySearchPattern0289_3, java.net.URLEncoder.encode(C_RequestURI).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0289_4 = new byte[1][];
		searchPattern0289_4[0] = Base64Decoder.decodeToBytes("YjNWamNuTmplSFJoWkhWNFpIRnNlR3g0WjJwdGRHeHljdyUzRCUzRA==");
		byte[] binarySearchPattern0289_4   = Lib.mergeByteArrays(searchPattern0289_4);		// note: the search pattern value is base 64 encoded. decoded value = b3VjcnNjeHRhZHV4ZHFseGx4Z2ptdGxycw%3D%3D
		requestContent0289 = new String(Lib.binaryReplace(requestContent0289.getBytes(), binarySearchPattern0289_4, java.net.URLEncoder.encode(C_RelayState1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0289 = Lib.replaceTextPattern(requestContent0289, "Uzg0NDI2YTk2LWVhZGEtNGFiMC1hOWQ4LThjOTAzOTEwMDcyYy0yaVlBZFBwa2lYZzVoQnFSRGlRMEViMWt4RkxOVTZLY3ZabzN6M2EwLk93", C_RequestID, 0);		// search and replace content fragment "Uzg0NDI2YTk2LWVhZGEtNGFiMC1hOWQ4LThjOTAzOTEwMDcyYy0yaVlBZFBwa2lYZzVoQnFSRGlRMEViMWt4RkxOVTZLY3ZabzN6M2EwLk93" with variable 'C_RequestID' on all occurrences
		requestContent0289 = Lib.replaceTextPattern(requestContent0289, "NGFhMGZjNzYtMmUyYy00YWI5LWFlNmUtMGY0YjRhYWYxYzNh", C_TenantID, 0);		// search and replace content fragment "NGFhMGZjNzYtMmUyYy00YWI5LWFlNmUtMGY0YjRhYWYxYzNh" with variable 'C_TenantID' on all occurrences

		String requestHeader0289 = "POST " + requestFile0289 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: authn.us2.hana.ondemand.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Content-Length: " + requestContent0289.length() + "\r\n" + 		// Content-Length: 2025
				"Origin: https://okkrtwkpyfmrqckrenxirty.us2.sac.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0289, requestHost0289, requestPort0289, requestHeader0289, requestContent0289.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0289 = null;		// support garbage collector to reduce memory
		requestContent0289 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3306
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Note: Your browser does not support JavaScript or it is turned off. Press the button to proceed.");		// Test [289] <- Index 289
		if(replayMode)
		{
			long proxyDataRecordId =1614262576085L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [290] <- WEB ADMIN Index 290 ---
		String requestProt0290 = "https";
		String requestHost0290 = "analytics4.successfactors.com";
		int    requestPort0290 = 443;
		String requestFile0290 = "/Production/Resources/StyleSheets/login.css";
		String requestHeader0290 = "GET " + requestFile0290 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0290, requestHost0290, requestPort0290, requestHeader0290, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0290 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1663
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [290] <- Index 290
		if(replayMode)
		{
			long proxyDataRecordId =1614262576205L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [291] <- WEB ADMIN Index 291 ---
		String requestProt0291 = "https";
		String requestHost0291 = "performancemanager4.successfactors.com";
		int    requestPort0291 = 443;
		String requestFile0291 = "/sf/logout" +
				"?bplte_company=Teck" +
				"&_s.crb=TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d";
		requestFile0291 = Lib.replaceTextPattern(requestFile0291, "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb, 0);		// search and replace request file fragment "TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d" with variable 'vScrb' on all occurrences

		String requestHeader0291 = "GET " + requestFile0291 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0291, requestHost0291, requestPort0291, requestHeader0291, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("TYUz0DwpK6fI2nfooXDqHsD4QBXY3xcqc%252bHwvajrsco%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0291 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [291] <- Index 291
		if(replayMode)
		{
			long proxyDataRecordId =1614262576438L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		htmlContentParser = new HtmlContentParser(testURL, this);
		try
		{
			// extract var 'C_SAMLRequest9'
			C_SAMLRequest9 = testURL.getRedirectLocation().getParameter("SAMLRequest");		// recorded value = fZJBb%2BMgEIX%2FisUdGyixYxS7ihRVitRdrZp0D71UGHBq1QavBzb9%2BUvcpNpWaq7MvDfD92Z1%2Bzb0yV8zQedshWhKUGKscrqzhwo97u%2FwEt3WK5BDz0Zx7w4u%2BAfzJxjwSVRaEO%2BlCoXJCiehA2HlYEB4JXbrH%2FeCpUSMk%2FNOuR4lmyjsrPTztBfvRxBZ5o16TaVSLlgPqbPaDNLqVLkhm92zTo8Z9O5KI0q2mwo9U83bli80vmF8gXlecNwQXWKlFqXihLH8pomtAMFsLXhpfYUYYRQThtliT7mguaBFyoviCSUPRsJpz2tf62ckIoCZUPL7wpGdOP7H57qHhKg%2BIUFn0mLecKovgI7HYwpBKQPQSuXdBDOcfcSxyj4pzvqfccZ2k9y5aZD%2B%2B%2BE0pfNLp3E7t4pgYTSqazujUb2PYa2Dd8Oc12XSu%2FfHTeziUrG6jWG81Tu8%2B4XLkurCyDKGEMly3hJcGqpxIylZLsucNHlzNvsi%2F3j9dGj1Pw%3D%3D
			log("<<< C_SAMLRequest9 = " + C_SAMLRequest9);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest9!= null && C_SAMLRequest9.trim().length() == 0)
			{
				C_SAMLRequest9 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest9' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest9 = " + C_SAMLRequest9);
			}
		}
		catch (Exception e) { C_SAMLRequest9 = null; log(e); }
		if (C_SAMLRequest9 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest9' from http redirection";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [292] <- WEB ADMIN Index 292 ---
		String requestProt0292 = "https";
		String requestHost0292 = "analytics4.successfactors.com";
		int    requestPort0292 = 443;
		String requestFile0292 = "/Production/Resources/LoginImages/background_page.png";
		String requestHeader0292 = "GET " + requestFile0292 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0292, requestHost0292, requestPort0292, requestHeader0292, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0292 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 186
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [292] <- Index 292
		if(replayMode)
		{
			long proxyDataRecordId =1614262577554L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [293] <- WEB ADMIN Index 293 ---
		String requestProt0293 = "https";
		String requestHost0293 = "teck.accounts.ondemand.com";
		int    requestPort0293 = 443;
		String requestFile0293 = "/saml2/idp/slo/teck.accounts.ondemand.com" +
				"?SAMLRequest=" + C_SAMLRequest9 +		// recorded value = fZJBb%2BMgEIX%2FisUdGyixYxS7ihRVitRdrZp0D71UGHBq1QavBzb9%2BUvcpNpWaq7MvDfD92Z1%2Bzb0yV8zQedshWhKUGKscrqzhwo97u%2FwEt3WK5BDz0Zx7w4u%2BAfzJxjwSVRaEO%2BlCoXJCiehA2HlYEB4JXbrH%2FeCpUSMk%2FNOuR4lmyjsrPTztBfvRxBZ5o16TaVSLlgPqbPaDNLqVLkhm92zTo8Z9O5KI0q2mwo9U83bli80vmF8gXlecNwQXWKlFqXihLH8pomtAMFsLXhpfYUYYRQThtliT7mguaBFyoviCSUPRsJpz2tf62ckIoCZUPL7wpGdOP7H57qHhKg%2BIUFn0mLecKovgI7HYwpBKQPQSuXdBDOcfcSxyj4pzvqfccZ2k9y5aZD%2B%2B%2BE0pfNLp3E7t4pgYTSqazujUb2PYa2Dd8Oc12XSu%2FfHTeziUrG6jWG81Tu8%2B4XLkurCyDKGEMly3hJcGqpxIylZLsucNHlzNvsi%2F3j9dGj1Pw%3D%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=ZR4qGxT03vTPpgcPM3S6tEDRwTs3RGM6wBKXgk7LZciFUt%2B3zGmoazkXqsaSzo1aL8H2URa0WJL0g%2FmQV7TJqBukZs4tajfAdkK1UQ%2BrxjlXYwv%2FsdOsDOHFH4flT7iYXiWiRH0MUZU6SVr9yYNFSDHm9fRnzBh8nv%2B%2BmvUQXgs%3D";
		String requestHeader0293 = "GET " + requestFile0293 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0293, requestHost0293, requestPort0293, requestHeader0293, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0293 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [293] <- Index 293
		if(replayMode)
		{
			long proxyDataRecordId =1614262578666L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		htmlContentParser = new HtmlContentParser(testURL, this);
		try
		{
			// extract var 'vSignature'
			vSignature = testURL.getRedirectLocation().getParameter("Signature");		// recorded value = jru9lFc7UNWUiF4OYTYkK7RiqDcvN8o%2Fm0uIL7eePU2j4FovTe9hqBG0tWMDYhVOj3O31yUtwQaYcVDhpQJdAN0nCJFVF%2FDIKAw2QG1gN3xUO85eCxXAU%2Fvsz2dqqlmMzHI3j3axFRXdifBPvF9xMy3zrZ40YDNnUxAvMp85xPENnho381MezqYD534bGfDl%2BZB9zisXoTxOH8LSdqE%2FW13SSm8Q8htoRyQbVDNGcc%2BVdrJkpfjFHdrXfpLWwgFJ%2BC35TZCmuFRMNlW8MS%2BuY0ecgHAeIXy0DwSpHOjsop4hjUo2rQsi%2FdGgHLG65qM016uHecj69RpdajP8ZS%2BnEw%3D%3D
			log("<<< vSignature = " + vSignature);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && vSignature!= null && vSignature.trim().length() == 0)
			{
				vSignature = "";
				log("runtime note: the extraction of a new value for the variable 'vSignature' ends up with an empty string - a substitute value was set");
				log("<<< vSignature = " + vSignature);
			}
		}
		catch (Exception e) { vSignature = null; log(e); }
		if (vSignature == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'vSignature' from http redirection";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'vSAMLResponse3'
			vSAMLResponse3 = testURL.getRedirectLocation().getParameter("SAMLResponse");		// recorded value = fZJBb9QwEIX%2Fyso9O3Ycb0isZBGiByoVCTVRD1wqdzJZIjZ25HFY%2BPd4d1kKh%2FZiX7439ntvmnu%2F92t8QFq8I9zcIsXJ2Th517JvMS5khFgwjD7M1gGmw%2B4x6IxWACQaLUQfKAM%2FC7LzQYnLwA7DjwnwU99%2FecBhCgh%2F33if2MW6X22P8J1t7m5b1ulxLIZ6rDiMVcF1AQW3dVHzXI9YjqWSUFcJddcZvW%2FZUz4kmd4OvFB6y3X5TvNnOdQcYFuDlkqVxXMSEa145yhaF1umpMq5VFxt%2B1ybvDR5lVWV%2Fso2jxjo7Fplkm1%2BzgdHLVuDM97SRMbZGclEMN2Hz%2FcmMWYJPnrwhz%2BwcaTeFlgiDKdkXxT6EnLK%2BHg8Zsci82EvlJS5kFokCB3cvNDFK7QUsj7RA037G7Zr0k%2FM2XbYXSuMKevMAvjVRcq8G05NDqfaGvEP3nTRxpWu90c%2F4ObRHlZ82xmdadNddoKJXSOug8T%2FC7b7DQ%3D%3D
			log("<<< vSAMLResponse3 = " + vSAMLResponse3);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && vSAMLResponse3!= null && vSAMLResponse3.trim().length() == 0)
			{
				vSAMLResponse3 = "";
				log("runtime note: the extraction of a new value for the variable 'vSAMLResponse3' ends up with an empty string - a substitute value was set");
				log("<<< vSAMLResponse3 = " + vSAMLResponse3);
			}
		}
		catch (Exception e) { vSAMLResponse3 = null; log(e); }
		if (vSAMLResponse3 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'vSAMLResponse3' from http redirection";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [294] <- WEB ADMIN Index 294 ---
		String requestProt0294 = "https";
		String requestHost0294 = "performancemanager4.successfactors.com";
		int    requestPort0294 = 443;
		String requestFile0294 = "/saml2/LogoutServiceHTTPRedirectResponse" +
				"?company=Teck" +
				"&SAMLResponse=" + vSAMLResponse3 +		// recorded value = fZJBb9QwEIX%2Fyso9O3Ycb0isZBGiByoVCTVRD1wqdzJZIjZ25HFY%2BPd4d1kKh%2FZiX7439ntvmnu%2F92t8QFq8I9zcIsXJ2Th517JvMS5khFgwjD7M1gGmw%2B4x6IxWACQaLUQfKAM%2FC7LzQYnLwA7DjwnwU99%2FecBhCgh%2F33if2MW6X22P8J1t7m5b1ulxLIZ6rDiMVcF1AQW3dVHzXI9YjqWSUFcJddcZvW%2FZUz4kmd4OvFB6y3X5TvNnOdQcYFuDlkqVxXMSEa145yhaF1umpMq5VFxt%2B1ybvDR5lVWV%2Fso2jxjo7Fplkm1%2BzgdHLVuDM97SRMbZGclEMN2Hz%2FcmMWYJPnrwhz%2BwcaTeFlgiDKdkXxT6EnLK%2BHg8Zsci82EvlJS5kFokCB3cvNDFK7QUsj7RA037G7Zr0k%2FM2XbYXSuMKevMAvjVRcq8G05NDqfaGvEP3nTRxpWu90c%2F4ObRHlZ82xmdadNddoKJXSOug8T%2FC7b7DQ%3D%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=" + vSignature;		// recorded value = jru9lFc7UNWUiF4OYTYkK7RiqDcvN8o%2Fm0uIL7eePU2j4FovTe9hqBG0tWMDYhVOj3O31yUtwQaYcVDhpQJdAN0nCJFVF%2FDIKAw2QG1gN3xUO85eCxXAU%2Fvsz2dqqlmMzHI3j3axFRXdifBPvF9xMy3zrZ40YDNnUxAvMp85xPENnho381MezqYD534bGfDl%2BZB9zisXoTxOH8LSdqE%2FW13SSm8Q8htoRyQbVDNGcc%2BVdrJkpfjFHdrXfpLWwgFJ%2BC35TZCmuFRMNlW8MS%2BuY0ecgHAeIXy0DwSpHOjsop4hjUo2rQsi%2FdGgHLG65qM016uHecj69RpdajP8ZS%2BnEw%3D%3D
		String requestHeader0294 = "GET " + requestFile0294 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0294, requestHost0294, requestPort0294, requestHeader0294, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("904c2b39-8063-4d43-9a78-c9afa1c89189", C_zsessionID1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0294 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [294] <- Index 294
		if(replayMode)
		{
			long proxyDataRecordId =1614262578977L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [295] <- WEB ADMIN Index 295 ---
		log();
		log("# title: SuccessFactors: Logout");
		String requestProt0295 = "https";
		String requestHost0295 = "performancemanager.successfactors.com";
		int    requestPort0295 = 443;
		String requestFile0295 = "/doc/sso/LandingPage_logout.html";
		String requestHeader0295 = "GET " + requestFile0295 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0295, requestHost0295, requestPort0295, requestHeader0295, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0295 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 20475
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Please close your browser or re-login.");		// Test [295] <- Index 295
		if(replayMode)
		{
			long proxyDataRecordId =1614262580421L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [296] <- WEB ADMIN Index 296 ---
		String requestProt0296 = "https";
		String requestHost0296 = "performancemanager.successfactors.com";
		int    requestPort0296 = 443;
		String requestFile0296 = "/favicon.ico";
		String requestHeader0296 = "GET " + requestFile0296 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,*/*\r\n" + 
				"Accept-Language: en-US,en;q=0.5\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0296, requestHost0296, requestPort0296, requestHeader0296, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0296 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/X-ICON", header text fragment = [verification disabled], recorded content size = 1406
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/X-ICON", null, null);		// Test [296] <- Index 296
		if(replayMode)
		{
			long proxyDataRecordId =1614262581802L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #11_1 successful done
		return true;
	}



	boolean synchResponsesParallelRequestsPage_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 1 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_1(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_1 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 2 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_2(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_2 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 3 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_3(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_3 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 4 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_4(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_4 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 5 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_5(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_5 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 6 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_6(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_6 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_7(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 7 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_7(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_7 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_8(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 8 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_8(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_8 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_9(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 9 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_9(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_9 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_10(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 10 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_10(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_10 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_11(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 11 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_11(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_11 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	/**
	 * implement GetRealTimeUserInputFieldsInterface: get the definition and the value of all real-time user input fields.
	 */
	public ArrayList<RealTimeUserInputField> getRealTimeUserInputFields()
	{
		try
		{
			ArrayList<RealTimeUserInputField> realTimeUserInputFieldList = new ArrayList<RealTimeUserInputField>();
			return realTimeUserInputFieldList;
		}
		catch (Exception e)
		{
			log(e);
			return null;
		}
	}



	/**
	 * implement ThreadStepInterface: get the current execution step (current URL call or page break) of a simulated user.
	 */
	public int getExecutionStep()
	{
		return threadStep;
	}



	/**
	 * implement SetThreadStepInterface: set the current execution step (current URL call or page break) of a simulated user.
	 */
	public void setExecutionStep(int threadStep)
	{
		this.threadStep = threadStep;
	}



	/**
	 * implement SSLSessionCacheStatisticInterface: get statistic data about the SSL session cache behavior of a simulated user.
	 */
	public SSLSessionCacheStatistic getSSLSessionCacheStatistic()
	{
		return sslStatistic;
	}



	/**
	 * implement VaryingTestDurationInterface: support to extend or to reduce the planned test duration.
	 */
	public int getPlannedTestDuration()
	{
		return plannedTestDuration;
	}
	
	public void setExtendTestDuration(int deltaSeconds)
	{
		if (plannedTestDuration == 0)
		{
			plannedTestDuration = deltaSeconds;		// the old planned test duration was unlimited but is now limited
			return;
		}
		if (deltaSeconds == 0)
		{
			plannedTestDuration = 0;		// the new planned test duration is now unlimited
			return;
		}
		plannedTestDuration = plannedTestDuration + deltaSeconds;
	}



	/**
	 * implement SuspendResumeInterface: support to suspend and to resume the test execution.
	 */
	public int getPlannedStartupDelay()
	{
		return plannedStartupDelay;
	}
	
	public void setUserResumeStartWaitDelay(int millis)
	{
		userResumeStartWaitDelay = millis;
	}



	/**
	 * implement VaryingLoadInterface: support to decrement the number of simulated users at runtime.
	 */
	public void setDecrementEndOfLoopFlag(boolean decrementEndOfLoopFlag)
	{
		this.decrementEndOfLoopFlag = decrementEndOfLoopFlag;
	}

	public boolean isDecrementEndOfLoopFlag()
	{
		return decrementEndOfLoopFlag;
	}



	/**
	 * internal method: execute the loops for one simulated user as a thread.
	 * controls the thread and displays the (thread-)log if one loop has been completed.
	 */
	public void run()
	{
		// user terminated by inline script, at start of user ?
		if (isTerminateUser())
		{
			System.out.println("# --- thread " + Thread.currentThread().getName() + " aborted --- " + ZoneTime.dateToShortString() + " ---");
			return;
		}
		try
		{
			while (true)
			{
				threadStep = ThreadStepInterface.THREAD_NO_STEP;
				clearLog();
				
				// execute loop
				log("--- loop started --- " + ZoneTime.dateToShortString() + " ---");
				long loopStartTime = System.nanoTime();
				if(replayMode)
				{
					createReplaySnapShot(threadLoopCounter, replaySnapShotsDump);
				}
				boolean loopPassed = this.execute(totalLoopCounter.getAndIncrement());
				performanceData.addUserTransactionMeasuredSamples(transactionHandler.getPendingTransactions());
				ArrayList<UserTransactionContext> nonExecutedTransactions = transactionHandler.getNotExecutedTransactions();

				for (UserTransactionContext nonExecutedTransaction : new ArrayList<>(nonExecutedTransactions))
				{
					if(transactionContextMap.containsKey(nonExecutedTransaction.getTransactionId()+"") && transactionContextMap.get(nonExecutedTransaction.getTransactionId()+"") == null)
					{
						transactionContextMap.remove(nonExecutedTransaction.getTransactionId()+"");
						nonExecutedTransactions.remove(nonExecutedTransaction);
					}
				}

				performanceData.addUserTransactionNotExecutedSamples(nonExecutedTransactions);
				performanceData.addSocktPoolStatistic(socketPool);
				socketPool.closePool();
				performanceData.addSSLCacheStatistic(sslStatistic.getSSLSessionCacheStatisticResult());
				sslStatistic.reset();
				
				// eof of input file ?
				if (abortedByEofInputFile())
					return;		// endOfRun() not called in such a case
				
				// check loop result
				String remainingLoopInfo = "";
				if (checkLoopCount)
					remainingLoopInfo = " [remaining loops = " + (remainingLoops - 1) + "]";
				if (loopPassed)
				{
					performanceData.addPassedLoop();
					log("--- loop passed ---  " + ZoneTime.dateToShortString() + " ---" + remainingLoopInfo);
				}
				else
				{
					performanceData.addFailedLoop();
					log("--- loop failed ---  " + ZoneTime.dateToShortString() + " ---" + remainingLoopInfo);
				}
				threadStep = ThreadStepInterface.THREAD_NO_STEP;
				
				// display thread log to standard output
				if (debugLoops || (debugFailedLoops && (!loopPassed)))
				{
					synchronized (dumpLock)
					{
						dumpLog(System.out);				// full log
					}
				}
				
				// check if max loops reached
				if (checkLoopCount)
				{
					// all done ?
					remainingLoops--;
					if (remainingLoops <= 0)
					{
						endOfRun();
						return;
					}
				}
				
				// check if simulated user must be decremented
				if (decrementEndOfLoopFlag && (getOwnLoadTestUserContext().getDecrementEndOfLoopPointInTime() <= System.currentTimeMillis()))
				{
					return;
				}
				
				// check if max test duration reached
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				{
					endOfRun();
					return;
				}
				
				// check if this specific user is terminated earlier than planned by a HTTP content verification or by a plug-in
				if (isTerminateUser())
				{
					endOfRun();
					System.out.println("# --- thread " + Thread.currentThread().getName() + " terminate failed user --- " + ZoneTime.dateToShortString() + " ---");
					return;
				}
				
				// check if load test execution is temporary suspended
				boolean wasSuspended = false;
				while (isSuspend())
				{
					wasSuspended = true;
					try { Thread.currentThread().sleep(20); } catch (InterruptedException ie) {}
					if (abortedByRemote() || abortedByEofInputFile())
					{
						endOfRun();
						return;
					}
					
					// check if max test duration reached during suspend
					if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
					{
						endOfRun();
						return;
					}
				}
				// check if load test execution is resumed
				if (wasSuspended)
				{
					try { sleepRemoteInterruptable(userResumeStartWaitDelay); } catch (InterruptedException ie) {}
				}
				
				// wait 20 milliseconds if loop has failed
				if (!loopPassed)
					try { Thread.currentThread().sleep(loopErrorDelay); } catch (InterruptedException ie) {}
				
				// enable pacing for the loop
				if(pacing > 0)
				{
					long loopElaspedTime = (System.nanoTime() - loopStartTime) / 1000000l;
					long loopPacingValue = Long.valueOf(pacing).longValue() * 1000l;
					if (loopElaspedTime < loopPacingValue)
					{
						threadStep = threadStep - 1;
						log(" - loop pacing: sleeping for "+ (loopPacingValue - loopElaspedTime)+" ms ...");
						Thread.currentThread().sleep(loopPacingValue - loopElaspedTime);
						threadStep++;
					}
				}
				// execute next loop
				threadLoopCounter++;
			}	// end: while (true)
		}
		catch (Throwable tex)
		{
			log("*** INTERNAL ERROR / LOAD TEST ABORTED ***");
			log(tex);
			log();
			synchronized (dumpLock)
			{
				if(replayMode)
				{
					saveReplaySnapShots("ZTReplay.snapshot");
				}
				dumpLog(System.out);				// full log
				System.err.println("*** INTERNAL ERROR / LOAD TEST ABORTED ***");
				tex.printStackTrace(System.err);
				System.exit(-2);
			}
		}
		finally
		{
			// remove the reference to this load test instance and the reference to the thread that runs this instance
			try
			{
				if (!decrementEndOfLoopFlag)
				{
					getUserContextTable().getWriteLock().lock();
					getOwnLoadTestUserContext().setLoadTestUserFinallyEnded();
					getUserContextTable().getWriteLock().unlock();
				}
				else
					decrementEndOfLoopFlag = false;
			}
			catch (Throwable texFinal)
			{
				System.err.println("*** INTERNAL FINALLY ERROR / LOAD TEST ABORTED ***");
				texFinal.printStackTrace(System.err);
				System.exit(-2);
			}
		}
	}



	/**
	 * internal method: called when a user has completed the test-run.
	 */
	public void endOfRun()
	{
		clearLog();
		
		if (debugLoops && (getLog().size() > 0))
		{
			synchronized (dumpLock)
			{
				dumpLog(System.out);		// dump log of inline scripts and load test plug-ins which are executed at end of user
			}
		}
	}



	/**
	 * Main program. Starts the test and waits until all have been done.
	 */
	public static void main(String[] args)
	{
		// check command line argument -h or -help
		if ((ParseArgs.hasOption(args, "-h")) || (ParseArgs.hasOption(args, "-help")))
		{
			System.out.println();
			System.out.println("Help - Proxy Sniffer Load Test Program:");
			System.out.println();
			System.out.println("-u <number>              ->> required argument: number of concurrent users");
			System.out.println("-d <seconds>             ->> required argument: planned test duration in seconds (default: 30, 0 = unlimited)");
			System.out.println("-t <seconds>             ->> required argument: request timeout per url in seconds");
			System.out.println();
			System.out.println("-tconnect <seconds>      ->> TCP/IP socket connect timeout in seconds (default: use value of -t <seconds>)");
			System.out.println();
			System.out.println("-sdelay <milliseconds>   ->> startup delay time between concurrent users in milliseconds (default: 200)");
			System.out.println("-mtpu <number>           ->> maximum number of parallel threads per user (default: " + MAX_PARALLEL_THREADS_PER_USER + ")");
			System.out.println("-maxloops <number>       ->> maximum number of loops per user (default: 0 = unlimited)");
			System.out.println("-pacing <seconds>        ->> sets a minimum time for all in the loop executed page breaks and url calls which must be elapsed before the next loop starts (default: 0 = no pacing)");
			System.out.println("-downlink <kbps>         ->> maximum downlink network bandwidth per user in kilobits per second (default: 0 = unlimited)");
			System.out.println("-uplink <kbps>           ->> maximum uplink network bandwidth per user in kilobits per second (default: 0 = unlimited)");
			System.out.println("-multihomed <filename>   ->> use serveral client ip addresses - file format: <addr1>, <addr2>, ... (all on the same line)");
			System.out.println("-sampling <seconds>      ->> statistic sampling interval in seconds (default: 15)");
			System.out.println("-percpage <percent>      ->> additional sampling rate per web page call in percent (default: 100)");
			System.out.println("-percurl <percent>       ->> additional sampling rate per url call in percent (default: 0)");
			System.out.println("-percurlopt <level>      ->> extended sampling level per url call, see application reference manual (default: 0 = disabled)");
			System.out.println("-maxerrsnap <number>     ->> maximum number of error snapshots per url (default: 0 = unlimited)");
			System.out.println("-maxerrmem <megabytes>   ->> maximum size of memory in megabytes which can be used for error snapshots (default: 20, -1 = unlimited)");
			System.out.println("-nosdelayCluster         ->> apply startup delay time between concurrent users per exec agent, but not per cluster job (default: apply per cluster job)");
			System.out.println("-setuseragent \"<text>\"   ->> replace the recorded value of the HTTP request header field User-Agent with a new value");
			System.out.println("-collect <host>[:<port>] ->> collect additional data from external measuring agents (data collectors)");
			System.out.println("-res <filename>          ->> overrides the default name of the binary output file");
			System.out.println("-nores                   ->> disables to create the binary output file");
			System.out.println();
			System.out.println("-ssl <version>           ->> set SSL version: possible options are \"all\" (default), \"v3\", \"tls\", \"tls11\" or \"tls12\"");
			System.out.println("-sslcache <seconds>      ->> timeout of user-related SSL session cache (default: 300, 0 = cache disabled)");
			System.out.println("-sslrandom <type>        ->> set the type of the random generator used for SSL handshakes: possible options are \"fast\", \"iaik\" (default) or \"java\"");
			System.out.println("-sslcmode                ->> apply SSL/HTTPS compatibility workarounds for deficient SSL servers");
			System.out.println("-noECC                   ->> disable support of elliptic curve cryptography (ECC)");
			System.out.println("-nosni                   ->> disable support of server name indication (SNI)");
			System.out.println("-snicritical             ->> set the TLS SNI extension as critical (default: non-critical)");
			System.out.println("-tlssessiontickets       ->> set the TLS to use Session Tickets (non-critical)");
			System.out.println("-iaikLast                ->> adds the IAIK security provider at the last position (instead of default: IAIK at first position)");
			System.out.println();
			System.out.println("-dnssrv <IP-1>[,IP-N])   ->> use specific DNS server(s) to resolve DNS host names (default: use OS to resolve host names)");
			System.out.println("-dnshosts <filename>     ->> use specific DNS hosts file (default: use OS to resolve host names)");
			System.out.println("-dnstranslation <filename> ->> use a DNS translation file that converts DNS names. It might be needed to disable TLS SNI if this option is used");
			System.out.println("-dnsenattl               ->> enable consideration of DNS TTL by using the received TTL-values from the DNS Server(s) (default: TTL disabled)");
			System.out.println("-dnsfixttl <seconds>     ->> enable DNS TTL by using a fixed TTL-value of seconds for all DNS resolves");
			System.out.println("-dnsperloop              ->> perform new DNS resolves for each executed loop. All resolves are stable within the same loop (no consideration of DNS TTL within a loop)");
			System.out.println("-dnsstatistic            ->> collect statistical data about DNS resolutions. Note: use this option only if not any other, more specific DNS option is enabled");
			System.out.println("-dnsdebug                ->> debug DNS resolves and the DNS cache");
			System.out.println("-enableIPv6 <networkinterface-name>  ->> enable only IPv6 support for recording, also can provide the IPv6 network interface of the load generator");
			System.out.println("-enableIPv6v4 <networkinterface-name> ->> enable both IPv6 and IPv4 (first will try with IPv6 ,if fails will try with IPv4 support for recording),also can provide the IPv6 network interface of the load generator");
			System.out.println();
			System.out.println("-dfl                     ->> debug execution steps of all failed loops to standard output");
			System.out.println("-dl                      ->> debug execution steps of all loops to standard output");
			System.out.println("-dh                      ->> debug HTTP protocol headers to standard output, includes the -dl option");
			System.out.println("-dc                      ->> debug HTTP content data to standard output, includes the -dl option");
			System.out.println("-dhc                     ->> debug HTTP protocol headers and HTTP content data to standard output, includes the -dl option");
			System.out.println("-dC                      ->> debug cookies to standard output, includes the -dl option");
			System.out.println("-dK                      ->> debug keep-alive (socket pool) to standard output, includes the -dl option");
			System.out.println("-dssl                    ->> debug SSL handshake (https) to standard output, includes the -dl and the -dK option");
			System.out.println();
			System.out.println("-tz <timezone>           ->> set time zone (see Application Reference Manual: supported time zones)");
			System.out.println("-dgs a|c                 ->> set number format (decimal group separator) a = '  c = ,");
			System.out.println("-browserlang <text>      ->> set the browser language for the test");
			System.out.println("-enablebrowcache         ->> set the browser cache mode on");
			System.out.println("-checknewpageversion     ->> set the conditional GET mode on");
			System.out.println("-replay                  ->> Indicates the replay mode");
			System.out.println("-annotation <text>       ->> adds an annotation for this test run");
			System.out.println();
			System.out.println("-execAgentHost <ip address or dns name>      ->> set the ip address or the dns name of the exec agent from which the license is used (default: 127.0.0.1)");
			System.out.println("-execAgentPort <port>                        ->> set the tcp/ip port of the exec agent (default: 7993)");
			System.out.println("-execAgentProtocol <plain | http | https>    ->> set the protocol of the exec agent (default: plain)");
			System.out.println("-execAgentUsername <string>                  ->> set the auth. username for the exec agent (default: [no username])");
			System.out.println("-execAgentPassword <string>                  ->> set the auth. password for the exec agent (default: [no password])");
			System.out.println();
			System.out.println("-h                       ->> display this help text");
			System.out.println("-help                    ->> display this help text");
			System.out.println();
			System.exit(-1);
		}
		
		System.out.println("+----------------------------------------------------------------+");
		System.out.println("| Welcome to the ZebraTester Load Test Program.                  |");
		System.out.println("| Additional help available with program argument \"-help\"        |");
		System.out.println("| Procedure Copyright by Apica. |");
		System.out.println("| All rights reserved.             |");
		System.out.println("+----------------------------------------------------------------+");
		
		
		if (commonNextProxyConfig != null)
		{
			System.out.println();
			System.out.println("*** Warning: Loadtest over HTTP(S) Proxy ***");
		}
		
		// check command line argument -noECC
		sslECC = (!ParseArgs.hasOption(args, "-noECC"));       // disable ssl ecc ?
		
		// initialize ssl/https support
		SSLInit.execute(!ParseArgs.hasOption(args, "-iaikLast"), true);
		if (sslECC)
			SSLInit.enableECC();
		
		// check command line argument -nosni
		if (ParseArgs.hasOption(args, "-nosni"))            // disable ssl sni ?
			sslSNI = false;
		
		// check command line argument -snicritical
		if (ParseArgs.hasOption(args, "-snicritical"))      // set ssl sni as critical tls extension ?
			sslSNICirical = true;
		
		// check command line argument -tlssessiontickets
		if (ParseArgs.hasOption(args, "-tlssessiontickets"))      // set tls extension session tickets?
			useTlsSessionTickets = true;
		
		// set default character set for response content tests
		setCharEncoding(prxCharEncoding);
		
		// check command line argument -tz <timezone>
		String timeZoneString = ParseArgs.getString(args, "-tz");
		if (timeZoneString != null)
			defaultTimeZone = timeZoneString.toUpperCase(); // set time zone?
		ZoneTime.setDefaultTimeZone(defaultTimeZone);
		
		// check command line argument -dgs a|c
		String dgs = ParseArgs.getString(args, "-dgs");
		if (dgs != null)
		{
			if (dgs.equalsIgnoreCase("a"))
				defaultNumberGroupingSeparator = '\'';
			if (dgs.equalsIgnoreCase("c"))
				defaultNumberGroupingSeparator = ',';
		}
		Lib.setDefaultNumberGroupingSeparator(defaultNumberGroupingSeparator);
		
		// check command line argument -browserlang <text>
		browserLanguage = ParseArgs.getString(args, "-browserlang");
		
		// check command line argument -enablebrowcache
		if (ParseArgs.hasOption(args, "-enablebrowcache"))
		{
			enableBrowserCache = true;
		}
		
		// check command line argument -checknewpageversion
		if (ParseArgs.hasOption(args, "-checknewpageversion"))
		{
			conditionalGet = true;
		}
		
		// check command line argument -replay
		if (ParseArgs.hasOption(args, "-replay"))
		{
			replayMode = true;
		}
		
		// check command line argument -annotation <text>
		String testRunAnnotation = ParseArgs.getString(args, "-annotation");
		if (testRunAnnotation != null)
		{
			if (testRunAnnotation.startsWith("\"") && testRunAnnotation.endsWith("\""))
				testRunAnnotation = testRunAnnotation.substring(1, testRunAnnotation.length() - 1);
		}
		
		// check command line argument -ssl
		String newSslProtocolVersion = ParseArgs.getString(args, "-ssl");
		if (newSslProtocolVersion != null)
		{
			if (newSslProtocolVersion.equalsIgnoreCase("v2"))
				sslProtocolVersion = "v2";
			if (newSslProtocolVersion.equalsIgnoreCase("v3"))
				sslProtocolVersion = "v3";
			if (newSslProtocolVersion.equalsIgnoreCase("tls"))
				sslProtocolVersion = "tls";
			if (newSslProtocolVersion.equalsIgnoreCase("tls11"))
				sslProtocolVersion = "tls11";
			if (newSslProtocolVersion.equalsIgnoreCase("tls12"))
				sslProtocolVersion = "tls12";
		}
		
		// check command line argument -sslcache <seconds>
		Integer newSslSessionCacheTimeout = ParseArgs.getInteger(args, "-sslcache");
		if (newSslSessionCacheTimeout != null)
			sslSessionCacheTimeout = newSslSessionCacheTimeout.intValue();
		
		// check command line argument -sslrandom
		String sslHandshakeRandomGeneratorTypeStr = ParseArgs.getString(args, "-sslrandom");
		if (sslHandshakeRandomGeneratorTypeStr != null)
		{
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("java"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_JAVA_DEFAULT;
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("iaik"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_IAIK_DEFAULT;
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("fast"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_FAST;
		}
		
		// check command line argument -sslcmode
		sslcmode = ParseArgs.hasOption(args, "-sslcmode");  // enable ssl/https compatibility workarounds?
		
		// check command line argument -dfl
		debugFailedLoops = ParseArgs.hasOption(args, "-dfl"); // debug failed loops?
		
		// check command line argument -dl
		debugLoops = ParseArgs.hasOption(args, "-dl");      // debug loops?
		
		// check command line argument -dh
		debugHttp = ParseArgs.hasOption(args, "-dh");       // debug http?
		if (debugHttp)
			debugLoops = true;
		
		// check command line argument -dc
		debugContent = ParseArgs.hasOption(args, "-dc");    // debug content?
		if (debugContent)
			debugLoops = true;
		
		// check command line argument -dhc
		if (ParseArgs.hasOption(args, "-dhc"))				// debug http and content
		{
			debugLoops = true;
			debugHttp = true;
			debugContent = true;
		}
		
		// check command line argument -dC
		debugCookies = ParseArgs.hasOption(args, "-dC");    // debug cookies?
		if (debugCookies)
			debugLoops = true;
		
		// check command line argument -dK
		debugKeepAlive = ParseArgs.hasOption(args, "-dK");  // debug keep.alive (socket pool)?
		if (debugKeepAlive)
			debugLoops = true;
		
		// check command line argument -dssl
		debugSsl = ParseArgs.hasOption(args, "-dssl");      // debug keep.alive (socket pool)?
		if (debugSsl)
		{
			debugLoops = true;
			debugKeepAlive = true;
		}
		
		// get startup delay
		Integer newStartupDelay = ParseArgs.getInteger(args, "-sdelay");
		if (newStartupDelay != null)
			plannedStartupDelay = newStartupDelay.intValue();
		
		// get max. parallel threads per user - note: only valid if CONTAINS_PARALLEL_EXECUTED_URLS = true
		Integer newMaxParallelThreadsPerUser = ParseArgs.getInteger(args, "-mtpu");
		if (newMaxParallelThreadsPerUser != null)
		{
			if (newMaxParallelThreadsPerUser.intValue() > 0)
				maxParallelThreadsPerUser = newMaxParallelThreadsPerUser.intValue();
		}
		// get maximum number of loops per user
		maxPlannedLoops = 0;  // maximum loops per user, 0 = unlimited
		Integer newLoops = ParseArgs.getInteger(args, "-maxloops");
		if (newLoops != null)
			maxPlannedLoops = newLoops.intValue();
		
		// pacing of loops per user
		Integer pacingObj = ParseArgs.getInteger(args, "-pacing");
		if (pacingObj != null)
			pacing = pacingObj.intValue();
		
		// get maximum downlink network bandwidth per user (default = unlimited)
		Integer newDownlinkBandwidth = ParseArgs.getInteger(args, "-downlink");
		if (newDownlinkBandwidth != null)
			downlinkBandwidth = newDownlinkBandwidth.intValue();
		
		// get maximum uplink network bandwidth per user (default = unlimited)
		Integer newUplinkBandwidth = ParseArgs.getInteger(args, "-uplink");
		if (newUplinkBandwidth != null)
			uplinkBandwidth = newUplinkBandwidth.intValue();
		
		// get statistic sampling interval
		int samplingInterval = 15;  // statistic sampling interval in seconds
		Integer newSamplingInterval = ParseArgs.getInteger(args, "-sampling");
		if (newSamplingInterval != null)
			samplingInterval = newSamplingInterval.intValue();
		
		// get additional sampling rate per web page call
		int percentilePageSampling = 100;  // additional sampling rate per web page call in percent
		Integer newPercentilePageSampling = ParseArgs.getInteger(args, "-percpage");
		if (newPercentilePageSampling != null)
			percentilePageSampling = newPercentilePageSampling.intValue();
		
		// get additional sampling rate per url call
		int percentileUrlSampling = 0;  // additional sampling rate per url call in percent
		Integer newPercentileUrlSampling = ParseArgs.getInteger(args, "-percurl");
		if (newPercentileUrlSampling != null)
			percentileUrlSampling = newPercentileUrlSampling.intValue();
		
		// get extended sampling level per url call
		int percentileUrlSamplingAddOption = 0;  // extended sampling level per url call, 0 = disabled
		Integer newPercentileUrlSamplingAddOption = ParseArgs.getInteger(args, "-percurlopt");
		if (newPercentileUrlSamplingAddOption != null)
			percentileUrlSamplingAddOption = newPercentileUrlSamplingAddOption.intValue();
		
		// get maximum number of error snapshots per URL (0 = unlimited)
		int maxErrorSnapshots = 0;
		Integer newMaxErrorSnapshots = ParseArgs.getInteger(args, "-maxerrsnap");
		if (newMaxErrorSnapshots != null)
			maxErrorSnapshots = newMaxErrorSnapshots.intValue();
		
		// get maximum memory in megabytes which can be used for error snapshots (-1 = unlimited, default = 10)
		long maxErrorSnapshotMemory = 20;
		Long newMaxErrorSnapshotMemory = ParseArgs.getLong(args, "-maxerrmem");
		if (newMaxErrorSnapshotMemory != null)
			maxErrorSnapshotMemory = newMaxErrorSnapshotMemory.longValue();
		
		// single user mode ?
		boolean singleUserMode = ParseArgs.hasOption(args, "-singleuser");
		
		// override value for http user agent field ?
		String setUserAgentStr = ParseArgs.getIgnoreCaseString(args, "-setuseragent");
		if (setUserAgentStr != null)
		{
			USER_AGENT_1 = setUserAgentStr;
		}
		// get required input arguments
		int concurrentUsers = 0;     // number of concurrent users
		plannedRequestTimeout = 0;   // request timeout in seconds
		
		System.out.println();
		
		// parse -u argument or ask --> <number of concurrent users>
		Integer i = ParseArgs.getIntegerOrAsk(args, "-u", "Concurrent Users, <RETURN>=1 : ", new Integer(1));
		if (i == null)
			System.exit(-1);
		else
			concurrentUsers = i.intValue();
		
		// parse -d argument or ask --> <test duration in seconds>
		i = ParseArgs.getIntegerOrAsk(args, "-d", "Test Duration in Seconds, <RETURN>=30 : ", new Integer(30));
		if (i == null)
			System.exit(-1);
		else
			plannedTestDuration = i.intValue();
		
		// parse -t argument or ask --> <request timeout in seconds>
		i = ParseArgs.getIntegerOrAsk(args, "-t", "HTTP Request Timeout per URL in Seconds, <RETURN>=60 : ", new Integer(60));
		if (i == null)
			System.exit(-1);
		else
			plannedRequestTimeout = i.intValue();
		
		// parse optional -tconnect argument (TCP/IP socket connect timeout in seconds)
		i = ParseArgs.getInteger(args, "-tconnect");
		if (i != null)
			plannedConnectTimeout = i.intValue();
		
		String genericFileName = PerformanceData.proposeFileName("UpdateEmoloyeeProfile_PROD_SM", concurrentUsers, ParseArgs.getString(args, "-executionPlan"));
		
		// auto-configure binary result file
		if (!ParseArgs.hasOption(args, "-nores"))
		{
			String newResultFile = ParseArgs.getString(args, "-res");
			if (newResultFile == null)
				resultFile = genericFileName + ".prxres";
			else
				resultFile = newResultFile;
			System.out.println("Result File : " + resultFile);
		}
		
		// display common arguments at console output
		System.out.println();
		System.out.println("# concurrent users = " + concurrentUsers);
		System.out.println("# max. parallel threads per user = [serial execution order for all URLs]");
		System.out.print("# planned test duration = ");
		if (plannedTestDuration == 0)
			System.out.println("unlimited");
		else
			System.out.println("" + plannedTestDuration + " seconds");
		System.out.println("# http request timeout = " + plannedRequestTimeout + " seconds");
		if (plannedConnectTimeout != 0)
			System.out.println("# tcp/ip socket connect timeout = " + plannedConnectTimeout + " seconds");
		System.out.println("# startup delay = " + plannedStartupDelay + " milliseconds");
		System.out.println("# statistic sampling interval = " + samplingInterval + " seconds");
		System.out.println("# additional sampling rate per web page call = " + percentilePageSampling + " %");
		System.out.println("# additional sampling rate per url call = " + percentileUrlSampling + " %");
		System.out.println("# extended sampling per url call = " + PerformanceDataTickExtension.extTypeToString(percentileUrlSamplingAddOption).toLowerCase());
		System.out.print("# max loops per user = ");
		if (maxPlannedLoops == 0)
			System.out.println("unlimited");
		else
			System.out.println("" + maxPlannedLoops + " loops");
		System.out.print("# pacing for loops = ");
		if (pacing == 0)
			System.out.println("no pacing");
		else
			System.out.println("" + pacing + " seconds");
		if (downlinkBandwidth > 0)
			System.out.println("# max downlink bandwidth per user = " + downlinkBandwidth + " kbps");
		if (uplinkBandwidth > 0)
			System.out.println("# max uplink bandwidth per user = " + uplinkBandwidth + " kbps");
		System.out.println("# http protocol version = v" + httpProtocolVersion);
		System.out.println("# ssl protocol version = " + sslProtocolVersion);
		if (sslSessionCacheTimeout != 0)
			System.out.println("# ssl session cache timeout = " + sslSessionCacheTimeout + " seconds");
		else
			System.out.println("# ssl session cache disabled");
		if (resultFile != null)
			System.out.println("# result file = " + resultFile);
		else
			System.out.println("# no result file");
		if (debugFailedLoops)
			System.out.println("# debug failed loops");
		if (debugLoops)
			System.out.println("# debug loops");
		if (debugHttp)
			System.out.println("# debug http protocol headers");
		if (debugContent)
			System.out.println("# debug http content data");
		if (debugCookies)
			System.out.println("# debug cookies");
		if (debugKeepAlive)
			System.out.println("# debug keep-alive (socket pool)");
		if (debugSsl)
			System.out.println("# debug ssl (https)");
		
		
		// ----------------------------
		// *** initialize load test ***
		// ----------------------------
		
		
		// initialize performance data
		// ---------------------------
		final int PAGE_BREAKS = 11;  // number of page breaks in execute()  - modify this value if you add or delete some page breaks
		final int MAX_THREAD_STEPS = 286;  // number of URL requests in execute() - modify this value if you add or delete some requests
		performanceData = new PerformanceData(PAGE_BREAKS, MAX_THREAD_STEPS, concurrentUsers, -1, plannedTestDuration, maxPlannedLoops, httpProtocolVersion, plannedStartupDelay, plannedRequestTimeout, samplingInterval, percentilePageSampling, percentileUrlSampling, percentileUrlSamplingAddOption);
		performanceData.setInfoText("UpdateEmoloyeeProfile_PROD_SM");
		performanceData.setExecutorsAnnotation(testRunAnnotation);
		if (commonNextProxyConfig != null)
		{
			performanceData.setProxyInfo(proxyHttpHost, proxyHttpPort, proxyHttpsHost, proxyHttpsPort);
			performanceData.addTestDescription("*** Warning: Load test executed via outbound proxy ***");
		}
		performanceData.setResultFileName(resultFile);
		performanceData.setDumpStream(System.out, "# ");
		performanceData.setMaxErrorSnapshots(maxErrorSnapshots);		// 0 = unlimited
		if (maxErrorSnapshotMemory >= 0)
			performanceData.setMaxErrorSnapshotsMemory(maxErrorSnapshotMemory * 1048576l);		// value in bytes
		
		if (sslECC)
			performanceData.addTestDescription("*** SSL/TLS ECC is enabled ***");
		
		if ((downlinkBandwidth != 0) || (uplinkBandwidth != 0))
		{
			String downlinkBandwidthStr = "unlimited";
			String uplinkBandwidthStr = "unlimited";
			
			if (downlinkBandwidth != 0)
				downlinkBandwidthStr = "" + downlinkBandwidth + " kbps";
			if (uplinkBandwidth != 0)
				uplinkBandwidthStr = "" + uplinkBandwidth + " kbps";
			
			performanceData.addTestDescription("*** Warning: Max. network bandwidth per user limited. downlink = " + downlinkBandwidthStr + ", uplink = " + uplinkBandwidthStr + " ***");
		}
		
		if ((percentileUrlSamplingAddOption != PerformanceDataTickExtension.EXT_TYPE_NOTYPE) && (percentileUrlSampling > 0))
			performanceData.addTestDescription("*** Warning: Option \"" + PerformanceDataTickExtension.extTypeToString(percentileUrlSamplingAddOption).toLowerCase() + "\" enabled for additional sampling rate per URL call ***");
		if (debugFailedLoops)
			performanceData.addTestDescription("*** Warning: Debug failed loops enabled ***");
		if (debugLoops)
			performanceData.addTestDescription("*** Warning: Debug loops enabled ***");
		if (debugHttp)
			performanceData.addTestDescription("*** Warning: Debug HTTP protocol headers enabled ***");
		if (debugContent)
			performanceData.addTestDescription("*** Warning: Debug HTTP content data enabled ***");
		if (debugCookies)
			performanceData.addTestDescription("*** Warning: Debug cookies enabled ***");
		if (debugKeepAlive)
			performanceData.addTestDescription("*** Warning: Debug keep-alive enabled ***");
		if (debugSsl)
			performanceData.addTestDescription("*** Warning: Debug SSL/TLS enabled ***");
		if (!sslProtocolVersion.equalsIgnoreCase("all"))
			performanceData.addTestDescription("*** Warning: SSL/TLS protocol version fixed to " + sslProtocolVersion.toUpperCase() + " ***");
		if (sslSessionCacheTimeout == 0)
			performanceData.addTestDescription("*** Warning: SSL/TLS session cache disabled ***");
		if (singleUserMode)
		{
			String singleUserModeWarning = "*** Warning: Single user mode enabled ***";
			System.out.println(singleUserModeWarning);
			performanceData.addTestDescription(singleUserModeWarning);
		}
		if (setUserAgentStr != null)
		{
			String overrideUserAgentWarning = "*** Warning: User agent set to \"" + setUserAgentStr + "\" ***";
			System.out.println(overrideUserAgentWarning);
			performanceData.addTestDescription(overrideUserAgentWarning);
		}
		
		
		// ready to start load test...
		initNull(concurrentUsers);
		performanceData.setUserContextTable(getUserContextTable());
		
		// ... but init first remote interface ...
		initRemote(args);
		
		// ... and init plug-in class loader ...
		try
		{
			if (getPluginClassLoader() == null)
				setPluginClassLoader(new LoadtestPluginClassLoader(getSymmetricEncryptContext(), getEncryptedClasspathList()));
		}
		catch (Throwable pluginClassLoaderThrowable)
		{
			System.out.println("*** ERROR: Unable to load encrypted files ***");
			pluginClassLoaderThrowable.printStackTrace();
			System.exit(-1);
		}
		
		// ... and check multihomed option ...
		initMultihomed(args);
		
		// ... and add dynaTrace session ID to load test result - if available ...
		initDynaTrace();
		
		
		// use test-specific DNS hosts file (optional) ?
		String dnsHostsFile = ParseArgs.getIgnoreCaseString(args, "-dnshosts");
		if (dnsHostsFile != null)
		{
			try
			{
				dnsCache = new DNSCache(getSymmetricEncryptContext(), dnsHostsFile);
			}
			catch (IOException ie)
			{
				System.out.println("*** ERROR: unable to read DNS hosts file " + dnsHostsFile + " ***");
				System.out.println("*** Hint: you have to ZIP " + dnsHostsFile + " together with the compiled class of the load test program ***");
				ie.printStackTrace();
				System.exit(-1);
			}
		}
		
		// use test-specific DNS translation table (optional) ?
		String dnsTranslationTableFile = ParseArgs.getIgnoreCaseString(args, "-dnstranslation");
		if (dnsTranslationTableFile != null)
		{
			try
			{
				DNSTranslationTable dnsTranslationTable = new DNSTranslationTable(getSymmetricEncryptContext(), new File(dnsTranslationTableFile));
				if (dnsCache == null)
					dnsCache = new DNSCache();
				dnsCache.setDNSTranslationTable(dnsTranslationTable);
			}
			catch (IOException ie)
			{
				System.out.println("*** ERROR: unable to read DNS translation table file " + dnsTranslationTableFile + " ***");
				System.out.println("*** Hint: you have to ZIP " + dnsTranslationTableFile + " together with the compiled class of the load test program ***");
				ie.printStackTrace();
				System.exit(-1);
			}
		}
		
		// use test-specific DNS servers (optional) ?
		String dnsSrvStr = ParseArgs.getIgnoreCaseString(args, "-dnssrv");
		if (dnsSrvStr != null)
		{
			ArrayList<String> dnsSrvList = new ArrayList<String>();
			StringTokenizer dnsTok = new StringTokenizer(dnsSrvStr, ",;");
			while (dnsTok.hasMoreTokens())
				dnsSrvList.add(dnsTok.nextToken());
			if (dnsCache == null)
				dnsCache = new DNSCache(dnsSrvList);
			else
				dnsCache.setDnsServers(dnsSrvList);
		}
		
		// enable DNS TTL ?
		if (ParseArgs.hasOption(args, "-dnsenattl"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.enableTTL();
		}
		
		// set fixed DNS TTL ?
		Integer dnsFixTTL = ParseArgs.getInteger(args, "-dnsfixttl");
		{
			if (dnsFixTTL != null)
			{
				if (dnsCache == null)
					dnsCache = new DNSCache();
				dnsCache.setFixedTTL(dnsFixTTL.intValue());
			}
		}
		
		// enable DNS resolves per loop ?
		if (ParseArgs.hasOption(args, "-dnsperloop"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsPerLoop = true;
		}
		
		// enable DNS statistic ?   // note: use this option only if not any other, more specific DNS option is enabled.
		if (ParseArgs.hasOption(args, "-dnsstatistic"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
		}
		
		// debug DNS resolver ?
		if (ParseArgs.hasOption(args, "-dnsdebug"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setDebugToStdout(true);
		}
		
		// enable IPv6 
		if (ParseArgs.hasIgnoreCaseOption(args, "-enableIPv6"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setEnableIPv6(true);
			String networkInterfaceName = ParseArgs.getString(args, "-enableIPv6");
			if(null != networkInterfaceName && !networkInterfaceName.startsWith("-"))
				dnsCache.setNetworkInterfaceName(networkInterfaceName);
		}
		
		// enable IPv6 and V4 
		if (ParseArgs.hasIgnoreCaseOption(args, "-enableIPv6v4"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setEnableIPv6v4(true);
			String networkInterfaceName = ParseArgs.getString(args, "-enableIPv6v4");
			if(null != networkInterfaceName && !networkInterfaceName.startsWith("-"))
				dnsCache.setNetworkInterfaceName(networkInterfaceName);
		}
		
		if (dnsCache != null)
		{
			// update performance data with DNS settings
			performanceData.addDNSCacheStatistic(dnsCache.getCacheStatistic());
			performanceData.addTestDescription("*** Warning: OS-independent DNS access enabled. " + dnsCache.getConfigInfoText() + " ***");
			if (dnsPerLoop)
				performanceData.addTestDescription("*** Warning: DNS option -dnsperloop enabled ***");
			
			// log DNS settings
			System.out.println("# OS-independent DNS access enabled. " + dnsCache.getConfigInfoText());
			if (dnsPerLoop)
				System.out.println("# DNS option -dnsperloop enabled");
		}
		
		// initialize file cache for large XML, SOAP and ASCII requests
		try
		{
			requestFileCache.readFile(getSymmetricEncryptContext(), REQUEST_FILE_CACHE_FILE_1);		// UpdateEmoloyeeProfile_PROD_SM_RequestContent0228.txt
			requestFileCache.readFile(getSymmetricEncryptContext(), REQUEST_FILE_CACHE_FILE_2);		// UpdateEmoloyeeProfile_PROD_SM_RequestContent0258.txt
		}
		catch (IOException ie)
		{
			System.out.println("*** ERROR: UNABLE TO OPEN DATA FILE FOR LARGE ASCII OR XML REQUEST ***");
			ie.printStackTrace();
			System.exit(-2);
		}
		
		// calculate sampling offset and virtual user startup offset for cluster jobs (time shift per cluster member)
		int samplingTimeshift = 0;	// value in seconds
		if (!ParseArgs.hasOption(args, "-nosdelayCluster"))
		{
			if ((getClusterTotalMemberCount() > 1) && (getClusterMemberLocalId() > 0))
			{
				samplingTimeshift = Math.round(((float) samplingInterval / (float) getClusterTotalMemberCount()) * (float) getClusterMemberLocalId());
				System.out.println("# samplingTimeshift = " + samplingTimeshift + " seconds");
				
				long startupDelayOffset = (plannedStartupDelay / ((long) getClusterTotalMemberCount())) * ((long) getClusterMemberLocalId());
				System.out.println("# startupDelayTimeshift = " + startupDelayOffset + " milliseconds");
				System.out.println();
				if (startupDelayOffset > 0)
				{
					try { sleepRemoteInterruptable(startupDelayOffset); } catch (InterruptedException ie) {}
				}
			}
		}
		
		
		// update performance data
		// -----------------------
		testDurationStart = System.currentTimeMillis();
		performanceData.setStartDate();
		performanceData.addSnapshot(getCpuUsagePercent());
		performanceData.setSnapshotsTimeshift(samplingTimeshift);
		performanceData.setEndDate();
		
		// initialize global context for plug-ins  
		LoadtestPluginContext globalPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, new UpdateEmoloyeeProfile_PROD_SM());
		
		
		// --------------------------
		// *** start of load test ***
		// ---------------------------
		
		
		// special case for execution plans - start test with zero virtual users
		// ---------------------------------------------------------------------
		if (hasExecutionPlan())
		{
			if (concurrentUsers != 0)
			{
				System.out.println("*** Fatal Error: Load test with execution plan must start with zero number of virtual users - Load test program aborted ***");
				System.exit(1);
			}
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				UpdateEmoloyeeProfile_PROD_SM simulatedUser = new UpdateEmoloyeeProfile_PROD_SM(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				
				HttpLoadTestUserContext userContext = new HttpLoadTestUserContext(simulatedUser, null);
				userContext.setLoadTestUserExecutionPlanPlaceholder();
				getUserContextTable().getUserContextList().add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
		}
		
		
		// start virtual users as threads (normal case)
		// --------------------------------------------
		usersToBeIncreasedAtStartupOffset.set(concurrentUsers);
		for (int x = 0; x < concurrentUsers; x++)
		{
			if (cancelIncrementDecrementUser || cancelInitialIncrementUser)
			{
				usersToBeIncreasedAtStartupOffset.set(0);
				break;
			}
			
			// start load test thread
			// ----------------------
			Thread t = null;
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				UpdateEmoloyeeProfile_PROD_SM simulatedUser = new UpdateEmoloyeeProfile_PROD_SM(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				t = new Thread(simulatedUser);
				String threadName = "" + getUserContextTable().getUserContextList().size();
				threadName = THREAD_NAME.substring(0, 7 - threadName.length()) + threadName;
				t.setName(threadName);
				if (debugLoops && (simulatedUser.getLog().size() > 0))
				{
					synchronized (dumpLock)
					{
						simulatedUser.dumpLog(threadName + " ", System.out);		// dump log of constructor
					}
				}
				HttpLoadTestUserContext userContext = new HttpLoadTestUserContext(simulatedUser, t);
				getUserContextTable().getUserContextList().add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
			t.start();
			usersToBeIncreasedAtStartupOffset.decrementAndGet();
			System.out.println("# --- thread " + t.getName() + " created --- " + ZoneTime.dateToShortString() + " ---");
			
			while (isSuspend())
			{
				try { Thread.currentThread().sleep(100); } catch (InterruptedException ie) { break; }
				if (abortedByRemote() || abortedByEofInputFile())
					break;
				
				// check if max test duration reached during suspend
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
					break;
				
				// display and sample temporary performance data all "sampling interval" seconds - also during suspend
				if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
				{
					performanceData.addSnapshot(getCpuUsagePercent());
					performanceData.setEndDate();
				}
			}
			
			if (abortedByRemote() || abortedByEofInputFile())
				break;
			
			if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				break;
			
			// startup delay for next thread
			// -----------------------------
			try
			{
				if (!singleUserMode)   // create concurrent users
				{
					if (plannedStartupDelay <= 3000)
						sleepRemoteInterruptable(plannedStartupDelay);
					else
					{
						long startupDelayStartTime = System.currentTimeMillis();
						while (true)
						{
							if (abortedByRemote() || abortedByEofInputFile())
								break;
							if ((System.currentTimeMillis() - startupDelayStartTime) >= plannedStartupDelay)
								break;
							
							Thread.currentThread().sleep(100);
							
							// display and sample temporary performance data all "sampling interval" seconds
							if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
							{
								performanceData.addSnapshot(getCpuUsagePercent());
								performanceData.setEndDate();
							}
						}
						while (isSuspend())
						{
							try { Thread.currentThread().sleep(100); } catch (InterruptedException ie) { break; }
							if (abortedByRemote() || abortedByEofInputFile())
								break;
							
							// check if max test duration reached during suspend
							if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
								break;
							
							// display and sample temporary performance data all "sampling interval" seconds - also during suspend
							if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
							{
								performanceData.addSnapshot(getCpuUsagePercent());
								performanceData.setEndDate();
							}
						}
						
					}
				}
				else
					t.join();   // single user mode
			}
			catch (InterruptedException ie) { break; }
			if (abortedByRemote() || abortedByEofInputFile())
				break;
			
			
			// display and sample temporary performance data all "sampling interval" seconds
			if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
			{
				performanceData.addSnapshot(getCpuUsagePercent());
				performanceData.setEndDate();
				if (!isRemote())
				{
					synchronized (dumpLock)
					{
						performanceData.dump(false);
					}
				}
			}
		}
		usersToBeIncreasedAtStartupOffset.set(0);	// just in case that a thread is not started for any reason
		
		
		// wait for test-end in a loop
		// ---------------------------
		boolean allDone = false;
		while (!allDone)
		{
			// test aborted ?
			if (abortedByRemote() || abortedByEofInputFile())
			{
				nearRemoteEnd();
				String abort = "";
				if (abortedByRemote())
					abort = "*** test aborted by remote command ***";
				if (abortedByEofInputFile())
				{
					abort = "*** test aborted at eof of input file ***";
					performanceData.addTestDescription(abort);
				}
				synchronized (dumpLock)
				{
					addSSLCacheStatistic();
					performanceData.addSnapshot(getCpuUsagePercent());
					performanceData.setEndDate();
					
					if (!isRemote())
						performanceData.dump(false);
					if (resultFile != null)
						try { performanceData.writeObjectToFile(getSymmetricEncryptContext(), resultFile); } catch (IOException ie) { ie.printStackTrace(); }
					
					if(replayMode)
					{
						saveReplaySnapShots("ZTReplay.snapshot");
					}
					
					System.out.println();
					System.out.println(abort);
					System.out.println();
					System.out.flush();
					try { Thread.currentThread().sleep(10000); } catch (InterruptedException ie) {}
					System.exit(0);
				}
			}
			
			// display and sample temporary performance data all "sampling interval" seconds
			if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
			{
				performanceData.addSnapshot(getCpuUsagePercent());
				performanceData.setEndDate();
				if (!isRemote())
				{
					synchronized (dumpLock)
					{
						performanceData.dump(false);
					}
				}
			}
			
			// check if test has been done in case of decrement users to zero
			if ((decrementUser) && (plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				decrementUser = false;
			// check if test has been done
			if (!hasExecutionPlan())
				allDone = isTestDone();
			else
			{
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				{
					performanceData.addTestDescription("*** Warning: Load test aborted. Execution plan time limit exceeded after " + plannedTestDuration + " seconds ***");
					triggerAbort();
				}
			}
			
			// if not all is done: sleep one second
			if (!allDone)
				try { sleepRemoteInterruptable(1000); } catch (InterruptedException ie) { break; }
		} // end of wait loop
		
		
		// mark near end of test - only if a remote interface has been used
		nearRemoteEnd();
		
		
		
		// final test result - test completed
		// ----------------------------------
		performanceData.addSnapshot(getCpuUsagePercent());
		performanceData.setEndDate();
		if(replayMode)
		{
			saveReplaySnapShots("ZTReplay.snapshot");
		}
		
		// save test result
		performanceData.dump(true);
		if (resultFile != null)
			try { performanceData.writeObjectToFile(getSymmetricEncryptContext(), resultFile); } catch (IOException ie) { ie.printStackTrace(); }
		
		// all done
		System.out.flush();
		
		// wait for official end of test - only if a remote interface has been used
		waitRemoteEnd();
		
		System.out.println();
		System.out.println("Result File: " + resultFile);
		
		// now dead
		System.exit(0);
	}


	/**
	 * implement VaryingLoadInterface: support to increment the number of simulated users at runtime.
	 */
	public void setIncrementUser(long startTime)
	{
		incrementUserStartTime = startTime;
		incrementUserFlag = true;
	}

	public boolean isIncrementUser()
	{
		return incrementUserFlag;
	}

	public long getIncrementUserStartTime()
	{
		return incrementUserStartTime;
	}

	public void setIncrementUserStartTime(long startTime)
	{
		incrementUserStartTime = startTime;
	}

	public void clearIncrementUser()
	{
		incrementUserFlag = false;
	}

	public int incrementUsers(int numAddUsers, long startupDelay)
	{
		if (startupDelay < 0)
			startupDelay = plannedStartupDelay;
		return incrementUsersImplementation(numAddUsers, startupDelay, this);
	}

	static int incrementUsersImplementation(int numAddUsers, long startupDelay, HttpLoadTest httpLoadTest)
	{
		long startupDelayOffset = 0;
		if ((getClusterTotalMemberCount() > 1) && (getClusterMemberLocalId() > 0))
			startupDelayOffset = (startupDelay / ((long) getClusterTotalMemberCount())) * ((long) getClusterMemberLocalId());
		
		ArrayList<HttpLoadTestUserContext> addUserContextList = new ArrayList<HttpLoadTestUserContext>(numAddUsers);
		for (int x = 0; x < numAddUsers; x++)
		{
			if (abortedByRemote() || abortedByEofInputFile())
				return x;
			
			// initialize load test thread
			// ---------------------------
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				UpdateEmoloyeeProfile_PROD_SM simulatedUser = new UpdateEmoloyeeProfile_PROD_SM(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				HttpLoadTestUserContext userContext = prepareIncrementUser(simulatedUser, System.currentTimeMillis() + startupDelayOffset + (x * startupDelay));
				addUserContextList.add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
				if (debugLoops && (simulatedUser.getLog().size() > 0))
				{
					synchronized (dumpLock)
					{
						simulatedUser.dumpLog(userContext.getLoadTestThread().getName() + " ", System.out);		// dump log of constructor
					}
				}
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
		}
		
		// start load test threads by a thread
		// -----------------------------------
		HttpLoadTestIncrementUserThread incrementUserThread = new HttpLoadTestIncrementUserThread(httpLoadTest, addUserContextList);
		incrementUserThread.start();
		return numAddUsers;
	}


	/**
	 * Internal method used to load and apply next proxy settings from ZBAProxySettings.properties file.
	 * Settings are applied only if file exists and nextProxyIsActive is set to true in the file.
	 * Note that settings stored with the session, will be ineffective.
	 *
	 * @since V5.5-D
	 */
	private void applyNextProxySettingsFromFileIfExists()
	{
		
		String filename = "ZBAProxySettings.properties";
		BufferedReader bin = null;
		SymmetricEncryptContext decryptContext = getSymmetricEncryptContext();
		File file = new File(filename);
		
		if (file.exists())
		// open input file
		try
		{
			if (decryptContext == null)
			{
				bin = new BufferedReader(new InputStreamReader(new FileInputStream(filename), Charset.forName("UTF-8")));
			}
			else
			{
				// create a reader stream that decrypts the data on the fly
				bin = new BufferedReader(new InputStreamReader(SymmetricEncrypt.getCipherInputStream(new FileInputStream(filename), decryptContext), Charset.forName("UTF-8")));
			}
			
			if (bin != null)
			{
				Properties nextProxyConfigProperties = new Properties();
				nextProxyConfigProperties.load(bin);
				NextProxyConfig nextProxyConfig = new NextProxyConfig();
				nextProxyConfig.setActive(Boolean.valueOf(nextProxyConfigProperties.getProperty("nextProxyIsActive")));
				proxyEnabled = nextProxyConfig.isActive();                             // if false: do not use a proxy server
				
				if (proxyEnabled)
				{
					nextProxyConfig.disableHttpProxyCache(Boolean.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpCacheDisabled")));
					proxyCacheDisabled = nextProxyConfig.isDisabledHttpProxyCache();
					nextProxyConfig.setHttpHost(nextProxyConfigProperties.getProperty("nextProxyHttpHost"));
					proxyHttpHost = nextProxyConfig.getHttpHost();
					nextProxyConfig.setHttpPort(Integer.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpPort")));
					proxyHttpPort = nextProxyConfig.getHttpPort();
					nextProxyConfig.setHttpsHost(nextProxyConfigProperties.getProperty("nextProxyHttpsHost"));
					proxyHttpsHost = nextProxyConfig.getHttpsHost();
					nextProxyConfig.setHttpsPort(Integer.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpsPort")));
					proxyHttpsPort = nextProxyConfig.getHttpsPort();
					nextProxyConfig.setAuthUsername(nextProxyConfigProperties.getProperty("nextProxyAuthUsername"));
					nextProxyConfig.setAuthPassword(nextProxyConfigProperties.getProperty("nextProxyAuthPassword"));
					nextProxyConfig.setNoNextProxy(nextProxyConfigProperties.getProperty("noNextProxy"));
					noProxyFor = nextProxyConfig.getNoNextProxy();
					
					String proxyAuth = "";
					
					if (nextProxyConfig.getAuthUsername() != null)
					{
						proxyAuth = nextProxyConfig.getAuthUsername() + ":";
						if (nextProxyConfig.getAuthPassword() != null)
							proxyAuth = proxyAuth + nextProxyConfig.getAuthPassword();
					}
					
					String  proxyAuthorization = null;
					
					if (proxyAuth.length() > 1)
						proxyAuthorization = Base64Encoder.encode(proxyAuth);		// Base 64 encoded - used for basic authentication only
					
					commonNextProxyConfig = new NextProxyConfig(proxyEnabled, proxyCacheDisabled, proxyHttpHost, proxyHttpPort, proxyHttpsHost, proxyHttpsPort, proxyAuthorization, noProxyFor);
					
					log("*** Warning: Applying proxy configuration from file " + filename + " ***");
				}
				
			}
		}
		catch (Throwable tr)
		{
			log("*** Unable to load proxy configuration from properties file " + filename + " ***");
			tr.printStackTrace();
		}
		finally
		{
			if (bin != null)
			{
				try { bin.close(); } catch (Exception e) {}
			}
		}
		
	}
		
	// definition for external files used to support large XML, SOAP and ASCII requests
	// --------------------------------------------------------------------------------
	public static final String REQUEST_FILE_CACHE_FILE_1 = "UpdateEmoloyeeProfile_PROD_SM_RequestContent0228.txt";		// must be zipped together with the compiled class of this load test program
	public static final String REQUEST_FILE_CACHE_FILE_2 = "UpdateEmoloyeeProfile_PROD_SM_RequestContent0258.txt";		// must be zipped together with the compiled class of this load test program
	
	
	// source code of inline script "htmldecode"
	public static String getInlineScriptCode_1615295372496()
	{
		return "vscrbdec=urlDecode(vScrb)\r\nprint(vscrbdec)";
	}
	
	
	/**
	* Execute the inline script "htmldecode"
	* 
	* @param testURL 	the context of the executed URL call
	* @param urlCallPassed 	a flag that signals (when set to false) if a 'yellow' error did occur after the URL call (triggered by response verification settings)
	* @param threadStep 	the current execution step of the simulated user (page break or URL call)
	* @param totalLoopCounter 	the total number of executed loops - counted overall simulated users
	* @param innerLoopContext 	the context of the current inner loop, or null if the inline script in not executed inside an inner loop
	*
	* @return the context of the inline script
	*/
	public LoadtestInlineScriptContext executeInlineScript_1615295372496(HttpTestURL testURL, boolean urlCallPassed, int threadStep, int totalLoopCounter, InnerLoopContext innerLoopContext)
	{
		LoadtestInlineScriptContext inlineScriptContext = new LoadtestInlineScriptContext("htmldecode", ProxySnifferVarSourceInlineScript.EXEC_SCOPE_URL_END, "", this, LoadtestInlineScriptContext.RESULT_TYPE_SET_OUTPUT_VARS, 15, threadNumber, threadLoopCounter, socketPool, cookieHandler, testURL, threadStep);
		inlineScriptContext.setUrlCallPassed(urlCallPassed);
		InlineScriptExecutor inlineScriptExecutor = new InlineScriptExecutor(getInlineScriptCode_1615295372496(), inlineScriptContext);
		log("Executing inline script \"" + inlineScriptContext.getScriptTitle() + "\"");
		LoadtestInlineScriptVar inputVar1 = new LoadtestInlineScriptVar("vScrb", Lib.nullToBlank(vScrb), 1);		// note: parameter no. 3 is the scope of the var
		inlineScriptContext.addInputVar(inputVar1);
		LoadtestInlineScriptVar inputVar2 = new LoadtestInlineScriptVar("vscrbdec", Lib.nullToBlank(vscrbdec), 1);		// note: parameter no. 3 is the scope of the var
		inlineScriptContext.addInputVar(inputVar2);
		LoadtestInlineScriptVar outputVar1 = new LoadtestInlineScriptVar("vScrb", Lib.nullToBlank(vScrb), 1);		// note: parameter no. 3 is the scope of the var
		inlineScriptContext.addOutputVar(outputVar1);
		LoadtestInlineScriptVar outputVar2 = new LoadtestInlineScriptVar("vscrbdec", Lib.nullToBlank(vscrbdec), 1);		// note: parameter no. 3 is the scope of the var
		inlineScriptContext.addOutputVar(outputVar2);
		inlineScriptExecutor.execute();		// execute inline script
		vScrb = inlineScriptContext.getOutputVar("vScrb").getVarValue();
		log("<<< vScrb = " + vScrb);
		vscrbdec = inlineScriptContext.getOutputVar("vscrbdec").getVarValue();
		log("<<< vscrbdec = " + vscrbdec);
		for (String stdoutLine : inlineScriptContext.getOutputStreamData())
			log(inlineScriptContext.getScriptTitle() + ": " + stdoutLine);
		for (String stderrLine : inlineScriptContext.getErrorStreamData())
			System.err.println(inlineScriptContext.getScriptTitle() + ": " + stderrLine);
		if (!inlineScriptExecutor.wasSuccessFulExecution())
		{
			if (!inlineScriptContext.isScriptAbort())
				throw new InlineScriptExecutionException("*** Execution of inline script \"" + inlineScriptContext.getScriptTitle() + "\" failed ***");
		}
		return inlineScriptContext;
	}

}	// end of class

