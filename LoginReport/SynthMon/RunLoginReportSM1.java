
// *********************************************************************************************
//
// Automatically Generated Load Test Program
// -----------------------------------------
//
// Source: RunLoginReportSM1.java
// Date  : 06 Dec 2019 16:50:08 PST
// Author: Apica ZebraTester V5.5-F / automatically generated
//
// Procedure Copyright by Ingenieurbuero David Fischer AG  |  A Company of the Apica Group
// All Rights Reserved
//
// http://www.apicasystem.com                                         http://www.zebratester.com
// *********************************************************************************************


import java.io.*;
import java.nio.charset.Charset;
import java.util.*;
import java.util.concurrent.atomic.*;
import dfischer.utils.AbstractInputFileReader;
import dfischer.utils.Base64Decoder;
import dfischer.utils.Base64Encoder;
import dfischer.utils.ConvertToDoubleNumber;
import dfischer.utils.ContentTokenExtractor;
import dfischer.utils.ContentTokenExtractorItem;
import dfischer.utils.Cookie;
import dfischer.utils.CookieHandler;
import dfischer.utils.DigestAuthContext;
import dfischer.utils.DNSCache;
import dfischer.utils.DNSTranslationTable;
import dfischer.utils.DynamicProtobufContentParser;
import dfischer.utils.ExternalParamFile;
import dfischer.utils.FileCache;
import dfischer.utils.GenericPluginInterface;
import dfischer.utils.GetRealTimeUserInputFieldsInterface;
import dfischer.utils.HtmlContentParser;
import dfischer.utils.HtmlHeaderCookieExtractor;
import dfischer.utils.HttpLoadTest;
import dfischer.utils.HttpLoadTestIncrementUserThread;
import dfischer.utils.HttpLoadTestUserContext;
import dfischer.utils.HttpSocketPool;
import dfischer.utils.HttpTestURL;
import dfischer.utils.HttpTestURLDNSContext;
import dfischer.utils.HttpTestURLThreadHandler;
import dfischer.utils.InlineScriptExecutionException;
import dfischer.utils.InlineScriptExecutor;
import dfischer.utils.InnerLoopContext;
import dfischer.utils.JSONHtmlBasedExtractor;
import dfischer.utils.JSONPathBasedExtractor;
import dfischer.utils.JSONPathBasedExtractorItem;
import dfischer.utils.Lib;
import dfischer.utils.LoadtestInlineScriptContext;
import dfischer.utils.LoadtestInlineScriptVar;
import dfischer.utils.LoadtestPluginClassLoader;
import dfischer.utils.LoadtestPluginContext;
import dfischer.utils.NextProxyConfig;
import dfischer.utils.ParseArgs;
import dfischer.utils.ParseUrl;
import dfischer.utils.PerformanceData;
import dfischer.utils.PerformanceDataTickExtension;
import dfischer.utils.ProtobufFieldAndValueElement;
import dfischer.utils.ProtobufLib;
import dfischer.utils.RealTimeUserInputField;
import dfischer.utils.ScreenshotImage;
import dfischer.utils.SetThreadStepInterface;
import dfischer.utils.SSLInit;
import dfischer.utils.SSLSessionCacheStatistic;
import dfischer.utils.SSLSessionCacheStatisticInterface;
import dfischer.utils.SuspendResumeInterface;
import dfischer.utils.SymmetricEncrypt;
import dfischer.utils.SymmetricEncryptContext;
import dfischer.utils.TextLineTokenExtractor;
import dfischer.utils.TextLineTokenExtractorItem;
import dfischer.utils.ThreadStepInterface;
import dfischer.utils.UserInputField;
import dfischer.utils.UserTransactionContext;
import dfischer.utils.UserTransactionRuntimeHandler;
import dfischer.utils.VarInputFileReader;
import dfischer.utils.VarRandomInputFileReader;
import dfischer.utils.VaryingLoadInterface;
import dfischer.utils.VaryingTestDurationInterface;
import dfischer.utils.XmlContentParser;
import dfischer.utils.XmlDoctypeCommentParser;
import dfischer.utils.ZoneTime;
import dfischer.proxysniffer.ProxySnifferVarSourceInlineScript;
import dfischer.utils.WebSocketPluginInterface;
import dfischer.utils.BoundaryBasedExtractor;
import dfischer.utils.BoundaryBasedExtractorItem;
import dfischer.utils.RegExpBasedExtractor;
import dfischer.utils.RegExpBasedExtractorItem;
import dfischer.utils.XpathBasedExtractor;
import dfischer.utils.XpathBasedExtractorItem;
import dfischer.proxysniffer.WebSocketData;
import dfischer.utils.HttpTestWebsocketContext;
import dfischer.websocket.*;


/**
 * Automatically generated load test program.
 */
public class RunLoginReportSM1 extends HttpLoadTest implements Runnable, ThreadStepInterface, SetThreadStepInterface, SSLSessionCacheStatisticInterface, VaryingLoadInterface, VaryingTestDurationInterface, SuspendResumeInterface, GetRealTimeUserInputFieldsInterface
{
	public static final String prxVersion = "V5.5-F";
	public static final int    prxCharEncoding = 3;                         // 1 = OS Default, 2 = ISO-8859-1, 3 = UTF-8
	public static final String testDescription = "RunLoginReport";

	public static String USER_AGENT_1 = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36";

	private static final boolean CONTAINS_PARALLEL_EXECUTED_URLS = false;
	private static final int MAX_PARALLEL_THREADS_PER_USER = 6;                       // default value for max. parallel executed URLs per user
	private static int maxParallelThreadsPerUser = MAX_PARALLEL_THREADS_PER_USER;     // configured value for max. parallel executed URLs per user

	private static final boolean CONTAINS_EXTERNAL_RESOURCES = false;       // note: external resources are typically additional Java library files (*.jar files) invoked by self-developed plug-ins. Consider that Input Files and the Main Class of Plug-Ins are NOT external resources in this context because ZebraTester knows already their declarations.

	// --- WebSocket Object ---
	WebSocketData webSocketData = null;                                     // WebSocket Object that contains data of recorded WebSocket frames.
	WebSocketPluginInterface[] webSocketPluginsForURL = null;               // all assiciated web socket plugins for specific URL.

	// --- proxy configuration ---
	private static boolean proxyEnabled = false;                             // if false: do not use a proxy server
	private static boolean proxyCacheDisabled = true;
	private static String  proxyHttpHost = "";
	private static int     proxyHttpPort = -1;
	private static String  proxyHttpsHost = "";
	private static int     proxyHttpsPort = -1;
	private static String  noProxyFor = "";
	private static String  proxyAuthorization = null;
	private static NextProxyConfig commonNextProxyConfig = null;
	private NextProxyConfig userNextProxyConfig = null;
	
	private static int plannedStartupDelay = 200;                           // startup delay between concurrent users in milliseconds, see main argument "-sdelay"
	private static int plannedTestDuration = -1;                            // planned load test duration in seconds, 0 = unlimited, see main argument "-d"
	private static int maxPlannedLoops = 0;  								   // maximum planned loops per user, 0 = unlimited, see main argument "-maxloops"
	private static int plannedRequestTimeout = 0;                           // planned request timeout in seconds, see main argument "-t"
	private static int plannedConnectTimeout = 0;                           // planned TCP/IP socket connect timeout in seconds (default = use plannedRequestTimeout), see main argument "-tconnect"
	
	private static String defaultTimeZone = "PST";                          // use main argument -tz <timezone> to alter
	private static char defaultNumberGroupingSeparator = '\'';              // use main argument -dgs a|c to alter
	private static String sslProtocolVersion = "all";                       // applied ssl protocol version: "all" = v3/tls/tls11/tls12, use main argument -ssl to set a fixed protocol version
	private static boolean sslcmode = false;                                // support of deficient ssl servers, use main argument -sslcmode to enable
	private static boolean sslECC = false;                                  // elliptic curve cryptography (ECC) is disabled by default, use main argument -ecc to enable
	private static boolean sslSNI = true;                                   // server name indication (SNI) is enabled by default, use main argument -nosni to disable
	private static boolean sslSNICirical = false;                           // the SNI TLS extension is by default set as non-critical, use main argument -snicritical to set as critical
	private static boolean useTlsSessionTickets = false;                    // Session Tickets can only be used with TLS, use main argument -tlssessiontickets to set to use
	private static final long loopErrorDelay = 20;                          // error delay (in milliseconds) applied if a loop of a virtual user has failed
	private static final String THREAD_NAME = "T000000";                    // internal
	private static Integer dumpLock = new Integer(0);                       // internal
	private static Integer inputFileLock = new Integer(0);                  // internal
	private volatile int threadStep = ThreadStepInterface.THREAD_NO_STEP;   // internal
	private boolean urlCallPassed = false;                                  // internal
	private String localIpAddress = null;                                   // internal
	private static long downlinkBandwidth = 0;                              // max. downlink bandwidth per user. 0 = unlimited. use main argument -downlink <kbps> to alter
	private static long uplinkBandwidth = 0;                                // max. uplink bandwidth per user. 0 = unlimited. use main argument -uplink <kbps> to alter
	private static boolean dnsPerLoop = false;								// true if main argument "-dnsperloop" is set = perform new DNS resolves for each executed loop. normally false
	private HttpTestURLDNSContext userDNSContext = null;                    // user specific DNS context - normally null when no special DNS servers are used
	
	private static volatile boolean debugFailedLoops = false;               // true if main argument "-dfl" is set
	private static volatile boolean debugLoops = false;                     // true if main argument "-dl" is set
	private static volatile boolean debugHttp = false;                      // true if main argument "-dh" is set
	private static volatile boolean debugContent = false;                   // true if main argument "-dc" is set
	private static volatile boolean debugCookies = false;                   // true if main argument "-dC" is set
	private static volatile boolean debugKeepAlive = false;                 // true if main argument "-dK" is set
	private static volatile boolean debugSsl = false;                       // true if main argument "-dssl" is set
	
	private static String resultFile = null;                                // name of binary test result file or null
	
	private final static String httpProtocolVersion = "1.1";      // applied HTTP protocol version V1.1
	
	private static ExternalParamFile externalParamFile = null;                              // used only for very large parameter values (commonly unused)
	private static final String EXTERNAL_PARAM_FILE = "RunLoginReportSM1ExtParams.dat";     // input file name for very large parameter values
	private static FileCache requestFileCache = new FileCache();  // file cache for large XML, SOAP and ASCII requests
	
	private int requestTimeout = -1;                              // thread input data from constructor, timeout per url request in seconds
	private int remainingLoops = -1;                              // thread input data from constructor, number of loops per thread (optional)
	private boolean checkLoopCount = false;                       // thread input data from constructor, number of loops per thread (optional)
	private int threadNumber = -1;                                // thread input data from constructor, internal thread number
	private int threadLoopCounter = 0;                            // internal loop counter per thread
	private volatile int userResumeStartWaitDelay = 0;            // internal, user specific delay when the load test execution is resumed
	private volatile boolean decrementEndOfLoopFlag = false;	  // internal flag to decrement the simulated user at runtime
	private volatile boolean incrementUserFlag = false;           // internal flag to increment the simulated user at runtime
	private volatile long incrementUserStartTime = -1;            // internal start time when increment the simulated user at runtime
	private static AtomicInteger totalLoopCounter = new AtomicInteger(0);    // internal overall loop counter

	private LoadtestPluginContext userPluginContext = null;       // plug-in context per user
	private LoadtestInlineScriptContext inlineScriptContext = null;          // re-used, scratch, the returned context of an inline script that runs at item or URL exec scope

	private Object sslSessionCache = null;                        // internal ssl session cache per thread
	private SSLSessionCacheStatistic sslStatistic = null;         // internal ssl session cache statistic per thread
	private static int sslSessionCacheTimeout = 300;              // timeout of ssl session cache in seconds, 0 = session cache disabled
	private static int sslHandshakeRandomGeneratorType = -1;      // invalid initial value, use the default secure random generator for SSL handshakes
	private HttpSocketPool socketPool = null;                     // re-used, scratch, internal socket pool per thread and loop
	private CookieHandler cookieHandler = null;                   // re-used, scratch, internal cookie handler per thread and loop

	private HttpTestURL testURL = null;                           // re-used, scratch, http request and response
	private HttpTestURLThreadHandler pageThreadHandler = null;    // re-used, scratch, support for parallel processing of http request within a page
	private int httpStatus = -1;                                  // re-used, scratch, http response status code from webserver
	private HtmlContentParser htmlContentParser = null;           // re-used, scratch, used to extract vars from http response
	private XmlContentParser xmlContentParser = null;             // re-used, scratch, used to extract vars from http response
	private JSONHtmlBasedExtractor jsonHtmlBasedExtractor = null; // re-used, scratch, used to extract vars from http response
	private DynamicProtobufContentParser protobufContentParser = null;  // re-used, scratch, used to extract vars from http response
	private TextLineTokenExtractor textLineTokenExtractor = null; // re-used, scratch, used to extract vars from http response
	private ContentTokenExtractor contentTokenExtractor = null;   // re-used, scratch, used to extract vars from http response
	private BoundaryBasedExtractor boundaryBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private RegExpBasedExtractor regExpBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private XpathBasedExtractor xpathBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private JSONPathBasedExtractor jsonPathBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	
	private volatile UserTransactionRuntimeHandler transactionHandler = new UserTransactionRuntimeHandler();		// re-used, support to manage user-defined transactions
	private Map<String,String> transactionContextMap = new HashMap<>();		// used to correctly measure the user-defined transactions

	private String vScrb = null;                         // var declaration from web admin var handler: scope = per loop
	private String C_UploadHash = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_Mod8 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_Mod7 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_Mod6 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_Mod4 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_belieze2 = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_Mod2 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_belieze1 = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_Mod1 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_belieze0 = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_SAMLReq = null;                     // var declaration from web admin var handler: scope = per loop
	private String C_FileVersion = null;                 // var declaration from web admin var handler: scope = per loop
	private String C_Token = null;                       // var declaration from web admin var handler: scope = per loop
	private String C_Token2 = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_Token1 = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_ReportID = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_Eventval1 = null;                   // var declaration from web admin var handler: scope = per loop
	private String P_millis = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_PostContent = null;                 // var declaration from web admin var handler: scope = per loop
	private String C_tctest0 = null;                     // var declaration from web admin var handler: scope = per loop
	private String C_RenderHandler = null;               // var declaration from web admin var handler: scope = per loop
	private String C_SAMLResponse = null;                // var declaration from web admin var handler: scope = per loop
	private String C_RelayState = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_Vsgen1 = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_AjaxsecKey = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_EventID = null;                     // var declaration from web admin var handler: scope = per loop
	private String C_AjaxsecKey1 = null;                 // var declaration from web admin var handler: scope = per loop
	private String C_Img1 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_RPCSecret = null;                   // var declaration from web admin var handler: scope = per loop
	private String C_RPCSecret3 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_RPCSecret1 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_Viewstate1 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_Merge2 = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_Merge1 = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_Showme = null;                      // var declaration from web admin var handler: scope = per loop
	
	/**
	 * constructor: called from load test plug-ins (scope = global).
	 */
	public RunLoginReportSM1()
	{
		super();
	}


	/**
	 * constructor: called when a user is created (per user).
	 */
	public RunLoginReportSM1(int maxLoops, int requestTimeout, int threadNumber)
	{
		super();
		this.requestTimeout = requestTimeout;
		this.remainingLoops = maxLoops;
		this.checkLoopCount = (maxLoops > 0);
		this.threadNumber = threadNumber;
		this.sslSessionCache = SSLInit.getNewSslSessionCache(sslSessionCacheTimeout);
		this.sslStatistic = new SSLSessionCacheStatistic();
		if (isMultihomed() && (!ipPerLoop()))
			this.localIpAddress = getNextMultihomedIpAddress();
		if (dnsCache != null)
			userDNSContext = new HttpTestURLDNSContext(dnsCache, threadNumber);
		
		applyNextProxySettingsFromFileIfExists();
		
		if (commonNextProxyConfig != null)
			// set proxy configuration data per user 
			userNextProxyConfig = new NextProxyConfig(commonNextProxyConfig);
		
		// initialize context for plug-ins which are executed per user
		userPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, this, threadNumber);
	}


	/**
	 * internal method: called when a user starts a loop.
	 * contains the recorded session which is called by users x loops.
	 * 
	 * @param totalLoopCounter total number of loops (0..n-1) counted overall threads. This value is unique per loop.
	 * 
	 * @return  true:  loop successful completed.
	 *          false: loop failed.
	 */
	private boolean execute(int totalLoopCounter) throws Exception
	{
		markStartOfLoop();
		threadStep = 0;                 // internal - start loop at thread step 0
		
		// enable DNS resolves per loop?
		if (dnsPerLoop)
			userDNSContext = new HttpTestURLDNSContext(dnsCache.clone(false), threadNumber);
		
		// debug http headers?
		Object httpLogVectorObject = null;
		if (debugHttp)
			httpLogVectorObject = this;
		
		// create socket pool per loop
		sslSessionCache = SSLInit.getNewSslSessionCache(sslSessionCacheTimeout);		// reset the SSL session cache to get new SSL session IDs for this loop
		socketPool = new HttpSocketPool(this, sslProtocolVersion, sslSessionCache, sslStatistic, sslcmode);
		if (plannedConnectTimeout > 0)
			socketPool.setConnectTimeout(plannedConnectTimeout);
		if (sslHandshakeRandomGeneratorType != -1)
			socketPool.setSslHandshakeRandomGeneratorType(sslHandshakeRandomGeneratorType);
		socketPool.setSupportEllipticCurves(sslECC);
		socketPool.setHintUseSNI(sslSNI);
		socketPool.setSniCritical(sslSNICirical);
		socketPool.setUseTlsSessionTickets(useTlsSessionTickets);
		if (debugKeepAlive)
		{
			socketPool.setlogVectorObject(this);
			if (debugSsl)
				socketPool.enableSslLog();
		}
		
		if (downlinkBandwidth > 0)
			socketPool.setDownlinkBandwidth(downlinkBandwidth);
		if (uplinkBandwidth > 0)
			socketPool.setUplinkBandwidth(uplinkBandwidth);
		
		if (isMultihomed())
		{
			if (ipPerLoop())
				localIpAddress = getNextMultihomedIpAddress();
			socketPool.setClientIpAddress(localIpAddress);
			log();
			log("multihomed client ip address = " + localIpAddress);
		}
		
		// setup cookie handler per loop
		cookieHandler = new CookieHandler();
		if (debugCookies)
			cookieHandler.setLogVectorInterface(this);
		
		// customised vars from web admin var handler: scope = per loop
		htmlContentParser = null;
		xmlContentParser = null;
		jsonHtmlBasedExtractor = null;
		protobufContentParser = null;
		vScrb = null;
		C_UploadHash = null;
		C_Mod8 = null;
		C_Mod7 = null;
		C_Mod6 = null;
		C_Mod4 = null;
		C_belieze2 = null;
		C_Mod2 = null;
		C_belieze1 = null;
		C_Mod1 = null;
		C_belieze0 = null;
		C_SAMLReq = null;
		C_FileVersion = null;
		C_Token = null;
		C_Token2 = null;
		C_Token1 = null;
		C_ReportID = null;
		C_Eventval1 = null;
		P_millis = "7897897897898";
		C_PostContent = null;
		C_tctest0 = null;
		C_RenderHandler = null;
		C_SAMLResponse = null;
		C_RelayState = null;
		C_Vsgen1 = null;
		C_AjaxsecKey = null;
		C_EventID = null;
		C_AjaxsecKey1 = null;
		C_Img1 = null;
		C_RPCSecret = null;
		C_RPCSecret3 = null;
		C_RPCSecret1 = null;
		C_Viewstate1 = null;
		C_Merge2 = null;
		C_Merge1 = null;
		C_Showme = null;
		log();
		log("<<< vScrb = " + vScrb);
		log("<<< C_UploadHash = " + C_UploadHash);
		log("<<< C_Mod8 = " + C_Mod8);
		log("<<< C_Mod7 = " + C_Mod7);
		log("<<< C_Mod6 = " + C_Mod6);
		log("<<< C_Mod4 = " + C_Mod4);
		log("<<< C_belieze2 = " + C_belieze2);
		log("<<< C_Mod2 = " + C_Mod2);
		log("<<< C_belieze1 = " + C_belieze1);
		log("<<< C_Mod1 = " + C_Mod1);
		log("<<< C_belieze0 = " + C_belieze0);
		log("<<< C_SAMLReq = " + C_SAMLReq);
		log("<<< C_FileVersion = " + C_FileVersion);
		log("<<< C_Token = " + C_Token);
		log("<<< C_Token2 = " + C_Token2);
		log("<<< C_Token1 = " + C_Token1);
		log("<<< C_ReportID = " + C_ReportID);
		log("<<< C_Eventval1 = " + C_Eventval1);
		log("<<< P_millis = " + P_millis);
		log("<<< C_PostContent = " + C_PostContent);
		log("<<< C_tctest0 = " + C_tctest0);
		log("<<< C_RenderHandler = " + C_RenderHandler);
		log("<<< C_SAMLResponse = " + C_SAMLResponse);
		log("<<< C_RelayState = " + C_RelayState);
		log("<<< C_Vsgen1 = " + C_Vsgen1);
		log("<<< C_AjaxsecKey = " + C_AjaxsecKey);
		log("<<< C_EventID = " + C_EventID);
		log("<<< C_AjaxsecKey1 = " + C_AjaxsecKey1);
		log("<<< C_Img1 = " + C_Img1);
		log("<<< C_RPCSecret = " + C_RPCSecret);
		log("<<< C_RPCSecret3 = " + C_RPCSecret3);
		log("<<< C_RPCSecret1 = " + C_RPCSecret1);
		log("<<< C_Viewstate1 = " + C_Viewstate1);
		log("<<< C_Merge2 = " + C_Merge2);
		log("<<< C_Merge1 = " + C_Merge1);
		log("<<< C_Showme = " + C_Showme);
		
		// initialize context for plug-ins which are executed per loop
		LoadtestPluginContext loopPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, this, threadNumber, socketPool, cookieHandler);
		



		// --- VIRTUAL PAGE #0 ---
		if (!executePage_0(totalLoopCounter, loopPluginContext, new InnerLoopContext(), 0,0, httpLogVectorObject))
			return false;



		// --- PAGE BREAK: Test [0] ---
		log();
		log();
		log("# Page #1: LaunchURL");
		log("# ------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #1: LaunchURL", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 1 failed
		
		// page 1 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [49] ---
		log();
		log();
		log("# Page #2: CompanyID");
		log("# ------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #2: CompanyID", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 2 failed
		
		// page 2 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [57] ---
		log();
		log();
		log("# Page #3: Login");
		log("# --------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #3: Login", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_3_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 3 failed
		
		// page 3 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [124] ---
		log();
		log();
		log("# Page #4: Reporting");
		log("# ------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #4: Reporting", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 4 failed
		
		// page 4 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [230] ---
		log();
		log();
		log("# Page #5: ClickLoginReport");
		log("# -------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #5: ClickLoginReport", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 5 failed
		
		// page 5 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [353] ---
		log();
		log();
		log("# Page #6: FilterDone");
		log("# -------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #6: FilterDone", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 6 failed
			synchResponsesParallelRequestsPage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 6 failed
		
		// page 6 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [362] ---
		log();
		log();
		log("# Page #7: SignOut");
		log("# ----------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #7: SignOut", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 7 failed
		
		// page 7 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);
		
		
		// loop successful done
		// --------------------
		
		markEndOfPage(performanceData);
		
		endOfExecuteLoop(true, null, -1, loopPluginContext);
		log();
		return true;
	}		// end of execute()
		
		
		
	/**
	 * internal method: called when a user has completed a loop.
	 */
	private void endOfExecuteLoop(boolean loopPassed, HttpTestURL testURL, int threadStep, LoadtestPluginContext loopPluginContext) throws Exception
	{
		// log URL if last call has failed
		if ((!loopPassed) && (testURL != null))
			log(testURL);
		
		// update plugin context
		loopPluginContext.setLoopPassed(loopPassed);
		if ((testURL != null) && (loopPluginContext.getHttpTestURL() == null))
			loopPluginContext.setHttpTestURL(testURL);
		if ((threadStep != -1) && (loopPluginContext.getThreadStep() == -1))
			loopPluginContext.setThreadStep(threadStep);
	}


	/**
	 * Recorded http requests of page #0.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_0(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{

		// all http requests of page #0 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #1: LaunchURL
		// # ------------------



		// --- HTTP REQUEST: Test [1] <- WEB ADMIN Index 1 ---
		String requestProt0001 = "https";
		String requestHost0001 = "performancemanager4.successfactors.com";
		int    requestPort0001 = 443;
		String requestFile0001 = "/sf/";
		String requestHeader0001 = "GET " + requestFile0001 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: none\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0001, requestHost0001, requestPort0001, requestHeader0001, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0001 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 4896
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [1] <- Index 1
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_AjaxsecKey'
		ContentTokenExtractorItem contentTokenExtractorItem0001_1 = new ContentTokenExtractorItem("ajaxSecKey", "\t\n\r \"(),={}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0001_1);

		contentTokenExtractor.extractTokens();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_EventID'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0001_1 = new BoundaryBasedExtractorItem( "EID=" , "&NWR",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0001_1);

		// setup var extractor for 'C_Merge2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0001_2 = new BoundaryBasedExtractorItem( "homepage3/resources_" , "/sap/",2,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0001_2);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_AjaxsecKey'
			C_AjaxsecKey = contentTokenExtractorItem0001_1.getResultToken();
			log("<<< C_AjaxsecKey = " + C_AjaxsecKey);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_AjaxsecKey!= null && C_AjaxsecKey.trim().length() == 0)
			{
				C_AjaxsecKey = "";
				log("runtime note: the extraction of a new value for the variable 'C_AjaxsecKey' ends up with an empty string - a substitute value was set");
				log("<<< C_AjaxsecKey = " + C_AjaxsecKey);
			}
		}
		catch (Exception e) { C_AjaxsecKey = null; log(e); }
		if (C_AjaxsecKey == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_AjaxsecKey' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_EventID'
			C_EventID = boundaryBasedContentExtractorItem0001_1.getResultText();
			log("<<< C_EventID = " + C_EventID);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_EventID!= null && C_EventID.trim().length() == 0)
			{
				C_EventID = "";
				log("runtime note: the extraction of a new value for the variable 'C_EventID' ends up with an empty string - a substitute value was set");
				log("<<< C_EventID = " + C_EventID);
			}
		}
		catch (Exception e) { C_EventID = null; log(e); }
		if (C_EventID == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_EventID' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Merge2'
			C_Merge2 = boundaryBasedContentExtractorItem0001_2.getResultText();
			log("<<< C_Merge2 = " + C_Merge2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Merge2!= null && C_Merge2.trim().length() == 0)
			{
				C_Merge2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Merge2' ends up with an empty string - a substitute value was set");
				log("<<< C_Merge2 = " + C_Merge2);
			}
		}
		catch (Exception e) { C_Merge2 = null; log(e); }
		if (C_Merge2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Merge2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [2] <- WEB ADMIN Index 2 ---
		String requestProt0002 = "https";
		String requestHost0002 = "performancemanager4.successfactors.com";
		int    requestPort0002 = 443;
		String requestFile0002 = "/ui/extlib/XMLHttpRequest_1.0.5_sf.15/XMLHttpRequest.js";
		String requestHeader0002 = "GET " + requestFile0002 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0002, requestHost0002, requestPort0002, requestHeader0002, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0002 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2738
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [2] <- Index 2
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [3] <- WEB ADMIN Index 3 ---
		String requestProt0003 = "https";
		String requestHost0003 = "performancemanager4.successfactors.com";
		int    requestPort0003 = 443;
		String requestFile0003 = "/ui/uicore/css/revolutionfont-Icons_e66c293a573ac22c088d0dae05237b02.css";
		String requestHeader0003 = "GET " + requestFile0003 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0003, requestHost0003, requestPort0003, requestHeader0003, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0003 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 672
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [3] <- Index 3
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [4] <- WEB ADMIN Index 4 ---
		String requestProt0004 = "https";
		String requestHost0004 = "performancemanager4.successfactors.com";
		int    requestPort0004 = 443;
		String requestFile0004 = "/ui/extlib/yui_2.9_sf.3/js/connection/connection.js";
		String requestHeader0004 = "GET " + requestFile0004 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0004, requestHost0004, requestPort0004, requestHeader0004, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0004 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4707
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [4] <- Index 4
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [5] <- WEB ADMIN Index 5 ---
		String requestProt0005 = "https";
		String requestHost0005 = "performancemanager4.successfactors.com";
		int    requestPort0005 = 443;
		String requestFile0005 = "/ui/perflog/js/perflog_a42a6d04a245968118caec695f3c3d2f.js";
		String requestHeader0005 = "GET " + requestFile0005 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0005, requestHost0005, requestPort0005, requestHeader0005, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0005 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3038
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [5] <- Index 5
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [6] <- WEB ADMIN Index 6 ---
		String requestProt0006 = "https";
		String requestHost0006 = "performancemanager4.successfactors.com";
		int    requestPort0006 = 443;
		String requestFile0006 = "/ui/extlib/yui_2.9_sf.3/js/yahoo-dom-event/yahoo-dom-event.js";
		String requestHeader0006 = "GET " + requestFile0006 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0006, requestHost0006, requestPort0006, requestHeader0006, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0006 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 13255
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [6] <- Index 6
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [7] <- WEB ADMIN Index 7 ---
		String requestProt0007 = "https";
		String requestHost0007 = "performancemanager4.successfactors.com";
		int    requestPort0007 = 443;
		String requestFile0007 = "/ui/login/css/bizx/BizXLogin_1e062c07e4f3d7e580f4e1685abe3701.css";
		String requestHeader0007 = "GET " + requestFile0007 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0007, requestHost0007, requestPort0007, requestHeader0007, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0007 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2466
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [7] <- Index 7
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [8] <- WEB ADMIN Index 8 ---
		String requestProt0008 = "https";
		String requestHost0008 = "performancemanager4.successfactors.com";
		int    requestPort0008 = 443;
		String requestFile0008 = "/ui/extlib/yui_2.9_sf.3/js/animation/animation.js";
		String requestHeader0008 = "GET " + requestFile0008 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0008, requestHost0008, requestPort0008, requestHeader0008, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0008 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4887
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [8] <- Index 8
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [9] <- WEB ADMIN Index 9 ---
		String requestProt0009 = "https";
		String requestHost0009 = "performancemanager4.successfactors.com";
		int    requestPort0009 = 443;
		String requestFile0009 = "/ui/extlib/yui_2.9_sf.3/js/autocomplete/autocomplete.js";
		String requestHeader0009 = "GET " + requestFile0009 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0009, requestHost0009, requestPort0009, requestHeader0009, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0009 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15497
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [9] <- Index 9
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [10] <- WEB ADMIN Index 10 ---
		String requestProt0010 = "https";
		String requestHost0010 = "performancemanager4.successfactors.com";
		int    requestPort0010 = 443;
		String requestFile0010 = "/ui/extlib/jshash_2.2/sha256.js";
		String requestHeader0010 = "GET " + requestFile0010 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0010, requestHost0010, requestPort0010, requestHeader0010, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0010 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2403
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [10] <- Index 10
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [11] <- WEB ADMIN Index 11 ---
		String requestProt0011 = "https";
		String requestHost0011 = "performancemanager4.successfactors.com";
		int    requestPort0011 = 443;
		String requestFile0011 = "/ui/juic/js/InterstitialUtil_1f1a1807326bb0d8ceaa3c1c842340d9.js";
		String requestHeader0011 = "GET " + requestFile0011 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0011, requestHost0011, requestPort0011, requestHeader0011, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0011 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [11] <- Index 11
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [12] <- WEB ADMIN Index 12 ---
		String requestProt0012 = "https";
		String requestHost0012 = "performancemanager4.successfactors.com";
		int    requestPort0012 = 443;
		String requestFile0012 = "/ui/juic/js/GlobalFunctions_7c6c0000b683cb791f25f3210a0a1731.js";
		String requestHeader0012 = "GET " + requestFile0012 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0012, requestHost0012, requestPort0012, requestHeader0012, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0012 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 910
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [12] <- Index 12
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [13] <- WEB ADMIN Index 13 ---
		String requestProt0013 = "https";
		String requestHost0013 = "performancemanager4.successfactors.com";
		int    requestPort0013 = 443;
		String requestFile0013 = "/ui/surj/js/core/config-util_1f1411d7d63c13c9fff25c556f656cd6.js";
		String requestHeader0013 = "GET " + requestFile0013 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0013, requestHost0013, requestPort0013, requestHeader0013, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0013 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 771
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [13] <- Index 13
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [14] <- WEB ADMIN Index 14 ---
		String requestProt0014 = "https";
		String requestHost0014 = "performancemanager4.successfactors.com";
		int    requestPort0014 = 443;
		String requestFile0014 = "/ui/extlib/jquery_3.2.1/jquery.js";
		String requestHeader0014 = "GET " + requestFile0014 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0014, requestHost0014, requestPort0014, requestHeader0014, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0014 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 32669
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [14] <- Index 14
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [15] <- WEB ADMIN Index 15 ---
		String requestProt0015 = "https";
		String requestHost0015 = "performancemanager4.successfactors.com";
		int    requestPort0015 = 443;
		String requestFile0015 = "/ui/sfgrp/js/SURJUtil_305d4ce02664e4587a9021eb38d00f50.js";
		String requestHeader0015 = "GET " + requestFile0015 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0015, requestHost0015, requestPort0015, requestHeader0015, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0015 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10044
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [15] <- Index 15
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [16] <- WEB ADMIN Index 16 ---
		String requestProt0016 = "https";
		String requestHost0016 = "performancemanager4.successfactors.com";
		int    requestPort0016 = 443;
		String requestFile0016 = "/ui/sfgrp/js/SURJStartup_78a027715aeb2ab678a4435189a8a063.js";
		String requestHeader0016 = "GET " + requestFile0016 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0016, requestHost0016, requestPort0016, requestHeader0016, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0016 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3099
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [16] <- Index 16
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [17] <- WEB ADMIN Index 17 ---
		String requestProt0017 = "https";
		String requestHost0017 = "performancemanager4.successfactors.com";
		int    requestPort0017 = 443;
		String requestFile0017 = "/ui/surj/js/core/surj-ui-config_8cfa0ccc0254f72fde2a519c30a57b26.js";
		String requestHeader0017 = "GET " + requestFile0017 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0017, requestHost0017, requestPort0017, requestHeader0017, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0017 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2880
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [17] <- Index 17
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [18] <- WEB ADMIN Index 18 ---
		String requestProt0018 = "https";
		String requestHost0018 = "performancemanager4.successfactors.com";
		int    requestPort0018 = 443;
		String requestFile0018 = "/ui/surj/resources_1.4/lite/resources/sap-ui-core-nojQuery.js";
		String requestHeader0018 = "GET " + requestFile0018 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0018, requestHost0018, requestPort0018, requestHeader0018, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0018 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 67
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [18] <- Index 18
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [19] <- WEB ADMIN Index 19 ---
		String requestProt0019 = "https";
		String requestHost0019 = "performancemanager4.successfactors.com";
		int    requestPort0019 = 443;
		String requestFile0019 = "/ui/sapui5/lite_1.65.5/common-0.js";
		String requestHeader0019 = "GET " + requestFile0019 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0019, requestHost0019, requestPort0019, requestHeader0019, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0019 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 187353
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [19] <- Index 19
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [20] <- WEB ADMIN Index 20 ---
		String requestProt0020 = "https";
		String requestHost0020 = "performancemanager4.successfactors.com";
		int    requestPort0020 = 443;
		String requestFile0020 = "/ui/sapui5/lite_1.65.5/common-1.js";
		String requestHeader0020 = "GET " + requestFile0020 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0020, requestHost0020, requestPort0020, requestHeader0020, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0020 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 168081
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [20] <- Index 20
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 2 of 3)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [21] <- WEB ADMIN Index 21 ---
		String requestProt0021 = "https";
		String requestHost0021 = "performancemanager4.successfactors.com";
		int    requestPort0021 = 443;
		String requestFile0021 = "/ui/sapui5/lite_1.65.5/common-2.js";
		String requestHeader0021 = "GET " + requestFile0021 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0021, requestHost0021, requestPort0021, requestHeader0021, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0021 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 184333
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [21] <- Index 21
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [22] <- WEB ADMIN Index 22 ---
		String requestProt0022 = "https";
		String requestHost0022 = "performancemanager4.successfactors.com";
		int    requestPort0022 = 443;
		String requestFile0022 = "/ui/sapui5/lite_1.65.5/common-3.js";
		String requestHeader0022 = "GET " + requestFile0022 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0022, requestHost0022, requestPort0022, requestHeader0022, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0022 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 183921
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [22] <- Index 22
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [23] <- WEB ADMIN Index 23 ---
		String requestProt0023 = "https";
		String requestHost0023 = "performancemanager4.successfactors.com";
		int    requestPort0023 = 443;
		String requestFile0023 = "/ui/sfgrp/js/loginBizX_28b8154adedc7836ae0fcd237ce875c9.js";
		String requestHeader0023 = "GET " + requestFile0023 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0023, requestHost0023, requestPort0023, requestHeader0023, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0023 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8011
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [23] <- Index 23
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [24] <- WEB ADMIN Index 24 ---
		String requestProt0024 = "https";
		String requestHost0024 = "performancemanager4.successfactors.com";
		int    requestPort0024 = 443;
		String requestFile0024 = "/ui/surj/js/LastPageVisitedUtil_f667e3b7dddc5cdf8deec5a143d1e156.js";
		String requestHeader0024 = "GET " + requestFile0024 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0024, requestHost0024, requestPort0024, requestHeader0024, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0024 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1497
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [24] <- Index 24
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [25] <- WEB ADMIN Index 25 ---
		String requestProt0025 = "https";
		String requestHost0025 = "performancemanager4.successfactors.com";
		int    requestPort0025 = 443;
		String requestFile0025 = "/ui/uicore/img/successfactors-large_abf7640c2701d6e38bbb0fe0d0fa326b.gif";
		String requestHeader0025 = "GET " + requestFile0025 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0025, requestHost0025, requestPort0025, requestHeader0025, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0025 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 2621
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [25] <- Index 25
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [26] <- WEB ADMIN Index 26 ---
		String requestProt0026 = "https";
		String requestHost0026 = "performancemanager4.successfactors.com";
		int    requestPort0026 = 443;
		String requestFile0026 = "/ui/surj/resources_60824062C57591F5CF974D8BD1B989CA/sap/sf/surj/shell/library-preload.js";
		String requestHeader0026 = "GET " + requestFile0026 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175\r\n" + 
				"OPTR_CXT: 0100050001cceca269-9032-4a4d-932e-883d2f57372a29820909-1501-babe-face-000000000003bff60213-a0c2-42bd-ae21-078728c8a328HTTP    ;\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0026, requestHost0026, requestPort0026, requestHeader0026, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0026 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 90261
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [26] <- Index 26
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [27] <- WEB ADMIN Index 27 ---
		String requestProt0027 = "https";
		String requestHost0027 = "performancemanager4.successfactors.com";
		int    requestPort0027 = 443;
		String requestFile0027 = "/ui/sapui5/lite_1.65.5/messagebundle-preload_en.js";
		String requestHeader0027 = "GET " + requestFile0027 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175\r\n" + 
				"OPTR_CXT: 0100050001d6b302a6-7e32-4be0-9721-91ff28911f2829820909-1501-babe-face-000000000003e59ed233-8072-440f-812b-b2fb2214752aHTTP    ;\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0027, requestHost0027, requestPort0027, requestHeader0027, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0027 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 11330
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [27] <- Index 27
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [28] <- WEB ADMIN Index 28 ---
		String requestProt0028 = "https";
		String requestHost0028 = "performancemanager4.successfactors.com";
		int    requestPort0028 = 443;
		String requestFile0028 = "/ui/sapui5/main_1.65.5/sap/ui/core/themes/sap_belize/library.css";
		String requestHeader0028 = "GET " + requestFile0028 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0028, requestHost0028, requestPort0028, requestHeader0028, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0028 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 15759
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [28] <- Index 28
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [29] <- WEB ADMIN Index 29 ---
		String requestProt0029 = "https";
		String requestHost0029 = "performancemanager4.successfactors.com";
		int    requestPort0029 = 443;
		String requestFile0029 = "/ui/sapui5/main_1.65.5/sap/m/themes/sap_belize/library.css";
		String requestHeader0029 = "GET " + requestFile0029 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0029, requestHost0029, requestPort0029, requestHeader0029, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0029 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 111119
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [29] <- Index 29
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [30] <- WEB ADMIN Index 30 ---
		String requestProt0030 = "https";
		String requestHost0030 = "performancemanager4.successfactors.com";
		int    requestPort0030 = 443;
		String requestFile0030 = "/ui/sapui5/lite_1.65.5/themes/sap_belize/library.css";
		String requestHeader0030 = "GET " + requestFile0030 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0030, requestHost0030, requestPort0030, requestHeader0030, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0030 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 53795
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [30] <- Index 30
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [31] <- WEB ADMIN Index 31 ---
		String requestProt0031 = "https";
		String requestHost0031 = "performancemanager4.successfactors.com";
		int    requestPort0031 = 443;
		String requestFile0031 = "/ui/surj/resources_60824062C57591F5CF974D8BD1B989CA/sap/sf/surj/shell/themes/sap_belize/library.css";
		String requestHeader0031 = "GET " + requestFile0031 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0031, requestHost0031, requestPort0031, requestHeader0031, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0031 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 7996
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [31] <- Index 31
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [32] <- WEB ADMIN Index 32 ---
		String requestProt0032 = "https";
		String requestHost0032 = "performancemanager4.successfactors.com";
		int    requestPort0032 = 443;
		String requestFile0032 = "/ui/sapui5/main_1.65.5/sap/ui/layout/themes/sap_belize/library.css";
		String requestHeader0032 = "GET " + requestFile0032 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0032, requestHost0032, requestPort0032, requestHeader0032, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0032 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 26547
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [32] <- Index 32
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [33] <- WEB ADMIN Index 33 ---
		String requestProt0033 = "https";
		String requestHost0033 = "performancemanager4.successfactors.com";
		int    requestPort0033 = 443;
		String requestFile0033 = "/ui/surj/resources_CC67C497E6D2FA3ADBB62CDD76321D41/sap/sf/surj/commons/patch/sap-ui-core-Popup-PATCH.js";
		String requestHeader0033 = "GET " + requestFile0033 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175\r\n" + 
				"OPTR_CXT: 010005000181bf22a4-1942-4eea-832e-b4df2e054f2b29820909-1501-babe-face-0000000000038d715251-6802-468f-b925-93b62563002eHTTP    ;\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0033, requestHost0033, requestPort0033, requestHeader0033, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0033 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 361
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [33] <- Index 33
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [34] <- WEB ADMIN Index 34 ---
		String requestProt0034 = "https";
		String requestHost0034 = "performancemanager4.successfactors.com";
		int    requestPort0034 = 443;
		String requestFile0034 = "/messagebundle/_/vmod_9fe0f5e0/ui/login/resources/sap/sf/login/i18n/messagebundle_en.properties";
		String requestHeader0034 = "GET " + requestFile0034 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175\r\n" + 
				"OPTR_CXT: 0100050001c4aa72fa-4e82-4d98-a22f-7d87262f2b2829820909-1501-babe-face-00000000000374dfc28f-dc22-404b-8421-203e21110126HTTP    ;\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0034, requestHost0034, requestPort0034, requestHeader0034, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0034 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 1084
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [34] <- Index 34
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [35] <- WEB ADMIN Index 35 ---
		String requestProt0035 = "https";
		String requestHost0035 = "performancemanager4.successfactors.com";
		int    requestPort0035 = 443;
		String requestFile0035 = "/ui/sapui5/main_1.65.5/sap/ui/core/themes/sap_belize/library-parameters.json";
		String requestHeader0035 = "GET " + requestFile0035 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175\r\n" + 
				"OPTR_CXT: 0100050001ddf052ee-d1b2-4ba3-b928-68d226607c2f29820909-1501-babe-face-000000000003e3507286-b202-4cf5-8425-a7602aeaf927HTTP    ;\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0035, requestHost0035, requestPort0035, requestHeader0035, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0035 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 9361
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [35] <- Index 35
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [36] <- WEB ADMIN Index 36 ---
		String requestProt0036 = "https";
		String requestHost0036 = "performancemanager4.successfactors.com";
		int    requestPort0036 = 443;
		String requestFile0036 = "/ui/sapui5/main_1.65.5/sap/m/themes/sap_belize/library-parameters.json";
		String requestHeader0036 = "GET " + requestFile0036 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175\r\n" + 
				"OPTR_CXT: 010005000110b1c275-d8c2-4f3e-b321-c9bd2a2cc42d29820909-1501-babe-face-0000000000030632d2db-6e12-41d1-8e2a-8c262929b828HTTP    ;\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0036, requestHost0036, requestPort0036, requestHeader0036, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0036 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 3156
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [36] <- Index 36
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [37] <- WEB ADMIN Index 37 ---
		String requestProt0037 = "https";
		String requestHost0037 = "performancemanager4.successfactors.com";
		int    requestPort0037 = 443;
		String requestFile0037 = "/ui/sapui5/lite_1.65.5/themes/sap_belize/library-parameters.json";
		String requestHeader0037 = "GET " + requestFile0037 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175\r\n" + 
				"OPTR_CXT: 0100050001d0fca2de-d472-4159-9021-843f2580e92229820909-1501-babe-face-00000000000398fb72aa-41b2-4425-b720-493524b4a123HTTP    ;\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0037, requestHost0037, requestPort0037, requestHeader0037, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0037 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 268
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [37] <- Index 37
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [38] <- WEB ADMIN Index 38 ---
		String requestProt0038 = "https";
		String requestHost0038 = "performancemanager4.successfactors.com";
		int    requestPort0038 = 443;
		String requestFile0038 = "/ui/surj/resources_60824062C57591F5CF974D8BD1B989CA/sap/sf/surj/shell/themes/sap_belize/library-parameters.json";
		String requestHeader0038 = "GET " + requestFile0038 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175\r\n" + 
				"OPTR_CXT: 010005000134df2230-7f82-4644-812a-9ed32d6e792029820909-1501-babe-face-0000000000038564329f-3e02-42e1-af29-68802601912bHTTP    ;\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0038, requestHost0038, requestPort0038, requestHeader0038, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0038 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 57
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [38] <- Index 38
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [39] <- WEB ADMIN Index 39 ---
		String requestProt0039 = "https";
		String requestHost0039 = "performancemanager4.successfactors.com";
		int    requestPort0039 = 443;
		String requestFile0039 = "/ui/sapui5/main_1.65.5/sap/ui/layout/themes/sap_belize/library-parameters.json";
		String requestHeader0039 = "GET " + requestFile0039 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175\r\n" + 
				"OPTR_CXT: 01000500013f8d42b4-65f2-4556-9c2e-5e922891692529820909-1501-babe-face-0000000000035e0d6236-1192-491d-9820-e2f625096924HTTP    ;\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0039, requestHost0039, requestPort0039, requestHeader0039, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0039 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1116
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [39] <- Index 39
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [40] <- WEB ADMIN Index 40 ---
		String requestProt0040 = "https";
		String requestHost0040 = "performancemanager4.successfactors.com";
		int    requestPort0040 = 443;
		String requestFile0040 = "/ui/surj/resources_1.4/SF-supp-icons.ttf";
		String requestHeader0040 = "GET " + requestFile0040 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0040, requestHost0040, requestPort0040, requestHeader0040, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0040 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-TTF", header text fragment = [verification disabled], recorded content size = 42072
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-TTF", null, null);		// Test [40] <- Index 40
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 3 of 3)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [41] <- WEB ADMIN Index 41 ---
		String requestProt0041 = "https";
		String requestHost0041 = "performancemanager4.successfactors.com";
		int    requestPort0041 = 443;
		String requestFile0041 = "/ui/sapui5/main_1.65.5/sap/ui/core/themes/base/fonts/SAP-icons.woff2";
		String requestHeader0041 = "GET " + requestFile0041 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0041, requestHost0041, requestPort0041, requestHeader0041, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0041 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 92820
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [41] <- Index 41
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [42] <- WEB ADMIN Index 42 ---
		String requestProt0042 = "https";
		String requestHost0042 = "performancemanager4.successfactors.com";
		int    requestPort0042 = 443;
		String requestFile0042 = "/perfLogServlet" +
				"?callId=5349952378-0" +
				"&eventId=" + C_EventID +		// recorded value = EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175
				"&ST=1575486695537" +
				"&MEM=2856" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=8" +
				"&UCPU=10" +
				"&CPU=10" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=22" +
				"&cssNum=7" +
				"&renderTime=1145" +
				"&TTB=6952" +
				"&RSR=6963" +
				"&DIA=8114";
		requestFile0042 = Lib.replaceTextPattern(requestFile0042, "EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175", C_EventID, 0);		// search and replace request file fragment "EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175" with variable 'C_EventID' on all occurrences

		String requestContent0042 = 
				"OPTR_INFO=cceca269-9032-4a4d-932e-883d2f57372a!1575486696575!1575486696675!0" +
				"&OPTR_INFO=d6b302a6-7e32-4be0-9721-91ff28911f28!1575486696695!1575486696739!0" +
				"&OPTR_INFO=e3db5121-16c9-11ea-a9fb-4feef88e786c!0!1575486696783!1" +
				"&OPTR_INFO=81bf22a4-1942-4eea-832e-b4df2e054f2b!1575486696788!1575486696845!0" +
				"&OPTR_INFO=c4aa72fa-4e82-4d98-a22f-7d87262f2b28!1575486696861!1575486696930!0" +
				"&OPTR_INFO=ddf052ee-d1b2-4ba3-b928-68d226607c2f!1575486696955!1575486697006!0" +
				"&OPTR_INFO=10b1c275-d8c2-4f3e-b321-c9bd2a2cc42d!1575486697009!1575486697060!0" +
				"&OPTR_INFO=d0fca2de-d472-4159-9021-843f2580e922!1575486697060!1575486697104!0" +
				"&OPTR_INFO=34df2230-7f82-4644-812a-9ed32d6e7920!1575486697106!1575486697153!0" +
				"&OPTR_INFO=3f8d42b4-65f2-4556-9c2e-5e9228916925!1575486697154!1575486697215!0";
		String requestHeader0042 = "POST " + requestFile0042 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0042.length() + "\r\n" + 		// Content-Length: 757
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0042, requestHost0042, requestPort0042, requestHeader0042, requestContent0042.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0042 = null;		// support garbage collector to reduce memory
		requestContent0042 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [42] <- Index 42
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [43] <- WEB ADMIN Index 43 ---
		String requestProt0043 = "https";
		String requestHost0043 = "performancemanager4.successfactors.com";
		int    requestPort0043 = 443;
		String requestFile0043 = "/ui/sapui5/main_1.65.5/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		String requestHeader0043 = "GET " + requestFile0043 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0043, requestHost0043, requestPort0043, requestHeader0043, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0043 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [43] <- Index 43
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [44] <- WEB ADMIN Index 44 ---
		String requestProt0044 = "https";
		String requestHost0044 = "performancemanager4.successfactors.com";
		int    requestPort0044 = 443;
		String requestFile0044 = "/ui/sapui5/main_1.65.5/sap/ui/core/themes/sap_belize/fonts/72-Bold.woff2";
		String requestHeader0044 = "GET " + requestFile0044 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0044, requestHost0044, requestPort0044, requestHeader0044, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0044 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 26732
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [44] <- Index 44
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [45] <- WEB ADMIN Index 45 ---
		String requestProt0045 = "https";
		String requestHost0045 = "performancemanager4.successfactors.com";
		int    requestPort0045 = 443;
		String requestFile0045 = "/ui/login/img/sf_logo_new_white_54bd215a5131b86dfb90fa1f29efb843.png";
		String requestHeader0045 = "GET " + requestFile0045 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0045, requestHost0045, requestPort0045, requestHeader0045, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0045 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 1808
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [45] <- Index 45
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [46] <- WEB ADMIN Index 46 ---
		String requestProt0046 = "https";
		String requestHost0046 = "performancemanager4.successfactors.com";
		int    requestPort0046 = 443;
		String requestFile0046 = "/ui/login/img/logos/SF_Logo_Lg-White_a486df85b934795cc8f8657bcc886e6f.png";
		String requestHeader0046 = "GET " + requestFile0046 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0046, requestHost0046, requestPort0046, requestHeader0046, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0046 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 7087
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [46] <- Index 46
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [47] <- WEB ADMIN Index 47 ---
		String requestProt0047 = "https";
		String requestHost0047 = "clients1.google.com";
		int    requestPort0047 = 443;
		String requestFile0047 = "/tbproxy/af/query" +
				"?q=Chc2LjEuMTcxNS4xNDQyL2VuIChHR0xMKRMZIqa_eqzPu0MjLfLL4IAkFA==";
		String requestHeader0047 = "GET " + requestFile0047 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: clients1.google.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"X-Goog-Api-Key: AIzaSyBOti4mM-6x9WDnZIjIeyEU21OpBXqWBgw\r\n" + 
				"X-Client-Data: CJW2yQEIpLbJAQjEtskBCKmdygEI/J/KAQjiqMoBCMqvygEIzrDKAQj3tMoB\r\n" + 
				"Sec-Fetch-Site: none\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0047, requestHost0047, requestPort0047, requestHeader0047, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0047 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PROTO", header text fragment = [verification disabled], recorded content size = 25
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PROTO", null, null);		// Test [47] <- Index 47
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [48] <- WEB ADMIN Index 48 ---
		String requestProt0048 = "https";
		String requestHost0048 = "browser.pipe.aria.microsoft.com";
		int    requestPort0048 = 443;
		String requestFile0048 = "/Collector/3.0/" +
				"?qsp=true" +
				"&content-type=application%2Fbond-compact-binary" +
				"&client-id=NO_AUTH" +
				"&sdk-version=AWT-Web-JS-1.8.5" +
				"&x-apikey=a387cfcf60114a43a7699f9fbb49289e-9bceb9fe-1c06-460f-96c5-6a0b247358bc-7238" +
				"&client-time-epoch-millis=1575486698388" +
				"&time-delta-to-apply-millis=46";
		byte[] requestContentBinary0048 = Lib.base64ToByteArray("bQkLAUphMzg3Y2ZjZjYwMTE0YTQzYTc2OTlmOWZiYjQ5Mjg5ZS05YmNlYjlmZS0xYzA2LTQ2MGYtOTZjNS02YTBiMjQ3MzU4YmMtNzIzOAoBSRJhY3RfZGVmYXVsdF9zb3VyY2WpJDU2MDdmMGUxLTNmNDEtNGI1My04MTFmLWEzNWRiYThlNmZlMNEGqM6ZpdpbywgKASkkNGYxYjJkZjItYjNmNy00NjM4LWEzYTYtMDU1NjlhZjI2MzQ4cdS+maXaW6kGY3VzdG9tyQYJYXd0X3N0YXRzzQ0JCQ4IVGVuYW50SWQgZmFkM2JkMWQ4ZTRiNGMwNjg5NGJkN2JhYzgwZTRmMDIWcmVjb3Jkc19yZWNlaXZlZF9jb3VudAE2EnJlY29yZHNfc2VudF9jb3VudAE2EVVzZXJJbmZvLkxhbmd1YWdlBWVuLVVTEVVzZXJJbmZvLlRpbWVab25lBi0wODowMBZEZXZpY2VJbmZvLkJyb3dzZXJOYW1lBkNocm9tZRlEZXZpY2VJbmZvLkJyb3dzZXJWZXJzaW9uDDc3LjAuMzg2NS45MBFEZXZpY2VJbmZvLk9zTmFtZQdXaW5kb3dzFERldmljZUluZm8uT3NWZXJzaW9uAjEwEEV2ZW50SW5mby5Jbml0SWQkZTYxMjhhOWQtMDY1Ny00ODY0LTkwYzEtMzgxNjllOGIzYzcwEkV2ZW50SW5mby5TZXF1ZW5jZQE2FEV2ZW50SW5mby5TZGtWZXJzaW9uEEFXVC1XZWItSlMtMS44LjUORXZlbnRJbmZvLk5hbWUJYXd0X3N0YXRzDkV2ZW50SW5mby5UaW1lGDIwMTktMTItMDRUMTk6MTE6MzcuMzg2WgAAAA==");
		String requestContent0048 = new String(requestContentBinary0048);
		String requestHeader0048 = "POST " + requestFile0048 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: browser.pipe.aria.microsoft.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContentBinary0048.length + "\r\n" + 		// Content-Length: 658
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://excel.officeapps.live.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0048, requestHost0048, requestPort0048, requestHeader0048, requestContentBinary0048, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0048 = null;		// support garbage collector to reduce memory
		requestContent0048 = null;		// support garbage collector to reduce memory
		requestContentBinary0048 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [48] <- Index 48
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #2: CompanyID
		// # ------------------



		// --- HTTP REQUEST: Test [50] <- WEB ADMIN Index 50 ---
		String requestProt0050 = "https";
		String requestHost0050 = "performancemanager4.successfactors.com";
		int    requestPort0050 = 443;
		String requestFile0050 = "/login" +
				"?_s.crb=" + C_AjaxsecKey;		// recorded value = l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d
		requestFile0050 = Lib.replaceTextPattern(requestFile0050, "l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d", C_AjaxsecKey, 0);		// search and replace request file fragment "l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d" with variable 'C_AjaxsecKey' on all occurrences

		String requestContent0050 = 
				"company=Teck" +
				"&loginMethod=PWD" +
				"&referer=%2Fsf%2F" +
				"&bplte_userid=" +
				"&ajax=1";
		byte[] requestContentBinary0050 = requestContent0050.getBytes("UTF-8");
		String requestHeader0050 = "POST " + requestFile0050 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContentBinary0050.length + "\r\n" + 		// Content-Length: 66
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n" + 
				"Accept: */*\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175-1\r\n" + 
				"OPTR_CXT: 01000500013ce0a243-0b02-4c8a-a82f-15962d7f222729820909-1501-babe-face-0000000000039de86297-ca02-43b9-b626-c69b2bb62326HTTP    ;\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0050, requestHost0050, requestPort0050, requestHeader0050, requestContentBinary0050, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0050 = null;		// support garbage collector to reduce memory
		requestContent0050 = null;		// support garbage collector to reduce memory
		requestContentBinary0050 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 647
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [50] <- Index 50
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [51] <- WEB ADMIN Index 51 ---
		String requestProt0051 = "https";
		String requestHost0051 = "performancemanager4.successfactors.com";
		int    requestPort0051 = 443;
		String requestFile0051 = "/public/theme-api/css/Teck/*/ui/login/css/bizx/BizXLoginTheme.dcss";
		String requestHeader0051 = "GET " + requestFile0051 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0051, requestHost0051, requestPort0051, requestHeader0051, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0051 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [51] <- Index 51
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		htmlContentParser = new HtmlContentParser(testURL, this);
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'C_Mod8'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0051_1 = new BoundaryBasedExtractorItem( "mod=3D" , "=26name",3,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0051_1);

		// setup var extractor for 'C_Mod7'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0051_2 = new BoundaryBasedExtractorItem( "mod=3D" , "=26name=",2,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0051_2);

		// setup var extractor for 'C_belieze1'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0051_3 = new BoundaryBasedExtractorItem( "belizePlusLanding" , "uires=",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0051_3);

		// setup var extractor for 'C_Mod1'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0051_4 = new BoundaryBasedExtractorItem( "mod=3D" , "=26name",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0051_4);

		// setup var extractor for 'C_belieze0'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0051_5 = new BoundaryBasedExtractorItem( "png" , "belizePlusLanding",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0051_5);

		// setup var extractor for 'C_tctest0'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0051_6 = new BoundaryBasedExtractorItem( "Teck/_/" , "uires=",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0051_6);

		// setup var extractor for 'C_Img1'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0051_7 = new BoundaryBasedExtractorItem( "png" , "uires=",2,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0051_7);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Mod8'
			C_Mod8 = boundaryBasedHeaderExtractorItem0051_1.getResultText();
			log("<<< C_Mod8 = " + C_Mod8);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod8!= null && C_Mod8.trim().length() == 0)
			{
				C_Mod8 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod8' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod8 = " + C_Mod8);
			}
		}
		catch (Exception e) { C_Mod8 = null; log(e); }
		if (C_Mod8 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod8' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Mod7'
			C_Mod7 = boundaryBasedHeaderExtractorItem0051_2.getResultText();
			log("<<< C_Mod7 = " + C_Mod7);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod7!= null && C_Mod7.trim().length() == 0)
			{
				C_Mod7 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod7' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod7 = " + C_Mod7);
			}
		}
		catch (Exception e) { C_Mod7 = null; log(e); }
		if (C_Mod7 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod7' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Mod2'
			C_Mod2 = Lib.trimString(Lib.extractTextToken(testURL.getHeaderField("Location"), 2, ";"));		// recorded value = mod=173ef8dd
			log("<<< C_Mod2 = " + C_Mod2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod2!= null && C_Mod2.trim().length() == 0)
			{
				C_Mod2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod2' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod2 = " + C_Mod2);
			}
		}
		catch (Exception e) { C_Mod2 = null; log(e); }
		if (C_Mod2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod2' from http response header field";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_belieze1'
			C_belieze1 = boundaryBasedHeaderExtractorItem0051_3.getResultText();
			log("<<< C_belieze1 = " + C_belieze1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_belieze1!= null && C_belieze1.trim().length() == 0)
			{
				C_belieze1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_belieze1' ends up with an empty string - a substitute value was set");
				log("<<< C_belieze1 = " + C_belieze1);
			}
		}
		catch (Exception e) { C_belieze1 = null; log(e); }
		if (C_belieze1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_belieze1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Mod1'
			C_Mod1 = boundaryBasedHeaderExtractorItem0051_4.getResultText();
			log("<<< C_Mod1 = " + C_Mod1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod1!= null && C_Mod1.trim().length() == 0)
			{
				C_Mod1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod1' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod1 = " + C_Mod1);
			}
		}
		catch (Exception e) { C_Mod1 = null; log(e); }
		if (C_Mod1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_belieze0'
			C_belieze0 = boundaryBasedHeaderExtractorItem0051_5.getResultText();
			log("<<< C_belieze0 = " + C_belieze0);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_belieze0!= null && C_belieze0.trim().length() == 0)
			{
				C_belieze0 = "";
				log("runtime note: the extraction of a new value for the variable 'C_belieze0' ends up with an empty string - a substitute value was set");
				log("<<< C_belieze0 = " + C_belieze0);
			}
		}
		catch (Exception e) { C_belieze0 = null; log(e); }
		if (C_belieze0 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_belieze0' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_tctest0'
			C_tctest0 = boundaryBasedHeaderExtractorItem0051_6.getResultText();
			log("<<< C_tctest0 = " + C_tctest0);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_tctest0!= null && C_tctest0.trim().length() == 0)
			{
				C_tctest0 = "";
				log("runtime note: the extraction of a new value for the variable 'C_tctest0' ends up with an empty string - a substitute value was set");
				log("<<< C_tctest0 = " + C_tctest0);
			}
		}
		catch (Exception e) { C_tctest0 = null; log(e); }
		if (C_tctest0 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_tctest0' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Img1'
			C_Img1 = boundaryBasedHeaderExtractorItem0051_7.getResultText();
			log("<<< C_Img1 = " + C_Img1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Img1!= null && C_Img1.trim().length() == 0)
			{
				C_Img1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Img1' ends up with an empty string - a substitute value was set");
				log("<<< C_Img1 = " + C_Img1);
			}
		}
		catch (Exception e) { C_Img1 = null; log(e); }
		if (C_Img1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Img1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [52] <- WEB ADMIN Index 52 ---
		String requestProt0052 = "https";
		String requestHost0052 = "performancemanager4.successfactors.com";
		int    requestPort0052 = 443;
		String requestFile0052 = "/perfLogServlet" +
				"?callId=5349952378-1" +
				"&eventId=" + C_EventID +		// recorded value = EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175
				"&ST=1575486715901" +
				"&ET=1575486716192" +
				"&MEM=8111" +
				"&NRE=12" +
				"&NWR=18" +
				"&SCPU=0" +
				"&SQLC=27" +
				"&SQLT=13" +
				"&SVT=46" +
				"&UCPU=30" +
				"&CPU=30" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=22" +
				"&cssNum=8" +
				"&renderTime=190";
		requestFile0052 = Lib.replaceTextPattern(requestFile0052, "EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175", C_EventID, 0);		// search and replace request file fragment "EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175" with variable 'C_EventID' on all occurrences

		String requestContent0052 = 
				"OPTR_INFO=3ce0a243-0b02-4c8a-a82f-15962d7f2227!1575486715901!1575486716091!0";
		String requestHeader0052 = "POST " + requestFile0052 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0052.length() + "\r\n" + 		// Content-Length: 76
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175-1\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0052, requestHost0052, requestPort0052, requestHeader0052, requestContent0052.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("l7M9gnj4hGuar%2fYrMmK%2fh%2fm3kx4%3d", C_AjaxsecKey);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141135-664175", C_EventID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0052 = null;		// support garbage collector to reduce memory
		requestContent0052 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [52] <- Index 52
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [53] <- WEB ADMIN Index 53 ---
		String requestProt0053 = "https";
		String requestHost0053 = "performancemanager4.successfactors.com";
		int    requestPort0053 = 443;
		String requestFile0053 = "/public/ui-dcss/Teck/_/3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!13YzS_!/ui/login/css/bizx/BizXLoginTheme.dcss;mod=173ef8dd";
		requestFile0053 = Lib.replaceTextPattern(requestFile0053, "598758c08d82beb795c1663b536ed101", C_Mod8, 0);		// search and replace request file fragment "598758c08d82beb795c1663b536ed101" with variable 'C_Mod8' on all occurrences
		requestFile0053 = Lib.replaceTextPattern(requestFile0053, "82137484cd2fcde38d057a0be1a23986", C_Mod7, 0);		// search and replace request file fragment "82137484cd2fcde38d057a0be1a23986" with variable 'C_Mod7' on all occurrences
		requestFile0053 = Lib.replaceTextPattern(requestFile0053, "mod=173ef8dd", C_Mod2, 0);		// search and replace request file fragment "mod=173ef8dd" with variable 'C_Mod2' on all occurrences
		requestFile0053 = Lib.replaceTextPattern(requestFile0053, "!11!THRBPLPT!NO0!SD1BUT1", C_belieze1, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SD1BUT1" with variable 'C_belieze1' on all occurrences
		requestFile0053 = Lib.replaceTextPattern(requestFile0053, "3a197762f867d55aceaee0bb261f6b2b", C_Mod1, 0);		// search and replace request file fragment "3a197762f867d55aceaee0bb261f6b2b" with variable 'C_Mod1' on all occurrences
		requestFile0053 = Lib.replaceTextPattern(requestFile0053, "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0, 0);		// search and replace request file fragment "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_belieze0' on all occurrences
		requestFile0053 = Lib.replaceTextPattern(requestFile0053, "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0053 = Lib.replaceTextPattern(requestFile0053, "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1, 0);		// search and replace request file fragment "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU" with variable 'C_Img1' on all occurrences

		String requestHeader0053 = "GET " + requestFile0053 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0053, requestHost0053, requestPort0053, requestHeader0053, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0053 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 871
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [53] <- Index 53
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [54] <- WEB ADMIN Index 54 ---
		String requestProt0054 = "https";
		String requestHost0054 = "performancemanager4.successfactors.com";
		int    requestPort0054 = 443;
		String requestFile0054 = "/ui/login/img/topnav/belize_dark_bg_52da52583908a5afa7d86a9bc98e219d.png";
		String requestHeader0054 = "GET " + requestFile0054 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0054, requestHost0054, requestPort0054, requestHeader0054, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("598758c08d82beb795c1663b536ed101", C_Mod8);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("82137484cd2fcde38d057a0be1a23986", C_Mod7);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("mod=173ef8dd", C_Mod2);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!11!THRBPLPT!NO0!SD1BUT1", C_belieze1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3a197762f867d55aceaee0bb261f6b2b", C_Mod1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0054 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 32628
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [54] <- Index 54
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [55] <- WEB ADMIN Index 55 ---
		String requestProt0055 = "https";
		String requestHost0055 = "performancemanager4.successfactors.com";
		int    requestPort0055 = 443;
		String requestFile0055 = "/public/ui-resource/Teck/146;mod=82137484cd2fcde38d057a0be1a23986";
		requestFile0055 = Lib.replaceTextPattern(requestFile0055, "82137484cd2fcde38d057a0be1a23986", C_Mod7, 0);		// search and replace request file fragment "82137484cd2fcde38d057a0be1a23986" with variable 'C_Mod7' on all occurrences

		String requestHeader0055 = "GET " + requestFile0055 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0055, requestHost0055, requestPort0055, requestHeader0055, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("598758c08d82beb795c1663b536ed101", C_Mod8);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("82137484cd2fcde38d057a0be1a23986", C_Mod7);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("mod=173ef8dd", C_Mod2);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!11!THRBPLPT!NO0!SD1BUT1", C_belieze1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3a197762f867d55aceaee0bb261f6b2b", C_Mod1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0055 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 3501
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [55] <- Index 55
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [56] <- WEB ADMIN Index 56 ---
		String requestProt0056 = "https";
		String requestHost0056 = "clients1.google.com";
		int    requestPort0056 = 443;
		String requestFile0056 = "/tbproxy/af/query" +
				"?q=Chc2LjEuMTcxNS4xNDQyL2VuIChHR0xMKRMZIqa_eqzPu0MjLfLL4IAkFBMZkRYmDznCqv0jLeeNQA4kIy3OQUx6JBQ=";
		String requestHeader0056 = "GET " + requestFile0056 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: clients1.google.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"X-Goog-Api-Key: AIzaSyBOti4mM-6x9WDnZIjIeyEU21OpBXqWBgw\r\n" + 
				"X-Client-Data: CJW2yQEIpLbJAQjEtskBCKmdygEI/J/KAQjiqMoBCMqvygEIzrDKAQj3tMoB\r\n" + 
				"Sec-Fetch-Site: none\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0056, requestHost0056, requestPort0056, requestHeader0056, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0056 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PROTO", header text fragment = [verification disabled], recorded content size = 41
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PROTO", null, null);		// Test [56] <- Index 56
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #3: Login
		// # --------------



		// --- HTTP REQUEST: Test [58] <- WEB ADMIN Index 58 ---
		String requestProt0058 = "https";
		String requestHost0058 = "browser.pipe.aria.microsoft.com";
		int    requestPort0058 = 443;
		String requestFile0058 = "/Collector/3.0/" +
				"?qsp=true" +
				"&content-type=application%2Fbond-compact-binary" +
				"&client-id=NO_AUTH" +
				"&sdk-version=AWT-Web-CJS-1.2.2" +
				"&x-apikey=d79e824386c4441cb8c1d4ae15690526-bd443309-5494-444a-aba9-0af9eef99f84-7360";
		byte[] requestContentBinary0058 = Lib.base64ToByteArray("bQkLAUpkNzllODI0Mzg2YzQ0NDFjYjhjMWQ0YWUxNTY5MDUyNi1iZDQ0MzMwOS01NDk0LTQ0NGEtYWJhOS0wYWY5ZWVmOTlmODQtNzM2MAoBSRJhY3RfZGVmYXVsdF9zb3VyY2WpJDg5MTZmODNlLTA4MjctNDY5OC1hOWRmLTJjMDM0ZjFmOGE1YtEGovKcpdpbywgKBykkM2IwNGNiMTUtY2JiNC00N2E0LThiYzgtNWFiZDU4NjI1YzVicc7inKXaW6kGY3VzdG9tyQYTb2ZmaWNlX2ZlZWRiYWNrX3Nka80NCQkVD0RhdGEuQ2FtcGFpZ25JZCRjMzg5OGJhMS05MzliLTRkNGUtYWRmMi0xZDA3Y2FmMjMyOGQNRGF0YS5TdXJ2ZXlJZCQxMzJmOThkMC1kYmFlLTRmODMtMTA1Ni04NWIyN2FkNzRjYjAPRGF0YS5TdXJ2ZXlUeXBlATQMRGF0YS5FdmVudElkHVN1cnZleV9GbG9vZGdhdGVfVXNlclNlbGVjdGVkCEFwcC5OYW1lEU9mZmljZUZlZWRiYWNrU0RLDEFwcC5QbGF0Zm9ybQNXZWILQXBwLlZlcnNpb24FMS4yLjkKU2Vzc2lvbi5JZCQ3NzQ1YzRkMS03NjgyLTQwNmItYWQ1OC01ODM4Y2ZjZmQzZWUHSG9zdC5JZAQyMTU2DEhvc3QuVmVyc2lvbhAxNi4wLjEyNDAxLjM3OTUwFVJlbGVhc2UuQXVkaWVuY2VHcm91cApQcm9kdWN0aW9uCkV2ZW50Lk5hbWUTT2ZmaWNlX0ZlZWRiYWNrX1NESwhFdmVudC5JZCg3NzQ1YzRkMS03NjgyLTQwNmItYWQ1OC01ODM4Y2ZjZmQzZWUuMTI2DEV2ZW50LlNvdXJjZQdNc29UaGluE0V2ZW50LlNjaGVtYVZlcnNpb24BMQ5FdmVudC5TZXF1ZW5jZQMxMjYQRXZlbnRJbmZvLkluaXRJZCQzOWIzZDA2MC03YmVhLTRlMzktYmQ5Yi05Mjc0NTNmMmUwMGISRXZlbnRJbmZvLlNlcXVlbmNlAzEyNhRFdmVudEluZm8uU2RrVmVyc2lvbhFBV1QtV2ViLUNKUy0xLjIuMg5FdmVudEluZm8uTmFtZRNvZmZpY2VfZmVlZGJhY2tfc2RrDkV2ZW50SW5mby5UaW1lGDIwMTktMTItMDRUMTk6MTI6MDQuMjYzWgApJDZlZDIwNjdhLTk0MGItNGEwNi1hMzA3LThkOTQwYzJlMjFmMHHO4pyl2lupBmN1c3RvbckGE29mZmljZV9mZWVkYmFja19zZGvNDQkJFQ9EYXRhLkNhbXBhaWduSWQkYjY5ODgwNWMtMTBmYS00NmQ1LWEwNmItOWE0MTYyMGM1NDI3DURhdGEuU3VydmV5SWQkOWNmN2VhYWQtZGI3MC00ZTU3LWI2ZDMtMTdhNzE4ZmJmYTRkD0RhdGEuU3VydmV5VHlwZQE0DERhdGEuRXZlbnRJZB1TdXJ2ZXlfRmxvb2RnYXRlX1VzZXJTZWxlY3RlZAhBcHAuTmFtZRFPZmZpY2VGZWVkYmFja1NESwxBcHAuUGxhdGZvcm0DV2ViC0FwcC5WZXJzaW9uBTEuMi45ClNlc3Npb24uSWQkNzc0NWM0ZDEtNzY4Mi00MDZiLWFkNTgtNTgzOGNmY2ZkM2VlB0hvc3QuSWQEMjE1NgxIb3N0LlZlcnNpb24QMTYuMC4xMjQwMS4zNzk1MBVSZWxlYXNlLkF1ZGllbmNlR3JvdXAKUHJvZHVjdGlvbgpFdmVudC5OYW1lE09mZmljZV9GZWVkYmFja19TREsIRXZlbnQuSWQoNzc0NWM0ZDEtNzY4Mi00MDZiLWFkNTgtNTgzOGNmY2ZkM2VlLjEyNQxFdmVudC5Tb3VyY2UHTXNvVGhpbhNFdmVudC5TY2hlbWFWZXJzaW9uATEORXZlbnQuU2VxdWVuY2UDMTI1EEV2ZW50SW5mby5Jbml0SWQkMzliM2QwNjAtN2JlYS00ZTM5LWJkOWItOTI3NDUzZjJlMDBiEkV2ZW50SW5mby5TZXF1ZW5jZQMxMjUURXZlbnRJbmZvLlNka1ZlcnNpb24RQVdULVdlYi1DSlMtMS4yLjIORXZlbnRJbmZvLk5hbWUTb2ZmaWNlX2ZlZWRiYWNrX3Nkaw5FdmVudEluZm8uVGltZRgyMDE5LTEyLTA0VDE5OjEyOjA0LjI2M1oAKSQ4NjRhODBkOS0xZWQ5LTQ0NmYtOGJjYy03ZDkxODk0ODI0YzRxzuKcpdpbqQZjdXN0b23JBhNvZmZpY2VfZmVlZGJhY2tfc2RrzQ0JCRUPRGF0YS5DYW1wYWlnbklkJDk5ZTg3ODNkLWU1MWMtNDAxZi04NDNmLWI1OWY4ZWY1ODc1NA1EYXRhLlN1cnZleUlkJDU0ZWY4N2IyLTkxMzctNGVmMS0zZWMxLWJjODUyMGNkZTg2YQ9EYXRhLlN1cnZleVR5cGUBNAxEYXRhLkV2ZW50SWQdU3VydmV5X0Zsb29kZ2F0ZV9Vc2VyU2VsZWN0ZWQIQXBwLk5hbWURT2ZmaWNlRmVlZGJhY2tTREsMQXBwLlBsYXRmb3JtA1dlYgtBcHAuVmVyc2lvbgUxLjIuOQpTZXNzaW9uLklkJDc3NDVjNGQxLTc2ODItNDA2Yi1hZDU4LTU4MzhjZmNmZDNlZQdIb3N0LklkBDIxNTYMSG9zdC5WZXJzaW9uEDE2LjAuMTI0MDEuMzc5NTAVUmVsZWFzZS5BdWRpZW5jZUdyb3VwClByb2R1Y3Rpb24KRXZlbnQuTmFtZRNPZmZpY2VfRmVlZGJhY2tfU0RLCEV2ZW50LklkKDc3NDVjNGQxLTc2ODItNDA2Yi1hZDU4LTU4MzhjZmNmZDNlZS4xMjQMRXZlbnQuU291cmNlB01zb1RoaW4TRXZlbnQuU2NoZW1hVmVyc2lvbgExDkV2ZW50LlNlcXVlbmNlAzEyNBBFdmVudEluZm8uSW5pdElkJDM5YjNkMDYwLTdiZWEtNGUzOS1iZDliLTkyNzQ1M2YyZTAwYhJFdmVudEluZm8uU2VxdWVuY2UDMTI0FEV2ZW50SW5mby5TZGtWZXJzaW9uEUFXVC1XZWItQ0pTLTEuMi4yDkV2ZW50SW5mby5OYW1lE29mZmljZV9mZWVkYmFja19zZGsORXZlbnRJbmZvLlRpbWUYMjAxOS0xMi0wNFQxOToxMjowNC4yNjNaACkkOTdhOTAzNzctZDgzZC00ZjI2LTk3ZDEtY2JlYjkxMjlkMTkwcc7inKXaW6kGY3VzdG9tyQYTb2ZmaWNlX2ZlZWRiYWNrX3Nka80NCQkVD0RhdGEuQ2FtcGFpZ25JZCQ5NWUzYWZhNC02ZjU3LTQyZTgtOTc1MC04NmFkZDRmNDU1NzMNRGF0YS5TdXJ2ZXlJZCRmOWNhOTBiYS03ZGQzLTQ5MjEtYjUxNC1hNjI3MDFiNGU2NTMPRGF0YS5TdXJ2ZXlUeXBlATQMRGF0YS5FdmVudElkHVN1cnZleV9GbG9vZGdhdGVfVXNlclNlbGVjdGVkCEFwcC5OYW1lEU9mZmljZUZlZWRiYWNrU0RLDEFwcC5QbGF0Zm9ybQNXZWILQXBwLlZlcnNpb24FMS4yLjkKU2Vzc2lvbi5JZCQ3NzQ1YzRkMS03NjgyLTQwNmItYWQ1OC01ODM4Y2ZjZmQzZWUHSG9zdC5JZAQyMTU2DEhvc3QuVmVyc2lvbhAxNi4wLjEyNDAxLjM3OTUwFVJlbGVhc2UuQXVkaWVuY2VHcm91cApQcm9kdWN0aW9uCkV2ZW50Lk5hbWUTT2ZmaWNlX0ZlZWRiYWNrX1NESwhFdmVudC5JZCg3NzQ1YzRkMS03NjgyLTQwNmItYWQ1OC01ODM4Y2ZjZmQzZWUuMTIzDEV2ZW50LlNvdXJjZQdNc29UaGluE0V2ZW50LlNjaGVtYVZlcnNpb24BMQ5FdmVudC5TZXF1ZW5jZQMxMjMQRXZlbnRJbmZvLkluaXRJZCQzOWIzZDA2MC03YmVhLTRlMzktYmQ5Yi05Mjc0NTNmMmUwMGISRXZlbnRJbmZvLlNlcXVlbmNlAzEyMxRFdmVudEluZm8uU2RrVmVyc2lvbhFBV1QtV2ViLUNKUy0xLjIuMg5FdmVudEluZm8uTmFtZRNvZmZpY2VfZmVlZGJhY2tfc2RrDkV2ZW50SW5mby5UaW1lGDIwMTktMTItMDRUMTk6MTI6MDQuMjYzWgApJGIyYzEyNjUyLWI0YjgtNGVmOC1hZTNlLTM1MTMzZTgwNGQ4MXHO4pyl2lupBmN1c3RvbckGE29mZmljZV9mZWVkYmFja19zZGvNDQkJFQ9EYXRhLkNhbXBhaWduSWQkOTNiNjA1YmMtYmI3NS00MTYzLTkwMDYtM2UyMjMxODhiMTZkDURhdGEuU3VydmV5SWQkYTg2YjMxZTctM2Q2Ny00ODkwLThkOTUtYTA4ZjljY2E0YjBlD0RhdGEuU3VydmV5VHlwZQE0DERhdGEuRXZlbnRJZB1TdXJ2ZXlfRmxvb2RnYXRlX1VzZXJTZWxlY3RlZAhBcHAuTmFtZRFPZmZpY2VGZWVkYmFja1NESwxBcHAuUGxhdGZvcm0DV2ViC0FwcC5WZXJzaW9uBTEuMi45ClNlc3Npb24uSWQkNzc0NWM0ZDEtNzY4Mi00MDZiLWFkNTgtNTgzOGNmY2ZkM2VlB0hvc3QuSWQEMjE1NgxIb3N0LlZlcnNpb24QMTYuMC4xMjQwMS4zNzk1MBVSZWxlYXNlLkF1ZGllbmNlR3JvdXAKUHJvZHVjdGlvbgpFdmVudC5OYW1lE09mZmljZV9GZWVkYmFja19TREsIRXZlbnQuSWQoNzc0NWM0ZDEtNzY4Mi00MDZiLWFkNTgtNTgzOGNmY2ZkM2VlLjEyMgxFdmVudC5Tb3VyY2UHTXNvVGhpbhNFdmVudC5TY2hlbWFWZXJzaW9uATEORXZlbnQuU2VxdWVuY2UDMTIyEEV2ZW50SW5mby5Jbml0SWQkMzliM2QwNjAtN2JlYS00ZTM5LWJkOWItOTI3NDUzZjJlMDBiEkV2ZW50SW5mby5TZXF1ZW5jZQMxMjIURXZlbnRJbmZvLlNka1ZlcnNpb24RQVdULVdlYi1DSlMtMS4yLjIORXZlbnRJbmZvLk5hbWUTb2ZmaWNlX2ZlZWRiYWNrX3Nkaw5FdmVudEluZm8uVGltZRgyMDE5LTEyLTA0VDE5OjEyOjA0LjI2M1oAKSQzZWFlMzM0OS1lYzI3LTQ5NzgtODMzNS1hNDY0ZTM0YTIzZGZxzuKcpdpbqQZjdXN0b23JBhNvZmZpY2VfZmVlZGJhY2tfc2RrzQ0JCRUPRGF0YS5DYW1wYWlnbklkJDQ1MGJiZGIxLWE0YTQtNDU1Mi1hOTk1LTMzMDg1ZGY0YTRiMg1EYXRhLlN1cnZleUlkJGJkNGU0ZGExLTgyNTctNDEyZC01MWJjLTQxMzNkZjhmOTgyMQ9EYXRhLlN1cnZleVR5cGUBNAxEYXRhLkV2ZW50SWQdU3VydmV5X0Zsb29kZ2F0ZV9Vc2VyU2VsZWN0ZWQIQXBwLk5hbWURT2ZmaWNlRmVlZGJhY2tTREsMQXBwLlBsYXRmb3JtA1dlYgtBcHAuVmVyc2lvbgUxLjIuOQpTZXNzaW9uLklkJDc3NDVjNGQxLTc2ODItNDA2Yi1hZDU4LTU4MzhjZmNmZDNlZQdIb3N0LklkBDIxNTYMSG9zdC5WZXJzaW9uEDE2LjAuMTI0MDEuMzc5NTAVUmVsZWFzZS5BdWRpZW5jZUdyb3VwClByb2R1Y3Rpb24KRXZlbnQuTmFtZRNPZmZpY2VfRmVlZGJhY2tfU0RLCEV2ZW50LklkKDc3NDVjNGQxLTc2ODItNDA2Yi1hZDU4LTU4MzhjZmNmZDNlZS4xMjEMRXZlbnQuU291cmNlB01zb1RoaW4TRXZlbnQuU2NoZW1hVmVyc2lvbgExDkV2ZW50LlNlcXVlbmNlAzEyMRBFdmVudEluZm8uSW5pdElkJDM5YjNkMDYwLTdiZWEtNGUzOS1iZDliLTkyNzQ1M2YyZTAwYhJFdmVudEluZm8uU2VxdWVuY2UDMTIxFEV2ZW50SW5mby5TZGtWZXJzaW9uEUFXVC1XZWItQ0pTLTEuMi4yDkV2ZW50SW5mby5OYW1lE29mZmljZV9mZWVkYmFja19zZGsORXZlbnRJbmZvLlRpbWUYMjAxOS0xMi0wNFQxOToxMjowNC4yNjNaACkkYTgwNzBmMDQtNWIyNS00ZjZkLTgzNjgtZTk2YzY5ZGIxZGFmcc7inKXaW6kGY3VzdG9tyQYTb2ZmaWNlX2ZlZWRiYWNrX3Nka80NCQkVD0RhdGEuQ2FtcGFpZ25JZCQyNTQ3NDhkNC0xYWY4LTRjMzQtYWI1Ni0zMDNhZTEwZTY3MTkNRGF0YS5TdXJ2ZXlJZCQ2MjU3M2M0NS04MDkxLTRjYmQtMDRiZS0wMWQ0OWJhMzRiN2MPRGF0YS5TdXJ2ZXlUeXBlATQMRGF0YS5FdmVudElkHVN1cnZleV9GbG9vZGdhdGVfVXNlclNlbGVjdGVkCEFwcC5OYW1lEU9mZmljZUZlZWRiYWNrU0RLDEFwcC5QbGF0Zm9ybQNXZWILQXBwLlZlcnNpb24FMS4yLjkKU2Vzc2lvbi5JZCQ3NzQ1YzRkMS03NjgyLTQwNmItYWQ1OC01ODM4Y2ZjZmQzZWUHSG9zdC5JZAQyMTU2DEhvc3QuVmVyc2lvbhAxNi4wLjEyNDAxLjM3OTUwFVJlbGVhc2UuQXVkaWVuY2VHcm91cApQcm9kdWN0aW9uCkV2ZW50Lk5hbWUTT2ZmaWNlX0ZlZWRiYWNrX1NESwhFdmVudC5JZCg3NzQ1YzRkMS03NjgyLTQwNmItYWQ1OC01ODM4Y2ZjZmQzZWUuMTIwDEV2ZW50LlNvdXJjZQdNc29UaGluE0V2ZW50LlNjaGVtYVZlcnNpb24BMQ5FdmVudC5TZXF1ZW5jZQMxMjAQRXZlbnRJbmZvLkluaXRJZCQzOWIzZDA2MC03YmVhLTRlMzktYmQ5Yi05Mjc0NTNmMmUwMGISRXZlbnRJbmZvLlNlcXVlbmNlAzEyMBRFdmVudEluZm8uU2RrVmVyc2lvbhFBV1QtV2ViLUNKUy0xLjIuMg5FdmVudEluZm8uTmFtZRNvZmZpY2VfZmVlZGJhY2tfc2RrDkV2ZW50SW5mby5UaW1lGDIwMTktMTItMDRUMTk6MTI6MDQuMjYzWgAAAA==");
		String requestContent0058 = new String(requestContentBinary0058);
		String requestHeader0058 = "POST " + requestFile0058 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: browser.pipe.aria.microsoft.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContentBinary0058.length + "\r\n" + 		// Content-Length: 5515
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://excel.officeapps.live.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0058, requestHost0058, requestPort0058, requestHeader0058, requestContentBinary0058, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0058 = null;		// support garbage collector to reduce memory
		requestContent0058 = null;		// support garbage collector to reduce memory
		requestContentBinary0058 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [58] <- Index 58
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [59] <- WEB ADMIN Index 59 ---
		String requestProt0059 = "https";
		String requestHost0059 = "browser.pipe.aria.microsoft.com";
		int    requestPort0059 = 443;
		String requestFile0059 = "/Collector/3.0/" +
				"?qsp=true" +
				"&content-type=application%2Fbond-compact-binary" +
				"&client-id=NO_AUTH" +
				"&sdk-version=AWT-Web-JS-1.8.5" +
				"&x-apikey=fad3bd1d8e4b4c06894bd7bac80e4f02-67df67b4-f1fd-4ecd-9d55-4d41540b1757-7724" +
				"&client-time-epoch-millis=1575486728485" +
				"&time-delta-to-apply-millis=46";
		byte[] requestContentBinary0059 = Lib.base64ToByteArray("bQkLAUpmYWQzYmQxZDhlNGI0YzA2ODk0YmQ3YmFjODBlNGYwMi02N2RmNjdiNC1mMWZkLTRlY2QtOWQ1NS00ZDQxNTQwYjE3NTctNzcyNAoBSRJhY3RfZGVmYXVsdF9zb3VyY2WpJGVmZTE5YmY5LTA0YWUtNDUzYi1hYzVkLTZiMzg2NjdjOWU2Y9EGyKSdpdpbywgKAykkMzJhMTVjYmMtZDliNy00NGZlLWJjZDctZTg4YmMxYTYxNWRlceyRnaXaW6kGY3VzdG9tyQYwb2ZmaWNlX2V4Y2VsX29ubGluZV91c2VyYWN0aW9uX2VkaXRib3hfc3RhcnRlZGl0zQ0JCTUKRXZlbnQuTmFtZTBPZmZpY2UuRXhjZWwuT25saW5lLlVzZXJBY3Rpb24uRWRpdEJveC5TdGFydEVkaXQMRXZlbnQuU291cmNlBk9UZWxKUw5FdmVudC5Db250cmFjdBZPZmZpY2UuU3lzdGVtLkFjdGl2aXR5C3pDLkFjdGl2aXR5Fk9mZmljZS5TeXN0ZW0uQWN0aXZpdHkIQXBwLk5hbWUFRXhjZWwMQXBwLlBsYXRmb3JtA1dlYgtBcHAuVmVyc2lvbhAxNi4wLjEyNDAxLjM3OTUwBnpDLkFwcANBcHAKU2Vzc2lvbi5JZCRhMzgxMDllZC0wZTUyLTQ5MTQtOGFiMS0yYThjZjA5YWFiMGYKekMuU2Vzc2lvbgdTZXNzaW9uFVJlbGVhc2UuQXVkaWVuY2VHcm91cApQcm9kdWN0aW9uCnpDLlJlbGVhc2UHUmVsZWFzZQxCcm93c2VyLk5hbWUGQ2hyb21lD0Jyb3dzZXIuVmVyc2lvbgk3Ny4wLjM4NjUKekMuQnJvd3NlcgdCcm93c2VyEkN1bHR1cmUuVWlMYW5ndWFnZQVlbi1VUwp6Qy5DdWx0dXJlB0N1bHR1cmUIV0FDLkhvc3QRU2hhcmVQb2ludCBPbmxpbmUPV0FDLlNlcnZlckRvY0lkJGNhODk5NWU1LTE2NzMtNGY2OS1iNTlhLWRiNGUwM2IwYTU4Ng5XQUMuRGF0YWNlbnRlcgNVUzITV0FDLkFwcGxpY2F0aW9uTW9kZQdVbmlmaWVkG1dBQy5BcHBsaWNhdGlvbk1vZGVFeHRlbmRlZAdVTklGSUVEE1dBQy5Ccm93c2VyTGFuZ3VhZ2UFZW4tVVMTV0FDLkNvbnRlbnRMYW5ndWFnZQVlbi1VUw1XQUMuT3NWZXJzaW9uC1dpbmRvd3MoMTApCFdBQy5SaW5nATUGekMuV0FDA1dBQxhVc2VyLlByaW1hcnlJZGVudGl0eUhhc2gQMTAwMzIwMDA2NTViMGM2YxlVc2VyLlByaW1hcnlJZGVudGl0eVNwYWNlCU9yZ0lkUHVpZA1Vc2VyLlRlbmFudElkJGNlNmVjMDAwLTFjZmEtNDljMi1hMjRmLTdkYjYzYzhhOWE1Mgd6Qy5Vc2VyBFVzZXIQRGV2aWNlLk9zVmVyc2lvbgNOL0EORGV2aWNlLk9zQnVpbGQDTi9BCXpDLkRldmljZQZEZXZpY2UNRGF0YS5yaWNoVGV4dAVmYWxzZQtEYXRhLmVkaXRvcgpGb3JtdWxhQmFyFERhdGEuVXNlckFjdGlvbi5OYW1lEUVkaXRCb3guU3RhcnRFZGl0HkRhdGEuVXNlckFjdGlvbi5Db21tYW5kU3VyZmFjZQdVbmtub3duGkRhdGEuVXNlckFjdGlvbi5QYXJlbnROYW1lB1Vua25vd24dRGF0YS5Vc2VyQWN0aW9uLlRyaWdnZXJNZXRob2QHVW5rbm93bhJ6Qy5EYXRhLlVzZXJBY3Rpb24YT2ZmaWNlLlN5c3RlbS5Vc2VyQWN0aW9uE0RhdGEuT1RlbEpTLlZlcnNpb24GMy4xLjI2EVVzZXJJbmZvLkxhbmd1YWdlBWVuLVVTEVVzZXJJbmZvLlRpbWVab25lBi0wODowMBZEZXZpY2VJbmZvLkJyb3dzZXJOYW1lBkNocm9tZRlEZXZpY2VJbmZvLkJyb3dzZXJWZXJzaW9uDDc3LjAuMzg2NS45MBFEZXZpY2VJbmZvLk9zTmFtZQdXaW5kb3dzFERldmljZUluZm8uT3NWZXJzaW9uAjEwEEV2ZW50SW5mby5Jbml0SWQkNDUxNzljY2ItNWE0Zi00YzJmLTk3ZjItZTI4NjZmNGM2OTg2EkV2ZW50SW5mby5TZXF1ZW5jZQIzOBRFdmVudEluZm8uU2RrVmVyc2lvbhBBV1QtV2ViLUpTLTEuOC41DkV2ZW50SW5mby5OYW1lMG9mZmljZV9leGNlbF9vbmxpbmVfdXNlcmFjdGlvbl9lZGl0Ym94X3N0YXJ0ZWRpdA5FdmVudEluZm8uVGltZRgyMDE5LTEyLTA0VDE5OjEyOjA3LjI4NlrNHwkCBQ9XQUMuSXNTeW50aGV0aWMAEldBQy5Jc0J1c2luZXNzVXNlcgEJV0FDLklzRWR1ABBVc2VyLklzQW5vbnltb3VzAA5EYXRhLklzQ29tbWFuZADNIAkRAQpFdmVudC5UaW1lgOrsr7u7vNcRzSEJEQQORXZlbnQuU2VxdWVuY2VgEUFjdGl2aXR5LkR1cmF0aW9uAA5BY3Rpdml0eS5Db3VudAIQQWN0aXZpdHkuQWdnTW9kZQAAKSQwOGE2ZTVmYS04NjQ1LTQ0MDUtOTk4ZC05YTY3MTJiZDVhNjNx5JGdpdpbqQZjdXN0b23JBjNvZmZpY2VfZXhjZWxfb25saW5lX3VzZXJhY3Rpb25fZm9ybXVsYWJhcl9zdGFydGVkaXTNDQkJMwpFdmVudC5OYW1lM09mZmljZS5FeGNlbC5PbmxpbmUuVXNlckFjdGlvbi5Gb3JtdWxhQmFyLlN0YXJ0RWRpdAxFdmVudC5Tb3VyY2UGT1RlbEpTDkV2ZW50LkNvbnRyYWN0Fk9mZmljZS5TeXN0ZW0uQWN0aXZpdHkLekMuQWN0aXZpdHkWT2ZmaWNlLlN5c3RlbS5BY3Rpdml0eQhBcHAuTmFtZQVFeGNlbAxBcHAuUGxhdGZvcm0DV2ViC0FwcC5WZXJzaW9uEDE2LjAuMTI0MDEuMzc5NTAGekMuQXBwA0FwcApTZXNzaW9uLklkJGEzODEwOWVkLTBlNTItNDkxNC04YWIxLTJhOGNmMDlhYWIwZgp6Qy5TZXNzaW9uB1Nlc3Npb24VUmVsZWFzZS5BdWRpZW5jZUdyb3VwClByb2R1Y3Rpb24KekMuUmVsZWFzZQdSZWxlYXNlDEJyb3dzZXIuTmFtZQZDaHJvbWUPQnJvd3Nlci5WZXJzaW9uCTc3LjAuMzg2NQp6Qy5Ccm93c2VyB0Jyb3dzZXISQ3VsdHVyZS5VaUxhbmd1YWdlBWVuLVVTCnpDLkN1bHR1cmUHQ3VsdHVyZQhXQUMuSG9zdBFTaGFyZVBvaW50IE9ubGluZQ9XQUMuU2VydmVyRG9jSWQkY2E4OTk1ZTUtMTY3My00ZjY5LWI1OWEtZGI0ZTAzYjBhNTg2DldBQy5EYXRhY2VudGVyA1VTMhNXQUMuQXBwbGljYXRpb25Nb2RlB1VuaWZpZWQbV0FDLkFwcGxpY2F0aW9uTW9kZUV4dGVuZGVkB1VOSUZJRUQTV0FDLkJyb3dzZXJMYW5ndWFnZQVlbi1VUxNXQUMuQ29udGVudExhbmd1YWdlBWVuLVVTDVdBQy5Pc1ZlcnNpb24LV2luZG93cygxMCkIV0FDLlJpbmcBNQZ6Qy5XQUMDV0FDGFVzZXIuUHJpbWFyeUlkZW50aXR5SGFzaBAxMDAzMjAwMDY1NWIwYzZjGVVzZXIuUHJpbWFyeUlkZW50aXR5U3BhY2UJT3JnSWRQdWlkDVVzZXIuVGVuYW50SWQkY2U2ZWMwMDAtMWNmYS00OWMyLWEyNGYtN2RiNjNjOGE5YTUyB3pDLlVzZXIEVXNlchBEZXZpY2UuT3NWZXJzaW9uA04vQQ5EZXZpY2UuT3NCdWlsZANOL0EJekMuRGV2aWNlBkRldmljZRREYXRhLlVzZXJBY3Rpb24uTmFtZRRGb3JtdWxhQmFyLlN0YXJ0RWRpdB5EYXRhLlVzZXJBY3Rpb24uQ29tbWFuZFN1cmZhY2UHVW5rbm93bhpEYXRhLlVzZXJBY3Rpb24uUGFyZW50TmFtZQdVbmtub3duHURhdGEuVXNlckFjdGlvbi5UcmlnZ2VyTWV0aG9kB1Vua25vd24SekMuRGF0YS5Vc2VyQWN0aW9uGE9mZmljZS5TeXN0ZW0uVXNlckFjdGlvbhNEYXRhLk9UZWxKUy5WZXJzaW9uBjMuMS4yNhFVc2VySW5mby5MYW5ndWFnZQVlbi1VUxFVc2VySW5mby5UaW1lWm9uZQYtMDg6MDAWRGV2aWNlSW5mby5Ccm93c2VyTmFtZQZDaHJvbWUZRGV2aWNlSW5mby5Ccm93c2VyVmVyc2lvbgw3Ny4wLjM4NjUuOTARRGV2aWNlSW5mby5Pc05hbWUHV2luZG93cxREZXZpY2VJbmZvLk9zVmVyc2lvbgIxMBBFdmVudEluZm8uSW5pdElkJDQ1MTc5Y2NiLTVhNGYtNGMyZi05N2YyLWUyODY2ZjRjNjk4NhJFdmVudEluZm8uU2VxdWVuY2UCMzcURXZlbnRJbmZvLlNka1ZlcnNpb24QQVdULVdlYi1KUy0xLjguNQ5FdmVudEluZm8uTmFtZTNvZmZpY2VfZXhjZWxfb25saW5lX3VzZXJhY3Rpb25fZm9ybXVsYWJhcl9zdGFydGVkaXQORXZlbnRJbmZvLlRpbWUYMjAxOS0xMi0wNFQxOToxMjowNy4yODJazR8JAgUPV0FDLklzU3ludGhldGljABJXQUMuSXNCdXNpbmVzc1VzZXIBCVdBQy5Jc0VkdQAQVXNlci5Jc0Fub255bW91cwAORGF0YS5Jc0NvbW1hbmQAzSAJEQEKRXZlbnQuVGltZYD456+7u7zXEc0hCREEDkV2ZW50LlNlcXVlbmNlXhFBY3Rpdml0eS5EdXJhdGlvbgAOQWN0aXZpdHkuQ291bnQCEEFjdGl2aXR5LkFnZ01vZGUAACkkNThhMWUwZTAtYWE2OS00MWM0LWJlOTgtZGI4NjM5YjhkZTFlcaSFnaXaW6kGY3VzdG9tyQYtb2ZmaWNlX2V4Y2VsX29ubGluZV91c2VyYWN0aW9uX3NlbGVjdGluZ3JhbmdlzQ0JCTQKRXZlbnQuTmFtZS1PZmZpY2UuRXhjZWwuT25saW5lLlVzZXJBY3Rpb24uU2VsZWN0aW5nUmFuZ2UMRXZlbnQuU291cmNlBk9UZWxKUw5FdmVudC5Db250cmFjdBZPZmZpY2UuU3lzdGVtLkFjdGl2aXR5C3pDLkFjdGl2aXR5Fk9mZmljZS5TeXN0ZW0uQWN0aXZpdHkIQXBwLk5hbWUFRXhjZWwMQXBwLlBsYXRmb3JtA1dlYgtBcHAuVmVyc2lvbhAxNi4wLjEyNDAxLjM3OTUwBnpDLkFwcANBcHAKU2Vzc2lvbi5JZCRhMzgxMDllZC0wZTUyLTQ5MTQtOGFiMS0yYThjZjA5YWFiMGYKekMuU2Vzc2lvbgdTZXNzaW9uFVJlbGVhc2UuQXVkaWVuY2VHcm91cApQcm9kdWN0aW9uCnpDLlJlbGVhc2UHUmVsZWFzZQxCcm93c2VyLk5hbWUGQ2hyb21lD0Jyb3dzZXIuVmVyc2lvbgk3Ny4wLjM4NjUKekMuQnJvd3NlcgdCcm93c2VyEkN1bHR1cmUuVWlMYW5ndWFnZQVlbi1VUwp6Qy5DdWx0dXJlB0N1bHR1cmUIV0FDLkhvc3QRU2hhcmVQb2ludCBPbmxpbmUPV0FDLlNlcnZlckRvY0lkJGNhODk5NWU1LTE2NzMtNGY2OS1iNTlhLWRiNGUwM2IwYTU4Ng5XQUMuRGF0YWNlbnRlcgNVUzITV0FDLkFwcGxpY2F0aW9uTW9kZQdVbmlmaWVkG1dBQy5BcHBsaWNhdGlvbk1vZGVFeHRlbmRlZAdVTklGSUVEE1dBQy5Ccm93c2VyTGFuZ3VhZ2UFZW4tVVMTV0FDLkNvbnRlbnRMYW5ndWFnZQVlbi1VUw1XQUMuT3NWZXJzaW9uC1dpbmRvd3MoMTApCFdBQy5SaW5nATUGekMuV0FDA1dBQxhVc2VyLlByaW1hcnlJZGVudGl0eUhhc2gQMTAwMzIwMDA2NTViMGM2YxlVc2VyLlByaW1hcnlJZGVudGl0eVNwYWNlCU9yZ0lkUHVpZA1Vc2VyLlRlbmFudElkJGNlNmVjMDAwLTFjZmEtNDljMi1hMjRmLTdkYjYzYzhhOWE1Mgd6Qy5Vc2VyBFVzZXIQRGV2aWNlLk9zVmVyc2lvbgNOL0EORGV2aWNlLk9zQnVpbGQDTi9BCXpDLkRldmljZQZEZXZpY2UaRGF0YS5TZWxlY3RlZFJhbmdlSW50ZXJuYWwEQTExMRREYXRhLlVzZXJBY3Rpb24uTmFtZQ5TZWxlY3RpbmdSYW5nZR5EYXRhLlVzZXJBY3Rpb24uQ29tbWFuZFN1cmZhY2UHVW5rbm93bhpEYXRhLlVzZXJBY3Rpb24uUGFyZW50TmFtZQdVbmtub3duHURhdGEuVXNlckFjdGlvbi5UcmlnZ2VyTWV0aG9kBW1vdXNlEnpDLkRhdGEuVXNlckFjdGlvbhhPZmZpY2UuU3lzdGVtLlVzZXJBY3Rpb24TRGF0YS5PVGVsSlMuVmVyc2lvbgYzLjEuMjYRVXNlckluZm8uTGFuZ3VhZ2UFZW4tVVMRVXNlckluZm8uVGltZVpvbmUGLTA4OjAwFkRldmljZUluZm8uQnJvd3Nlck5hbWUGQ2hyb21lGURldmljZUluZm8uQnJvd3NlclZlcnNpb24MNzcuMC4zODY1LjkwEURldmljZUluZm8uT3NOYW1lB1dpbmRvd3MURGV2aWNlSW5mby5Pc1ZlcnNpb24CMTAQRXZlbnRJbmZvLkluaXRJZCQ0NTE3OWNjYi01YTRmLTRjMmYtOTdmMi1lMjg2NmY0YzY5ODYSRXZlbnRJbmZvLlNlcXVlbmNlAjM2FEV2ZW50SW5mby5TZGtWZXJzaW9uEEFXVC1XZWItSlMtMS44LjUORXZlbnRJbmZvLk5hbWUtb2ZmaWNlX2V4Y2VsX29ubGluZV91c2VyYWN0aW9uX3NlbGVjdGluZ3JhbmdlDkV2ZW50SW5mby5UaW1lGDIwMTktMTItMDRUMTk6MTI6MDYuNDgyWs0fCQIFD1dBQy5Jc1N5bnRoZXRpYwASV0FDLklzQnVzaW5lc3NVc2VyAQlXQUMuSXNFZHUAEFVzZXIuSXNBbm9ueW1vdXMADkRhdGEuSXNDb21tYW5kAM0gCREBCkV2ZW50LlRpbWWAsJeou7u81xHNIQkRBA5FdmVudC5TZXF1ZW5jZVwRQWN0aXZpdHkuRHVyYXRpb24ADkFjdGl2aXR5LkNvdW50AhBBY3Rpdml0eS5BZ2dNb2RlAAAAAA==");
		String requestContent0059 = new String(requestContentBinary0059);
		String requestHeader0059 = "POST " + requestFile0059 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: browser.pipe.aria.microsoft.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContentBinary0059.length + "\r\n" + 		// Content-Length: 5683
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://excel.officeapps.live.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0059, requestHost0059, requestPort0059, requestHeader0059, requestContentBinary0059, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0059 = null;		// support garbage collector to reduce memory
		requestContent0059 = null;		// support garbage collector to reduce memory
		requestContentBinary0059 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [59] <- Index 59
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [60] <- WEB ADMIN Index 60 ---
		String requestProt0060 = "https";
		String requestHost0060 = "browser.pipe.aria.microsoft.com";
		int    requestPort0060 = 443;
		String requestFile0060 = "/Collector/3.0/" +
				"?qsp=true" +
				"&content-type=application%2Fbond-compact-binary" +
				"&client-id=NO_AUTH" +
				"&sdk-version=AWT-Web-JS-1.8.5" +
				"&x-apikey=fad3bd1d8e4b4c06894bd7bac80e4f02-67df67b4-f1fd-4ecd-9d55-4d41540b1757-7724" +
				"&client-time-epoch-millis=1575486732456" +
				"&time-delta-to-apply-millis=46";
		byte[] requestContentBinary0060 = Lib.base64ToByteArray("bQkLAUpmYWQzYmQxZDhlNGI0YzA2ODk0YmQ3YmFjODBlNGYwMi02N2RmNjdiNC1mMWZkLTRlY2QtOWQ1NS00ZDQxNTQwYjE3NTctNzcyNAoBSRJhY3RfZGVmYXVsdF9zb3VyY2WpJGIzMDEyYjQxLWM0MjAtNDlhNS05OGUzLTAyNjA4MmVjY2RhONEGzuKdpdpbywgKASkkZGU1NjEwNDQtNzk5NC00NmU2LWE1YTgtNDVlNmU3OWRhZDVicarDnaXaW6kGY3VzdG9tyQYmb2ZmaWNlX2V4Y2VsX29ubGluZV91c2VyYWN0aW9uX3NldGNlbGzNDQkJNQpFdmVudC5OYW1lJk9mZmljZS5FeGNlbC5PbmxpbmUuVXNlckFjdGlvbi5TZXRDZWxsDEV2ZW50LlNvdXJjZQZPVGVsSlMORXZlbnQuQ29udHJhY3QWT2ZmaWNlLlN5c3RlbS5BY3Rpdml0eQt6Qy5BY3Rpdml0eRZPZmZpY2UuU3lzdGVtLkFjdGl2aXR5CEFwcC5OYW1lBUV4Y2VsDEFwcC5QbGF0Zm9ybQNXZWILQXBwLlZlcnNpb24QMTYuMC4xMjQwMS4zNzk1MAZ6Qy5BcHADQXBwClNlc3Npb24uSWQkYTM4MTA5ZWQtMGU1Mi00OTE0LThhYjEtMmE4Y2YwOWFhYjBmCnpDLlNlc3Npb24HU2Vzc2lvbhVSZWxlYXNlLkF1ZGllbmNlR3JvdXAKUHJvZHVjdGlvbgp6Qy5SZWxlYXNlB1JlbGVhc2UMQnJvd3Nlci5OYW1lBkNocm9tZQ9Ccm93c2VyLlZlcnNpb24JNzcuMC4zODY1CnpDLkJyb3dzZXIHQnJvd3NlchJDdWx0dXJlLlVpTGFuZ3VhZ2UFZW4tVVMKekMuQ3VsdHVyZQdDdWx0dXJlCFdBQy5Ib3N0EVNoYXJlUG9pbnQgT25saW5lD1dBQy5TZXJ2ZXJEb2NJZCRjYTg5OTVlNS0xNjczLTRmNjktYjU5YS1kYjRlMDNiMGE1ODYOV0FDLkRhdGFjZW50ZXIDVVMyE1dBQy5BcHBsaWNhdGlvbk1vZGUHVW5pZmllZBtXQUMuQXBwbGljYXRpb25Nb2RlRXh0ZW5kZWQHVU5JRklFRBNXQUMuQnJvd3Nlckxhbmd1YWdlBWVuLVVTE1dBQy5Db250ZW50TGFuZ3VhZ2UFZW4tVVMNV0FDLk9zVmVyc2lvbgtXaW5kb3dzKDEwKQhXQUMuUmluZwE1BnpDLldBQwNXQUMYVXNlci5QcmltYXJ5SWRlbnRpdHlIYXNoEDEwMDMyMDAwNjU1YjBjNmMZVXNlci5QcmltYXJ5SWRlbnRpdHlTcGFjZQlPcmdJZFB1aWQNVXNlci5UZW5hbnRJZCRjZTZlYzAwMC0xY2ZhLTQ5YzItYTI0Zi03ZGI2M2M4YTlhNTIHekMuVXNlcgRVc2VyEERldmljZS5Pc1ZlcnNpb24DTi9BDkRldmljZS5Pc0J1aWxkA04vQQl6Qy5EZXZpY2UGRGV2aWNlDkRhdGEuZWRpdFJhbmdlBEExMTEPRGF0YS5pc1JpY2hUZXh0BWZhbHNlFERhdGEuVXNlckFjdGlvbi5OYW1lB1NldENlbGweRGF0YS5Vc2VyQWN0aW9uLkNvbW1hbmRTdXJmYWNlB1Vua25vd24aRGF0YS5Vc2VyQWN0aW9uLlBhcmVudE5hbWUHVW5rbm93bh1EYXRhLlVzZXJBY3Rpb24uVHJpZ2dlck1ldGhvZAdVbmtub3duEnpDLkRhdGEuVXNlckFjdGlvbhhPZmZpY2UuU3lzdGVtLlVzZXJBY3Rpb24TRGF0YS5PVGVsSlMuVmVyc2lvbgYzLjEuMjYRVXNlckluZm8uTGFuZ3VhZ2UFZW4tVVMRVXNlckluZm8uVGltZVpvbmUGLTA4OjAwFkRldmljZUluZm8uQnJvd3Nlck5hbWUGQ2hyb21lGURldmljZUluZm8uQnJvd3NlclZlcnNpb24MNzcuMC4zODY1LjkwEURldmljZUluZm8uT3NOYW1lB1dpbmRvd3MURGV2aWNlSW5mby5Pc1ZlcnNpb24CMTAQRXZlbnRJbmZvLkluaXRJZCQ0NTE3OWNjYi01YTRmLTRjMmYtOTdmMi1lMjg2NmY0YzY5ODYSRXZlbnRJbmZvLlNlcXVlbmNlAjM5FEV2ZW50SW5mby5TZGtWZXJzaW9uEEFXVC1XZWItSlMtMS44LjUORXZlbnRJbmZvLk5hbWUmb2ZmaWNlX2V4Y2VsX29ubGluZV91c2VyYWN0aW9uX3NldGNlbGwORXZlbnRJbmZvLlRpbWUYMjAxOS0xMi0wNFQxOToxMjoxMC40NTNazR8JAgoPV0FDLklzU3ludGhldGljABJXQUMuSXNCdXNpbmVzc1VzZXIBCVdBQy5Jc0VkdQAQVXNlci5Jc0Fub255bW91cwAORGF0YS5pc0Zvcm11bGEAC0RhdGEuaXNMaW5rABBEYXRhLmlzRW1wdHlUZXh0AA9EYXRhLmlzU2hlZXRSZWYAF0RhdGEuSXNJbkZvcm11bGFCYXJFZGl0AQ5EYXRhLklzQ29tbWFuZADNIAkRAQpFdmVudC5UaW1lgIKIzru7vNcRzSEJEQQORXZlbnQuU2VxdWVuY2ViEUFjdGl2aXR5LkR1cmF0aW9uAA5BY3Rpdml0eS5Db3VudAIQQWN0aXZpdHkuQWdnTW9kZQAAAAA=");
		String requestContent0060 = new String(requestContentBinary0060);
		String requestHeader0060 = "POST " + requestFile0060 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: browser.pipe.aria.microsoft.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContentBinary0060.length + "\r\n" + 		// Content-Length: 2063
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://excel.officeapps.live.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0060, requestHost0060, requestPort0060, requestHeader0060, requestContentBinary0060, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0060 = null;		// support garbage collector to reduce memory
		requestContent0060 = null;		// support garbage collector to reduce memory
		requestContentBinary0060 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [60] <- Index 60
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [61] <- WEB ADMIN Index 61 ---
		String requestProt0061 = "https";
		String requestHost0061 = "performancemanager4.successfactors.com";
		int    requestPort0061 = 443;
		String requestFile0061 = "/login";
		String requestContent0061 = 
				"referer=%2Fsf%2F" +
				"&bplte_userid=" +
				"&company=Teck" +
				"&username=TestAutomation" +
				"&password=TestAutomation";
		String requestHeader0061 = "POST " + requestFile0061 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0061.length() + "\r\n" + 		// Content-Length: 91
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0061, requestHost0061, requestPort0061, requestHeader0061, requestContent0061.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0061 = null;		// support garbage collector to reduce memory
		requestContent0061 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [61] <- Index 61
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		htmlContentParser = new HtmlContentParser(testURL, this);
		try
		{
			// extract var 'vScrb'
			vScrb = testURL.getRedirectLocation().getParameter("_s.crb");		// recorded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
			log("<<< vScrb = " + vScrb);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && vScrb!= null && vScrb.trim().length() == 0)
			{
				vScrb = "";
				log("runtime note: the extraction of a new value for the variable 'vScrb' ends up with an empty string - a substitute value was set");
				log("<<< vScrb = " + vScrb);
			}
		}
		catch (Exception e) { vScrb = null; log(e); }
		if (vScrb == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'vScrb' from http redirection";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [62] <- WEB ADMIN Index 62 ---
		log();
		log("# title: SuccessFactors: Home");
		String requestProt0062 = "https";
		String requestHost0062 = "performancemanager4.successfactors.com";
		int    requestPort0062 = 443;
		String requestFile0062 = "/sf/" +
				"?_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d";
		requestFile0062 = Lib.replaceTextPattern(requestFile0062, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		String requestHeader0062 = "GET " + requestFile0062 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0062, requestHost0062, requestPort0062, requestHeader0062, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0062 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 6634
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors: Home");		// Test [62] <- Index 62
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_AjaxsecKey1'
		ContentTokenExtractorItem contentTokenExtractorItem0062_1 = new ContentTokenExtractorItem("ajaxSecKey", "\t\n\r \"(),={}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0062_1);

		contentTokenExtractor.extractTokens();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Mod4'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0062_1 = new BoundaryBasedExtractorItem( "dcss;mod=" , "\" type=\"",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0062_1);

		// setup var extractor for 'C_belieze2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0062_2 = new BoundaryBasedExtractorItem( "l!belizePlusLanding" , "/.dcss;mod",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0062_2);

		// setup var extractor for 'C_Merge1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0062_3 = new BoundaryBasedExtractorItem( "merge_" , "/ui/sap",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0062_3);

		// setup var extractor for 'C_Showme'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0062_4 = new BoundaryBasedExtractorItem( "showme_" , "\",\"authorPerm",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0062_4);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Mod4'
			C_Mod4 = boundaryBasedContentExtractorItem0062_1.getResultText();
			log("<<< C_Mod4 = " + C_Mod4);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod4!= null && C_Mod4.trim().length() == 0)
			{
				C_Mod4 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod4' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod4 = " + C_Mod4);
			}
		}
		catch (Exception e) { C_Mod4 = null; log(e); }
		if (C_Mod4 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod4' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_belieze2'
			C_belieze2 = boundaryBasedContentExtractorItem0062_2.getResultText();
			log("<<< C_belieze2 = " + C_belieze2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_belieze2!= null && C_belieze2.trim().length() == 0)
			{
				C_belieze2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_belieze2' ends up with an empty string - a substitute value was set");
				log("<<< C_belieze2 = " + C_belieze2);
			}
		}
		catch (Exception e) { C_belieze2 = null; log(e); }
		if (C_belieze2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_belieze2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_AjaxsecKey1'
			C_AjaxsecKey1 = contentTokenExtractorItem0062_1.getResultToken();
			log("<<< C_AjaxsecKey1 = " + C_AjaxsecKey1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_AjaxsecKey1!= null && C_AjaxsecKey1.trim().length() == 0)
			{
				C_AjaxsecKey1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_AjaxsecKey1' ends up with an empty string - a substitute value was set");
				log("<<< C_AjaxsecKey1 = " + C_AjaxsecKey1);
			}
		}
		catch (Exception e) { C_AjaxsecKey1 = null; log(e); }
		if (C_AjaxsecKey1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_AjaxsecKey1' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Merge1'
			C_Merge1 = boundaryBasedContentExtractorItem0062_3.getResultText();
			log("<<< C_Merge1 = " + C_Merge1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Merge1!= null && C_Merge1.trim().length() == 0)
			{
				C_Merge1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Merge1' ends up with an empty string - a substitute value was set");
				log("<<< C_Merge1 = " + C_Merge1);
			}
		}
		catch (Exception e) { C_Merge1 = null; log(e); }
		if (C_Merge1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Merge1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Showme'
			C_Showme = boundaryBasedContentExtractorItem0062_4.getResultText();
			log("<<< C_Showme = " + C_Showme);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Showme!= null && C_Showme.trim().length() == 0)
			{
				C_Showme = "";
				log("runtime note: the extraction of a new value for the variable 'C_Showme' ends up with an empty string - a substitute value was set");
				log("<<< C_Showme = " + C_Showme);
			}
		}
		catch (Exception e) { C_Showme = null; log(e); }
		if (C_Showme == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Showme' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [63] <- WEB ADMIN Index 63 ---
		String requestProt0063 = "https";
		String requestHost0063 = "performancemanager4.successfactors.com";
		int    requestPort0063 = 443;
		String requestFile0063 = "/public/ui-dcss/Teck/_/3l!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!/.dcss;mod=61e6ea87";
		requestFile0063 = Lib.replaceTextPattern(requestFile0063, "61e6ea87", C_Mod4, 0);		// search and replace request file fragment "61e6ea87" with variable 'C_Mod4' on all occurrences
		requestFile0063 = Lib.replaceTextPattern(requestFile0063, "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!", C_belieze2, 0);		// search and replace request file fragment "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!" with variable 'C_belieze2' on all occurrences

		String requestHeader0063 = "GET " + requestFile0063 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0063, requestHost0063, requestPort0063, requestHeader0063, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0063 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 8374
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [63] <- Index 63
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [64] <- WEB ADMIN Index 64 ---
		String requestProt0064 = "https";
		String requestHost0064 = "performancemanager4.successfactors.com";
		int    requestPort0064 = 443;
		String requestFile0064 = "/ui/sapui5/main_1.65.5/sap/ui/thirdparty/jqueryui/jquery-ui-position.js";
		String requestHeader0064 = "GET " + requestFile0064 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0064, requestHost0064, requestPort0064, requestHeader0064, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0064 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2693
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [64] <- Index 64
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [65] <- WEB ADMIN Index 65 ---
		String requestProt0065 = "https";
		String requestHost0065 = "performancemanager4.successfactors.com";
		int    requestPort0065 = 443;
		String requestFile0065 = "/ui/topnav/img/belize_dark_bg_52da52583908a5afa7d86a9bc98e219d.png";
		String requestHeader0065 = "GET " + requestFile0065 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0065, requestHost0065, requestPort0065, requestHeader0065, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("61e6ea87", C_Mod4);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!", C_belieze2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0065 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 32628
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [65] <- Index 65
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [66] <- WEB ADMIN Index 66 ---
		String requestProt0066 = "https";
		String requestHost0066 = "performancemanager4.successfactors.com";
		int    requestPort0066 = 443;
		String requestFile0066 = "/ui/homepage3/resources_BC534AFF1C78D2852F6E6247898C3C7E/sap/ushell/library-preload.js";
		String requestHeader0066 = "GET " + requestFile0066 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0066, requestHost0066, requestPort0066, requestHeader0066, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0066 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 307699
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [66] <- Index 66
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [67] <- WEB ADMIN Index 67 ---
		String requestProt0067 = "https";
		String requestHost0067 = "performancemanager4.successfactors.com";
		int    requestPort0067 = 443;
		String requestFile0067 = "/ui/homepage3/resources_B9DB6696EC83C7A2651CEE8087CCB8DF/sap/sf/homepage3/commons/library-preload.js";
		requestFile0067 = Lib.replaceTextPattern(requestFile0067, "B9DB6696EC83C7A2651CEE8087CCB8DF", C_Merge2, 0);		// search and replace request file fragment "B9DB6696EC83C7A2651CEE8087CCB8DF" with variable 'C_Merge2' on all occurrences

		String requestHeader0067 = "GET " + requestFile0067 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0067, requestHost0067, requestPort0067, requestHeader0067, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0067 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5610
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [67] <- Index 67
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [68] <- WEB ADMIN Index 68 ---
		String requestProt0068 = "https";
		String requestHost0068 = "performancemanager4.successfactors.com";
		int    requestPort0068 = 443;
		String requestFile0068 = "/perfLogServlet" +
				"?callId=4391844720-0" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&ST=1575486735050" +
				"&MEM=144248" +
				"&NRE=332" +
				"&NWR=286" +
				"&SCPU=50" +
				"&SQLC=251" +
				"&SQLT=301" +
				"&SVT=959" +
				"&UCPU=410" +
				"&CPU=460" +
				"&FRE=4" +
				"&FWR=0" +
				"&jsNum=14" +
				"&cssNum=1" +
				"&renderTime=214" +
				"&RED=1" +
				"&TTB=1044" +
				"&RSR=1536" +
				"&DIA=1669";
		String requestContent0068 = 
				"OPTR_INFO=fb6a32c1-16c9-11ea-a9fb-4feef88e786c!1575486734545!1575486736214!1";
		String requestHeader0068 = "POST " + requestFile0068 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0068.length() + "\r\n" + 		// Content-Length: 76
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0068, requestHost0068, requestPort0068, requestHeader0068, requestContent0068.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0068 = null;		// support garbage collector to reduce memory
		requestContent0068 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [68] <- Index 68
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [69] <- WEB ADMIN Index 69 ---
		String requestProt0069 = "https";
		String requestHost0069 = "performancemanager4.successfactors.com";
		int    requestPort0069 = 443;
		String requestFile0069 = "/ui/sapui5/main_1.65.5/sap/ui/core/library.js";
		String requestHeader0069 = "GET " + requestFile0069 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 010005000100fe5280-b082-4a50-b125-0d482d8f362229820909-1501-babe-face-0000000000030dea92c9-3e22-4351-bf2e-1d7d29836b28HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0069, requestHost0069, requestPort0069, requestHeader0069, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0069 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4452
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [69] <- Index 69
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [70] <- WEB ADMIN Index 70 ---
		String requestProt0070 = "https";
		String requestHost0070 = "performancemanager4.successfactors.com";
		int    requestPort0070 = 443;
		String requestFile0070 = "/ui/sapui5/main_1.65.5/sap/m/library.js";
		String requestHeader0070 = "GET " + requestFile0070 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001a4694247-94a2-4a34-912c-cb01268cdf2229820909-1501-babe-face-000000000003613962f6-7492-4bee-a829-6b5f2a21272cHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0070, requestHost0070, requestPort0070, requestHeader0070, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0070 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 9286
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [70] <- Index 70
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [71] <- WEB ADMIN Index 71 ---
		String requestProt0071 = "https";
		String requestHost0071 = "performancemanager4.successfactors.com";
		int    requestPort0071 = 443;
		String requestFile0071 = "/public/ui-dcss/Teck/_/3l!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css";
		requestFile0071 = Lib.replaceTextPattern(requestFile0071, "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!", C_belieze2, 0);		// search and replace request file fragment "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!" with variable 'C_belieze2' on all occurrences
		requestFile0071 = Lib.replaceTextPattern(requestFile0071, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0071 = "GET " + requestFile0071 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0071, requestHost0071, requestPort0071, requestHeader0071, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0071 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 11385
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [71] <- Index 71
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [72] <- WEB ADMIN Index 72 ---
		String requestProt0072 = "https";
		String requestHost0072 = "performancemanager4.successfactors.com";
		int    requestPort0072 = 443;
		String requestFile0072 = "/ui/sapui5/main_1.65.5/sap/base/strings/capitalize.js";
		String requestHeader0072 = "GET " + requestFile0072 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001886062c5-d3c2-4adf-bf23-b8822eedeb2229820909-1501-babe-face-000000000003e47e6290-a902-4656-972c-caad2a97de21HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0072, requestHost0072, requestPort0072, requestHeader0072, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0072 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 234
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [72] <- Index 72
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [73] <- WEB ADMIN Index 73 ---
		String requestProt0073 = "https";
		String requestHost0073 = "performancemanager4.successfactors.com";
		int    requestPort0073 = 443;
		String requestFile0073 = "/ui/sapui5/main_1.65.5/sap/base/security/encodeCSS.js";
		String requestHeader0073 = "GET " + requestFile0073 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001dcf63282-ce62-4653-8f22-2aa22e51e82029820909-1501-babe-face-000000000003cea592a7-e7f2-452b-a823-c5ed262d9b23HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0073, requestHost0073, requestPort0073, requestHeader0073, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0073 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 346
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [73] <- Index 73
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [74] <- WEB ADMIN Index 74 ---
		String requestProt0074 = "https";
		String requestHost0074 = "performancemanager4.successfactors.com";
		int    requestPort0074 = 443;
		String requestFile0074 = "/ui/sapui5/main_1.65.5/sap/m/Support.js";
		String requestHeader0074 = "GET " + requestFile0074 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001342d52a4-65d2-44c1-b82d-f91e21ddd52529820909-1501-babe-face-000000000003cca2b203-5d72-404a-982c-5c9123e61a25HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0074, requestHost0074, requestPort0074, requestHeader0074, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0074 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2514
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [74] <- Index 74
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [75] <- WEB ADMIN Index 75 ---
		String requestProt0075 = "https";
		String requestHost0075 = "performancemanager4.successfactors.com";
		int    requestPort0075 = 443;
		String requestFile0075 = "/public/ui-dcss/Teck/_/3l!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library.css";
		requestFile0075 = Lib.replaceTextPattern(requestFile0075, "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!", C_belieze2, 0);		// search and replace request file fragment "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!" with variable 'C_belieze2' on all occurrences
		requestFile0075 = Lib.replaceTextPattern(requestFile0075, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0075 = "GET " + requestFile0075 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0075, requestHost0075, requestPort0075, requestHeader0075, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0075 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 83344
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [75] <- Index 75
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [76] <- WEB ADMIN Index 76 ---
		String requestProt0076 = "https";
		String requestHost0076 = "performancemanager4.successfactors.com";
		int    requestPort0076 = 443;
		String requestFile0076 = "/ui/homepage3/resources_BC534AFF1C78D2852F6E6247898C3C7E/sap/ushell/themes/sap_belize/library.css";
		String requestHeader0076 = "GET " + requestFile0076 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0076, requestHost0076, requestPort0076, requestHeader0076, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0076 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 55724
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [76] <- Index 76
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [77] <- WEB ADMIN Index 77 ---
		String requestProt0077 = "https";
		String requestHost0077 = "performancemanager4.successfactors.com";
		int    requestPort0077 = 443;
		String requestFile0077 = "/ui/homepage3/resources_B9DB6696EC83C7A2651CEE8087CCB8DF/sap/sf/homepage3/commons/themes/sap_belize/library.css";
		requestFile0077 = Lib.replaceTextPattern(requestFile0077, "B9DB6696EC83C7A2651CEE8087CCB8DF", C_Merge2, 0);		// search and replace request file fragment "B9DB6696EC83C7A2651CEE8087CCB8DF" with variable 'C_Merge2' on all occurrences

		String requestHeader0077 = "GET " + requestFile0077 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0077, requestHost0077, requestPort0077, requestHeader0077, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0077 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2581
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [77] <- Index 77
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 2 of 4)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [78] <- WEB ADMIN Index 78 ---
		String requestProt0078 = "https";
		String requestHost0078 = "performancemanager4.successfactors.com";
		int    requestPort0078 = 443;
		String requestFile0078 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TRS";
		String requestHeader0078 = "GET " + requestFile0078 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0078, requestHost0078, requestPort0078, requestHeader0078, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0078 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [78] <- Index 78
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [79] <- WEB ADMIN Index 79 ---
		String requestProt0079 = "https";
		String requestHost0079 = "performancemanager4.successfactors.com";
		int    requestPort0079 = 443;
		String requestFile0079 = "/ui/homepage3/resources_A5340237F9A603BDB523F8A2CE927FB6/sap/sf/homepage3/core/Component-preload.js";
		String requestHeader0079 = "GET " + requestFile0079 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 01000500012290422f-bd12-4bd7-b826-4a3c2c733b2a29820909-1501-babe-face-000000000003bf60820d-58f2-41a8-b729-a8ac253a9321HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0079, requestHost0079, requestPort0079, requestHeader0079, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0079 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 34396
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [79] <- Index 79
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [80] <- WEB ADMIN Index 80 ---
		String requestProt0080 = "https";
		String requestHost0080 = "performancemanager4.successfactors.com";
		int    requestPort0080 = 443;
		String requestFile0080 = "/ui/homepage3/resources_BC534AFF1C78D2852F6E6247898C3C7E/sap/ushell/renderers/fiori2/resources/resources_en.properties";
		String requestHeader0080 = "GET " + requestFile0080 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 01000500017e3042ec-a6e2-422f-bf29-62b525ccea2829820909-1501-babe-face-000000000003375e3252-d2b2-4793-be20-b21a22db4a28HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0080, requestHost0080, requestPort0080, requestHeader0080, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0080 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 9348
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [80] <- Index 80
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [81] <- WEB ADMIN Index 81 ---
		String requestProt0081 = "https";
		String requestHost0081 = "performancemanager4.successfactors.com";
		int    requestPort0081 = 443;
		String requestFile0081 = "/ui/homepage3/resources_A5340237F9A603BDB523F8A2CE927FB6/sap/sf/homepage3/core/css/homepage3.css";
		String requestHeader0081 = "GET " + requestFile0081 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0081, requestHost0081, requestPort0081, requestHeader0081, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0081 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 3516
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [81] <- Index 81
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [82] <- WEB ADMIN Index 82 ---
		String requestProt0082 = "https";
		String requestHost0082 = "performancemanager4.successfactors.com";
		int    requestPort0082 = 443;
		String requestFile0082 = "/public/ui-dcss/Teck/_/3l!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library-parameters.json";
		requestFile0082 = Lib.replaceTextPattern(requestFile0082, "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!", C_belieze2, 0);		// search and replace request file fragment "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!" with variable 'C_belieze2' on all occurrences
		requestFile0082 = Lib.replaceTextPattern(requestFile0082, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0082 = "GET " + requestFile0082 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001da80d22b-c0b2-4910-b82e-29442abce42729820909-1501-babe-face-0000000000030ad972a3-3992-441a-a524-8f0b289c3827HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0082, requestHost0082, requestPort0082, requestHeader0082, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0082 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 54031
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [82] <- Index 82
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [83] <- WEB ADMIN Index 83 ---
		String requestProt0083 = "https";
		String requestHost0083 = "performancemanager4.successfactors.com";
		int    requestPort0083 = 443;
		String requestFile0083 = "/public/ui-dcss/Teck/_/3l!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library-parameters.json";
		requestFile0083 = Lib.replaceTextPattern(requestFile0083, "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!", C_belieze2, 0);		// search and replace request file fragment "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!" with variable 'C_belieze2' on all occurrences
		requestFile0083 = Lib.replaceTextPattern(requestFile0083, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0083 = "GET " + requestFile0083 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 010005000148cae269-64b2-46ba-9525-04022d62222a29820909-1501-babe-face-0000000000031c577269-6e22-442e-8329-b74727d0542fHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0083, requestHost0083, requestPort0083, requestHeader0083, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0083 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 16936
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [83] <- Index 83
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [84] <- WEB ADMIN Index 84 ---
		String requestProt0084 = "https";
		String requestHost0084 = "performancemanager4.successfactors.com";
		int    requestPort0084 = 443;
		String requestFile0084 = "/ui/homepage3/resources_BC534AFF1C78D2852F6E6247898C3C7E/sap/ushell/themes/sap_belize/library-parameters.json";
		String requestHeader0084 = "GET " + requestFile0084 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001f271828d-8202-4cec-9224-a4ea2038772929820909-1501-babe-face-00000000000381c282d8-6252-48cd-8628-14d52cb1e32cHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0084, requestHost0084, requestPort0084, requestHeader0084, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0084 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 10901
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [84] <- Index 84
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [85] <- WEB ADMIN Index 85 ---
		String requestProt0085 = "https";
		String requestHost0085 = "performancemanager4.successfactors.com";
		int    requestPort0085 = 443;
		String requestFile0085 = "/ui/homepage3/resources_B9DB6696EC83C7A2651CEE8087CCB8DF/sap/sf/homepage3/commons/themes/sap_belize/library-parameters.json";
		requestFile0085 = Lib.replaceTextPattern(requestFile0085, "B9DB6696EC83C7A2651CEE8087CCB8DF", C_Merge2, 0);		// search and replace request file fragment "B9DB6696EC83C7A2651CEE8087CCB8DF" with variable 'C_Merge2' on all occurrences

		String requestHeader0085 = "GET " + requestFile0085 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001e59c4235-f6c2-4003-b72c-2b392240f42629820909-1501-babe-face-00000000000373dd62ed-9c72-4ced-b82b-489d2a5f1526HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0085, requestHost0085, requestPort0085, requestHeader0085, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0085 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 57
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [85] <- Index 85
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [86] <- WEB ADMIN Index 86 ---
		String requestProt0086 = "https";
		String requestHost0086 = "performancemanager4.successfactors.com";
		int    requestPort0086 = 443;
		String requestFile0086 = "/xi/ui/commonshell/pages/smrf.xhtml" +
				"?js%5B%5D=%2Fui%2Fjuic%2Fjs%2Fcomponents%2FsfDom.js";
		String requestHeader0086 = "GET " + requestFile0086 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 010005000117a09229-c0b2-4a57-9a24-f42b2386342029820909-1501-babe-face-00000000000377427226-88c2-49c9-9921-1f7d2c91f829HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0086, requestHost0086, requestPort0086, requestHeader0086, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0086 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3460
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [86] <- Index 86
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [87] <- WEB ADMIN Index 87 ---
		String requestProt0087 = "https";
		String requestHost0087 = "performancemanager4.successfactors.com";
		int    requestPort0087 = 443;
		String requestFile0087 = "/ui/sapui5/main_1.65.5/sap/ui/core/mimes/logo/sap_50x26.png";
		String requestHeader0087 = "GET " + requestFile0087 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0087, requestHost0087, requestPort0087, requestHeader0087, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0087 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 1652
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [87] <- Index 87
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [88] <- WEB ADMIN Index 88 ---
		String requestProt0088 = "https";
		String requestHost0088 = "performancemanager4.successfactors.com";
		int    requestPort0088 = 443;
		String requestFile0088 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TIP";
		String requestHeader0088 = "GET " + requestFile0088 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0088, requestHost0088, requestPort0088, requestHeader0088, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0088 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [88] <- Index 88
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [89] <- WEB ADMIN Index 89 ---
		String requestProt0089 = "https";
		String requestHost0089 = "performancemanager4.successfactors.com";
		int    requestPort0089 = 443;
		String requestFile0089 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TML";
		String requestHeader0089 = "GET " + requestFile0089 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0089, requestHost0089, requestPort0089, requestHeader0089, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0089 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [89] <- Index 89
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [90] <- WEB ADMIN Index 90 ---
		String requestProt0090 = "https";
		String requestHost0090 = "performancemanager4.successfactors.com";
		int    requestPort0090 = 443;
		String requestFile0090 = "/messagebundle/Teck/vmod_e2e8ba6a-687f8c91/sap.m!/ui/sapui5/main/sap/m/messagebundle_en_US.properties";
		String requestHeader0090 = "GET " + requestFile0090 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001ce8fd280-63f2-44fe-ae20-77a023d9b82d29820909-1501-babe-face-00000000000339580231-0a72-46cb-9a29-cd67224cc722HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0090, requestHost0090, requestPort0090, requestHeader0090, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0090 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 7291
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [90] <- Index 90
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [91] <- WEB ADMIN Index 91 ---
		String requestProt0091 = "https";
		String requestHost0091 = "performancemanager4.successfactors.com";
		int    requestPort0091 = 443;
		String requestFile0091 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/util/PanelManager.js";
		String requestHeader0091 = "GET " + requestFile0091 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001685e0227-1ce2-42ee-872d-b03e28a0c02029820909-1501-babe-face-000000000003a672724e-9cf2-4bc3-9b2a-dd4225c1f321HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0091, requestHost0091, requestPort0091, requestHeader0091, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0091 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1655
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [91] <- Index 91
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [92] <- WEB ADMIN Index 92 ---
		String requestProt0092 = "https";
		String requestHost0092 = "performancemanager4.successfactors.com";
		int    requestPort0092 = 443;
		String requestFile0092 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/util/Util.js";
		String requestHeader0092 = "GET " + requestFile0092 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 010005000116eee218-a3d2-4a52-992e-e0cd2469962429820909-1501-babe-face-00000000000301d1c26c-b9b2-4c4b-ad21-90e7279f4924HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0092, requestHost0092, requestPort0092, requestHeader0092, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0092 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 649
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [92] <- Index 92
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [93] <- WEB ADMIN Index 93 ---
		String requestProt0093 = "https";
		String requestHost0093 = "performancemanager4.successfactors.com";
		int    requestPort0093 = 443;
		String requestFile0093 = "/messagebundle/Teck/vmod_9c186cdb-687f8c91/ui/todo/resources/sap/sf/todo/i18n/messagebundle_en_US.properties";
		String requestHeader0093 = "GET " + requestFile0093 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001d8897240-64a2-4d10-bf25-9176264f492629820909-1501-babe-face-000000000003467542d0-fc52-424f-882b-48d626113821HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0093, requestHost0093, requestPort0093, requestHeader0093, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0093 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 1472
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [93] <- Index 93
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [94] <- WEB ADMIN Index 94 ---
		String requestProt0094 = "https";
		String requestHost0094 = "performancemanager4.successfactors.com";
		int    requestPort0094 = 443;
		String requestFile0094 = "/messagebundle/Teck/vmod_50ea048d-687f8c91/ui/homepage3/resources/sap/sf/homepage3/app/i18n/messagebundle_en_US.properties";
		String requestHeader0094 = "GET " + requestFile0094 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001c24e3276-9522-49d2-b22c-f8cb2dabf12c29820909-1501-babe-face-000000000003072c1241-b0d2-4662-b82f-3e512caebe22HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0094, requestHost0094, requestPort0094, requestHeader0094, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0094 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 3033
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [94] <- Index 94
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [95] <- WEB ADMIN Index 95 ---
		String requestProt0095 = "https";
		String requestHost0095 = "performancemanager4.successfactors.com";
		int    requestPort0095 = 443;
		String requestFile0095 = "/xi/ajax/remoting/call/plaincall/homepage3ControllerProxy.getTileInitializer.dwr" +
				"?_s.crb=" + C_AjaxsecKey1;		// recorded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d
		requestFile0095 = Lib.replaceTextPattern(requestFile0095, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'vScrb' on all occurrences
		requestFile0095 = Lib.replaceTextPattern(requestFile0095, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1, 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'C_AjaxsecKey1' on all occurrences

		String requestContent0095 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/?_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42367" + "\r\n" + 
				"c0-scriptName=homepage3ControllerProxy" + "\r\n" + 
				"c0-methodName=getTileInitializer" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=null:null" + "\r\n" + 
				"batchId=0";
		requestContent0095 = Lib.replaceTextPattern(requestContent0095, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0095_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0095 = new String(Lib.binaryReplace(requestContent0095.getBytes(), binarySearchPattern0095_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0095 = "POST " + requestFile0095 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0095.length() + "\r\n" + 		// Content-Length: 237
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001db9ca2f5-d8c2-428d-9423-0b04297bbd2929820909-1501-babe-face-000000000003f1f4f2ed-47f2-4ad9-8023-b2c82ed71a24HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0095, requestHost0095, requestPort0095, requestHeader0095, requestContent0095.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0095 = null;		// support garbage collector to reduce memory
		requestContent0095 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3143
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [95] <- Index 95
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [96] <- WEB ADMIN Index 96 ---
		String requestProt0096 = "https";
		String requestHost0096 = "performancemanager4.successfactors.com";
		int    requestPort0096 = 443;
		String requestFile0096 = "/messagebundle/Teck/vmod_9fe0f5e0-687f8c91/ui/surj/resources/sap/sf/surj/shell/i18n/messagebundle_en_US.properties";
		String requestHeader0096 = "GET " + requestFile0096 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 01000500017b46a2a7-c1e2-416e-b522-08952e24d22429820909-1501-babe-face-00000000000356c56214-d332-4f79-b22a-cf452114db2eHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0096, requestHost0096, requestPort0096, requestHeader0096, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0096 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 4076
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [96] <- Index 96
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [97] <- WEB ADMIN Index 97 ---
		String requestProt0097 = "https";
		String requestHost0097 = "performancemanager4.successfactors.com";
		int    requestPort0097 = 443;
		String requestFile0097 = "/xi/ajax/remoting/call/plaincall/globalNotificationControllerProxy.getNumberOfNewNotifications.dwr" +
				"?_s.crb=" + C_AjaxsecKey1;		// recorded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d
		requestFile0097 = Lib.replaceTextPattern(requestFile0097, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'vScrb' on all occurrences
		requestFile0097 = Lib.replaceTextPattern(requestFile0097, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1, 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'C_AjaxsecKey1' on all occurrences

		String requestContent0097 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/?_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42367" + "\r\n" + 
				"c0-scriptName=globalNotificationControllerProxy" + "\r\n" + 
				"c0-methodName=getNumberOfNewNotifications" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:TestAutomation" + "\r\n" + 
				"batchId=1";
		requestContent0097 = Lib.replaceTextPattern(requestContent0097, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0097_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0097 = new String(Lib.binaryReplace(requestContent0097.getBytes(), binarySearchPattern0097_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0097 = "POST " + requestFile0097 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0097.length() + "\r\n" + 		// Content-Length: 267
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001019f32e0-6142-4ddc-b422-2e0d2b1af32d29820909-1501-babe-face-000000000003dd11f2db-d922-40a2-9f29-da112318352aHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0097, requestHost0097, requestPort0097, requestHeader0097, requestContent0097.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0097 = null;		// support garbage collector to reduce memory
		requestContent0097 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 114
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [97] <- Index 97
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 3 of 4)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [98] <- WEB ADMIN Index 98 ---
		String requestProt0098 = "https";
		String requestHost0098 = "performancemanager4.successfactors.com";
		int    requestPort0098 = 443;
		String requestFile0098 = "/xi/ajax/remoting/call/plaincall/showMeControllerProxy.signAPIUrl.dwr" +
				"?_s.crb=" + C_AjaxsecKey1;		// recorded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d
		requestFile0098 = Lib.replaceTextPattern(requestFile0098, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'vScrb' on all occurrences
		requestFile0098 = Lib.replaceTextPattern(requestFile0098, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1, 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'C_AjaxsecKey1' on all occurrences

		String requestContent0098 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/?_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42367" + "\r\n" + 
				"c0-scriptName=showMeControllerProxy" + "\r\n" + 
				"c0-methodName=signAPIUrl" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:%2Fmedia%2Fshowme_ab3a783e_706e_40dd_a87a_a8283cabf42b%2FHOME_TAB%2Fstatus" + "\r\n" + 
				"c0-param1=string:HOME_TAB" + "\r\n" + 
				"c0-param2=string:727a1820ae53fe16b4a90eb72d5a4387" + "\r\n" + 
				"batchId=2";
		requestContent0098 = Lib.replaceTextPattern(requestContent0098, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences
		requestContent0098 = Lib.replaceTextPattern(requestContent0098, "ab3a783e_706e_40dd_a87a_a8283cabf42b", C_Showme, 0);		// search and replace content fragment "ab3a783e_706e_40dd_a87a_a8283cabf42b" with variable 'C_Showme' on all occurrences

		byte[] binarySearchPattern0098_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0098 = new String(Lib.binaryReplace(requestContent0098.getBytes(), binarySearchPattern0098_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0098 = "POST " + requestFile0098 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0098.length() + "\r\n" + 		// Content-Length: 374
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001ac6b4250-c402-4ac2-b82d-15492986a92529820909-1501-babe-face-0000000000034bab42eb-b752-4683-ac20-24662e98f622HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0098, requestHost0098, requestPort0098, requestHeader0098, requestContent0098.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0098 = null;		// support garbage collector to reduce memory
		requestContent0098 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 420
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [98] <- Index 98
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Token1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0098_1 = new BoundaryBasedExtractorItem( "token=" , "\");",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0098_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Token1'
			C_Token1 = boundaryBasedContentExtractorItem0098_1.getResultText();
			log("<<< C_Token1 = " + C_Token1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Token1!= null && C_Token1.trim().length() == 0)
			{
				C_Token1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Token1' ends up with an empty string - a substitute value was set");
				log("<<< C_Token1 = " + C_Token1);
			}
		}
		catch (Exception e) { C_Token1 = null; log(e); }
		if (C_Token1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Token1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [99] <- WEB ADMIN Index 99 ---
		String requestProt0099 = "https";
		String requestHost0099 = "clients1.google.com";
		int    requestPort0099 = 443;
		String requestFile0099 = "/tbproxy/af/query" +
				"?q=Chc2LjEuMTcxNS4xNDQyL2VuIChHR0xMKRMZ2ImInKWhh70jLSXe4rQkFA==";
		String requestHeader0099 = "GET " + requestFile0099 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: clients1.google.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"X-Goog-Api-Key: AIzaSyBOti4mM-6x9WDnZIjIeyEU21OpBXqWBgw\r\n" + 
				"X-Client-Data: CJW2yQEIpLbJAQjEtskBCKmdygEI/J/KAQjiqMoBCMqvygEIzrDKAQj3tMoB\r\n" + 
				"Sec-Fetch-Site: none\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0099, requestHost0099, requestPort0099, requestHeader0099, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0099 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PROTO", header text fragment = [verification disabled], recorded content size = 25
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PROTO", null, null);		// Test [99] <- Index 99
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [100] <- WEB ADMIN Index 100 ---
		String requestProt0100 = "https";
		String requestHost0100 = "performancemanager4.successfactors.com";
		int    requestPort0100 = 443;
		String requestFile0100 = "/public/ui-dcss/Teck/_/3l!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		requestFile0100 = Lib.replaceTextPattern(requestFile0100, "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!", C_belieze2, 0);		// search and replace request file fragment "!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!" with variable 'C_belieze2' on all occurrences
		requestFile0100 = Lib.replaceTextPattern(requestFile0100, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0100 = "GET " + requestFile0100 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0100, requestHost0100, requestPort0100, requestHeader0100, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!3xo4Ba!", C_belieze2);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FD3E69DB8103A603EC04DBBA1D636582", C_Merge1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0100 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [100] <- Index 100
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [101] <- WEB ADMIN Index 101 ---
		String requestProt0101 = "https";
		String requestHost0101 = "performancemanager4.successfactors.com";
		int    requestPort0101 = 443;
		String requestFile0101 = "/companyLogoServlet/" +
				"?companyId=Teck";
		String requestHeader0101 = "GET " + requestFile0101 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0101, requestHost0101, requestPort0101, requestHeader0101, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0101 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 2609
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [101] <- Index 101
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [102] <- WEB ADMIN Index 102 ---
		String requestProt0102 = "https";
		String requestHost0102 = "performancemanager4.successfactors.com";
		int    requestPort0102 = 443;
		String requestFile0102 = "/ui/smrf/js/smrf_cfafb3b7324cd76f1eefb96594e7b183.js";
		String requestHeader0102 = "GET " + requestFile0102 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0102, requestHost0102, requestPort0102, requestHeader0102, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0102 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2079
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [102] <- Index 102
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [103] <- WEB ADMIN Index 103 ---
		String requestProt0103 = "https";
		String requestHost0103 = "performancemanager4.successfactors.com";
		int    requestPort0103 = 443;
		String requestFile0103 = "/ui/sfgrp/css/juicGlobal_fe32c31f4282fdbb81e71d8db1068b60.css";
		String requestHeader0103 = "GET " + requestFile0103 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0103, requestHost0103, requestPort0103, requestHeader0103, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0103 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 12186
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [103] <- Index 103
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [104] <- WEB ADMIN Index 104 ---
		String requestProt0104 = "https";
		String requestHost0104 = "performancemanager4.successfactors.com";
		int    requestPort0104 = 443;
		String requestFile0104 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/model/ApvReqModel.js";
		String requestHeader0104 = "GET " + requestFile0104 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0104, requestHost0104, requestPort0104, requestHeader0104, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0104 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 343
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [104] <- Index 104
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [105] <- WEB ADMIN Index 105 ---
		String requestProt0105 = "https";
		String requestHost0105 = "performancemanager4.successfactors.com";
		int    requestPort0105 = 443;
		String requestFile0105 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/model/LearningModel.js";
		String requestHeader0105 = "GET " + requestFile0105 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0105, requestHost0105, requestPort0105, requestHeader0105, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0105 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 342
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [105] <- Index 105
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [106] <- WEB ADMIN Index 106 ---
		String requestProt0106 = "https";
		String requestHost0106 = "performancemanager4.successfactors.com";
		int    requestPort0106 = 443;
		String requestFile0106 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/model/OnboardingModel.js";
		String requestHeader0106 = "GET " + requestFile0106 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0106, requestHost0106, requestPort0106, requestHeader0106, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0106 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 405
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [106] <- Index 106
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [107] <- WEB ADMIN Index 107 ---
		String requestProt0107 = "https";
		String requestHost0107 = "performancemanager4.successfactors.com";
		int    requestPort0107 = 443;
		String requestFile0107 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/model/PayrollHireModel.js";
		String requestHeader0107 = "GET " + requestFile0107 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0107, requestHost0107, requestPort0107, requestHeader0107, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0107 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 347
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [107] <- Index 107
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [108] <- WEB ADMIN Index 108 ---
		String requestProt0108 = "https";
		String requestHost0108 = "performancemanager4.successfactors.com";
		int    requestPort0108 = 443;
		String requestFile0108 = "/ui/sapui5/main_1.65.5/sap/ui/core/cldr/en.json";
		String requestHeader0108 = "GET " + requestFile0108 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001f9a8a252-4482-4e4d-a12c-268b21a8ed2c29820909-1501-babe-face-0000000000033d16824a-4672-4eb7-bd21-99bf2a32002dHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0108, requestHost0108, requestPort0108, requestHeader0108, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0108 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 17094
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [108] <- Index 108
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [109] <- WEB ADMIN Index 109 ---
		String requestProt0109 = "https";
		String requestHost0109 = "performancemanager4.successfactors.com";
		int    requestPort0109 = 443;
		String requestFile0109 = "/xi/ajax/remoting/call/plaincall/hp3TourControllerProxy.getTourPreference.dwr" +
				"?_s.crb=" + C_AjaxsecKey1;		// recorded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d
		requestFile0109 = Lib.replaceTextPattern(requestFile0109, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'vScrb' on all occurrences
		requestFile0109 = Lib.replaceTextPattern(requestFile0109, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1, 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'C_AjaxsecKey1' on all occurrences

		String requestContent0109 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/?_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42367" + "\r\n" + 
				"c0-scriptName=hp3TourControllerProxy" + "\r\n" + 
				"c0-methodName=getTourPreference" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=3";
		requestContent0109 = Lib.replaceTextPattern(requestContent0109, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0109_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0109 = new String(Lib.binaryReplace(requestContent0109.getBytes(), binarySearchPattern0109_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0109 = "POST " + requestFile0109 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0109.length() + "\r\n" + 		// Content-Length: 214
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001fa17e280-c9b2-445f-b12c-4b9f26ceac2e29820909-1501-babe-face-0000000000038e53029d-c102-4cc4-af25-a52c2059952dHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0109, requestHost0109, requestPort0109, requestHeader0109, requestContent0109.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0109 = null;		// support garbage collector to reduce memory
		requestContent0109 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 170
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [109] <- Index 109
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [110] <- WEB ADMIN Index 110 ---
		String requestProt0110 = "https";
		String requestHost0110 = "performancemanager4.successfactors.com";
		int    requestPort0110 = 443;
		String requestFile0110 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/model/ThirdPartyModel.js";
		String requestHeader0110 = "GET " + requestFile0110 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0110, requestHost0110, requestPort0110, requestHeader0110, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0110 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [110] <- Index 110
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [111] <- WEB ADMIN Index 111 ---
		String requestProt0111 = "https";
		String requestHost0111 = "performancemanager4.successfactors.com";
		int    requestPort0111 = 443;
		String requestFile0111 = "/odata/v2/restricted/AttachmentInternal,COAHStatusBean,COAdminLinkItemBean,COAdminTileLinkBean,COAdminTileLinkListBean,SLActivityBean,SLEmpActivitiesBean,SLEmpActivitiesBeanList,Tour,changeFavoriteLink,getAdminTileLinks,getInternalJobPostingCount,getPreApprovedJobReqCount,getSLActivityList/getInternalJobPostingCount" +
				"?%24format=json" +
				"&_=1575486736181";
		String requestHeader0111 = "GET " + requestFile0111 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 01000500010f547293-a052-40cf-8428-63d32a28af2b29820909-1501-babe-face-0000000000031f40622d-0a32-4d1a-9d2d-13f926fd382cHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0111, requestHost0111, requestPort0111, requestHeader0111, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0111 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 65
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"getInternalJobPostingCount\" :");		// Test [111] <- Index 111
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [112] <- WEB ADMIN Index 112 ---
		String requestProt0112 = "https";
		String requestHost0112 = "performancemanager4.successfactors.com";
		int    requestPort0112 = 443;
		String requestFile0112 = "/odata/v2/restricted/AttachmentInternal,COAHStatusBean,COAdminLinkItemBean,COAdminTileLinkBean,COAdminTileLinkListBean,SLActivityBean,SLEmpActivitiesBean,SLEmpActivitiesBeanList,Tour,changeFavoriteLink,getAdminTileLinks,getInternalJobPostingCount,getPreApprovedJobReqCount,getSLActivityList/Tour" +
				"?%24format=json" +
				"&_=1575486736182";
		String requestHeader0112 = "GET " + requestFile0112 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 0100050001bf7682a9-5052-4e10-b52b-72d92a1c882929820909-1501-babe-face-000000000003f7a0c254-7362-4251-b526-4e4e2ee87c20HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0112, requestHost0112, requestPort0112, requestHeader0112, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0112 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 47
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"results\" : [");		// Test [112] <- Index 112
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [113] <- WEB ADMIN Index 113 ---
		String requestProt0113 = "https";
		String requestHost0113 = "performancemanager4.successfactors.com";
		int    requestPort0113 = 443;
		String requestFile0113 = "/ui/todo/resources_E47E438691071751B61CB4773807A846/sap/sf/todo/popup/service/DueDateHelper.js";
		String requestHeader0113 = "GET " + requestFile0113 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0113, requestHost0113, requestPort0113, requestHeader0113, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0113 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 820
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [113] <- Index 113
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [114] <- WEB ADMIN Index 114 ---
		String requestProt0114 = "https";
		String requestHost0114 = "performancemanager4.successfactors.com";
		int    requestPort0114 = 443;
		String requestFile0114 = "/ui/juic/js/Util_c628076f6686d02db00e973ccd944d56.js";
		String requestHeader0114 = "GET " + requestFile0114 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0114, requestHost0114, requestPort0114, requestHeader0114, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0114 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6276
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [114] <- Index 114
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [115] <- WEB ADMIN Index 115 ---
		String requestProt0115 = "https";
		String requestHost0115 = "performancemanager4.successfactors.com";
		int    requestPort0115 = 443;
		String requestFile0115 = "/odata/v2/restricted/TodoEntryV2,WfRequest/TodoEntryV2/$count" +
				"?%24filter=categoryId%20in%20%2714%27%2C%2717%27%2C%2718%27%2C%2721%27%2C%2724%27%2C%2725%27%2C%2729%27%2C%2739%27%2C%2746%27%20and%20status%20eq%202%20and%20wfRequestNav%2FwfRequestId%20ne%20null";
		String requestHeader0115 = "GET " + requestFile0115 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-CSRF-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 010005000147108278-6942-4c82-b32e-2ad4281ccb2029820909-1501-babe-face-00000000000304a0d24b-7a02-47bb-a32b-c2842b037c28HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0115, requestHost0115, requestPort0115, requestHeader0115, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0115 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 21
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [115] <- Index 115
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [116] <- WEB ADMIN Index 116 ---
		String requestProt0116 = "https";
		String requestHost0116 = "performancemanager4.successfactors.com";
		int    requestPort0116 = 443;
		String requestFile0116 = "/xi/ajax/remoting/call/plaincall/hp3TodoPanelControllerProxy.getLearningTodoDetails.dwr" +
				"?_s.crb=" + C_AjaxsecKey1;		// recorded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d
		requestFile0116 = Lib.replaceTextPattern(requestFile0116, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'vScrb' on all occurrences
		requestFile0116 = Lib.replaceTextPattern(requestFile0116, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1, 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'C_AjaxsecKey1' on all occurrences

		String requestContent0116 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/?_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42367" + "\r\n" + 
				"c0-scriptName=hp3TodoPanelControllerProxy" + "\r\n" + 
				"c0-methodName=getLearningTodoDetails" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=4";
		requestContent0116 = Lib.replaceTextPattern(requestContent0116, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0116_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0116 = new String(Lib.binaryReplace(requestContent0116.getBytes(), binarySearchPattern0116_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0116 = "POST " + requestFile0116 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0116.length() + "\r\n" + 		// Content-Length: 224
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 01000500018ca9326c-c522-4761-8c25-2d0f26a15f2f29820909-1501-babe-face-0000000000036f324246-5742-4ee8-bc2b-62ab2278052cHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0116, requestHost0116, requestPort0116, requestHeader0116, requestContent0116.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0116 = null;		// support garbage collector to reduce memory
		requestContent0116 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 163
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [116] <- Index 116
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [117] <- WEB ADMIN Index 117 ---
		String requestProt0117 = "https";
		String requestHost0117 = "performancemanager4.successfactors.com";
		int    requestPort0117 = 443;
		String requestFile0117 = "/xi/ajax/remoting/call/plaincall/OnboardingHP3TileControllerProxy.getOnboardingTasksTile.dwr" +
				"?_s.crb=" + C_AjaxsecKey1;		// recorded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d
		requestFile0117 = Lib.replaceTextPattern(requestFile0117, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'vScrb' on all occurrences
		requestFile0117 = Lib.replaceTextPattern(requestFile0117, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1, 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'C_AjaxsecKey1' on all occurrences

		String requestContent0117 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/?_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42367" + "\r\n" + 
				"c0-scriptName=OnboardingHP3TileControllerProxy" + "\r\n" + 
				"c0-methodName=getOnboardingTasksTile" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=5";
		requestContent0117 = Lib.replaceTextPattern(requestContent0117, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0117_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0117 = new String(Lib.binaryReplace(requestContent0117.getBytes(), binarySearchPattern0117_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0117 = "POST " + requestFile0117 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0117.length() + "\r\n" + 		// Content-Length: 229
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 01000500015b8d6279-6182-48a4-af24-7ab32cd2142929820909-1501-babe-face-000000000003e820129e-d3e2-4033-8c25-7d7d2fa5e52eHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"viewId: /ui/homepage3/pages/index.xhtml\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0117, requestHost0117, requestPort0117, requestHeader0117, requestContent0117.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0117 = null;		// support garbage collector to reduce memory
		requestContent0117 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 117
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [117] <- Index 117
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #3 (fragment 4 of 4)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [118] <- WEB ADMIN Index 118 ---
		String requestProt0118 = "https";
		String requestHost0118 = "performancemanager4.successfactors.com";
		int    requestPort0118 = 443;
		String requestFile0118 = "/odata/v2/restricted/TodoEntryV2" +
				"?%24filter=categoryId%20eq%2057%20and%20status%20eq%202" +
				"&%24orderby=dueDate" +
				"&%24select=dueDate";
		String requestHeader0118 = "GET " + requestFile0118 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-CSRF-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"OPTR_CXT: 01000500019473b290-a7e2-4672-9124-f9612e88f22a29820909-1501-babe-face-0000000000035f42a255-4dc2-4f8e-bf2f-2f062df8172fHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0118, requestHost0118, requestPort0118, requestHeader0118, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0118 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 47
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [118] <- Index 118
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [119] <- WEB ADMIN Index 119 ---
		String requestProt0119 = "https";
		String requestHost0119 = "mediaservicesfmsprod.ms.successfactors.com";
		int    requestPort0119 = 443;
		String requestFile0119 = "/mediaservice/api/v2/media/showme_ab3a783e_706e_40dd_a87a_a8283cabf42b/HOME_TAB/status" +
				"?token=" + C_Token1 +		// recorded value = 4791031bf5e6c7cae814055df37efd51db41ea0949683b50793036b48b15e31afedaccf7b750bc82cfbbcfbd9f32b1ac4ed5f90775084573e70dfc819b5544b6,-8458662312209791380,1575488538,1
				"&callback=sfDeferredUtilCallback6";
		requestFile0119 = Lib.replaceTextPattern(requestFile0119, "4791031bf5e6c7cae814055df37efd51db41ea0949683b50793036b48b15e31afedaccf7b750bc82cfbbcfbd9f32b1ac4ed5f90775084573e70dfc819b5544b6,-8458662312209791380,1575488538,1", C_Token1, 0);		// search and replace request file fragment "4791031bf5e6c7cae814055df37efd51db41ea0949683b50793036b48b15e31afedaccf7b750bc82cfbbcfbd9f32b1ac4ed5f90775084573e70dfc819b5544b6,-8458662312209791380,1575488538,1" with variable 'C_Token1' on all occurrences
		requestFile0119 = Lib.replaceTextPattern(requestFile0119, "ab3a783e_706e_40dd_a87a_a8283cabf42b", C_Showme, 0);		// search and replace request file fragment "ab3a783e_706e_40dd_a87a_a8283cabf42b" with variable 'C_Showme' on all occurrences

		String requestHeader0119 = "GET " + requestFile0119 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mediaservicesfmsprod.ms.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0119, requestHost0119, requestPort0119, requestHeader0119, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0119 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 128
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [119] <- Index 119
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [120] <- WEB ADMIN Index 120 ---
		String requestProt0120 = "https";
		String requestHost0120 = "performancemanager4.successfactors.com";
		int    requestPort0120 = 443;
		String requestFile0120 = "/ui/juic/js/core/component_ca4231790bc781dc49a1857b2a4e24d5.js";
		String requestHeader0120 = "GET " + requestFile0120 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0120, requestHost0120, requestPort0120, requestHeader0120, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0120 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3105
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [120] <- Index 120
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [121] <- WEB ADMIN Index 121 ---
		String requestProt0121 = "https";
		String requestHost0121 = "performancemanager4.successfactors.com";
		int    requestPort0121 = 443;
		String requestFile0121 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TSL";
		String requestHeader0121 = "GET " + requestFile0121 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0121, requestHost0121, requestPort0121, requestHeader0121, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0121 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [121] <- Index 121
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [122] <- WEB ADMIN Index 122 ---
		String requestProt0122 = "https";
		String requestHost0122 = "performancemanager4.successfactors.com";
		int    requestPort0122 = 443;
		String requestFile0122 = "/perfLogServlet" +
				"?callId=4391844720-1" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&TRS=776" +
				"&TIP=1255" +
				"&TML=1255" +
				"&TSL=3015" +
				"&ST=1575486736550" +
				"&ET=1575486739181" +
				"&MEM=63497" +
				"&NRE=174" +
				"&NWR=71" +
				"&SCPU=10" +
				"&SQLC=65" +
				"&SQLT=63" +
				"&SVT=333" +
				"&UCPU=150" +
				"&CPU=160" +
				"&FRE=1" +
				"&FWR=0" +
				"&jsNum=29" +
				"&cssNum=11" +
				"&renderTime=2529";
		String requestContent0122 = 
				"OPTR_INFO=00fe5280-b082-4a50-b125-0d482d8f3622!1575486736550!1575486736594!0" +
				"&OPTR_INFO=a4694247-94a2-4a34-912c-cb01268cdf22!1575486736604!1575486736685!0" +
				"&OPTR_INFO=886062c5-d3c2-4adf-bf23-b8822eedeb22!1575486736688!1575486736739!0" +
				"&OPTR_INFO=dcf63282-ce62-4653-8f22-2aa22e51e820!1575486736740!1575486736784!0" +
				"&OPTR_INFO=342d52a4-65d2-44c1-b82d-f91e21ddd525!1575486736785!1575486736828!0" +
				"&OPTR_INFO=151be232-64c2-4801-9c25-ec11200c0b2c!1575486736835!1575486736840!0" +
				"&OPTR_INFO=2290422f-bd12-4bd7-b826-4a3c2c733b2a!1575486736933!1575486736990!0" +
				"&OPTR_INFO=7e3042ec-a6e2-422f-bf29-62b525ccea28!1575486737005!1575486737047!0" +
				"&OPTR_INFO=da80d22b-c0b2-4910-b82e-29442abce427!1575486737076!1575486737131!0" +
				"&OPTR_INFO=ccac32af-6d42-4430-902d-75682df5d422!1575486737134!1575486737137!0" +
				"&OPTR_INFO=8a9042ed-23b2-423e-8320-788b2c478e26!1575486737138!1575486737140!0" +
				"&OPTR_INFO=48cae269-64b2-46ba-9525-04022d62222a!1575486737141!1575486737190!0" +
				"&OPTR_INFO=f271828d-8202-4cec-9224-a4ea20387729!1575486737192!1575486737239!0" +
				"&OPTR_INFO=e59c4235-f6c2-4003-b72c-2b392240f426!1575486737241!1575486737287!0" +
				"&OPTR_INFO=211992a4-1aa2-43a0-ae24-b54824145121!1575486737288!1575486737291!0" +
				"&OPTR_INFO=17a09229-c0b2-4a57-9a24-f42b23863420!1575486737324!1575486738059!0" +
				"&OPTR_INFO=ce8fd280-63f2-44fe-ae20-77a023d9b82d!1575486737376!1575486737509!0" +
				"&OPTR_INFO=685e0227-1ce2-42ee-872d-b03e28a0c020!1575486737530!1575486737596!0" +
				"&OPTR_INFO=16eee218-a3d2-4a52-992e-e0cd24699624!1575486737599!1575486737642!0" +
				"&OPTR_INFO=d8897240-64a2-4d10-bf25-9176264f4926!1575486737643!1575486737791!0" +
				"&OPTR_INFO=c24e3276-9522-49d2-b22c-f8cb2dabf12c!1575486737799!1575486738009!0" +
				"&OPTR_INFO=db9ca2f5-d8c2-428d-9423-0b04297bbd29!1575486738031!1575486738527!0" +
				"&OPTR_INFO=7b46a2a7-c1e2-416e-b522-08952e24d224!1575486738063!1575486738356!0" +
				"&OPTR_INFO=019f32e0-6142-4ddc-b422-2e0d2b1af32d!1575486738388!1575486738518!0" +
				"&OPTR_INFO=ac6b4250-c402-4ac2-b82d-15492986a925!1575486738389!1575486738531!0" +
				"&OPTR_INFO=fa17e280-c9b2-445f-b12c-4b9f26ceac2e!1575486738631!1575486738776!0" +
				"&OPTR_INFO=f9a8a252-4482-4e4d-a12c-268b21a8ed2c!1575486738646!1575486738731!0" +
				"&OPTR_INFO=0f547293-a052-40cf-8428-63d32a28af2b!1575486738772!1575486739076!0" +
				"&OPTR_INFO=bf7682a9-5052-4e10-b52b-72d92a1c8829!1575486738796!1575486739046!0" +
				"&OPTR_INFO=47108278-6942-4c82-b32e-2ad4281ccb20!1575486738876!1575486739069!0" +
				"&OPTR_INFO=8ca9326c-c522-4761-8c25-2d0f26a15f2f!1575486738877!1575486739038!0" +
				"&OPTR_INFO=5b8d6279-6182-48a4-af24-7ab32cd21429!1575486738878!1575486739019!0" +
				"&OPTR_INFO=9473b290-a7e2-4672-9124-f9612e88f22a!1575486738879!1575486739079!0";
		String requestHeader0122 = "POST " + requestFile0122 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0122.length() + "\r\n" + 		// Content-Length: 2540
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141215-664347-1\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0122, requestHost0122, requestPort0122, requestHeader0122, requestContent0122.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0122 = null;		// support garbage collector to reduce memory
		requestContent0122 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [122] <- Index 122
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [123] <- WEB ADMIN Index 123 ---
		String requestProt0123 = "https";
		String requestHost0123 = "performancemanager4.successfactors.com";
		int    requestPort0123 = 443;
		String requestFile0123 = "/ui/sfgrp/js/juicUtils_9a6794ee067de934138170d9a5fdb2d8.js";
		String requestHeader0123 = "GET " + requestFile0123 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0123, requestHost0123, requestPort0123, requestHeader0123, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0123 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 27169
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [123] <- Index 123
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #4: Reporting
		// # ------------------



		// --- HTTP REQUEST: Test [125] <- WEB ADMIN Index 125 ---
		String requestProt0125 = "https";
		String requestHost0125 = "performancemanager4.successfactors.com";
		int    requestPort0125 = 443;
		String requestFile0125 = "/xi/ui/reportcenter/pages/reportCenter.xhtml" +
				"?bplte_company=Teck" +
				"&_s.crb=" + java.net.URLEncoder.encode(C_AjaxsecKey1);		// recorded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestFile0125 = Lib.replaceTextPattern(requestFile0125, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences
		requestFile0125 = Lib.replaceTextPattern(requestFile0125, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", java.net.URLEncoder.encode(C_AjaxsecKey1), 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'C_AjaxsecKey1' on all occurrences

		String requestHeader0125 = "GET " + requestFile0125 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0125, requestHost0125, requestPort0125, requestHeader0125, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0125 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 69250
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "My Reports");		// Test [125] <- Index 125
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_UploadHash'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0125_1 = new BoundaryBasedExtractorItem( "uploadIdHash\":\"" , "\",\"",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0125_1);

		// setup var extractor for 'C_Mod6'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0125_2 = new BoundaryBasedExtractorItem( "dcss;mod=" , "\" type=\"text",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0125_2);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_UploadHash'
			C_UploadHash = boundaryBasedContentExtractorItem0125_1.getResultText();
			log("<<< C_UploadHash = " + C_UploadHash);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_UploadHash!= null && C_UploadHash.trim().length() == 0)
			{
				C_UploadHash = "";
				log("runtime note: the extraction of a new value for the variable 'C_UploadHash' ends up with an empty string - a substitute value was set");
				log("<<< C_UploadHash = " + C_UploadHash);
			}
		}
		catch (Exception e) { C_UploadHash = null; log(e); }
		if (C_UploadHash == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_UploadHash' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Mod6'
			C_Mod6 = boundaryBasedContentExtractorItem0125_2.getResultText();
			log("<<< C_Mod6 = " + C_Mod6);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Mod6!= null && C_Mod6.trim().length() == 0)
			{
				C_Mod6 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Mod6' ends up with an empty string - a substitute value was set");
				log("<<< C_Mod6 = " + C_Mod6);
			}
		}
		catch (Exception e) { C_Mod6 = null; log(e); }
		if (C_Mod6 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Mod6' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [126] <- WEB ADMIN Index 126 ---
		String requestProt0126 = "https";
		String requestHost0126 = "performancemanager4.successfactors.com";
		int    requestPort0126 = 443;
		String requestFile0126 = "/ui/topnav/css/SFRevolutionTopNav_02506b3b1d8cf8ea2ab7e78a3813e887.css";
		String requestHeader0126 = "GET " + requestFile0126 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0126, requestHost0126, requestPort0126, requestHeader0126, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0126 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 14241
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [126] <- Index 126
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [127] <- WEB ADMIN Index 127 ---
		String requestProt0127 = "https";
		String requestHost0127 = "performancemanager4.successfactors.com";
		int    requestPort0127 = 443;
		String requestFile0127 = "/ui/uicore/css/revolutioncommon_a28bb0fc5b33f5cb55458a07dd85d772.css";
		String requestHeader0127 = "GET " + requestFile0127 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0127, requestHost0127, requestPort0127, requestHeader0127, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0127 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2384
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [127] <- Index 127
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [128] <- WEB ADMIN Index 128 ---
		String requestProt0128 = "https";
		String requestHost0128 = "performancemanager4.successfactors.com";
		int    requestPort0128 = 443;
		String requestFile0128 = "/ui/uicore/css/fiori_fc960c9ddf57de1aa2536367a33ba8fb.css";
		String requestHeader0128 = "GET " + requestFile0128 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0128, requestHost0128, requestPort0128, requestHeader0128, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0128 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1425
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [128] <- Index 128
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [129] <- WEB ADMIN Index 129 ---
		String requestProt0129 = "https";
		String requestHost0129 = "performancemanager4.successfactors.com";
		int    requestPort0129 = 443;
		String requestFile0129 = "/public/ui-dcss/Teck/_/3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!13YzS_!/.dcss;mod=82f3828c";
		requestFile0129 = Lib.replaceTextPattern(requestFile0129, "598758c08d82beb795c1663b536ed101", C_Mod8, 0);		// search and replace request file fragment "598758c08d82beb795c1663b536ed101" with variable 'C_Mod8' on all occurrences
		requestFile0129 = Lib.replaceTextPattern(requestFile0129, "82137484cd2fcde38d057a0be1a23986", C_Mod7, 0);		// search and replace request file fragment "82137484cd2fcde38d057a0be1a23986" with variable 'C_Mod7' on all occurrences
		requestFile0129 = Lib.replaceTextPattern(requestFile0129, "82f3828c", C_Mod6, 0);		// search and replace request file fragment "82f3828c" with variable 'C_Mod6' on all occurrences
		requestFile0129 = Lib.replaceTextPattern(requestFile0129, "!11!THRBPLPT!NO0!SD1BUT1", C_belieze1, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SD1BUT1" with variable 'C_belieze1' on all occurrences
		requestFile0129 = Lib.replaceTextPattern(requestFile0129, "3a197762f867d55aceaee0bb261f6b2b", C_Mod1, 0);		// search and replace request file fragment "3a197762f867d55aceaee0bb261f6b2b" with variable 'C_Mod1' on all occurrences
		requestFile0129 = Lib.replaceTextPattern(requestFile0129, "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0, 0);		// search and replace request file fragment "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_belieze0' on all occurrences
		requestFile0129 = Lib.replaceTextPattern(requestFile0129, "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0129 = Lib.replaceTextPattern(requestFile0129, "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1, 0);		// search and replace request file fragment "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU" with variable 'C_Img1' on all occurrences

		String requestHeader0129 = "GET " + requestFile0129 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0129, requestHost0129, requestPort0129, requestHeader0129, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0129 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 8380
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [129] <- Index 129
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [130] <- WEB ADMIN Index 130 ---
		String requestProt0130 = "https";
		String requestHost0130 = "performancemanager4.successfactors.com";
		int    requestPort0130 = 443;
		String requestFile0130 = "/ui/admin/css/tutorial/tutorialvideo_1cad8f05b307a86757f0960d7c9afbc6.css";
		String requestHeader0130 = "GET " + requestFile0130 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0130, requestHost0130, requestPort0130, requestHeader0130, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0130 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 184
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [130] <- Index 130
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [131] <- WEB ADMIN Index 131 ---
		String requestProt0131 = "https";
		String requestHost0131 = "performancemanager4.successfactors.com";
		int    requestPort0131 = 443;
		String requestFile0131 = "/ui/reportcenter/css/common/PageHeader_9043a8bf6628b9b1e6bd6d21e56e91c4.css";
		String requestHeader0131 = "GET " + requestFile0131 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0131, requestHost0131, requestPort0131, requestHeader0131, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0131 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 180
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [131] <- Index 131
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [132] <- WEB ADMIN Index 132 ---
		String requestProt0132 = "https";
		String requestHost0132 = "performancemanager4.successfactors.com";
		int    requestPort0132 = 443;
		String requestFile0132 = "/ui/sfgrp/css/juicMatrixTables_08d30c781611c87566d4d807dee86ccb.css";
		String requestHeader0132 = "GET " + requestFile0132 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0132, requestHost0132, requestPort0132, requestHeader0132, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0132 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 957
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [132] <- Index 132
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [133] <- WEB ADMIN Index 133 ---
		String requestProt0133 = "https";
		String requestHost0133 = "performancemanager4.successfactors.com";
		int    requestPort0133 = 443;
		String requestFile0133 = "/ui/reportcenter/css/reportListPage_fabd4de4bb3f5ec630609fce99363a05.css";
		String requestHeader0133 = "GET " + requestFile0133 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0133, requestHost0133, requestPort0133, requestHeader0133, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0133 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2556
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [133] <- Index 133
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [134] <- WEB ADMIN Index 134 ---
		String requestProt0134 = "https";
		String requestHost0134 = "performancemanager4.successfactors.com";
		int    requestPort0134 = 443;
		String requestFile0134 = "/ui/reportcenter/css/global_f4d3d8b582b5c0f82f57ad315b42bd2e.css";
		String requestHeader0134 = "GET " + requestFile0134 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0134, requestHost0134, requestPort0134, requestHeader0134, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0134 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 470
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [134] <- Index 134
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [135] <- WEB ADMIN Index 135 ---
		String requestProt0135 = "https";
		String requestHost0135 = "performancemanager4.successfactors.com";
		int    requestPort0135 = 443;
		String requestFile0135 = "/ui/ajaxservice/js/engine_195ddf977bd9394da5411c65e8f86a34.js";
		String requestHeader0135 = "GET " + requestFile0135 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0135, requestHost0135, requestPort0135, requestHeader0135, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0135 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6530
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [135] <- Index 135
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [136] <- WEB ADMIN Index 136 ---
		String requestProt0136 = "https";
		String requestHost0136 = "performancemanager4.successfactors.com";
		int    requestPort0136 = 443;
		String requestFile0136 = "/ui/ajaxservice/js/AjaxService_328848108701c4060306e5a764d4b34a.js";
		String requestHeader0136 = "GET " + requestFile0136 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0136, requestHost0136, requestPort0136, requestHeader0136, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0136 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2947
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [136] <- Index 136
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [137] <- WEB ADMIN Index 137 ---
		String requestProt0137 = "https";
		String requestHost0137 = "performancemanager4.successfactors.com";
		int    requestPort0137 = 443;
		String requestFile0137 = "/ui/showme/js/ajaxservice/showMeControllerASProxy_619594cf233e35820583fb250b9368c3.js";
		String requestHeader0137 = "GET " + requestFile0137 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0137, requestHost0137, requestPort0137, requestHeader0137, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0137 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 418
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [137] <- Index 137
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [138] <- WEB ADMIN Index 138 ---
		String requestProt0138 = "https";
		String requestHost0138 = "performancemanager4.successfactors.com";
		int    requestPort0138 = 443;
		String requestFile0138 = "/ui/reportcenter/js/ajaxservice/reportCenterControllerASProxy_b65cae0610696c60a094327991ea3af5.js";
		String requestHeader0138 = "GET " + requestFile0138 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0138, requestHost0138, requestPort0138, requestHeader0138, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0138 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 955
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [138] <- Index 138
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [139] <- WEB ADMIN Index 139 ---
		String requestProt0139 = "https";
		String requestHost0139 = "performancemanager4.successfactors.com";
		int    requestPort0139 = 443;
		String requestFile0139 = "/ui/reportcenter/js/ajaxservice/reportCenterImportControllerASProxy_2a0440465a8cb2442129ec17ffa58b75.js";
		String requestHeader0139 = "GET " + requestFile0139 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0139, requestHost0139, requestPort0139, requestHeader0139, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0139 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 302
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [139] <- Index 139
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [140] <- WEB ADMIN Index 140 ---
		String requestProt0140 = "https";
		String requestHost0140 = "performancemanager4.successfactors.com";
		int    requestPort0140 = 443;
		String requestFile0140 = "/ui/sapui5/lite_1.65.5/analytics-modules.js";
		String requestHeader0140 = "GET " + requestFile0140 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0140, requestHost0140, requestPort0140, requestHeader0140, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0140 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 198354
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [140] <- Index 140
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [141] <- WEB ADMIN Index 141 ---
		String requestProt0141 = "https";
		String requestHost0141 = "performancemanager4.successfactors.com";
		int    requestPort0141 = 443;
		String requestFile0141 = "/ui/surj/js/core/surj-ui-core_8a189e8cb1f9b21c5dbc7bfb2df74830.js";
		String requestHeader0141 = "GET " + requestFile0141 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0141, requestHost0141, requestPort0141, requestHeader0141, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0141 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1662
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [141] <- Index 141
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [142] <- WEB ADMIN Index 142 ---
		String requestProt0142 = "https";
		String requestHost0142 = "performancemanager4.successfactors.com";
		int    requestPort0142 = 443;
		String requestFile0142 = "/ui/juic/js/core/component-surj_f3ab217faa0d6807425510d0ad2294e2.js";
		String requestHeader0142 = "GET " + requestFile0142 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0142, requestHost0142, requestPort0142, requestHeader0142, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0142 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1273
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [142] <- Index 142
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [143] <- WEB ADMIN Index 143 ---
		String requestProt0143 = "https";
		String requestHost0143 = "performancemanager4.successfactors.com";
		int    requestPort0143 = 443;
		String requestFile0143 = "/ui/peopleprofile/js/actionEditPopup_0ee13f05d3b049aa83e7a148e14f86ce.js";
		String requestHeader0143 = "GET " + requestFile0143 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0143, requestHost0143, requestPort0143, requestHeader0143, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0143 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 353
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [143] <- Index 143
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [144] <- WEB ADMIN Index 144 ---
		String requestProt0144 = "https";
		String requestHost0144 = "performancemanager4.successfactors.com";
		int    requestPort0144 = 443;
		String requestFile0144 = "/ui/platform/js/TopNavBar_c0e0ae73229046c0828e40fdd54c5dcd.js";
		String requestHeader0144 = "GET " + requestFile0144 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0144, requestHost0144, requestPort0144, requestHeader0144, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0144 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1407
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [144] <- Index 144
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 2 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [145] <- WEB ADMIN Index 145 ---
		String requestProt0145 = "https";
		String requestHost0145 = "performancemanager4.successfactors.com";
		int    requestPort0145 = 443;
		String requestFile0145 = "/ui/notification/js/ajaxservice/globalNotificationControllerASProxy_a38ad21c3791f84b68198c84068e5ec3.js";
		String requestHeader0145 = "GET " + requestFile0145 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0145, requestHost0145, requestPort0145, requestHeader0145, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0145 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 428
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [145] <- Index 145
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [146] <- WEB ADMIN Index 146 ---
		String requestProt0146 = "https";
		String requestHost0146 = "performancemanager4.successfactors.com";
		int    requestPort0146 = 443;
		String requestFile0146 = "/ui/topnav/js/SFResponsiveHeader_35c9e358dca8d169abc24603fb4d35ae.js";
		String requestHeader0146 = "GET " + requestFile0146 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0146, requestHost0146, requestPort0146, requestHeader0146, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0146 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1928
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [146] <- Index 146
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [147] <- WEB ADMIN Index 147 ---
		String requestProt0147 = "https";
		String requestHost0147 = "performancemanager4.successfactors.com";
		int    requestPort0147 = 443;
		String requestFile0147 = "/ui/v4/js/ajaxservice/tutorialVideoControllerASProxy_bc8f4aae6a9b7b05938cf9cac58f7cb8.js";
		String requestHeader0147 = "GET " + requestFile0147 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0147, requestHost0147, requestPort0147, requestHeader0147, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0147 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 373
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [147] <- Index 147
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [148] <- WEB ADMIN Index 148 ---
		String requestProt0148 = "https";
		String requestHost0148 = "performancemanager4.successfactors.com";
		int    requestPort0148 = 443;
		String requestFile0148 = "/ui/admin/js/tutorial/admTutorialVideoLinks_558b98a6faadf9db0a70314d319a755a.js";
		String requestHeader0148 = "GET " + requestFile0148 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0148, requestHost0148, requestPort0148, requestHeader0148, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0148 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 703
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [148] <- Index 148
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [149] <- WEB ADMIN Index 149 ---
		String requestProt0149 = "https";
		String requestHost0149 = "performancemanager4.successfactors.com";
		int    requestPort0149 = 443;
		String requestFile0149 = "/ui/reportcenter/js/common/PageHeader_0c4cd6fb9d391b5f2db3bc3e9c79940c.js";
		String requestHeader0149 = "GET " + requestFile0149 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0149, requestHost0149, requestPort0149, requestHeader0149, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0149 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 367
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [149] <- Index 149
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [150] <- WEB ADMIN Index 150 ---
		String requestProt0150 = "https";
		String requestHost0150 = "performancemanager4.successfactors.com";
		int    requestPort0150 = 443;
		String requestFile0150 = "/public/ui-dcss/Teck/_/3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!13YzS_!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css";
		requestFile0150 = Lib.replaceTextPattern(requestFile0150, "598758c08d82beb795c1663b536ed101", C_Mod8, 0);		// search and replace request file fragment "598758c08d82beb795c1663b536ed101" with variable 'C_Mod8' on all occurrences
		requestFile0150 = Lib.replaceTextPattern(requestFile0150, "82137484cd2fcde38d057a0be1a23986", C_Mod7, 0);		// search and replace request file fragment "82137484cd2fcde38d057a0be1a23986" with variable 'C_Mod7' on all occurrences
		requestFile0150 = Lib.replaceTextPattern(requestFile0150, "!11!THRBPLPT!NO0!SD1BUT1", C_belieze1, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SD1BUT1" with variable 'C_belieze1' on all occurrences
		requestFile0150 = Lib.replaceTextPattern(requestFile0150, "3a197762f867d55aceaee0bb261f6b2b", C_Mod1, 0);		// search and replace request file fragment "3a197762f867d55aceaee0bb261f6b2b" with variable 'C_Mod1' on all occurrences
		requestFile0150 = Lib.replaceTextPattern(requestFile0150, "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0, 0);		// search and replace request file fragment "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_belieze0' on all occurrences
		requestFile0150 = Lib.replaceTextPattern(requestFile0150, "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0150 = Lib.replaceTextPattern(requestFile0150, "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1, 0);		// search and replace request file fragment "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU" with variable 'C_Img1' on all occurrences
		requestFile0150 = Lib.replaceTextPattern(requestFile0150, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0150 = "GET " + requestFile0150 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0150, requestHost0150, requestPort0150, requestHeader0150, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0150 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 11377
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [150] <- Index 150
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [151] <- WEB ADMIN Index 151 ---
		String requestProt0151 = "https";
		String requestHost0151 = "performancemanager4.successfactors.com";
		int    requestPort0151 = 443;
		String requestFile0151 = "/public/ui-dcss/Teck/_/3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!13YzS_!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library.css";
		requestFile0151 = Lib.replaceTextPattern(requestFile0151, "598758c08d82beb795c1663b536ed101", C_Mod8, 0);		// search and replace request file fragment "598758c08d82beb795c1663b536ed101" with variable 'C_Mod8' on all occurrences
		requestFile0151 = Lib.replaceTextPattern(requestFile0151, "82137484cd2fcde38d057a0be1a23986", C_Mod7, 0);		// search and replace request file fragment "82137484cd2fcde38d057a0be1a23986" with variable 'C_Mod7' on all occurrences
		requestFile0151 = Lib.replaceTextPattern(requestFile0151, "!11!THRBPLPT!NO0!SD1BUT1", C_belieze1, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SD1BUT1" with variable 'C_belieze1' on all occurrences
		requestFile0151 = Lib.replaceTextPattern(requestFile0151, "3a197762f867d55aceaee0bb261f6b2b", C_Mod1, 0);		// search and replace request file fragment "3a197762f867d55aceaee0bb261f6b2b" with variable 'C_Mod1' on all occurrences
		requestFile0151 = Lib.replaceTextPattern(requestFile0151, "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0, 0);		// search and replace request file fragment "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_belieze0' on all occurrences
		requestFile0151 = Lib.replaceTextPattern(requestFile0151, "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0151 = Lib.replaceTextPattern(requestFile0151, "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1, 0);		// search and replace request file fragment "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU" with variable 'C_Img1' on all occurrences
		requestFile0151 = Lib.replaceTextPattern(requestFile0151, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0151 = "GET " + requestFile0151 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0151, requestHost0151, requestPort0151, requestHeader0151, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0151 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 83347
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [151] <- Index 151
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [152] <- WEB ADMIN Index 152 ---
		String requestProt0152 = "https";
		String requestHost0152 = "performancemanager4.successfactors.com";
		int    requestPort0152 = 443;
		String requestFile0152 = "/public/ui-dcss/Teck/_/3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!13YzS_!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/uxap/themes/sap_belize/library.css";
		requestFile0152 = Lib.replaceTextPattern(requestFile0152, "598758c08d82beb795c1663b536ed101", C_Mod8, 0);		// search and replace request file fragment "598758c08d82beb795c1663b536ed101" with variable 'C_Mod8' on all occurrences
		requestFile0152 = Lib.replaceTextPattern(requestFile0152, "82137484cd2fcde38d057a0be1a23986", C_Mod7, 0);		// search and replace request file fragment "82137484cd2fcde38d057a0be1a23986" with variable 'C_Mod7' on all occurrences
		requestFile0152 = Lib.replaceTextPattern(requestFile0152, "!11!THRBPLPT!NO0!SD1BUT1", C_belieze1, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SD1BUT1" with variable 'C_belieze1' on all occurrences
		requestFile0152 = Lib.replaceTextPattern(requestFile0152, "3a197762f867d55aceaee0bb261f6b2b", C_Mod1, 0);		// search and replace request file fragment "3a197762f867d55aceaee0bb261f6b2b" with variable 'C_Mod1' on all occurrences
		requestFile0152 = Lib.replaceTextPattern(requestFile0152, "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0, 0);		// search and replace request file fragment "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_belieze0' on all occurrences
		requestFile0152 = Lib.replaceTextPattern(requestFile0152, "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0152 = Lib.replaceTextPattern(requestFile0152, "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1, 0);		// search and replace request file fragment "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU" with variable 'C_Img1' on all occurrences
		requestFile0152 = Lib.replaceTextPattern(requestFile0152, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0152 = "GET " + requestFile0152 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0152, requestHost0152, requestPort0152, requestHeader0152, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0152 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 15954
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [152] <- Index 152
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [153] <- WEB ADMIN Index 153 ---
		String requestProt0153 = "https";
		String requestHost0153 = "performancemanager4.successfactors.com";
		int    requestPort0153 = 443;
		String requestFile0153 = "/ui/reportcenter/js/common/SortColumn_a10676cea85afe4cecaa7dc631a4dc8c.js";
		String requestHeader0153 = "GET " + requestFile0153 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0153, requestHost0153, requestPort0153, requestHeader0153, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0153 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 396
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [153] <- Index 153
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [154] <- WEB ADMIN Index 154 ---
		String requestProt0154 = "https";
		String requestHost0154 = "performancemanager4.successfactors.com";
		int    requestPort0154 = 443;
		String requestFile0154 = "/ui/sfgrp/js/SURJCommon_a22e8e8da0a7f982cc6bd2794547b3ca.js";
		String requestHeader0154 = "GET " + requestFile0154 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0154, requestHost0154, requestPort0154, requestHeader0154, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0154 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6529
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [154] <- Index 154
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [155] <- WEB ADMIN Index 155 ---
		String requestProt0155 = "https";
		String requestHost0155 = "performancemanager4.successfactors.com";
		int    requestPort0155 = 443;
		String requestFile0155 = "/public/ui-dcss/Teck/_/3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!13YzS_!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		requestFile0155 = Lib.replaceTextPattern(requestFile0155, "598758c08d82beb795c1663b536ed101", C_Mod8, 0);		// search and replace request file fragment "598758c08d82beb795c1663b536ed101" with variable 'C_Mod8' on all occurrences
		requestFile0155 = Lib.replaceTextPattern(requestFile0155, "82137484cd2fcde38d057a0be1a23986", C_Mod7, 0);		// search and replace request file fragment "82137484cd2fcde38d057a0be1a23986" with variable 'C_Mod7' on all occurrences
		requestFile0155 = Lib.replaceTextPattern(requestFile0155, "!11!THRBPLPT!NO0!SD1BUT1", C_belieze1, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SD1BUT1" with variable 'C_belieze1' on all occurrences
		requestFile0155 = Lib.replaceTextPattern(requestFile0155, "3a197762f867d55aceaee0bb261f6b2b", C_Mod1, 0);		// search and replace request file fragment "3a197762f867d55aceaee0bb261f6b2b" with variable 'C_Mod1' on all occurrences
		requestFile0155 = Lib.replaceTextPattern(requestFile0155, "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0, 0);		// search and replace request file fragment "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_belieze0' on all occurrences
		requestFile0155 = Lib.replaceTextPattern(requestFile0155, "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0155 = Lib.replaceTextPattern(requestFile0155, "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1, 0);		// search and replace request file fragment "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU" with variable 'C_Img1' on all occurrences
		requestFile0155 = Lib.replaceTextPattern(requestFile0155, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0155 = "GET " + requestFile0155 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0155, requestHost0155, requestPort0155, requestHeader0155, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("598758c08d82beb795c1663b536ed101", C_Mod8);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("82137484cd2fcde38d057a0be1a23986", C_Mod7);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!11!THRBPLPT!NO0!SD1BUT1", C_belieze1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3a197762f867d55aceaee0bb261f6b2b", C_Mod1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FD3E69DB8103A603EC04DBBA1D636582", C_Merge1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0155 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [155] <- Index 155
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [156] <- WEB ADMIN Index 156 ---
		String requestProt0156 = "https";
		String requestHost0156 = "performancemanager4.successfactors.com";
		int    requestPort0156 = 443;
		String requestFile0156 = "/ui/reportcenter/js/view/reportActionView.fragment_01c983f116457bf2e69ca57a0ef44b46.js";
		String requestHeader0156 = "GET " + requestFile0156 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0156, requestHost0156, requestPort0156, requestHeader0156, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0156 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1523
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [156] <- Index 156
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [157] <- WEB ADMIN Index 157 ---
		String requestProt0157 = "https";
		String requestHost0157 = "performancemanager4.successfactors.com";
		int    requestPort0157 = 443;
		String requestFile0157 = "/ui/reportcenter/js/view/ReportNameView.fragment_92818f1710cd006e836a820fefc95066.js";
		String requestHeader0157 = "GET " + requestFile0157 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0157, requestHost0157, requestPort0157, requestHeader0157, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0157 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1388
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [157] <- Index 157
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [158] <- WEB ADMIN Index 158 ---
		String requestProt0158 = "https";
		String requestHost0158 = "performancemanager4.successfactors.com";
		int    requestPort0158 = 443;
		String requestFile0158 = "/ui/reportcenter/js/notification/controller/SACThirdPartyCookieEnableNotification.controller_55b0dbb5c2725c7b521e21657b1c78fa.js";
		String requestHeader0158 = "GET " + requestFile0158 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0158, requestHost0158, requestPort0158, requestHeader0158, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0158 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 975
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [158] <- Index 158
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [159] <- WEB ADMIN Index 159 ---
		String requestProt0159 = "https";
		String requestHost0159 = "performancemanager4.successfactors.com";
		int    requestPort0159 = 443;
		String requestFile0159 = "/ui/reportcenter/js/controller/newReportDialog.controller_9bef270dcd7b2698d79229391cec520a.js";
		String requestHeader0159 = "GET " + requestFile0159 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0159, requestHost0159, requestPort0159, requestHeader0159, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0159 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3711
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [159] <- Index 159
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [160] <- WEB ADMIN Index 160 ---
		String requestProt0160 = "https";
		String requestHost0160 = "performancemanager4.successfactors.com";
		int    requestPort0160 = 443;
		String requestFile0160 = "/ui/reportcenter/js/common/EnhancedDialog_de0ccd8b3bf56bb74594584dc2e38bd7.js";
		String requestHeader0160 = "GET " + requestFile0160 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0160, requestHost0160, requestPort0160, requestHeader0160, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0160 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 565
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [160] <- Index 160
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [161] <- WEB ADMIN Index 161 ---
		String requestProt0161 = "https";
		String requestHost0161 = "performancemanager4.successfactors.com";
		int    requestPort0161 = 443;
		String requestFile0161 = "/ui/reportcenter/js/common/ImageText_90891cd9b97c66e60b5945403aa217de.js";
		String requestHeader0161 = "GET " + requestFile0161 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0161, requestHost0161, requestPort0161, requestHeader0161, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0161 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 694
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [161] <- Index 161
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [162] <- WEB ADMIN Index 162 ---
		String requestProt0162 = "https";
		String requestHost0162 = "performancemanager4.successfactors.com";
		int    requestPort0162 = 443;
		String requestFile0162 = "/ui/reportcenter/js/view/newReportDialog.view_34800b997c0a70aed33b2089a5e83837.js";
		String requestHeader0162 = "GET " + requestFile0162 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0162, requestHost0162, requestPort0162, requestHeader0162, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0162 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1416
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [162] <- Index 162
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [163] <- WEB ADMIN Index 163 ---
		String requestProt0163 = "https";
		String requestHost0163 = "performancemanager4.successfactors.com";
		int    requestPort0163 = 443;
		String requestFile0163 = "/ui/surj/resources_CC67C497E6D2FA3ADBB62CDD76321D41/sap/sf/surj/commons/Breadcrumb.js";
		String requestHeader0163 = "GET " + requestFile0163 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001d131c2a5-3db2-48e6-ad20-6b2328f8062929820909-1501-babe-face-000000000003ae6fb2e1-9912-48b6-8923-c4c7227bb220HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0163, requestHost0163, requestPort0163, requestHeader0163, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0163 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 436
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [163] <- Index 163
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [164] <- WEB ADMIN Index 164 ---
		String requestProt0164 = "https";
		String requestHost0164 = "performancemanager4.successfactors.com";
		int    requestPort0164 = 443;
		String requestFile0164 = "/ui/reportcenter/js/view/ActionMenu.fragment_8315132c9dc056e66273137fc52dbdce.js";
		String requestHeader0164 = "GET " + requestFile0164 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0164, requestHost0164, requestPort0164, requestHeader0164, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0164 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 690
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [164] <- Index 164
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 3 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [165] <- WEB ADMIN Index 165 ---
		String requestProt0165 = "https";
		String requestHost0165 = "performancemanager4.successfactors.com";
		int    requestPort0165 = 443;
		String requestFile0165 = "/ui/reportcenter/js/view/ReportListToolbar.fragment_ccdf980b0c22300a000a37af93610225.js";
		String requestHeader0165 = "GET " + requestFile0165 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0165, requestHost0165, requestPort0165, requestHeader0165, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0165 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1239
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [165] <- Index 165
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [166] <- WEB ADMIN Index 166 ---
		String requestProt0166 = "https";
		String requestHost0166 = "performancemanager4.successfactors.com";
		int    requestPort0166 = 443;
		String requestFile0166 = "/ui/reportcenter/js/view/ReportListSortPopover.fragment_54a42b6eb214fbfc4da0e40f16a44206.js";
		String requestHeader0166 = "GET " + requestFile0166 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0166, requestHost0166, requestPort0166, requestHeader0166, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0166 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 919
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [166] <- Index 166
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [167] <- WEB ADMIN Index 167 ---
		String requestProt0167 = "https";
		String requestHost0167 = "performancemanager4.successfactors.com";
		int    requestPort0167 = 443;
		String requestFile0167 = "/ui/reportcenter/js/view/ReportListFilterBar.fragment_46ce2607fcb2ebd39460f283d464a6a4.js";
		String requestHeader0167 = "GET " + requestFile0167 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0167, requestHost0167, requestPort0167, requestHeader0167, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0167 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1023
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [167] <- Index 167
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [168] <- WEB ADMIN Index 168 ---
		String requestProt0168 = "https";
		String requestHost0168 = "performancemanager4.successfactors.com";
		int    requestPort0168 = 443;
		String requestFile0168 = "/ui/reportcenter/js/utils/formatter_950820ba284f3c38c05e573b216758e2.js";
		String requestHeader0168 = "GET " + requestFile0168 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0168, requestHost0168, requestPort0168, requestHeader0168, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0168 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 418
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [168] <- Index 168
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [169] <- WEB ADMIN Index 169 ---
		String requestProt0169 = "https";
		String requestHost0169 = "performancemanager4.successfactors.com";
		int    requestPort0169 = 443;
		String requestFile0169 = "/ui/reportcenter/js/view/ReportCenterLanguageDialog.fragment_a15664e8f9e773de5d5303d99631bbe4.js";
		String requestHeader0169 = "GET " + requestFile0169 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0169, requestHost0169, requestPort0169, requestHeader0169, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0169 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1056
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [169] <- Index 169
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [170] <- WEB ADMIN Index 170 ---
		String requestProt0170 = "https";
		String requestHost0170 = "performancemanager4.successfactors.com";
		int    requestPort0170 = 443;
		String requestFile0170 = "/public/ui-dcss/Teck/_/3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!13YzS_!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/unified/themes/sap_belize/library.css";
		requestFile0170 = Lib.replaceTextPattern(requestFile0170, "598758c08d82beb795c1663b536ed101", C_Mod8, 0);		// search and replace request file fragment "598758c08d82beb795c1663b536ed101" with variable 'C_Mod8' on all occurrences
		requestFile0170 = Lib.replaceTextPattern(requestFile0170, "82137484cd2fcde38d057a0be1a23986", C_Mod7, 0);		// search and replace request file fragment "82137484cd2fcde38d057a0be1a23986" with variable 'C_Mod7' on all occurrences
		requestFile0170 = Lib.replaceTextPattern(requestFile0170, "!11!THRBPLPT!NO0!SD1BUT1", C_belieze1, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SD1BUT1" with variable 'C_belieze1' on all occurrences
		requestFile0170 = Lib.replaceTextPattern(requestFile0170, "3a197762f867d55aceaee0bb261f6b2b", C_Mod1, 0);		// search and replace request file fragment "3a197762f867d55aceaee0bb261f6b2b" with variable 'C_Mod1' on all occurrences
		requestFile0170 = Lib.replaceTextPattern(requestFile0170, "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0, 0);		// search and replace request file fragment "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_belieze0' on all occurrences
		requestFile0170 = Lib.replaceTextPattern(requestFile0170, "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0170 = Lib.replaceTextPattern(requestFile0170, "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1, 0);		// search and replace request file fragment "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU" with variable 'C_Img1' on all occurrences
		requestFile0170 = Lib.replaceTextPattern(requestFile0170, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0170 = "GET " + requestFile0170 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0170, requestHost0170, requestPort0170, requestHeader0170, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0170 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 23190
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [170] <- Index 170
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [171] <- WEB ADMIN Index 171 ---
		String requestProt0171 = "https";
		String requestHost0171 = "performancemanager4.successfactors.com";
		int    requestPort0171 = 443;
		String requestFile0171 = "/ui/reportcenter/js/ajaxservice/reportingArtifactSchedulerControllerASProxy_fd524e997a0276100345e79b99eaa697.js";
		String requestHeader0171 = "GET " + requestFile0171 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0171, requestHost0171, requestPort0171, requestHeader0171, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0171 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 703
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [171] <- Index 171
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [172] <- WEB ADMIN Index 172 ---
		String requestProt0172 = "https";
		String requestHost0172 = "performancemanager4.successfactors.com";
		int    requestPort0172 = 443;
		String requestFile0172 = "/ui/reportcenter/js/ajaxservice/reportingArtifactShareControllerASProxy_ba22557b6457493b6be37c4d781c2dcb.js";
		String requestHeader0172 = "GET " + requestFile0172 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0172, requestHost0172, requestPort0172, requestHeader0172, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0172 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 683
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [172] <- Index 172
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [173] <- WEB ADMIN Index 173 ---
		String requestProt0173 = "https";
		String requestHost0173 = "performancemanager4.successfactors.com";
		int    requestPort0173 = 443;
		String requestFile0173 = "/public/ui-dcss/Teck/_/3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!13YzS_!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library-parameters.json";
		requestFile0173 = Lib.replaceTextPattern(requestFile0173, "598758c08d82beb795c1663b536ed101", C_Mod8, 0);		// search and replace request file fragment "598758c08d82beb795c1663b536ed101" with variable 'C_Mod8' on all occurrences
		requestFile0173 = Lib.replaceTextPattern(requestFile0173, "82137484cd2fcde38d057a0be1a23986", C_Mod7, 0);		// search and replace request file fragment "82137484cd2fcde38d057a0be1a23986" with variable 'C_Mod7' on all occurrences
		requestFile0173 = Lib.replaceTextPattern(requestFile0173, "!11!THRBPLPT!NO0!SD1BUT1", C_belieze1, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SD1BUT1" with variable 'C_belieze1' on all occurrences
		requestFile0173 = Lib.replaceTextPattern(requestFile0173, "3a197762f867d55aceaee0bb261f6b2b", C_Mod1, 0);		// search and replace request file fragment "3a197762f867d55aceaee0bb261f6b2b" with variable 'C_Mod1' on all occurrences
		requestFile0173 = Lib.replaceTextPattern(requestFile0173, "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0, 0);		// search and replace request file fragment "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_belieze0' on all occurrences
		requestFile0173 = Lib.replaceTextPattern(requestFile0173, "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0173 = Lib.replaceTextPattern(requestFile0173, "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1, 0);		// search and replace request file fragment "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU" with variable 'C_Img1' on all occurrences
		requestFile0173 = Lib.replaceTextPattern(requestFile0173, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0173 = "GET " + requestFile0173 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001adf7b2ad-9422-4560-a72b-48f1216cbd2529820909-1501-babe-face-000000000003a95b422e-f702-4a86-9f2c-a2cb2f22cc21HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0173, requestHost0173, requestPort0173, requestHeader0173, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0173 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 54031
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [173] <- Index 173
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [174] <- WEB ADMIN Index 174 ---
		String requestProt0174 = "https";
		String requestHost0174 = "performancemanager4.successfactors.com";
		int    requestPort0174 = 443;
		String requestFile0174 = "/ui/reportcenter/js/controller/scheduleJobDialog.controller_e176d11a89c0b50e50300fdd31a91521.js";
		String requestHeader0174 = "GET " + requestFile0174 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0174, requestHost0174, requestPort0174, requestHeader0174, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0174 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8443
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [174] <- Index 174
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [175] <- WEB ADMIN Index 175 ---
		String requestProt0175 = "https";
		String requestHost0175 = "performancemanager4.successfactors.com";
		int    requestPort0175 = 443;
		String requestFile0175 = "/ui/reportcenter/js/view/scheduleJobDialog.view_4a8dd3fe23682ac9153a0078145b23dc.js";
		String requestHeader0175 = "GET " + requestFile0175 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0175, requestHost0175, requestPort0175, requestHeader0175, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0175 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6150
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [175] <- Index 175
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [176] <- WEB ADMIN Index 176 ---
		String requestProt0176 = "https";
		String requestHost0176 = "performancemanager4.successfactors.com";
		int    requestPort0176 = 443;
		String requestFile0176 = "/ui/reportcenter/js/view/ReportCenterImportResponseHandler_239c52eceb9365f98821dc61b473091a.js";
		String requestHeader0176 = "GET " + requestFile0176 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0176, requestHost0176, requestPort0176, requestHeader0176, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0176 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 132
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [176] <- Index 176
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [177] <- WEB ADMIN Index 177 ---
		String requestProt0177 = "https";
		String requestHost0177 = "performancemanager4.successfactors.com";
		int    requestPort0177 = 443;
		String requestFile0177 = "/ui/reportcenter/js/controller/ReportCenterImportDialog.controller_689ddf896535a86a535d49726addc2d0.js";
		String requestHeader0177 = "GET " + requestFile0177 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0177, requestHost0177, requestPort0177, requestHeader0177, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0177 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2397
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [177] <- Index 177
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [178] <- WEB ADMIN Index 178 ---
		String requestProt0178 = "https";
		String requestHost0178 = "performancemanager4.successfactors.com";
		int    requestPort0178 = 443;
		String requestFile0178 = "/ui/reportcenter/js/ReportCenterUtil_ed12d571df1997aa658d8c29531b5cb6.js";
		String requestHeader0178 = "GET " + requestFile0178 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0178, requestHost0178, requestPort0178, requestHeader0178, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0178 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2150
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [178] <- Index 178
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [179] <- WEB ADMIN Index 179 ---
		String requestProt0179 = "https";
		String requestHost0179 = "performancemanager4.successfactors.com";
		int    requestPort0179 = 443;
		String requestFile0179 = "/ui/reportcenter/js/view/ReportCenterImportDialog.view_d860cd31d37020f0e417d997b218548c.js";
		String requestHeader0179 = "GET " + requestFile0179 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0179, requestHost0179, requestPort0179, requestHeader0179, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0179 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2295
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [179] <- Index 179
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [180] <- WEB ADMIN Index 180 ---
		String requestProt0180 = "https";
		String requestHost0180 = "performancemanager4.successfactors.com";
		int    requestPort0180 = 443;
		String requestFile0180 = "/ui/reportcenter/js/view/LabelLocalizationView.fragment_2593d2aae6e9d992cac0ad2e5da068fa.js";
		String requestHeader0180 = "GET " + requestFile0180 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0180, requestHost0180, requestPort0180, requestHeader0180, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0180 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2295
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [180] <- Index 180
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [181] <- WEB ADMIN Index 181 ---
		String requestProt0181 = "https";
		String requestHost0181 = "performancemanager4.successfactors.com";
		int    requestPort0181 = 443;
		String requestFile0181 = "/ui/reportcenter/js/common/EnhancedLink_42aaf27700723b730c4841a12ff405a6.js";
		String requestHeader0181 = "GET " + requestFile0181 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0181, requestHost0181, requestPort0181, requestHeader0181, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0181 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 293
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [181] <- Index 181
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [182] <- WEB ADMIN Index 182 ---
		String requestProt0182 = "https";
		String requestHost0182 = "performancemanager4.successfactors.com";
		int    requestPort0182 = 443;
		String requestFile0182 = "/ui/reportcenter/js/common/ReportCenterUserSearch_ae92f2dd7b8c3937e583b4c14b46ea6e.js";
		String requestHeader0182 = "GET " + requestFile0182 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0182, requestHost0182, requestPort0182, requestHeader0182, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0182 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 867
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [182] <- Index 182
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [183] <- WEB ADMIN Index 183 ---
		String requestProt0183 = "https";
		String requestHost0183 = "performancemanager4.successfactors.com";
		int    requestPort0183 = 443;
		String requestFile0183 = "/ui/reportcenter/js/view/ReportCenterOwnerChangeDialog.fragment_bf4a0ad4a1cb073aadea04b6a6a20a4d.js";
		String requestHeader0183 = "GET " + requestFile0183 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0183, requestHost0183, requestPort0183, requestHeader0183, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0183 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1070
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [183] <- Index 183
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [184] <- WEB ADMIN Index 184 ---
		String requestProt0184 = "https";
		String requestHost0184 = "performancemanager4.successfactors.com";
		int    requestPort0184 = 443;
		String requestFile0184 = "/ui/reportcenter/js/common/ReportCenterUserSearchInput_edd1d9d71b3d01980e66a239a06b8d44.js";
		String requestHeader0184 = "GET " + requestFile0184 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0184, requestHost0184, requestPort0184, requestHeader0184, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0184 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 753
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [184] <- Index 184
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 4 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [185] <- WEB ADMIN Index 185 ---
		String requestProt0185 = "https";
		String requestHost0185 = "performancemanager4.successfactors.com";
		int    requestPort0185 = 443;
		String requestFile0185 = "/ui/reportcenter/js/controller/reportListPage.controller_e3bab9f246b061dcfd3c0ad01f8a0dff.js";
		String requestHeader0185 = "GET " + requestFile0185 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0185, requestHost0185, requestPort0185, requestHeader0185, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0185 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4864
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [185] <- Index 185
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [186] <- WEB ADMIN Index 186 ---
		String requestProt0186 = "https";
		String requestHost0186 = "performancemanager4.successfactors.com";
		int    requestPort0186 = 443;
		String requestFile0186 = "/ui/reportcenter/js/controller/rcLabelAs.controller_d8de8922d71b1097a0d5593ade323814.js";
		String requestHeader0186 = "GET " + requestFile0186 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0186, requestHost0186, requestPort0186, requestHeader0186, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0186 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4555
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [186] <- Index 186
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [187] <- WEB ADMIN Index 187 ---
		String requestProt0187 = "https";
		String requestHost0187 = "performancemanager4.successfactors.com";
		int    requestPort0187 = 443;
		String requestFile0187 = "/ui/reportcenter/js/view/rcCreateEditLabel.fragment_62f2a0fd7b348e64ea532f6c50078c6e.js";
		String requestHeader0187 = "GET " + requestFile0187 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0187, requestHost0187, requestPort0187, requestHeader0187, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0187 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1900
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [187] <- Index 187
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [188] <- WEB ADMIN Index 188 ---
		String requestProt0188 = "https";
		String requestHost0188 = "performancemanager4.successfactors.com";
		int    requestPort0188 = 443;
		String requestFile0188 = "/ui/reportcenter/js/view/rcManageLabels.fragment_59a68d4396c4a182cad42f04cc60d785.js";
		String requestHeader0188 = "GET " + requestFile0188 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0188, requestHost0188, requestPort0188, requestHeader0188, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0188 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1466
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [188] <- Index 188
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [189] <- WEB ADMIN Index 189 ---
		String requestProt0189 = "https";
		String requestHost0189 = "performancemanager4.successfactors.com";
		int    requestPort0189 = 443;
		String requestFile0189 = "/ui/reportcenter/js/view/rcLabelAs.view_08fc4c1a356d6e01f20fc7ef6ba63029.js";
		String requestHeader0189 = "GET " + requestFile0189 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0189, requestHost0189, requestPort0189, requestHeader0189, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0189 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1319
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [189] <- Index 189
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [190] <- WEB ADMIN Index 190 ---
		String requestProt0190 = "https";
		String requestHost0190 = "performancemanager4.successfactors.com";
		int    requestPort0190 = 443;
		String requestFile0190 = "/public/ui-dcss/Teck/_/3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!13YzS_!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library-parameters.json";
		requestFile0190 = Lib.replaceTextPattern(requestFile0190, "598758c08d82beb795c1663b536ed101", C_Mod8, 0);		// search and replace request file fragment "598758c08d82beb795c1663b536ed101" with variable 'C_Mod8' on all occurrences
		requestFile0190 = Lib.replaceTextPattern(requestFile0190, "82137484cd2fcde38d057a0be1a23986", C_Mod7, 0);		// search and replace request file fragment "82137484cd2fcde38d057a0be1a23986" with variable 'C_Mod7' on all occurrences
		requestFile0190 = Lib.replaceTextPattern(requestFile0190, "!11!THRBPLPT!NO0!SD1BUT1", C_belieze1, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SD1BUT1" with variable 'C_belieze1' on all occurrences
		requestFile0190 = Lib.replaceTextPattern(requestFile0190, "3a197762f867d55aceaee0bb261f6b2b", C_Mod1, 0);		// search and replace request file fragment "3a197762f867d55aceaee0bb261f6b2b" with variable 'C_Mod1' on all occurrences
		requestFile0190 = Lib.replaceTextPattern(requestFile0190, "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0, 0);		// search and replace request file fragment "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_belieze0' on all occurrences
		requestFile0190 = Lib.replaceTextPattern(requestFile0190, "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0190 = Lib.replaceTextPattern(requestFile0190, "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1, 0);		// search and replace request file fragment "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU" with variable 'C_Img1' on all occurrences
		requestFile0190 = Lib.replaceTextPattern(requestFile0190, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0190 = "GET " + requestFile0190 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 01000500018223b2c0-32f2-483d-bc2d-26362011bb2729820909-1501-babe-face-000000000003a2b5e22e-1052-49ef-8f21-44c82e8c3229HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0190, requestHost0190, requestPort0190, requestHeader0190, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0190 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 16936
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [190] <- Index 190
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [191] <- WEB ADMIN Index 191 ---
		String requestProt0191 = "https";
		String requestHost0191 = "performancemanager4.successfactors.com";
		int    requestPort0191 = 443;
		String requestFile0191 = "/ui/reportcenter/js/controller/reportList.controller_2ad85457046bc6ecb9ed76f65102d762.js";
		String requestHeader0191 = "GET " + requestFile0191 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0191, requestHost0191, requestPort0191, requestHeader0191, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0191 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15514
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [191] <- Index 191
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [192] <- WEB ADMIN Index 192 ---
		String requestProt0192 = "https";
		String requestHost0192 = "performancemanager4.successfactors.com";
		int    requestPort0192 = 443;
		String requestFile0192 = "/ui/reportcenter/js/view/reportList.view_5ab7a701aa0531ce339118845e6bbeec.js";
		String requestHeader0192 = "GET " + requestFile0192 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0192, requestHost0192, requestPort0192, requestHeader0192, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0192 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2481
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [192] <- Index 192
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [193] <- WEB ADMIN Index 193 ---
		String requestProt0193 = "https";
		String requestHost0193 = "performancemanager4.successfactors.com";
		int    requestPort0193 = 443;
		String requestFile0193 = "/ui/reportcenter/js/view/reportListPage.view_9b4ea148257405b5f7b8af100b84b130.js";
		String requestHeader0193 = "GET " + requestFile0193 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0193, requestHost0193, requestPort0193, requestHeader0193, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0193 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1922
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [193] <- Index 193
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [194] <- WEB ADMIN Index 194 ---
		String requestProt0194 = "https";
		String requestHost0194 = "performancemanager4.successfactors.com";
		int    requestPort0194 = 443;
		String requestFile0194 = "/ui/juic/js/components/sfSpacingManager_3d18488b97beb2eca273c8ce5517f7df.js";
		String requestHeader0194 = "GET " + requestFile0194 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0194, requestHost0194, requestPort0194, requestHeader0194, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0194 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2387
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [194] <- Index 194
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [195] <- WEB ADMIN Index 195 ---
		String requestProt0195 = "https";
		String requestHost0195 = "performancemanager4.successfactors.com";
		int    requestPort0195 = 443;
		String requestFile0195 = "/ui/sfgrp/js/juicLayoutUtils_506bad84c309e7d3ed0dad530a51d119.js";
		String requestHeader0195 = "GET " + requestFile0195 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0195, requestHost0195, requestPort0195, requestHeader0195, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0195 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 31782
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [195] <- Index 195
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [196] <- WEB ADMIN Index 196 ---
		String requestProt0196 = "https";
		String requestHost0196 = "performancemanager4.successfactors.com";
		int    requestPort0196 = 443;
		String requestFile0196 = "/public/ui-dcss/Teck/_/3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!13YzS_!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/uxap/themes/sap_belize/library-parameters.json";
		requestFile0196 = Lib.replaceTextPattern(requestFile0196, "598758c08d82beb795c1663b536ed101", C_Mod8, 0);		// search and replace request file fragment "598758c08d82beb795c1663b536ed101" with variable 'C_Mod8' on all occurrences
		requestFile0196 = Lib.replaceTextPattern(requestFile0196, "82137484cd2fcde38d057a0be1a23986", C_Mod7, 0);		// search and replace request file fragment "82137484cd2fcde38d057a0be1a23986" with variable 'C_Mod7' on all occurrences
		requestFile0196 = Lib.replaceTextPattern(requestFile0196, "!11!THRBPLPT!NO0!SD1BUT1", C_belieze1, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SD1BUT1" with variable 'C_belieze1' on all occurrences
		requestFile0196 = Lib.replaceTextPattern(requestFile0196, "3a197762f867d55aceaee0bb261f6b2b", C_Mod1, 0);		// search and replace request file fragment "3a197762f867d55aceaee0bb261f6b2b" with variable 'C_Mod1' on all occurrences
		requestFile0196 = Lib.replaceTextPattern(requestFile0196, "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0, 0);		// search and replace request file fragment "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_belieze0' on all occurrences
		requestFile0196 = Lib.replaceTextPattern(requestFile0196, "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0196 = Lib.replaceTextPattern(requestFile0196, "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1, 0);		// search and replace request file fragment "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU" with variable 'C_Img1' on all occurrences
		requestFile0196 = Lib.replaceTextPattern(requestFile0196, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0196 = "GET " + requestFile0196 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001ef19e233-38e2-4041-ad29-497b28a27f2229820909-1501-babe-face-00000000000337d1d23f-1d42-4c1c-a721-34bb2e03ac25HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0196, requestHost0196, requestPort0196, requestHeader0196, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0196 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 380
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [196] <- Index 196
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [197] <- WEB ADMIN Index 197 ---
		String requestProt0197 = "https";
		String requestHost0197 = "performancemanager4.successfactors.com";
		int    requestPort0197 = 443;
		String requestFile0197 = "/ui/analyticspane/js/component/AnalyticsPaneLoad_e1e0ded9a823426996b2efbedfa4ba91.js";
		String requestHeader0197 = "GET " + requestFile0197 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0197, requestHost0197, requestPort0197, requestHeader0197, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0197 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 205
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [197] <- Index 197
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [198] <- WEB ADMIN Index 198 ---
		String requestProt0198 = "https";
		String requestHost0198 = "performancemanager4.successfactors.com";
		int    requestPort0198 = 443;
		String requestFile0198 = "/public/ui-dcss/Teck/_/3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!13YzS_!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/unified/themes/sap_belize/library-parameters.json";
		requestFile0198 = Lib.replaceTextPattern(requestFile0198, "598758c08d82beb795c1663b536ed101", C_Mod8, 0);		// search and replace request file fragment "598758c08d82beb795c1663b536ed101" with variable 'C_Mod8' on all occurrences
		requestFile0198 = Lib.replaceTextPattern(requestFile0198, "82137484cd2fcde38d057a0be1a23986", C_Mod7, 0);		// search and replace request file fragment "82137484cd2fcde38d057a0be1a23986" with variable 'C_Mod7' on all occurrences
		requestFile0198 = Lib.replaceTextPattern(requestFile0198, "!11!THRBPLPT!NO0!SD1BUT1", C_belieze1, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SD1BUT1" with variable 'C_belieze1' on all occurrences
		requestFile0198 = Lib.replaceTextPattern(requestFile0198, "3a197762f867d55aceaee0bb261f6b2b", C_Mod1, 0);		// search and replace request file fragment "3a197762f867d55aceaee0bb261f6b2b" with variable 'C_Mod1' on all occurrences
		requestFile0198 = Lib.replaceTextPattern(requestFile0198, "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0, 0);		// search and replace request file fragment "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_belieze0' on all occurrences
		requestFile0198 = Lib.replaceTextPattern(requestFile0198, "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0198 = Lib.replaceTextPattern(requestFile0198, "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1, 0);		// search and replace request file fragment "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU" with variable 'C_Img1' on all occurrences
		requestFile0198 = Lib.replaceTextPattern(requestFile0198, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0198 = "GET " + requestFile0198 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001a3f722e4-9042-4a5c-9a21-2b5a203cf42929820909-1501-babe-face-000000000003e619a2f1-ca32-4e28-b025-10022989d124HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0198, requestHost0198, requestPort0198, requestHeader0198, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0198 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 13576
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [198] <- Index 198
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [199] <- WEB ADMIN Index 199 ---
		String requestProt0199 = "https";
		String requestHost0199 = "performancemanager4.successfactors.com";
		int    requestPort0199 = 443;
		String requestFile0199 = "/ui/sapui5/main_1.65.5/sap/ui/model/odata/AnnotationHelper.js";
		String requestHeader0199 = "GET " + requestFile0199 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 010005000119d1f2b5-6112-4777-8c20-60632e15a32829820909-1501-babe-face-00000000000339416218-3442-4bd5-872a-6dc624995127HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0199, requestHost0199, requestPort0199, requestHeader0199, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0199 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1170
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [199] <- Index 199
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [200] <- WEB ADMIN Index 200 ---
		String requestProt0200 = "https";
		String requestHost0200 = "performancemanager4.successfactors.com";
		int    requestPort0200 = 443;
		String requestFile0200 = "/ui/sapui5/main_1.65.5/sap/m/TimePicker.js";
		String requestHeader0200 = "GET " + requestFile0200 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001dcfb42c8-35e2-4961-9d26-e0f62c380a2629820909-1501-babe-face-000000000003107c3235-6f12-45af-a02a-3b4d27b38722HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0200, requestHost0200, requestPort0200, requestHeader0200, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0200 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5803
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [200] <- Index 200
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [201] <- WEB ADMIN Index 201 ---
		String requestProt0201 = "https";
		String requestHost0201 = "performancemanager4.successfactors.com";
		int    requestPort0201 = 443;
		String requestFile0201 = "/ui/sapui5/main_1.65.5/sap/ui/comp/themes/sap_belize/library.css";
		String requestHeader0201 = "GET " + requestFile0201 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0201, requestHost0201, requestPort0201, requestHeader0201, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0201 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 5259
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [201] <- Index 201
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [202] <- WEB ADMIN Index 202 ---
		String requestProt0202 = "https";
		String requestHost0202 = "performancemanager4.successfactors.com";
		int    requestPort0202 = 443;
		String requestFile0202 = "/ui/sapui5/main_1.65.5/sap/m/MaskInputRule.js";
		String requestHeader0202 = "GET " + requestFile0202 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001c3e3520a-24c2-488b-b228-78662def832129820909-1501-babe-face-000000000003339f1213-9612-46f3-9329-37792215c728HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0202, requestHost0202, requestPort0202, requestHeader0202, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0202 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 529
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [202] <- Index 202
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [203] <- WEB ADMIN Index 203 ---
		String requestProt0203 = "https";
		String requestHost0203 = "performancemanager4.successfactors.com";
		int    requestPort0203 = 443;
		String requestFile0203 = "/ui/sapui5/main_1.65.5/sap/m/MaskEnabler.js";
		String requestHeader0203 = "GET " + requestFile0203 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 010005000128301285-f992-44fc-a22c-1a28217df52229820909-1501-babe-face-0000000000038da15268-ec62-446e-8f2c-b0082262f024HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0203, requestHost0203, requestPort0203, requestHeader0203, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0203 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4875
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [203] <- Index 203
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [204] <- WEB ADMIN Index 204 ---
		String requestProt0204 = "https";
		String requestHost0204 = "performancemanager4.successfactors.com";
		int    requestPort0204 = 443;
		String requestFile0204 = "/ui/sapui5/main_1.65.5/sap/m/TimePickerRenderer.js";
		String requestHeader0204 = "GET " + requestFile0204 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 01000500019699a23a-7092-487f-ac29-dea02e837e2829820909-1501-babe-face-000000000003ba4f624a-6062-473c-b829-41be2c2fe223HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0204, requestHost0204, requestPort0204, requestHeader0204, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0204 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 733
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [204] <- Index 204
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 5 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [205] <- WEB ADMIN Index 205 ---
		String requestProt0205 = "https";
		String requestHost0205 = "performancemanager4.successfactors.com";
		int    requestPort0205 = 443;
		String requestFile0205 = "/ui/sapui5/main_1.65.5/sap/ui/layout/AlignedFlowLayout.js";
		String requestHeader0205 = "GET " + requestFile0205 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001ecd2e286-c242-436c-a423-2c4925b59c2629820909-1501-babe-face-00000000000338ab22f7-70e2-428b-962e-60be2561832bHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0205, requestHost0205, requestPort0205, requestHeader0205, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0205 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1346
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [205] <- Index 205
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [206] <- WEB ADMIN Index 206 ---
		String requestProt0206 = "https";
		String requestHost0206 = "performancemanager4.successfactors.com";
		int    requestPort0206 = 443;
		String requestFile0206 = "/ui/sapui5/main_1.65.5/sap/ui/layout/AlignedFlowLayoutRenderer.js";
		String requestHeader0206 = "GET " + requestFile0206 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001520bb2ca-1fd2-4591-af2f-ae2720601e2c29820909-1501-babe-face-000000000003f4dc126e-c472-4fcc-a023-b4d125858223HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0206, requestHost0206, requestPort0206, requestHeader0206, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0206 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 624
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [206] <- Index 206
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [207] <- WEB ADMIN Index 207 ---
		String requestProt0207 = "https";
		String requestHost0207 = "performancemanager4.successfactors.com";
		int    requestPort0207 = 443;
		String requestFile0207 = "/ui/sapui5/main_1.65.5/sap/ui/dom/units/Rem.js";
		String requestHeader0207 = "GET " + requestFile0207 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001b997f2fd-5672-4aa1-a625-b4982d4acb2029820909-1501-babe-face-0000000000033c3102a9-b962-44ff-9b20-3ea62708aa26HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0207, requestHost0207, requestPort0207, requestHeader0207, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0207 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 472
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [207] <- Index 207
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [208] <- WEB ADMIN Index 208 ---
		String requestProt0208 = "https";
		String requestHost0208 = "performancemanager4.successfactors.com";
		int    requestPort0208 = 443;
		String requestFile0208 = "/ui/sapui5/main_1.65.5/sap/ui/comp/messagebundle_en.properties";
		String requestHeader0208 = "GET " + requestFile0208 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 01000500015ccde255-23f2-4f30-b522-dd1a2de0872529820909-1501-babe-face-000000000003bf7f7292-33b2-4b3f-bc2a-9f34274b5327HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0208, requestHost0208, requestPort0208, requestHeader0208, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0208 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 7477
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [208] <- Index 208
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [209] <- WEB ADMIN Index 209 ---
		String requestProt0209 = "https";
		String requestHost0209 = "performancemanager4.successfactors.com";
		int    requestPort0209 = 443;
		String requestFile0209 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getReportCenterLayoutPreference.dwr";
		String requestContent0209 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423319" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=getReportCenterLayoutPreference" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=0";
		requestContent0209 = Lib.replaceTextPattern(requestContent0209, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0209_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0209 = new String(Lib.binaryReplace(requestContent0209.getBytes(), binarySearchPattern0209_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0209 = "POST " + requestFile0209 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0209.length() + "\r\n" + 		// Content-Length: 294
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 010005000197fd121f-0232-4bf8-b52a-ebbe2bc6502b29820909-1501-babe-face-0000000000038d70c219-3fd2-4f1e-842a-2e302ca0a42dHTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0209, requestHost0209, requestPort0209, requestHeader0209, requestContent0209.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0209 = null;		// support garbage collector to reduce memory
		requestContent0209 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 145
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [209] <- Index 209
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [210] <- WEB ADMIN Index 210 ---
		String requestProt0210 = "https";
		String requestHost0210 = "performancemanager4.successfactors.com";
		int    requestPort0210 = 443;
		String requestFile0210 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.performAction.dwr";
		String requestContent0210 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423319" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=performAction" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:LABELAS" + "\r\n" + 
				"c0-param1=string:ADHOC_SINGLE_CROSS_DOMAIN" + "\r\n" + 
				"c0-e1=string:GET_ALL_LABELS" + "\r\n" + 
				"c0-param2=Object_Object:{subAction:reference:c0-e1}" + "\r\n" + 
				"batchId=1";
		requestContent0210 = Lib.replaceTextPattern(requestContent0210, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0210_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0210 = new String(Lib.binaryReplace(requestContent0210.getBytes(), binarySearchPattern0210_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0210 = "POST " + requestFile0210 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0210.length() + "\r\n" + 		// Content-Length: 424
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 01000500017285c2f6-a182-4259-8822-985d29a55f2529820909-1501-babe-face-0000000000035930423b-7332-4817-952d-01e122c0a12eHTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0210, requestHost0210, requestPort0210, requestHeader0210, requestContent0210.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0210 = null;		// support garbage collector to reduce memory
		requestContent0210 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 623
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [210] <- Index 210
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [211] <- WEB ADMIN Index 211 ---
		String requestProt0211 = "https";
		String requestHost0211 = "performancemanager4.successfactors.com";
		int    requestPort0211 = 443;
		String requestFile0211 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSACResourcePrefetchURL.dwr";
		String requestContent0211 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423319" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=getSACResourcePrefetchURL" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=2";
		requestContent0211 = Lib.replaceTextPattern(requestContent0211, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0211_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0211 = new String(Lib.binaryReplace(requestContent0211.getBytes(), binarySearchPattern0211_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0211 = "POST " + requestFile0211 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0211.length() + "\r\n" + 		// Content-Length: 288
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 01000500012b76022c-4822-44d3-9e24-a0e120eb652f29820909-1501-babe-face-000000000003418ec2ae-6d42-428c-8322-ff7d2eb3f528HTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0211, requestHost0211, requestPort0211, requestHeader0211, requestContent0211.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0211 = null;		// support garbage collector to reduce memory
		requestContent0211 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 173
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [211] <- Index 211
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [212] <- WEB ADMIN Index 212 ---
		String requestProt0212 = "https";
		String requestHost0212 = "performancemanager4.successfactors.com";
		int    requestPort0212 = 443;
		String requestFile0212 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.isSearchEnabled.dwr";
		String requestContent0212 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423319" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=isSearchEnabled" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=3";
		requestContent0212 = Lib.replaceTextPattern(requestContent0212, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0212_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0212 = new String(Lib.binaryReplace(requestContent0212.getBytes(), binarySearchPattern0212_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0212 = "POST " + requestFile0212 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0212.length() + "\r\n" + 		// Content-Length: 278
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001bc0b42c8-e922-47de-8c2c-84fa26920a2029820909-1501-babe-face-00000000000387a86297-fc42-4554-b320-2bd02c053e2dHTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0212, requestHost0212, requestPort0212, requestHeader0212, requestContent0212.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0212 = null;		// support garbage collector to reduce memory
		requestContent0212 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 177
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [212] <- Index 212
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [213] <- WEB ADMIN Index 213 ---
		String requestProt0213 = "https";
		String requestHost0213 = "performancemanager4.successfactors.com";
		int    requestPort0213 = 443;
		String requestFile0213 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.isUserHasAdminPermission.dwr";
		String requestContent0213 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423319" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=isUserHasAdminPermission" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=5";
		requestContent0213 = Lib.replaceTextPattern(requestContent0213, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0213_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0213 = new String(Lib.binaryReplace(requestContent0213.getBytes(), binarySearchPattern0213_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0213 = "POST " + requestFile0213 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0213.length() + "\r\n" + 		// Content-Length: 287
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 010005000138756257-4f32-4029-8c2b-538e2d95392b29820909-1501-babe-face-000000000003065c6247-4a92-4744-b625-45612133412bHTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0213, requestHost0213, requestPort0213, requestHeader0213, requestContent0213.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0213 = null;		// support garbage collector to reduce memory
		requestContent0213 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 144
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [213] <- Index 213
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [214] <- WEB ADMIN Index 214 ---
		String requestProt0214 = "https";
		String requestHost0214 = "performancemanager4.successfactors.com";
		int    requestPort0214 = 443;
		String requestFile0214 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getCategoryFilters.dwr";
		String requestContent0214 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423319" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=getCategoryFilters" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=4";
		requestContent0214 = Lib.replaceTextPattern(requestContent0214, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0214_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0214 = new String(Lib.binaryReplace(requestContent0214.getBytes(), binarySearchPattern0214_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0214 = "POST " + requestFile0214 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0214.length() + "\r\n" + 		// Content-Length: 281
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 010005000191e1528d-6e02-455a-af22-332b2fc15d2929820909-1501-babe-face-0000000000037433129f-5d52-4741-9120-6e532199a621HTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0214, requestHost0214, requestPort0214, requestHeader0214, requestContent0214.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0214 = null;		// support garbage collector to reduce memory
		requestContent0214 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 511
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [214] <- Index 214
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [215] <- WEB ADMIN Index 215 ---
		String requestProt0215 = "https";
		String requestHost0215 = "performancemanager4.successfactors.com";
		int    requestPort0215 = 443;
		String requestFile0215 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getViewSchedulesButtonVisibility.dwr";
		String requestContent0215 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423319" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=getViewSchedulesButtonVisibility" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=6";
		requestContent0215 = Lib.replaceTextPattern(requestContent0215, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0215_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0215 = new String(Lib.binaryReplace(requestContent0215.getBytes(), binarySearchPattern0215_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0215 = "POST " + requestFile0215 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0215.length() + "\r\n" + 		// Content-Length: 295
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001a3b69294-5512-497c-b220-29052510572c29820909-1501-babe-face-000000000003b1c41220-ee22-4ebd-812d-36ef2b87cd22HTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0215, requestHost0215, requestPort0215, requestHeader0215, requestContent0215.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0215 = null;		// support garbage collector to reduce memory
		requestContent0215 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 143
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [215] <- Index 215
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [216] <- WEB ADMIN Index 216 ---
		String requestProt0216 = "https";
		String requestHost0216 = "performancemanager4.successfactors.com";
		int    requestPort0216 = 443;
		String requestFile0216 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.isSwitchToClassicViewPermitted.dwr";
		String requestContent0216 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423319" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=isSwitchToClassicViewPermitted" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=boolean:false" + "\r\n" + 
				"batchId=7";
		requestContent0216 = Lib.replaceTextPattern(requestContent0216, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0216_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0216 = new String(Lib.binaryReplace(requestContent0216.getBytes(), binarySearchPattern0216_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0216 = "POST " + requestFile0216 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0216.length() + "\r\n" + 		// Content-Length: 317
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001411f922b-f712-4496-a429-65c22975d92229820909-1501-babe-face-00000000000357fa226b-4162-417c-972b-b3f62244d329HTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0216, requestHost0216, requestPort0216, requestHeader0216, requestContent0216.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0216 = null;		// support garbage collector to reduce memory
		requestContent0216 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 275
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [216] <- Index 216
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [217] <- WEB ADMIN Index 217 ---
		String requestProt0217 = "https";
		String requestHost0217 = "performancemanager4.successfactors.com";
		int    requestPort0217 = 443;
		String requestFile0217 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getPermittedOptions.dwr";
		String requestContent0217 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423319" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=getPermittedOptions" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=8";
		requestContent0217 = Lib.replaceTextPattern(requestContent0217, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0217_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0217 = new String(Lib.binaryReplace(requestContent0217.getBytes(), binarySearchPattern0217_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0217 = "POST " + requestFile0217 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0217.length() + "\r\n" + 		// Content-Length: 282
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001391f4274-dd72-447d-ad2a-841321c0e12c29820909-1501-babe-face-0000000000032919b2b3-4f72-48ac-9423-00b82b8f132cHTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0217, requestHost0217, requestPort0217, requestHeader0217, requestContent0217.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0217 = null;		// support garbage collector to reduce memory
		requestContent0217 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 211
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [217] <- Index 217
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [218] <- WEB ADMIN Index 218 ---
		String requestProt0218 = "https";
		String requestHost0218 = "clients1.google.com";
		int    requestPort0218 = 443;
		String requestFile0218 = "/tbproxy/af/query" +
				"?q=Chc2LjEuMTcxNS4xNDQyL2VuIChHR0xMKRMZrGFItlDidRYjLciqm8okIy0YL5B6JCMtVXdBXyQjLSqaP10kFBMZ2ImInKWhh70jLSXe4rQkFA==";
		String requestHeader0218 = "GET " + requestFile0218 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: clients1.google.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"X-Goog-Api-Key: AIzaSyBOti4mM-6x9WDnZIjIeyEU21OpBXqWBgw\r\n" + 
				"X-Client-Data: CJW2yQEIpLbJAQjEtskBCKmdygEI/J/KAQjiqMoBCMqvygEIzrDKAQj3tMoB\r\n" + 
				"Sec-Fetch-Site: none\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0218, requestHost0218, requestPort0218, requestHeader0218, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0218 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PROTO", header text fragment = [verification disabled], recorded content size = 28
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PROTO", null, null);		// Test [218] <- Index 218
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [219] <- WEB ADMIN Index 219 ---
		String requestProt0219 = "https";
		String requestHost0219 = "performancemanager4.successfactors.com";
		int    requestPort0219 = 443;
		String requestFile0219 = "/xi/ajax/remoting/call/plaincall/globalNotificationControllerProxy.getNumberOfNewNotifications.dwr";
		String requestContent0219 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423319" + "\r\n" + 
				"c0-scriptName=globalNotificationControllerProxy" + "\r\n" + 
				"c0-methodName=getNumberOfNewNotifications" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:TestAutomation" + "\r\n" + 
				"batchId=9";
		requestContent0219 = Lib.replaceTextPattern(requestContent0219, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0219_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0219 = new String(Lib.binaryReplace(requestContent0219.getBytes(), binarySearchPattern0219_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0219 = "POST " + requestFile0219 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0219.length() + "\r\n" + 		// Content-Length: 328
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001a9954272-b532-4cc4-a62b-cbfd2c0d972929820909-1501-babe-face-0000000000030a5f4226-6fa2-4ae6-bd2f-bfe9211d8023HTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0219, requestHost0219, requestPort0219, requestHeader0219, requestContent0219.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0219 = null;		// support garbage collector to reduce memory
		requestContent0219 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 114
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [219] <- Index 219
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [220] <- WEB ADMIN Index 220 ---
		String requestProt0220 = "https";
		String requestHost0220 = "performancemanager4.successfactors.com";
		int    requestPort0220 = 443;
		String requestFile0220 = "/xi/ajax/remoting/call/plaincall/showMeControllerProxy.signAPIUrl.dwr";
		String requestContent0220 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423319" + "\r\n" + 
				"c0-scriptName=showMeControllerProxy" + "\r\n" + 
				"c0-methodName=signAPIUrl" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:%2Fmedia%2Fshowme_ab3a783e_706e_40dd_a87a_a8283cabf42b%2FREPORT_CENTER%2Fstatus" + "\r\n" + 
				"c0-param1=string:REPORT_CENTER" + "\r\n" + 
				"c0-param2=string:b834e0f183d2c60df022354ec83fe656" + "\r\n" + 
				"batchId=10";
		requestContent0220 = Lib.replaceTextPattern(requestContent0220, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences
		requestContent0220 = Lib.replaceTextPattern(requestContent0220, "b834e0f183d2c60df022354ec83fe656", C_UploadHash, 0);		// search and replace content fragment "b834e0f183d2c60df022354ec83fe656" with variable 'C_UploadHash' on all occurrences
		requestContent0220 = Lib.replaceTextPattern(requestContent0220, "ab3a783e_706e_40dd_a87a_a8283cabf42b", C_Showme, 0);		// search and replace content fragment "ab3a783e_706e_40dd_a87a_a8283cabf42b" with variable 'C_Showme' on all occurrences

		byte[] binarySearchPattern0220_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0220 = new String(Lib.binaryReplace(requestContent0220.getBytes(), binarySearchPattern0220_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0220 = "POST " + requestFile0220 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0220.length() + "\r\n" + 		// Content-Length: 446
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001d5acb274-fbe2-4620-b729-244028ff7d2229820909-1501-babe-face-000000000003c7065252-1492-4ca8-a723-4ad42ec53026HTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0220, requestHost0220, requestPort0220, requestHeader0220, requestContent0220.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0220 = null;		// support garbage collector to reduce memory
		requestContent0220 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 425
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [220] <- Index 220
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Token2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0220_1 = new BoundaryBasedExtractorItem( "token=" , "\");",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0220_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Token2'
			C_Token2 = boundaryBasedContentExtractorItem0220_1.getResultText();
			log("<<< C_Token2 = " + C_Token2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Token2!= null && C_Token2.trim().length() == 0)
			{
				C_Token2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Token2' ends up with an empty string - a substitute value was set");
				log("<<< C_Token2 = " + C_Token2);
			}
		}
		catch (Exception e) { C_Token2 = null; log(e); }
		if (C_Token2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Token2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [221] <- WEB ADMIN Index 221 ---
		String requestProt0221 = "https";
		String requestHost0221 = "performancemanager4.successfactors.com";
		int    requestPort0221 = 443;
		String requestFile0221 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getAllReports.dwr";
		String requestContent0221 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423319" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=getAllReports" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=boolean:true" + "\r\n" + 
				"c0-e2=Object_Object:{}" + "\r\n" + 
				"c0-e3=string:LastModified" + "\r\n" + 
				"c0-e4=string:DESCENDING" + "\r\n" + 
				"c0-e5=boolean:true" + "\r\n" + 
				"c0-e6=number:50" + "\r\n" + 
				"c0-e7=string:MYREPORTS" + "\r\n" + 
				"c0-e8=string:FLAT" + "\r\n" + 
				"c0-e9=null:null" + "\r\n" + 
				"c0-e10=number:1" + "\r\n" + 
				"c0-param0=Object_Object:{firstLoad:reference:c0-e1, filterOptions:reference:c0-e2, sortColumnType:reference:c0-e3, sortDirection:reference:c0-e4, invalidatePermissionCache:reference:c0-e5, totalSize:reference:c0-e6, reportTabType:reference:c0-e7, reportCenterLayout:reference:c0-e8, currentFolder:reference:c0-e9, requestId:reference:c0-e10}" + "\r\n" + 
				"c0-param1=Array:[]" + "\r\n" + 
				"batchId=11";
		requestContent0221 = Lib.replaceTextPattern(requestContent0221, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0221_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0221 = new String(Lib.binaryReplace(requestContent0221.getBytes(), binarySearchPattern0221_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0221 = "POST " + requestFile0221 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0221.length() + "\r\n" + 		// Content-Length: 838
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"OPTR_CXT: 0100050001872ed266-36b2-4206-9322-12262a758c2329820909-1501-babe-face-000000000003f41fd27f-8932-466f-9e28-f4022155712bHTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0221, requestHost0221, requestPort0221, requestHeader0221, requestContent0221.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0221 = null;		// support garbage collector to reduce memory
		requestContent0221 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2044
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [221] <- Index 221
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_ReportID'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0221_1 = new BoundaryBasedExtractorItem( "s6.reportId=\"" , "\";",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0221_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_ReportID'
			C_ReportID = boundaryBasedContentExtractorItem0221_1.getResultText();
			log("<<< C_ReportID = " + C_ReportID);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_ReportID!= null && C_ReportID.trim().length() == 0)
			{
				C_ReportID = "";
				log("runtime note: the extraction of a new value for the variable 'C_ReportID' ends up with an empty string - a substitute value was set");
				log("<<< C_ReportID = " + C_ReportID);
			}
		}
		catch (Exception e) { C_ReportID = null; log(e); }
		if (C_ReportID == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_ReportID' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [222] <- WEB ADMIN Index 222 ---
		String requestProt0222 = "https";
		String requestHost0222 = "performancemanager4.successfactors.com";
		int    requestPort0222 = 443;
		String requestFile0222 = "/public/ui-resource/Teck/202;mod=3a197762f867d55aceaee0bb261f6b2b";
		requestFile0222 = Lib.replaceTextPattern(requestFile0222, "3a197762f867d55aceaee0bb261f6b2b", C_Mod1, 0);		// search and replace request file fragment "3a197762f867d55aceaee0bb261f6b2b" with variable 'C_Mod1' on all occurrences

		String requestHeader0222 = "GET " + requestFile0222 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0222, requestHost0222, requestPort0222, requestHeader0222, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("598758c08d82beb795c1663b536ed101", C_Mod8);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("82137484cd2fcde38d057a0be1a23986", C_Mod7);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("82f3828c", C_Mod6);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!11!THRBPLPT!NO0!SD1BUT1", C_belieze1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3a197762f867d55aceaee0bb261f6b2b", C_Mod1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0222 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 2609
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [222] <- Index 222
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [223] <- WEB ADMIN Index 223 ---
		String requestProt0223 = "https";
		String requestHost0223 = "performancemanager4.successfactors.com";
		int    requestPort0223 = 443;
		String requestFile0223 = "/public/ui-resource/Teck/202;mod=3a197762f867d55aceaee0bb261f6b2b%22";
		requestFile0223 = Lib.replaceTextPattern(requestFile0223, "3a197762f867d55aceaee0bb261f6b2b", C_Mod1, 0);		// search and replace request file fragment "3a197762f867d55aceaee0bb261f6b2b" with variable 'C_Mod1' on all occurrences

		String requestHeader0223 = "GET " + requestFile0223 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0223, requestHost0223, requestPort0223, requestHeader0223, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0223 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [223] <- Index 223
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [224] <- WEB ADMIN Index 224 ---
		String requestProt0224 = "https";
		String requestHost0224 = "mediaservicesfmsprod.ms.successfactors.com";
		int    requestPort0224 = 443;
		String requestFile0224 = "/mediaservice/api/v2/media/showme_ab3a783e_706e_40dd_a87a_a8283cabf42b/REPORT_CENTER/status" +
				"?token=" + C_Token2 +		// recorded value = 583e8bd5ce99457812e95055646a61b19e2bc259a3c128777b3ef6d78ede6803384b9c67d4112cfabfe585c95cd0f7320e713e506dee36d5fda835c14884e1ae,7139663687069529219,1575488553,1
				"&callback=sfDeferredUtilCallback0";
		requestFile0224 = Lib.replaceTextPattern(requestFile0224, "583e8bd5ce99457812e95055646a61b19e2bc259a3c128777b3ef6d78ede6803384b9c67d4112cfabfe585c95cd0f7320e713e506dee36d5fda835c14884e1ae,7139663687069529219,1575488553,1", C_Token2, 0);		// search and replace request file fragment "583e8bd5ce99457812e95055646a61b19e2bc259a3c128777b3ef6d78ede6803384b9c67d4112cfabfe585c95cd0f7320e713e506dee36d5fda835c14884e1ae,7139663687069529219,1575488553,1" with variable 'C_Token2' on all occurrences
		requestFile0224 = Lib.replaceTextPattern(requestFile0224, "ab3a783e_706e_40dd_a87a_a8283cabf42b", C_Showme, 0);		// search and replace request file fragment "ab3a783e_706e_40dd_a87a_a8283cabf42b" with variable 'C_Showme' on all occurrences

		String requestHeader0224 = "GET " + requestFile0224 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mediaservicesfmsprod.ms.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0224, requestHost0224, requestPort0224, requestHeader0224, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0224 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 133
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [224] <- Index 224
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 6 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [225] <- WEB ADMIN Index 225 ---
		String requestProt0225 = "https";
		String requestHost0225 = "performancemanager4.successfactors.com";
		int    requestPort0225 = 443;
		String requestFile0225 = "/public/ui-dcss/Teck/_/3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!13YzS_!/merge_FD3E69DB8103A603EC04DBBA1D636582/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Bold.woff2";
		requestFile0225 = Lib.replaceTextPattern(requestFile0225, "598758c08d82beb795c1663b536ed101", C_Mod8, 0);		// search and replace request file fragment "598758c08d82beb795c1663b536ed101" with variable 'C_Mod8' on all occurrences
		requestFile0225 = Lib.replaceTextPattern(requestFile0225, "82137484cd2fcde38d057a0be1a23986", C_Mod7, 0);		// search and replace request file fragment "82137484cd2fcde38d057a0be1a23986" with variable 'C_Mod7' on all occurrences
		requestFile0225 = Lib.replaceTextPattern(requestFile0225, "!11!THRBPLPT!NO0!SD1BUT1", C_belieze1, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SD1BUT1" with variable 'C_belieze1' on all occurrences
		requestFile0225 = Lib.replaceTextPattern(requestFile0225, "3a197762f867d55aceaee0bb261f6b2b", C_Mod1, 0);		// search and replace request file fragment "3a197762f867d55aceaee0bb261f6b2b" with variable 'C_Mod1' on all occurrences
		requestFile0225 = Lib.replaceTextPattern(requestFile0225, "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0, 0);		// search and replace request file fragment "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_belieze0' on all occurrences
		requestFile0225 = Lib.replaceTextPattern(requestFile0225, "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0225 = Lib.replaceTextPattern(requestFile0225, "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1, 0);		// search and replace request file fragment "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU" with variable 'C_Img1' on all occurrences
		requestFile0225 = Lib.replaceTextPattern(requestFile0225, "FD3E69DB8103A603EC04DBBA1D636582", C_Merge1, 0);		// search and replace request file fragment "FD3E69DB8103A603EC04DBBA1D636582" with variable 'C_Merge1' on all occurrences

		String requestHeader0225 = "GET " + requestFile0225 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0225, requestHost0225, requestPort0225, requestHeader0225, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("598758c08d82beb795c1663b536ed101", C_Mod8);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("82137484cd2fcde38d057a0be1a23986", C_Mod7);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!11!THRBPLPT!NO0!SD1BUT1", C_belieze1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3a197762f867d55aceaee0bb261f6b2b", C_Mod1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("FD3E69DB8103A603EC04DBBA1D636582", C_Merge1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0225 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 26732
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [225] <- Index 225
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [226] <- WEB ADMIN Index 226 ---
		String requestProt0226 = "https";
		String requestHost0226 = "clients1.google.com";
		int    requestPort0226 = 443;
		String requestFile0226 = "/tbproxy/af/query" +
				"?q=Chc2LjEuMTcxNS4xNDQyL2VuIChHR0xMKRMZoXyqjg4-7zAjLaa9dd0kFA==";
		String requestHeader0226 = "GET " + requestFile0226 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: clients1.google.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"X-Goog-Api-Key: AIzaSyBOti4mM-6x9WDnZIjIeyEU21OpBXqWBgw\r\n" + 
				"X-Client-Data: CJW2yQEIpLbJAQjEtskBCKmdygEI/J/KAQjiqMoBCMqvygEIzrDKAQj3tMoB\r\n" + 
				"Sec-Fetch-Site: none\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0226, requestHost0226, requestPort0226, requestHeader0226, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0226 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PROTO", header text fragment = [verification disabled], recorded content size = 25
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PROTO", null, null);		// Test [226] <- Index 226
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [227] <- WEB ADMIN Index 227 ---
		String requestProt0227 = "https";
		String requestHost0227 = "browser.pipe.aria.microsoft.com";
		int    requestPort0227 = 443;
		String requestFile0227 = "/Collector/3.0/" +
				"?qsp=true" +
				"&content-type=application%2Fbond-compact-binary" +
				"&client-id=NO_AUTH" +
				"&sdk-version=AWT-Web-JS-1.8.5" +
				"&x-apikey=a387cfcf60114a43a7699f9fbb49289e-9bceb9fe-1c06-460f-96c5-6a0b247358bc-7238" +
				"&client-time-epoch-millis=1575486758388" +
				"&time-delta-to-apply-millis=46";
		byte[] requestContentBinary0227 = Lib.base64ToByteArray("bQkLAUphMzg3Y2ZjZjYwMTE0YTQzYTc2OTlmOWZiYjQ5Mjg5ZS05YmNlYjlmZS0xYzA2LTQ2MGYtOTZjNS02YTBiMjQ3MzU4YmMtNzIzOAoBSRJhY3RfZGVmYXVsdF9zb3VyY2WpJDBhMDE0OTc1LWMzZmMtNGYwZi1hMDQ0LTg2MmJlMGFiOWU2YdEG6PegpdpbywgKASkkOTY2MzQ3MjctNzlkMi00NzAyLWIzOTYtYTRlMWFjODJkNWY5cZbooKXaW6kGY3VzdG9tyQYJYXd0X3N0YXRzzQ0JCQ4IVGVuYW50SWQgZmFkM2JkMWQ4ZTRiNGMwNjg5NGJkN2JhYzgwZTRmMDIWcmVjb3Jkc19yZWNlaXZlZF9jb3VudAE0EnJlY29yZHNfc2VudF9jb3VudAE0EVVzZXJJbmZvLkxhbmd1YWdlBWVuLVVTEVVzZXJJbmZvLlRpbWVab25lBi0wODowMBZEZXZpY2VJbmZvLkJyb3dzZXJOYW1lBkNocm9tZRlEZXZpY2VJbmZvLkJyb3dzZXJWZXJzaW9uDDc3LjAuMzg2NS45MBFEZXZpY2VJbmZvLk9zTmFtZQdXaW5kb3dzFERldmljZUluZm8uT3NWZXJzaW9uAjEwEEV2ZW50SW5mby5Jbml0SWQkZTYxMjhhOWQtMDY1Ny00ODY0LTkwYzEtMzgxNjllOGIzYzcwEkV2ZW50SW5mby5TZXF1ZW5jZQE3FEV2ZW50SW5mby5TZGtWZXJzaW9uEEFXVC1XZWItSlMtMS44LjUORXZlbnRJbmZvLk5hbWUJYXd0X3N0YXRzDkV2ZW50SW5mby5UaW1lGDIwMTktMTItMDRUMTk6MTI6MzcuMzg3WgAAAA==");
		String requestContent0227 = new String(requestContentBinary0227);
		String requestHeader0227 = "POST " + requestFile0227 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: browser.pipe.aria.microsoft.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContentBinary0227.length + "\r\n" + 		// Content-Length: 658
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://excel.officeapps.live.com\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0227, requestHost0227, requestPort0227, requestHeader0227, requestContentBinary0227, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0227 = null;		// support garbage collector to reduce memory
		requestContent0227 = null;		// support garbage collector to reduce memory
		requestContentBinary0227 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [227] <- Index 227
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [228] <- WEB ADMIN Index 228 ---
		String requestProt0228 = "https";
		String requestHost0228 = "performancemanager4.successfactors.com";
		int    requestPort0228 = 443;
		String requestFile0228 = "/perfLogServlet" +
				"?callId=3639768183-0" +
				"&moduleId=REPORT" +
				"&pageId=REPORT_CENTER" +
				"&pageQualifier=REPORT_LISTING_PAGE" +
				"&TRS=2363" +
				"&TIP=2577" +
				"&TML=2812" +
				"&TSL=9868" +
				"&ST=1575486749644" +
				"&MEM=142146" +
				"&NRE=404" +
				"&NWR=146" +
				"&SCPU=20" +
				"&SQLC=79" +
				"&SQLT=118" +
				"&SVT=7704" +
				"&UCPU=330" +
				"&CPU=350" +
				"&FRE=1" +
				"&FWR=0" +
				"&jsNum=81" +
				"&cssNum=18" +
				"&renderTime=9836" +
				"&TTB=557" +
				"&RSR=575" +
				"&DIA=2904" +
				"&DCP=2915";
		String requestContent0228 = 
				"OPTR_INFO=0f23d2d3-ca12-42e7-832a-7af12a315421!1575486750722!1575486750727!0" +
				"&OPTR_INFO=835ed2cb-c992-4670-bb24-f1402e4f3b22!1575486750747!1575486750752!0" +
				"&OPTR_INFO=d131c2a5-3db2-48e6-ad20-6b2328f80629!1575486751307!1575486751324!0" +
				"&OPTR_INFO=adf7b2ad-9422-4560-a72b-48f1216cbd25!1575486751438!1575486751767!0" +
				"&OPTR_INFO=8223b2c0-32f2-483d-bc2d-26362011bb27!1575486751771!1575486751845!0" +
				"&OPTR_INFO=18c67233-8772-4f2a-ac2d-92f52a5d3c24!1575486751846!1575486751849!0" +
				"&OPTR_INFO=ef19e233-38e2-4041-ad29-497b28a27f22!1575486751851!1575486751886!0" +
				"&OPTR_INFO=85d0526e-4a82-4396-bf2b-60bf2eaa562d!1575486751887!1575486751889!0" +
				"&OPTR_INFO=ee7e02d4-5882-42f3-af2a-7a852eb5c921!1575486751890!1575486751892!0" +
				"&OPTR_INFO=a3f722e4-9042-4a5c-9a21-2b5a203cf429!1575486751895!1575486751970!0" +
				"&OPTR_INFO=1210e28b-7a02-4f69-8d28-cb8b230e6f24!1575486751998!1575486752005!0" +
				"&OPTR_INFO=19d1f2b5-6112-4777-8c20-60632e15a328!1575486752014!1575486752060!0" +
				"&OPTR_INFO=dcfb42c8-35e2-4961-9d26-e0f62c380a26!1575486752077!1575486752137!0" +
				"&OPTR_INFO=c3e3520a-24c2-488b-b228-78662def8321!1575486752138!1575486752190!0" +
				"&OPTR_INFO=28301285-f992-44fc-a22c-1a28217df522!1575486752193!1575486752252!0" +
				"&OPTR_INFO=9699a23a-7092-487f-ac29-dea02e837e28!1575486752255!1575486752298!0" +
				"&OPTR_INFO=ecd2e286-c242-436c-a423-2c4925b59c26!1575486752308!1575486752351!0" +
				"&OPTR_INFO=520bb2ca-1fd2-4591-af2f-ae2720601e2c!1575486752352!1575486752400!0" +
				"&OPTR_INFO=b997f2fd-5672-4aa1-a625-b4982d4acb20!1575486752401!1575486752444!0" +
				"&OPTR_INFO=041cc2c1-16ca-11ea-a9fb-4feef88e786c!1575486749584!1575486752492!1" +
				"&OPTR_INFO=8e2d720d-28c2-42d0-b02e-4e3b225e1d2c!1575486752499!1575486752502!0" +
				"&OPTR_INFO=5ccde255-23f2-4f30-b522-dd1a2de08725!1575486752542!1575486752589!0" +
				"&OPTR_INFO=5373523b-86d2-4b40-9322-75f22c2fa127!1575486752685!1575486752689!0" +
				"&OPTR_INFO=97fd121f-0232-4bf8-b52a-ebbe2bc6502b!1575486752736!1575486752886!0" +
				"&OPTR_INFO=7285c2f6-a182-4259-8822-985d29a55f25!1575486752737!1575486752946!0" +
				"&OPTR_INFO=2b76022c-4822-44d3-9e24-a0e120eb652f!1575486752739!1575486752911!0" +
				"&OPTR_INFO=bc0b42c8-e922-47de-8c2c-84fa26920a20!1575486752742!1575486752957!0" +
				"&OPTR_INFO=91e1528d-6e02-455a-af22-332b2fc15d29!1575486752743!1575486752914!0" +
				"&OPTR_INFO=38756257-4f32-4029-8c2b-538e2d95392b!1575486752745!1575486753105!0" +
				"&OPTR_INFO=a3b69294-5512-497c-b220-29052510572c!1575486752746!1575486752964!0" +
				"&OPTR_INFO=411f922b-f712-4496-a429-65c22975d922!1575486752747!1575486753099!0" +
				"&OPTR_INFO=391f4274-dd72-447d-ad2a-841321c0e12c!1575486752749!1575486753202!0" +
				"&OPTR_INFO=e89642c3-5892-4770-9028-1fa521a3c82d!1575486752771!1575486752775!0" +
				"&OPTR_INFO=0fea92a4-37a2-486b-8625-b16d237d4520!1575486752828!1575486752831!0" +
				"&OPTR_INFO=e083e201-f312-425d-8727-790b26a23428!1575486752832!1575486752835!0" +
				"&OPTR_INFO=8ecff295-dfc2-4fd6-a126-5faa2c07692b!1575486752836!1575486752838!0" +
				"&OPTR_INFO=a9954272-b532-4cc4-a62b-cbfd2c0d9729!1575486752863!1575486753047!0" +
				"&OPTR_INFO=d5acb274-fbe2-4620-b729-244028ff7d22!1575486752864!1575486753088!0" +
				"&OPTR_INFO=872ed266-36b2-4206-9322-12262a758c23!1575486752893!1575486760017!0";
		String requestHeader0228 = "POST " + requestFile0228 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0228.length() + "\r\n" + 		// Content-Length: 3002
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0228, requestHost0228, requestPort0228, requestHeader0228, requestContent0228.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0228 = null;		// support garbage collector to reduce memory
		requestContent0228 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [228] <- Index 228
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [229] <- WEB ADMIN Index 229 ---
		String requestProt0229 = "https";
		String requestHost0229 = "clients1.google.com";
		int    requestPort0229 = 443;
		String requestFile0229 = "/tbproxy/af/query" +
				"?q=Chc2LjEuMTcxNS4xNDQyL2VuIChHR0xMKRMZrGFItlDidRYjLciqm8okIy0YL5B6JCMtVXdBXyQjLSqaP10kFA==";
		String requestHeader0229 = "GET " + requestFile0229 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: clients1.google.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"X-Goog-Api-Key: AIzaSyBOti4mM-6x9WDnZIjIeyEU21OpBXqWBgw\r\n" + 
				"X-Client-Data: CJW2yQEIpLbJAQjEtskBCKmdygEI/J/KAQjiqMoBCMqvygEIzrDKAQj3tMoB\r\n" + 
				"Sec-Fetch-Site: none\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0229, requestHost0229, requestPort0229, requestHeader0229, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0229 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PROTO", header text fragment = [verification disabled], recorded content size = 28
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PROTO", null, null);		// Test [229] <- Index 229
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_5 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #5: ClickLoginReport
		// # -------------------------



		// --- HTTP REQUEST: Test [231] <- WEB ADMIN Index 231 ---
		String requestProt0231 = "https";
		String requestHost0231 = "performancemanager4.successfactors.com";
		int    requestPort0231 = 443;
		String requestFile0231 = "/sf/inform" +
				"?reportId=" + C_ReportID +		// recorded value = cbdd22b1-9103-4101-a99a-80b889f1ceea
				"&action=RUN" +
				"&source=reportcenter" +
				"&_s.crb=" + java.net.URLEncoder.encode(C_AjaxsecKey1);		// recorded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestFile0231 = Lib.replaceTextPattern(requestFile0231, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences
		requestFile0231 = Lib.replaceTextPattern(requestFile0231, "cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID, 0);		// search and replace request file fragment "cbdd22b1-9103-4101-a99a-80b889f1ceea" with variable 'C_ReportID' on all occurrences
		requestFile0231 = Lib.replaceTextPattern(requestFile0231, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", java.net.URLEncoder.encode(C_AjaxsecKey1), 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'C_AjaxsecKey1' on all occurrences

		String requestHeader0231 = "GET " + requestFile0231 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: nested-navigate\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0231, requestHost0231, requestPort0231, requestHeader0231, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0231 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 62657
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Release:");		// Test [231] <- Index 231
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [232] <- WEB ADMIN Index 232 ---
		String requestProt0232 = "https";
		String requestHost0232 = "performancemanager4.successfactors.com";
		int    requestPort0232 = 443;
		String requestFile0232 = "/xi/ajax/remoting/call/plaincall/sessionTimeoutControllerProxy.keepAlive.dwr" +
				"?_s.crb=" + C_AjaxsecKey1;		// recorded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d
		requestFile0232 = Lib.replaceTextPattern(requestFile0232, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'vScrb' on all occurrences
		requestFile0232 = Lib.replaceTextPattern(requestFile0232, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1, 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'C_AjaxsecKey1' on all occurrences

		String requestContent0232 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423230" + "\r\n" + 
				"c0-scriptName=sessionTimeoutControllerProxy" + "\r\n" + 
				"c0-methodName=keepAlive" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=0";
		requestContent0232 = Lib.replaceTextPattern(requestContent0232, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences

		byte[] binarySearchPattern0232_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0232 = new String(Lib.binaryReplace(requestContent0232.getBytes(), binarySearchPattern0232_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0232 = "POST " + requestFile0232 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0232.length() + "\r\n" + 		// Content-Length: 273
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424-1\r\n" + 
				"OPTR_CXT: 0100050001063c72d4-9602-4126-ab2f-a5bc26f86a2729820909-1501-babe-face-00000000000394c8c276-5b32-4880-852b-dd552101032fHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0232, requestHost0232, requestPort0232, requestHeader0232, requestContent0232.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0232 = null;		// support garbage collector to reduce memory
		requestContent0232 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 117
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [232] <- Index 232
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [233] <- WEB ADMIN Index 233 ---
		String requestProt0233 = "https";
		String requestHost0233 = "performancemanager4.successfactors.com";
		int    requestPort0233 = 443;
		String requestFile0233 = "/perfLogServlet" +
				"?callId=3639768183-1" +
				"&moduleId=REPORT" +
				"&pageId=REPORT_CENTER" +
				"&pageQualifier=REPORT_LISTING_PAGE" +
				"&TRS=2363" +
				"&TIP=2577" +
				"&TML=2812" +
				"&TSL=9868" +
				"&ST=1575486787715" +
				"&ET=1575486787922" +
				"&MEM=403" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=2" +
				"&UCPU=0" +
				"&CPU=0" +
				"&FRE=0" +
				"&FWR=0" +
				"&jsNum=81" +
				"&cssNum=18" +
				"&renderTime=106";
		String requestContent0233 = 
				"OPTR_INFO=063c72d4-9602-4126-ab2f-a5bc26f86a27!1575486787715!1575486787821!0";
		String requestHeader0233 = "POST " + requestFile0233 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0233.length() + "\r\n" + 		// Content-Length: 76
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141229-664424-1\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0233, requestHost0233, requestPort0233, requestHeader0233, requestContent0233.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0233 = null;		// support garbage collector to reduce memory
		requestContent0233 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [233] <- Index 233
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [234] <- WEB ADMIN Index 234 ---
		String requestProt0234 = "https";
		String requestHost0234 = "performancemanager4.successfactors.com";
		int    requestPort0234 = 443;
		String requestFile0234 = "/ui/uicore/css/xi_d41d8cd98f00b204e9800998ecf8427e.css";
		String requestHeader0234 = "GET " + requestFile0234 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0234, requestHost0234, requestPort0234, requestHeader0234, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0234 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [234] <- Index 234
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [235] <- WEB ADMIN Index 235 ---
		String requestProt0235 = "https";
		String requestHost0235 = "performancemanager4.successfactors.com";
		int    requestPort0235 = 443;
		String requestFile0235 = "/ui/uicore/css/xicommon_b2ba91d0973e2f2b556d59b67dfd2bc1.css";
		String requestHeader0235 = "GET " + requestFile0235 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0235, requestHost0235, requestPort0235, requestHeader0235, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0235 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 11785
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [235] <- Index 235
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [236] <- WEB ADMIN Index 236 ---
		String requestProt0236 = "https";
		String requestHost0236 = "performancemanager4.successfactors.com";
		int    requestPort0236 = 443;
		String requestFile0236 = "/ui/uicore/css/ext-custom_473ff6a53c9327806cfe3e6a15f6f177.css";
		String requestHeader0236 = "GET " + requestFile0236 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0236, requestHost0236, requestPort0236, requestHeader0236, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0236 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2075
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [236] <- Index 236
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [237] <- WEB ADMIN Index 237 ---
		String requestProt0237 = "https";
		String requestHost0237 = "performancemanager4.successfactors.com";
		int    requestPort0237 = 443;
		String requestFile0237 = "/ui/inform/css/inform_e10f5929112d6b753e5bafa9b14d2d91.css";
		String requestHeader0237 = "GET " + requestFile0237 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0237, requestHost0237, requestPort0237, requestHeader0237, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0237 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 161
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [237] <- Index 237
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [238] <- WEB ADMIN Index 238 ---
		String requestProt0238 = "https";
		String requestHost0238 = "performancemanager4.successfactors.com";
		int    requestPort0238 = 443;
		String requestFile0238 = "/ui/uicore/css/sysmsg_e5ae6c5bedbc0e4cac2f1ec64ce11153.css";
		String requestHeader0238 = "GET " + requestFile0238 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0238, requestHost0238, requestPort0238, requestHeader0238, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0238 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1136
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [238] <- Index 238
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [239] <- WEB ADMIN Index 239 ---
		String requestProt0239 = "https";
		String requestHost0239 = "performancemanager4.successfactors.com";
		int    requestPort0239 = 443;
		String requestFile0239 = "/ui/v4/js/ajaxservice/sessionTimeoutControllerASProxy_086032b66e6b4a2548ad82fd5d928d2b.js";
		String requestHeader0239 = "GET " + requestFile0239 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0239, requestHost0239, requestPort0239, requestHeader0239, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0239 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 346
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [239] <- Index 239
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [240] <- WEB ADMIN Index 240 ---
		String requestProt0240 = "https";
		String requestHost0240 = "performancemanager4.successfactors.com";
		int    requestPort0240 = 443;
		String requestFile0240 = "/ui/v4/js/ajaxservice/informControllerASProxy_2485a9124f7da2fa9197e741f26e21ba.js";
		String requestHeader0240 = "GET " + requestFile0240 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0240, requestHost0240, requestPort0240, requestHeader0240, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0240 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 288
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [240] <- Index 240
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [241] <- WEB ADMIN Index 241 ---
		String requestProt0241 = "https";
		String requestHost0241 = "performancemanager4.successfactors.com";
		int    requestPort0241 = 443;
		String requestFile0241 = "/ui/uicore/js/FontResize_327d59635bda272d4e4c4b089c836fea.js";
		String requestHeader0241 = "GET " + requestFile0241 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0241, requestHost0241, requestPort0241, requestHeader0241, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0241 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 801
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [241] <- Index 241
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [242] <- WEB ADMIN Index 242 ---
		String requestProt0242 = "https";
		String requestHost0242 = "performancemanager4.successfactors.com";
		int    requestPort0242 = 443;
		String requestFile0242 = "/ui/uicore/js/AboutBox_de0d59666a8d55e0997ef3871b761579.js";
		String requestHeader0242 = "GET " + requestFile0242 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0242, requestHost0242, requestPort0242, requestHeader0242, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0242 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 454
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [242] <- Index 242
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [243] <- WEB ADMIN Index 243 ---
		String requestProt0243 = "https";
		String requestHost0243 = "performancemanager4.successfactors.com";
		int    requestPort0243 = 443;
		String requestFile0243 = "/ui/inform/js/inform_95af8ee59f10da850e4e439b376c0205.js";
		String requestHeader0243 = "GET " + requestFile0243 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0243, requestHost0243, requestPort0243, requestHeader0243, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0243 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1739
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [243] <- Index 243
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [244] <- WEB ADMIN Index 244 ---
		String requestProt0244 = "https";
		String requestHost0244 = "performancemanager4.successfactors.com";
		int    requestPort0244 = 443;
		String requestFile0244 = "/xi/ajax/remoting/call/plaincall/informControllerProxy.doInformSSO.dwr";
		String requestContent0244 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/inform?reportId=cbdd22b1-9103-4101-a99a-80b889f1ceea&action=RUN&source=reportcenter&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423623" + "\r\n" + 
				"c0-scriptName=informControllerProxy" + "\r\n" + 
				"c0-methodName=doInformSSO" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:cbdd22b1-9103-4101-a99a-80b889f1ceea" + "\r\n" + 
				"c0-e2=string:RUN" + "\r\n" + 
				"c0-param0=Object_Object:{reportId:reference:c0-e1, action:reference:c0-e2}" + "\r\n" + 
				"batchId=0";
		requestContent0244 = Lib.replaceTextPattern(requestContent0244, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences
		requestContent0244 = Lib.replaceTextPattern(requestContent0244, "cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID, 0);		// search and replace content fragment "cbdd22b1-9103-4101-a99a-80b889f1ceea" with variable 'C_ReportID' on all occurrences

		byte[] binarySearchPattern0244_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0244 = new String(Lib.binaryReplace(requestContent0244.getBytes(), binarySearchPattern0244_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0244 = "POST " + requestFile0244 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0244.length() + "\r\n" + 		// Content-Length: 434
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=WORKFORCE_ANALYTICS&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141307-664593\r\n" + 
				"OPTR_CXT: 0100050001530ef21d-46d2-4558-a325-4f4b241cf22829820909-1501-babe-face-000000000003489a82b7-1f52-404d-bc2e-d8f92faccf22HTTP    ;\r\n" + 
				"viewId: /ui/inform/pages/analytics/inform.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0244, requestHost0244, requestPort0244, requestHeader0244, requestContent0244.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0244 = null;		// support garbage collector to reduce memory
		requestContent0244 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 861
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [244] <- Index 244
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_PostContent'
		ContentTokenExtractorItem contentTokenExtractorItem0244_1 = new ContentTokenExtractorItem("postContent:", "\t\n\r \"(),{}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0244_1);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'C_PostContent'
			C_PostContent = contentTokenExtractorItem0244_1.getResultToken();
			log("<<< C_PostContent = " + C_PostContent);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_PostContent!= null && C_PostContent.trim().length() == 0)
			{
				C_PostContent = "";
				log("runtime note: the extraction of a new value for the variable 'C_PostContent' ends up with an empty string - a substitute value was set");
				log("<<< C_PostContent = " + C_PostContent);
			}
		}
		catch (Exception e) { C_PostContent = null; log(e); }
		if (C_PostContent == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_PostContent' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [245] <- WEB ADMIN Index 245 ---
		String requestProt0245 = "https";
		String requestHost0245 = "performancemanager4.successfactors.com";
		int    requestPort0245 = 443;
		String requestFile0245 = "/xi/ajax/remoting/call/plaincall/globalNotificationControllerProxy.getNumberOfNewNotifications.dwr";
		String requestContent0245 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/inform?reportId=cbdd22b1-9103-4101-a99a-80b889f1ceea&action=RUN&source=reportcenter&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423623" + "\r\n" + 
				"c0-scriptName=globalNotificationControllerProxy" + "\r\n" + 
				"c0-methodName=getNumberOfNewNotifications" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:TestAutomation" + "\r\n" + 
				"batchId=1";
		requestContent0245 = Lib.replaceTextPattern(requestContent0245, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences
		requestContent0245 = Lib.replaceTextPattern(requestContent0245, "cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID, 0);		// search and replace content fragment "cbdd22b1-9103-4101-a99a-80b889f1ceea" with variable 'C_ReportID' on all occurrences

		byte[] binarySearchPattern0245_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0245 = new String(Lib.binaryReplace(requestContent0245.getBytes(), binarySearchPattern0245_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0245 = "POST " + requestFile0245 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0245.length() + "\r\n" + 		// Content-Length: 352
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=WORKFORCE_ANALYTICS&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141307-664593\r\n" + 
				"OPTR_CXT: 0100050001291d92f7-8192-4cf3-872f-c3b12939622229820909-1501-babe-face-00000000000378f9b248-a4b2-44b4-8121-cd7824d95823HTTP    ;\r\n" + 
				"viewId: /ui/inform/pages/analytics/inform.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0245, requestHost0245, requestPort0245, requestHeader0245, requestContent0245.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0245 = null;		// support garbage collector to reduce memory
		requestContent0245 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 114
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [245] <- Index 245
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [246] <- WEB ADMIN Index 246 ---
		String requestProt0246 = "https";
		String requestHost0246 = "performancemanager4.successfactors.com";
		int    requestPort0246 = 443;
		String requestFile0246 = "/xi/ajax/remoting/call/plaincall/showMeControllerProxy.signAPIUrl.dwr";
		String requestContent0246 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/inform?reportId=cbdd22b1-9103-4101-a99a-80b889f1ceea&action=RUN&source=reportcenter&_s.crb=AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423623" + "\r\n" + 
				"c0-scriptName=showMeControllerProxy" + "\r\n" + 
				"c0-methodName=signAPIUrl" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:%2Fmedia%2Fshowme_ab3a783e_706e_40dd_a87a_a8283cabf42b%2FREPORT_CENTER%2Fstatus" + "\r\n" + 
				"c0-param1=string:REPORT_CENTER" + "\r\n" + 
				"c0-param2=string:b834e0f183d2c60df022354ec83fe656" + "\r\n" + 
				"batchId=2";
		requestContent0246 = Lib.replaceTextPattern(requestContent0246, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace content fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences
		requestContent0246 = Lib.replaceTextPattern(requestContent0246, "b834e0f183d2c60df022354ec83fe656", C_UploadHash, 0);		// search and replace content fragment "b834e0f183d2c60df022354ec83fe656" with variable 'C_UploadHash' on all occurrences
		requestContent0246 = Lib.replaceTextPattern(requestContent0246, "cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID, 0);		// search and replace content fragment "cbdd22b1-9103-4101-a99a-80b889f1ceea" with variable 'C_ReportID' on all occurrences
		requestContent0246 = Lib.replaceTextPattern(requestContent0246, "ab3a783e_706e_40dd_a87a_a8283cabf42b", C_Showme, 0);		// search and replace content fragment "ab3a783e_706e_40dd_a87a_a8283cabf42b" with variable 'C_Showme' on all occurrences

		byte[] binarySearchPattern0246_0 = Base64Decoder.decodeToBytes("QXZRNXZPcGdSQVI5allWNFkxOFVwWEZxM3ZrJTI1M2Q=");		// note: the search pattern value is base 64 encoded. decoded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestContent0246 = new String(Lib.binaryReplace(requestContent0246.getBytes(), binarySearchPattern0246_0, java.net.URLEncoder.encode(C_AjaxsecKey1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0246 = "POST " + requestFile0246 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0246.length() + "\r\n" + 		// Content-Length: 469
				"Sec-Fetch-Mode: cors\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=WORKFORCE_ANALYTICS&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141307-664593\r\n" + 
				"OPTR_CXT: 0100050001d9973221-30c2-4040-8929-24132e70c32e29820909-1501-babe-face-000000000003f84202af-98d2-4b46-8224-436f2086c626HTTP    ;\r\n" + 
				"viewId: /ui/inform/pages/analytics/inform.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0246, requestHost0246, requestPort0246, requestHeader0246, requestContent0246.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0246 = null;		// support garbage collector to reduce memory
		requestContent0246 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 424
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [246] <- Index 246
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Token'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0246_1 = new BoundaryBasedExtractorItem( "token=" , "\");",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0246_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Token'
			C_Token = boundaryBasedContentExtractorItem0246_1.getResultText();
			log("<<< C_Token = " + C_Token);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Token!= null && C_Token.trim().length() == 0)
			{
				C_Token = "";
				log("runtime note: the extraction of a new value for the variable 'C_Token' ends up with an empty string - a substitute value was set");
				log("<<< C_Token = " + C_Token);
			}
		}
		catch (Exception e) { C_Token = null; log(e); }
		if (C_Token == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Token' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [247] <- WEB ADMIN Index 247 ---
		String requestProt0247 = "https";
		String requestHost0247 = "mediaservicesfmsprod.ms.successfactors.com";
		int    requestPort0247 = 443;
		String requestFile0247 = "/mediaservice/api/v2/media/showme_ab3a783e_706e_40dd_a87a_a8283cabf42b/REPORT_CENTER/status" +
				"?token=" + C_Token +		// recorded value = c040ac1cdc28cc1c9febf9a02cf4652621e711b9330d79745194ddbc35056d4fd56ef8e183ccbf52e534a53d21e088974f8d626ed9d4ce9e4ff627d3d7c87cba,6911441569953854843,1575488588,1
				"&callback=sfDeferredUtilCallback0";
		requestFile0247 = Lib.replaceTextPattern(requestFile0247, "c040ac1cdc28cc1c9febf9a02cf4652621e711b9330d79745194ddbc35056d4fd56ef8e183ccbf52e534a53d21e088974f8d626ed9d4ce9e4ff627d3d7c87cba,6911441569953854843,1575488588,1", C_Token, 0);		// search and replace request file fragment "c040ac1cdc28cc1c9febf9a02cf4652621e711b9330d79745194ddbc35056d4fd56ef8e183ccbf52e534a53d21e088974f8d626ed9d4ce9e4ff627d3d7c87cba,6911441569953854843,1575488588,1" with variable 'C_Token' on all occurrences
		requestFile0247 = Lib.replaceTextPattern(requestFile0247, "ab3a783e_706e_40dd_a87a_a8283cabf42b", C_Showme, 0);		// search and replace request file fragment "ab3a783e_706e_40dd_a87a_a8283cabf42b" with variable 'C_Showme' on all occurrences

		String requestHeader0247 = "GET " + requestFile0247 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: mediaservicesfmsprod.ms.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0247, requestHost0247, requestPort0247, requestHeader0247, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0247 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 133
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [247] <- Index 247
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [248] <- WEB ADMIN Index 248 ---
		String requestProt0248 = "https";
		String requestHost0248 = "performancemanager4.successfactors.com";
		int    requestPort0248 = 443;
		String requestFile0248 = "/perfLogServlet" +
				"?callId=5236879059-0" +
				"&moduleId=REPORT" +
				"&pageId=REPORT_CENTER" +
				"&pageQualifier=WORKFORCE_ANALYTICS" +
				"&ST=1575486787775" +
				"&MEM=83707" +
				"&NRE=75" +
				"&NWR=42" +
				"&SCPU=0" +
				"&SQLC=56" +
				"&SQLT=55" +
				"&SVT=747" +
				"&UCPU=220" +
				"&CPU=220" +
				"&FRE=2" +
				"&FWR=0" +
				"&jsNum=47" +
				"&cssNum=16" +
				"&renderTime=674" +
				"&TTB=640" +
				"&RSR=650" +
				"&DIA=923" +
				"&DCP=983";
		String requestContent0248 = 
				"OPTR_INFO=d6875232-6d52-46d6-9c23-49b12e92172e!1575486788578!1575486788583!0" +
				"&OPTR_INFO=d14d82ab-efa2-467d-9024-533a2064422c!1575486788600!1575486788604!0" +
				"&OPTR_INFO=1ad7653c-16ca-11ea-a9fb-4feef88e786c!0!1575486788641!1" +
				"&OPTR_INFO=530ef21d-46d2-4558-a325-4f4b241cf228!1575486788653!1575486789056!0" +
				"&OPTR_INFO=f06c22ce-faa2-44bf-8728-5d2624030f25!1575486788655!1575486788658!0" +
				"&OPTR_INFO=54b72238-7742-4cb5-ab2a-e0e52ce70f20!1575486788726!1575486788729!0" +
				"&OPTR_INFO=30c54282-59f2-40ad-8829-b2902b1dea2d!1575486788737!1575486788740!0" +
				"&OPTR_INFO=f90a42f1-bbd2-445a-b222-409d22666223!1575486788770!1575486788774!0" +
				"&OPTR_INFO=b111e231-0992-4f9f-822c-42b622589d2c!1575486788777!1575486788781!0" +
				"&OPTR_INFO=83f3227c-edf2-428c-9b27-36c22f4d3e26!1575486788782!1575486788784!0" +
				"&OPTR_INFO=b11752b8-03c2-41b2-9620-36742cf65824!1575486788786!1575486788788!0" +
				"&OPTR_INFO=f688329f-0da2-4513-9a29-91f92d74c12d!1575486788789!1575486788791!0" +
				"&OPTR_INFO=03a87288-43e2-4b37-b92d-e9aa21b13228!1575486788811!1575486788814!0" +
				"&OPTR_INFO=aa9e822d-9b52-4a4a-bc28-e14b2e92f72f!1575486788818!1575486788820!0" +
				"&OPTR_INFO=960ca21d-ddb2-4e77-8529-6b832316a727!1575486788821!1575486788824!0" +
				"&OPTR_INFO=291d92f7-8192-4cf3-872f-c3b129396222!1575486788854!1575486789045!0" +
				"&OPTR_INFO=d9973221-30c2-4040-8929-24132e70c32e!1575486788894!1575486789037!0";
		String requestHeader0248 = "POST " + requestFile0248 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0248.length() + "\r\n" + 		// Content-Length: 1296
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"X-Ajax-Token: AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=WORKFORCE_ANALYTICS&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe32s-20191204141307-664593\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0248, requestHost0248, requestPort0248, requestHeader0248, requestContent0248.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0248 = null;		// support garbage collector to reduce memory
		requestContent0248 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [248] <- Index 248
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [249] <- WEB ADMIN Index 249 ---
		String requestProt0249 = "https";
		String requestHost0249 = "analytics4.successfactors.com";
		int    requestPort0249 = 443;
		String requestFile0249 = "/Production/Login.aspx" +
				"?ts=1575486789056";
		String requestContent0249 = 
				"SF_Token=" + java.net.URLEncoder.encode(C_PostContent);		// recorded value = PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHRva2VuPgogPHVzZXI%2BCiAgPHNmQ29tcGFueUlkPlRlY2s8L3NmQ29tcGFueUlkPgo8c2ZVc2VySWQ%2BVGVzdEF1dG9tYXRpb248L3NmVXNlcklkPgo8c2ZMYW5nQ29kZT5lbl9VUzwvc2ZMYW5nQ29kZT4KPHNmTG9naW5Vc2VyPjwvc2ZMb2dpblVzZXI%2BCiA8L3VzZXI%2BCiA8bGFuZGluZ1BhZ2U%2BeyVQQlJVTlRJTUUoY2JkZDIyYjEtOTEwMy00MTAxLWE5OWEtODBiODg5ZjFjZWVhLCAxLCBSZXBvcnRDZW50ZXIpJX08L2xhbmRpbmdQYWdlPgogPHRyYWNlSW5mbz48L3RyYWNlSW5mbz4KPC90b2tlbj4%3D
		byte[] binarySearchPattern0249_0 = Base64Decoder.decodeToBytes("UEQ5NGJXd2dkbVZ5YzJsdmJqMGlNUzR3SWlCbGJtTnZaR2x1WnowaVZWUkdMVGdpUHo0S1BIUnZhMlZ1UGdvZ1BIVnpaWEklMkJDaUFnUEhObVEyOXRjR0Z1ZVVsa1BsUmxZMnM4TDNObVEyOXRjR0Z1ZVVsa1BnbzhjMlpWYzJWeVNXUSUyQlZHVnpkRUYxZEc5dFlYUnBiMjQ4TDNObVZYTmxja2xrUGdvOGMyWk1ZVzVuUTI5a1pUNWxibDlWVXp3dmMyWk1ZVzVuUTI5a1pUNEtQSE5tVEc5bmFXNVZjMlZ5UGp3dmMyWk1iMmRwYmxWelpYSSUyQkNpQThMM1Z6WlhJJTJCQ2lBOGJHRnVaR2x1WjFCaFoyVSUyQmV5VlFRbEpWVGxSSlRVVW9ZMkprWkRJeVlqRXRPVEV3TXkwME1UQXhMV0U1T1dFdE9EQmlPRGc1WmpGalpXVmhMQ0F4TENCU1pYQnZjblJEWlc1MFpYSXBKWDA4TDJ4aGJtUnBibWRRWVdkbFBnb2dQSFJ5WVdObFNXNW1iejQ4TDNSeVlXTmxTVzVtYno0S1BDOTBiMnRsYmo0JTNE");		// note: the search pattern value is base 64 encoded. decoded value = PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHRva2VuPgogPHVzZXI%2BCiAgPHNmQ29tcGFueUlkPlRlY2s8L3NmQ29tcGFueUlkPgo8c2ZVc2VySWQ%2BVGVzdEF1dG9tYXRpb248L3NmVXNlcklkPgo8c2ZMYW5nQ29kZT5lbl9VUzwvc2ZMYW5nQ29kZT4KPHNmTG9naW5Vc2VyPjwvc2ZMb2dpblVzZXI%2BCiA8L3VzZXI%2BCiA8bGFuZGluZ1BhZ2U%2BeyVQQlJVTlRJTUUoY2JkZDIyYjEtOTEwMy00MTAxLWE5OWEtODBiODg5ZjFjZWVhLCAxLCBSZXBvcnRDZW50ZXIpJX08L2xhbmRpbmdQYWdlPgogPHRyYWNlSW5mbz48L3RyYWNlSW5mbz4KPC90b2tlbj4%3D
		requestContent0249 = new String(Lib.binaryReplace(requestContent0249.getBytes(), binarySearchPattern0249_0, java.net.URLEncoder.encode(C_PostContent).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0249 = "POST " + requestFile0249 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0249.length() + "\r\n" + 		// Content-Length: 453
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: nested-navigate\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0249, requestHost0249, requestPort0249, requestHeader0249, requestContent0249.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0249 = null;		// support garbage collector to reduce memory
		requestContent0249 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1448
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [249] <- Index 249
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLReq'
		ContentTokenExtractorItem contentTokenExtractorItem0249_1 = new ContentTokenExtractorItem("SAMLRequest", "\t\n\r \"(),{}", 2);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0249_1);

		// setup var extractor for 'C_RelayState'
		ContentTokenExtractorItem contentTokenExtractorItem0249_2 = new ContentTokenExtractorItem("RelayState", "\t\n\r \"(),={}", 2);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0249_2);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'C_SAMLReq'
			C_SAMLReq = contentTokenExtractorItem0249_1.getResultToken();
			log("<<< C_SAMLReq = " + C_SAMLReq);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLReq!= null && C_SAMLReq.trim().length() == 0)
			{
				C_SAMLReq = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLReq' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLReq = " + C_SAMLReq);
			}
		}
		catch (Exception e) { C_SAMLReq = null; log(e); }
		if (C_SAMLReq == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLReq' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_RelayState'
			C_RelayState = contentTokenExtractorItem0249_2.getResultToken();
			log("<<< C_RelayState = " + C_RelayState);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_RelayState!= null && C_RelayState.trim().length() == 0)
			{
				C_RelayState = "";
				log("runtime note: the extraction of a new value for the variable 'C_RelayState' ends up with an empty string - a substitute value was set");
				log("<<< C_RelayState = " + C_RelayState);
			}
		}
		catch (Exception e) { C_RelayState = null; log(e); }
		if (C_RelayState == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_RelayState' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [250] <- WEB ADMIN Index 250 ---
		String requestProt0250 = "https";
		String requestHost0250 = "performancemanager4.successfactors.com";
		int    requestPort0250 = 443;
		String requestFile0250 = "/sf/idp/SAML2/SSO/POST/company/Teck";
		String requestContent0250 = 
				"SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLReq) +		// recorded value = PHNhbWxwOkF1dGhuUmVxdWVzdCBJRD0iXzI2ODVkY2Y4LTNlN2UtNDZlZC05YjExLTU3ZTViY2MxMTRiNyIgVmVyc2lvbj0iMi4wIiBJc3N1ZUluc3RhbnQ9IjIwMTktMTItMDRUMTk6MTM6MjQuNDQ4WiIgRGVzdGluYXRpb249Imh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2YvaWRwL1NBTUwyL1NTTy9QT1NUL2NvbXBhbnkvVGVjayIgRm9yY2VBdXRobj0iZmFsc2UiIElzUGFzc2l2ZT0iZmFsc2UiIFByb3RvY29sQmluZGluZz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmJpbmRpbmdzOkhUVFAtUE9TVCIgQXNzZXJ0aW9uQ29uc3VtZXJTZXJ2aWNlVVJMPSJodHRwczovL2FuYWx5dGljczQuc3VjY2Vzc2ZhY3RvcnMuY29tL1Byb2R1Y3Rpb24vTG9naW4uYXNweCIgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCI%2BPHNhbWw6SXNzdWVyIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHA6Ly9pbnQtYW5hbHl0aWNzNC5zdWNjZXNzZmFjdG9ycy5jb20vUHJvZHVjdGlvbi9Mb2dpbi5hc3B4P3RzPTE1NzU0ODY3ODkwNTY8L3NhbWw6SXNzdWVyPjwvc2FtbHA6QXV0aG5SZXF1ZXN0Pg%3D%3D
				"&RelayState=" + C_RelayState;		// recorded value = 8D2333192F44454E838013348453DFCE
		byte[] binarySearchPattern0250_0 = Base64Decoder.decodeToBytes("UEhOaGJXeHdPa0YxZEdodVVtVnhkV1Z6ZENCSlJEMGlYekkyT0RWa1kyWTRMVE5sTjJVdE5EWmxaQzA1WWpFeExUVTNaVFZpWTJNeE1UUmlOeUlnVm1WeWMybHZiajBpTWk0d0lpQkpjM04xWlVsdWMzUmhiblE5SWpJd01Ua3RNVEl0TURSVU1UazZNVE02TWpRdU5EUTRXaUlnUkdWemRHbHVZWFJwYjI0OUltaDBkSEJ6T2k4dmNHVnlabTl5YldGdVkyVnRZVzVoWjJWeU5DNXpkV05qWlhOelptRmpkRzl5Y3k1amIyMHZjMll2YVdSd0wxTkJUVXd5TDFOVFR5OVFUMU5VTDJOdmJYQmhibmt2VkdWamF5SWdSbTl5WTJWQmRYUm9iajBpWm1Gc2MyVWlJRWx6VUdGemMybDJaVDBpWm1Gc2MyVWlJRkJ5YjNSdlkyOXNRbWx1WkdsdVp6MGlkWEp1T205aGMybHpPbTVoYldWek9uUmpPbE5CVFV3Nk1pNHdPbUpwYm1ScGJtZHpPa2hVVkZBdFVFOVRWQ0lnUVhOelpYSjBhVzl1UTI5dWMzVnRaWEpUWlhKMmFXTmxWVkpNUFNKb2RIUndjem92TDJGdVlXeDVkR2xqY3pRdWMzVmpZMlZ6YzJaaFkzUnZjbk11WTI5dEwxQnliMlIxWTNScGIyNHZURzluYVc0dVlYTndlQ0lnZUcxc2JuTTZjMkZ0YkhBOUluVnlianB2WVhOcGN6cHVZVzFsY3pwMFl6cFRRVTFNT2pJdU1EcHdjbTkwYjJOdmJDSSUyQlBITmhiV3c2U1hOemRXVnlJSGh0Ykc1ek9uTmhiV3c5SW5WeWJqcHZZWE5wY3pwdVlXMWxjenAwWXpwVFFVMU1Pakl1TURwaGMzTmxjblJwYjI0aVBtaDBkSEE2THk5cGJuUXRZVzVoYkhsMGFXTnpOQzV6ZFdOalpYTnpabUZqZEc5eWN5NWpiMjB2VUhKdlpIVmpkR2x2Ymk5TWIyZHBiaTVoYzNCNFAzUnpQVEUxTnpVME9EWTNPRGt3TlRZOEwzTmhiV3c2U1hOemRXVnlQand2YzJGdGJIQTZRWFYwYUc1U1pYRjFaWE4wUGclM0QlM0Q=");		// note: the search pattern value is base 64 encoded. decoded value = PHNhbWxwOkF1dGhuUmVxdWVzdCBJRD0iXzI2ODVkY2Y4LTNlN2UtNDZlZC05YjExLTU3ZTViY2MxMTRiNyIgVmVyc2lvbj0iMi4wIiBJc3N1ZUluc3RhbnQ9IjIwMTktMTItMDRUMTk6MTM6MjQuNDQ4WiIgRGVzdGluYXRpb249Imh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2YvaWRwL1NBTUwyL1NTTy9QT1NUL2NvbXBhbnkvVGVjayIgRm9yY2VBdXRobj0iZmFsc2UiIElzUGFzc2l2ZT0iZmFsc2UiIFByb3RvY29sQmluZGluZz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmJpbmRpbmdzOkhUVFAtUE9TVCIgQXNzZXJ0aW9uQ29uc3VtZXJTZXJ2aWNlVVJMPSJodHRwczovL2FuYWx5dGljczQuc3VjY2Vzc2ZhY3RvcnMuY29tL1Byb2R1Y3Rpb24vTG9naW4uYXNweCIgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCI%2BPHNhbWw6SXNzdWVyIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHA6Ly9pbnQtYW5hbHl0aWNzNC5zdWNjZXNzZmFjdG9ycy5jb20vUHJvZHVjdGlvbi9Mb2dpbi5hc3B4P3RzPTE1NzU0ODY3ODkwNTY8L3NhbWw6SXNzdWVyPjwvc2FtbHA6QXV0aG5SZXF1ZXN0Pg%3D%3D
		requestContent0250 = new String(Lib.binaryReplace(requestContent0250.getBytes(), binarySearchPattern0250_0, java.net.URLEncoder.encode(C_SAMLReq).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0250 = Lib.replaceTextPattern(requestContent0250, "8D2333192F44454E838013348453DFCE", C_RelayState, 0);		// search and replace content fragment "8D2333192F44454E838013348453DFCE" with variable 'C_RelayState' on all occurrences

		String requestHeader0250 = "POST " + requestFile0250 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0250.length() + "\r\n" + 		// Content-Length: 910
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: nested-navigate\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0250, requestHost0250, requestPort0250, requestHeader0250, requestContent0250.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0250 = null;		// support garbage collector to reduce memory
		requestContent0250 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 7393
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [250] <- Index 250
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLResponse'
		ContentTokenExtractorItem contentTokenExtractorItem0250_1 = new ContentTokenExtractorItem("SAMLResponse", "\t\n\r \"(),{}", 2);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0250_1);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'C_SAMLResponse'
			C_SAMLResponse = contentTokenExtractorItem0250_1.getResultToken();
			log("<<< C_SAMLResponse = " + C_SAMLResponse);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLResponse!= null && C_SAMLResponse.trim().length() == 0)
			{
				C_SAMLResponse = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLResponse' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLResponse = " + C_SAMLResponse);
			}
		}
		catch (Exception e) { C_SAMLResponse = null; log(e); }
		if (C_SAMLResponse == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLResponse' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 2 of 7)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [251] <- WEB ADMIN Index 251 ---
		log();
		log("# title: Object moved");
		String requestProt0251 = "https";
		String requestHost0251 = "analytics4.successfactors.com";
		int    requestPort0251 = 443;
		String requestFile0251 = "/Production/Login.aspx";
		String requestContent0251 = 
				"SAMLResponse=" + java.net.URLEncoder.encode(C_SAMLResponse) +		// recorded value = PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9hbmFseXRpY3M0LnN1Y2Nlc3NmYWN0b3JzLmNvbS9Qcm9kdWN0aW9uL0xvZ2luLmFzcHgiIElEPSJfMDY4ZDRmZTktN2ZmNy00YzhkLWEwMjgtYWViZGU5MDc5MWMyIiBJblJlc3BvbnNlVG89Il8yNjg1ZGNmOC0zZTdlLTQ2ZWQtOWIxMS01N2U1YmNjMTE0YjciIElzc3VlSW5zdGFudD0iMjAxOS0xMi0wNFQxOToxMzoyNC45MzFaIiBWZXJzaW9uPSIyLjAiPjxzYW1sMjpJc3N1ZXIgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2YvaWRwL1NBTUwyL2NvbXBhbnkvVGVjazwvc2FtbDI6SXNzdWVyPjxzYW1sMnA6U3RhdHVzPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8%2BPC9zYW1sMnA6U3RhdHVzPjxzYW1sMjpBc3NlcnRpb24geG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIElEPSJTRl9TQU1MMi4wXzQ1Zjg1NjEzLTNiNzItNDc4NS1hMTRlLTQ4YjY5ZjFlZDhhZSIgSXNzdWVJbnN0YW50PSIyMDE5LTEyLTA0VDE5OjEzOjI0LjkzMVoiIFZlcnNpb249IjIuMCIgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIj48c2FtbDI6SXNzdWVyPmh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2YvaWRwL1NBTUwyL2NvbXBhbnkvVGVjazwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbyB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BCjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIvPgo8ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIvPgo8ZHM6UmVmZXJlbmNlIFVSST0iI1NGX1NBTUwyLjBfNDVmODU2MTMtM2I3Mi00Nzg1LWExNGUtNDhiNjlmMWVkOGFlIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BCjxkczpUcmFuc2Zvcm1zIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIvPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPGVjOkluY2x1c2l2ZU5hbWVzcGFjZXMgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgUHJlZml4TGlzdD0ieHMiLz48L2RzOlRyYW5zZm9ybT4KPC9kczpUcmFuc2Zvcm1zPgo8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIi8%2BCjxkczpEaWdlc3RWYWx1ZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BaUNOUFVUMllsdGZKdlBSRUxabU9zT3c1KzhVPTwvZHM6RGlnZXN0VmFsdWU%2BCjwvZHM6UmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8%2BCjxkczpTaWduYXR1cmVWYWx1ZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BCkVMaEU4VU9qSlBidUxJTGVUYXZ1aTFtZW1nalRYcHJFRjZQOFVmenZrVlJyenZSQUhaZ2pURzFnRkx6d1pWbXhOdjBDMTBUaHY3a0kKaVZiUmE0Y2dZWUM1S3NpQzc1MXVDSzd5eVBKM3VEdnFYQWlXdHZodVFmU0tjYnFFZVNuNFJHL2JVK0lpTHIwWmc1ZUl5bnNrT3BJaQpyY1NUTmtQVDRKRkc1a2lQNDZzPQo8L2RzOlNpZ25hdHVyZVZhbHVlPgo8ZHM6S2V5SW5mbz48ZHM6WDUwOURhdGE%2BPGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlDRFRDQ0FYYWdBd0lCQWdJRVRKajlMakFOQmdrcWhraUc5dzBCQVFVRkFEQkxNUXN3Q1FZRFZRUUdFd0pWVXpFYk1Ca0dBMVVFCkNoTVNVM1ZqWTJWemMyWmhZM1J2Y25NdVkyOXRNUXd3Q2dZRFZRUUxFd05QY0hNeEVUQVBCZ05WQkFNVENGTkdJRUZrYldsdU1CNFgKRFRFd01Ea3lNVEU0TkRVd01sb1hEVEkxTURreE9URTRORFV3TWxvd1N6RUxNQWtHQTFVRUJoTUNWVk14R3pBWkJnTlZCQW9URWxOMQpZMk5sYzNObVlXTjBiM0p6TG1OdmJURU1NQW9HQTFVRUN4TURUM0J6TVJFd0R3WURWUVFERXdoVFJpQkJaRzFwYmpDQm56QU5CZ2txCmhraUc5dzBCQVFFRkFBT0JqUUF3Z1lrQ2dZRUFyQTlSTE5uTDlQdDZ4eW5GZllmYThWWEFYRkRHOVk4eGtnczNsaElPbHNqcUVZd2IKU29naGlxSklKdmZZTTQ1a3gzYUI3WnJOOTZ0QVI1dVV1cEVzdS9HY1M2QUN4aGZydVcrQlk2dXc4djYvdzJ2WGhCZGZGakJvTytLZQpMeDRrM2xsbGVWZ0tzbU5sZjgxb2tPWHYxcmVlOHdFcmZaM3Nzbk54a3VRZ0dCMENBd0VBQVRBTkJna3Foa2lHOXcwQkFRVUZBQU9CCmdRQmVCQ1NNRm5ZOFRCNmp0V29TUC9sb3JCdWRocHRndk83LzNyK2wvUUswaGRrNkNWditWUW1TaWxOUGdXVmdVOWt0WkdiTmtaaHcKSWd3bnFJUUhBaTY2MzF1ZmtZUUpCKzQ4WVVlMXEvcHY2RVdhZUl3R3ZjR1lTWFpwL0UvYUdaUHRjZVRJWEZQZnFPeUhRb0Z0YjBucQpNTUZXb0RocFhVSG1scm95VGM5c0pnPT08L2RzOlg1MDlDZXJ0aWZpY2F0ZT48L2RzOlg1MDlEYXRhPjwvZHM6S2V5SW5mbz48L2RzOlNpZ25hdHVyZT48c2FtbDI6U3ViamVjdD48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPlRlc3RBdXRvbWF0aW9uPC9zYW1sMjpOYW1lSUQ%2BPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJfMjY4NWRjZjgtM2U3ZS00NmVkLTliMTEtNTdlNWJjYzExNGI3IiBOb3RPbk9yQWZ0ZXI9IjIwMTktMTItMDRUMTk6MjM6MjQuOTMxWiIgUmVjaXBpZW50PSJodHRwczovL2FuYWx5dGljczQuc3VjY2Vzc2ZhY3RvcnMuY29tL1Byb2R1Y3Rpb24vTG9naW4uYXNweCIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q%2BPHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDE5LTEyLTA0VDE5OjAzOjI0LjkzMVoiIE5vdE9uT3JBZnRlcj0iMjAxOS0xMi0wNFQxOToyMzoyNC45MzFaIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U%2BaHR0cDovL2ludC1hbmFseXRpY3M0LnN1Y2Nlc3NmYWN0b3JzLmNvbS9Qcm9kdWN0aW9uL0xvZ2luLmFzcHg%2FdHM9MTU3NTQ4Njc4OTA1Njwvc2FtbDI6QXVkaWVuY2U%2BPC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjwvc2FtbDI6Q29uZGl0aW9ucz48c2FtbDI6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDE5LTEyLTA0VDE5OjEzOjI0LjkzMVoiIFNlc3Npb25JbmRleD0iclI1SXVMRW1ZYk91Wm1pSmh5Q1NCbFlTcHZWU0VBQURBd1pFR2ZTSzU1ckZYeEE5MnNZT1l4Vk90V212NG1LL1F0anlqNGxKTkV5NWJ3N3pReW80ZGc9PSI%2BPHNhbWwyOkF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BdXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmRQcm90ZWN0ZWRUcmFuc3BvcnQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDI6QXV0aG5Db250ZXh0Pjwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ%2BPHNhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImNvbXBhbnlpZCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciPlRlY2s8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0ibG9jYWxlIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BZW5fVVM8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0iY29tcGFueXV1aWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIj5hYjNhNzgzZV83MDZlXzQwZGRfYTg3YV9hODI4M2NhYmY0MmI8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0ibG9nZ2VkaW51c2VyaWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIj5UZXN0QXV0b21hdGlvbjwvc2FtbDI6QXR0cmlidXRlVmFsdWU%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJsb2dnZWRpbnBlcnNvbmd1aWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIi8%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJlbmFibGVnYWNlIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BZmFsc2U8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0icGVyc29uZ3VpZCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9InRlbmFudHVybCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9InNlY29uZGFyeUxvZ2luUHJvdmlzaW9uZXJJZCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9InNlY29uZGFyeUxvZ2luUHJvdmlzaW9uZXJFbWFpbCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImV4dF91c2VyaWRfc2YiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIj5UZXN0QXV0b21hdGlvbjwvc2FtbDI6QXR0cmlidXRlVmFsdWU%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJ6b25lc2Vzc2lvbmlkIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BNDkzMWY2ZDEtN2ZkZi00YTUzLThjYTYtZGY0ZDhhZTg0MjgxPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwyOkFzc2VydGlvbj48L3NhbWwycDpSZXNwb25zZT4%3D
				"&RelayState=" + C_RelayState +		// recorded value = 8D2333192F44454E838013348453DFCE
				"&TARGET=" + C_RelayState +		// recorded value = 8D2333192F44454E838013348453DFCE
				"&bizxHomeURL=https%3A%2F%2Fperformancemanager4.successfactors.com%2Fsf%2Fhome";
		byte[] binarySearchPattern0251_0 = Base64Decoder.decodeToBytes("");		// note: the search pattern value is base 64 encoded. decoded value = PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9hbmFseXRpY3M0LnN1Y2Nlc3NmYWN0b3JzLmNvbS9Qcm9kdWN0aW9uL0xvZ2luLmFzcHgiIElEPSJfMDY4ZDRmZTktN2ZmNy00YzhkLWEwMjgtYWViZGU5MDc5MWMyIiBJblJlc3BvbnNlVG89Il8yNjg1ZGNmOC0zZTdlLTQ2ZWQtOWIxMS01N2U1YmNjMTE0YjciIElzc3VlSW5zdGFudD0iMjAxOS0xMi0wNFQxOToxMzoyNC45MzFaIiBWZXJzaW9uPSIyLjAiPjxzYW1sMjpJc3N1ZXIgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2YvaWRwL1NBTUwyL2NvbXBhbnkvVGVjazwvc2FtbDI6SXNzdWVyPjxzYW1sMnA6U3RhdHVzPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8%2BPC9zYW1sMnA6U3RhdHVzPjxzYW1sMjpBc3NlcnRpb24geG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIElEPSJTRl9TQU1MMi4wXzQ1Zjg1NjEzLTNiNzItNDc4NS1hMTRlLTQ4YjY5ZjFlZDhhZSIgSXNzdWVJbnN0YW50PSIyMDE5LTEyLTA0VDE5OjEzOjI0LjkzMVoiIFZlcnNpb249IjIuMCIgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIj48c2FtbDI6SXNzdWVyPmh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2YvaWRwL1NBTUwyL2NvbXBhbnkvVGVjazwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbyB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BCjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIvPgo8ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIvPgo8ZHM6UmVmZXJlbmNlIFVSST0iI1NGX1NBTUwyLjBfNDVmODU2MTMtM2I3Mi00Nzg1LWExNGUtNDhiNjlmMWVkOGFlIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BCjxkczpUcmFuc2Zvcm1zIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIvPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPGVjOkluY2x1c2l2ZU5hbWVzcGFjZXMgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgUHJlZml4TGlzdD0ieHMiLz48L2RzOlRyYW5zZm9ybT4KPC9kczpUcmFuc2Zvcm1zPgo8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIi8%2BCjxkczpEaWdlc3RWYWx1ZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BaUNOUFVUMllsdGZKdlBSRUxabU9zT3c1KzhVPTwvZHM6RGlnZXN0VmFsdWU%2BCjwvZHM6UmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8%2BCjxkczpTaWduYXR1cmVWYWx1ZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BCkVMaEU4VU9qSlBidUxJTGVUYXZ1aTFtZW1nalRYcHJFRjZQOFVmenZrVlJyenZSQUhaZ2pURzFnRkx6d1pWbXhOdjBDMTBUaHY3a0kKaVZiUmE0Y2dZWUM1S3NpQzc1MXVDSzd5eVBKM3VEdnFYQWlXdHZodVFmU0tjYnFFZVNuNFJHL2JVK0lpTHIwWmc1ZUl5bnNrT3BJaQpyY1NUTmtQVDRKRkc1a2lQNDZzPQo8L2RzOlNpZ25hdHVyZVZhbHVlPgo8ZHM6S2V5SW5mbz48ZHM6WDUwOURhdGE%2BPGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlDRFRDQ0FYYWdBd0lCQWdJRVRKajlMakFOQmdrcWhraUc5dzBCQVFVRkFEQkxNUXN3Q1FZRFZRUUdFd0pWVXpFYk1Ca0dBMVVFCkNoTVNVM1ZqWTJWemMyWmhZM1J2Y25NdVkyOXRNUXd3Q2dZRFZRUUxFd05QY0hNeEVUQVBCZ05WQkFNVENGTkdJRUZrYldsdU1CNFgKRFRFd01Ea3lNVEU0TkRVd01sb1hEVEkxTURreE9URTRORFV3TWxvd1N6RUxNQWtHQTFVRUJoTUNWVk14R3pBWkJnTlZCQW9URWxOMQpZMk5sYzNObVlXTjBiM0p6TG1OdmJURU1NQW9HQTFVRUN4TURUM0J6TVJFd0R3WURWUVFERXdoVFJpQkJaRzFwYmpDQm56QU5CZ2txCmhraUc5dzBCQVFFRkFBT0JqUUF3Z1lrQ2dZRUFyQTlSTE5uTDlQdDZ4eW5GZllmYThWWEFYRkRHOVk4eGtnczNsaElPbHNqcUVZd2IKU29naGlxSklKdmZZTTQ1a3gzYUI3WnJOOTZ0QVI1dVV1cEVzdS9HY1M2QUN4aGZydVcrQlk2dXc4djYvdzJ2WGhCZGZGakJvTytLZQpMeDRrM2xsbGVWZ0tzbU5sZjgxb2tPWHYxcmVlOHdFcmZaM3Nzbk54a3VRZ0dCMENBd0VBQVRBTkJna3Foa2lHOXcwQkFRVUZBQU9CCmdRQmVCQ1NNRm5ZOFRCNmp0V29TUC9sb3JCdWRocHRndk83LzNyK2wvUUswaGRrNkNWditWUW1TaWxOUGdXVmdVOWt0WkdiTmtaaHcKSWd3bnFJUUhBaTY2MzF1ZmtZUUpCKzQ4WVVlMXEvcHY2RVdhZUl3R3ZjR1lTWFpwL0UvYUdaUHRjZVRJWEZQZnFPeUhRb0Z0YjBucQpNTUZXb0RocFhVSG1scm95VGM5c0pnPT08L2RzOlg1MDlDZXJ0aWZpY2F0ZT48L2RzOlg1MDlEYXRhPjwvZHM6S2V5SW5mbz48L2RzOlNpZ25hdHVyZT48c2FtbDI6U3ViamVjdD48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPlRlc3RBdXRvbWF0aW9uPC9zYW1sMjpOYW1lSUQ%2BPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJfMjY4NWRjZjgtM2U3ZS00NmVkLTliMTEtNTdlNWJjYzExNGI3IiBOb3RPbk9yQWZ0ZXI9IjIwMTktMTItMDRUMTk6MjM6MjQuOTMxWiIgUmVjaXBpZW50PSJodHRwczovL2FuYWx5dGljczQuc3VjY2Vzc2ZhY3RvcnMuY29tL1Byb2R1Y3Rpb24vTG9naW4uYXNweCIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q%2BPHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDE5LTEyLTA0VDE5OjAzOjI0LjkzMVoiIE5vdE9uT3JBZnRlcj0iMjAxOS0xMi0wNFQxOToyMzoyNC45MzFaIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U%2BaHR0cDovL2ludC1hbmFseXRpY3M0LnN1Y2Nlc3NmYWN0b3JzLmNvbS9Qcm9kdWN0aW9uL0xvZ2luLmFzcHg%2FdHM9MTU3NTQ4Njc4OTA1Njwvc2FtbDI6QXVkaWVuY2U%2BPC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjwvc2FtbDI6Q29uZGl0aW9ucz48c2FtbDI6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDE5LTEyLTA0VDE5OjEzOjI0LjkzMVoiIFNlc3Npb25JbmRleD0iclI1SXVMRW1ZYk91Wm1pSmh5Q1NCbFlTcHZWU0VBQURBd1pFR2ZTSzU1ckZYeEE5MnNZT1l4Vk90V212NG1LL1F0anlqNGxKTkV5NWJ3N3pReW80ZGc9PSI%2BPHNhbWwyOkF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BdXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmRQcm90ZWN0ZWRUcmFuc3BvcnQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDI6QXV0aG5Db250ZXh0Pjwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ%2BPHNhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImNvbXBhbnlpZCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciPlRlY2s8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0ibG9jYWxlIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BZW5fVVM8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0iY29tcGFueXV1aWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIj5hYjNhNzgzZV83MDZlXzQwZGRfYTg3YV9hODI4M2NhYmY0MmI8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0ibG9nZ2VkaW51c2VyaWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIj5UZXN0QXV0b21hdGlvbjwvc2FtbDI6QXR0cmlidXRlVmFsdWU%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJsb2dnZWRpbnBlcnNvbmd1aWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIi8%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJlbmFibGVnYWNlIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BZmFsc2U8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0icGVyc29uZ3VpZCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9InRlbmFudHVybCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9InNlY29uZGFyeUxvZ2luUHJvdmlzaW9uZXJJZCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9InNlY29uZGFyeUxvZ2luUHJvdmlzaW9uZXJFbWFpbCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImV4dF91c2VyaWRfc2YiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIj5UZXN0QXV0b21hdGlvbjwvc2FtbDI6QXR0cmlidXRlVmFsdWU%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJ6b25lc2Vzc2lvbmlkIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BNDkzMWY2ZDEtN2ZkZi00YTUzLThjYTYtZGY0ZDhhZTg0MjgxPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwyOkFzc2VydGlvbj48L3NhbWwycDpSZXNwb25zZT4%3D
		requestContent0251 = new String(Lib.binaryReplace(requestContent0251.getBytes(), binarySearchPattern0251_0, java.net.URLEncoder.encode(C_SAMLResponse).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0251 = Lib.replaceTextPattern(requestContent0251, "8D2333192F44454E838013348453DFCE", C_RelayState, 0);		// search and replace content fragment "8D2333192F44454E838013348453DFCE" with variable 'C_RelayState' on all occurrences

		String requestHeader0251 = "POST " + requestFile0251 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0251.length() + "\r\n" + 		// Content-Length: 8056
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: nested-navigate\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0251, requestHost0251, requestPort0251, requestHeader0251, requestContent0251.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0251 = null;		// support garbage collector to reduce memory
		requestContent0251 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 271
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [251] <- Index 251
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [252] <- WEB ADMIN Index 252 ---
		log();
		log("# title: i3 Start Page");
		String requestProt0252 = "https";
		String requestHost0252 = "analytics4.successfactors.com";
		int    requestPort0252 = 443;
		String requestFile0252 = "/Production/default.aspx" +
				"?landingPage=%7B%25PBRUNTIME(cbdd22b1-9103-4101-a99a-80b889f1ceea,%201,%20ReportCenter)%25%7D";
		requestFile0252 = Lib.replaceTextPattern(requestFile0252, "cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID, 0);		// search and replace request file fragment "cbdd22b1-9103-4101-a99a-80b889f1ceea" with variable 'C_ReportID' on all occurrences

		String requestHeader0252 = "GET " + requestFile0252 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: nested-navigate\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0252, requestHost0252, requestPort0252, requestHeader0252, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0252 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 6648
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [252] <- Index 252
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_RPCSecret3'
		ContentTokenExtractorItem contentTokenExtractorItem0252_1 = new ContentTokenExtractorItem("true;infohrm.rpcSecret", "\t\n\r '(),={}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0252_1);

		contentTokenExtractor.extractTokens();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_FileVersion'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0252_1 = new BoundaryBasedExtractorItem( "dojoFile=infohrm.js&amp;version=" , "\">",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0252_1);

		// setup var extractor for 'C_Viewstate1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0252_2 = new BoundaryBasedExtractorItem( "id=\"__VIEWSTATE\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0252_2);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		regExpBasedExtractor = new RegExpBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Eventval1'
		RegExpBasedExtractorItem regExpBasedContentExtractorItem0252_1 = new RegExpBasedExtractorItem( "id=\"__EVENTVALIDATION\" value=\"(.*?)\" />" ,1,1,false,false,0,false);
		regExpBasedExtractor.addRegExpBasedExtractorItem(regExpBasedContentExtractorItem0252_1);

		// setup var extractor for 'C_Vsgen1'
		RegExpBasedExtractorItem regExpBasedContentExtractorItem0252_2 = new RegExpBasedExtractorItem( "id=\"__VIEWSTATEGENERATOR\" value=\"(.*?)\" />" ,1,1,false,false,0,false);
		regExpBasedExtractor.addRegExpBasedExtractorItem(regExpBasedContentExtractorItem0252_2);

		regExpBasedExtractor.extractText();
		regExpBasedExtractor = new RegExpBasedExtractor(testURL.getHeaderString());

		regExpBasedExtractor.extractText();
		try
		{
			// extract var 'C_FileVersion'
			C_FileVersion = boundaryBasedContentExtractorItem0252_1.getResultText();
			log("<<< C_FileVersion = " + C_FileVersion);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_FileVersion!= null && C_FileVersion.trim().length() == 0)
			{
				C_FileVersion = "";
				log("runtime note: the extraction of a new value for the variable 'C_FileVersion' ends up with an empty string - a substitute value was set");
				log("<<< C_FileVersion = " + C_FileVersion);
			}
		}
		catch (Exception e) { C_FileVersion = null; log(e); }
		if (C_FileVersion == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_FileVersion' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Eventval1'
			C_Eventval1 = regExpBasedContentExtractorItem0252_1.getResultText();
			log("<<< C_Eventval1 = " + C_Eventval1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Eventval1!= null && C_Eventval1.trim().length() == 0)
			{
				C_Eventval1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Eventval1' ends up with an empty string - a substitute value was set");
				log("<<< C_Eventval1 = " + C_Eventval1);
			}
		}
		catch (Exception e) { C_Eventval1 = null; log(e); }
		if (C_Eventval1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Eventval1' from regexp based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Vsgen1'
			C_Vsgen1 = regExpBasedContentExtractorItem0252_2.getResultText();
			log("<<< C_Vsgen1 = " + C_Vsgen1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Vsgen1!= null && C_Vsgen1.trim().length() == 0)
			{
				C_Vsgen1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Vsgen1' ends up with an empty string - a substitute value was set");
				log("<<< C_Vsgen1 = " + C_Vsgen1);
			}
		}
		catch (Exception e) { C_Vsgen1 = null; log(e); }
		if (C_Vsgen1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Vsgen1' from regexp based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_RPCSecret3'
			C_RPCSecret3 = contentTokenExtractorItem0252_1.getResultToken();
			log("<<< C_RPCSecret3 = " + C_RPCSecret3);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_RPCSecret3!= null && C_RPCSecret3.trim().length() == 0)
			{
				C_RPCSecret3 = "";
				log("runtime note: the extraction of a new value for the variable 'C_RPCSecret3' ends up with an empty string - a substitute value was set");
				log("<<< C_RPCSecret3 = " + C_RPCSecret3);
			}
		}
		catch (Exception e) { C_RPCSecret3 = null; log(e); }
		if (C_RPCSecret3 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_RPCSecret3' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Viewstate1'
			C_Viewstate1 = boundaryBasedContentExtractorItem0252_2.getResultText();
			log("<<< C_Viewstate1 = " + C_Viewstate1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Viewstate1!= null && C_Viewstate1.trim().length() == 0)
			{
				C_Viewstate1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Viewstate1' ends up with an empty string - a substitute value was set");
				log("<<< C_Viewstate1 = " + C_Viewstate1);
			}
		}
		catch (Exception e) { C_Viewstate1 = null; log(e); }
		if (C_Viewstate1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Viewstate1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [253] <- WEB ADMIN Index 253 ---
		String requestProt0253 = "https";
		String requestHost0253 = "analytics4.successfactors.com";
		int    requestPort0253 = 443;
		String requestFile0253 = "/Production/Resources/DojoToolkit/dijit/themes/dijit.css";
		String requestHeader0253 = "GET " + requestFile0253 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0253, requestHost0253, requestPort0253, requestHeader0253, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0253 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 31904
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [253] <- Index 253
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [254] <- WEB ADMIN Index 254 ---
		String requestProt0254 = "https";
		String requestHost0254 = "analytics4.successfactors.com";
		int    requestPort0254 = 443;
		String requestFile0254 = "/Production/Resources/DojoToolkit/infohrm/css/ruiBase.css";
		String requestHeader0254 = "GET " + requestFile0254 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0254, requestHost0254, requestPort0254, requestHeader0254, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0254 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1371
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [254] <- Index 254
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [255] <- WEB ADMIN Index 255 ---
		String requestProt0255 = "https";
		String requestHost0255 = "analytics4.successfactors.com";
		int    requestPort0255 = 443;
		String requestFile0255 = "/Production/Resources/DojoToolkit/infohrm/css/inform.css";
		String requestHeader0255 = "GET " + requestFile0255 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0255, requestHost0255, requestPort0255, requestHeader0255, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0255 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 33335
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [255] <- Index 255
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [256] <- WEB ADMIN Index 256 ---
		String requestProt0256 = "https";
		String requestHost0256 = "analytics4.successfactors.com";
		int    requestPort0256 = 443;
		String requestFile0256 = "/Production/GetDojoFile.aspx" +
				"?dojoFile=dijit.js" +
				"&version=20190905";
		String requestHeader0256 = "GET " + requestFile0256 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0256, requestHost0256, requestPort0256, requestHeader0256, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0256 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 155927
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [256] <- Index 256
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [257] <- WEB ADMIN Index 257 ---
		String requestProt0257 = "https";
		String requestHost0257 = "analytics4.successfactors.com";
		int    requestPort0257 = 443;
		String requestFile0257 = "/Production/Resources/Stylesheets/ruiNamed.css";
		String requestHeader0257 = "GET " + requestFile0257 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0257, requestHost0257, requestPort0257, requestHeader0257, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0257 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 3995
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [257] <- Index 257
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [258] <- WEB ADMIN Index 258 ---
		String requestProt0258 = "https";
		String requestHost0258 = "analytics4.successfactors.com";
		int    requestPort0258 = 443;
		String requestFile0258 = "/Production/Resources/DojoToolkit/infohrm/css/SAPUI.css";
		String requestHeader0258 = "GET " + requestFile0258 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0258, requestHost0258, requestPort0258, requestHeader0258, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0258 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 49040
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [258] <- Index 258
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [259] <- WEB ADMIN Index 259 ---
		String requestProt0259 = "https";
		String requestHost0259 = "analytics4.successfactors.com";
		int    requestPort0259 = 443;
		String requestFile0259 = "/Production/GetDojoFile.aspx" +
				"?dojoFile=dojo.js" +
				"&version=20190905";
		String requestHeader0259 = "GET " + requestFile0259 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0259, requestHost0259, requestPort0259, requestHeader0259, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0259 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 146624
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [259] <- Index 259
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [260] <- WEB ADMIN Index 260 ---
		String requestProt0260 = "https";
		String requestHost0260 = "analytics4.successfactors.com";
		int    requestPort0260 = 443;
		String requestFile0260 = "/Production/GetDojoFile.aspx" +
				"?dojoFile=infohrm.js" +
				"&version=" + C_FileVersion;		// recorded value = 20191121
		requestFile0260 = Lib.replaceTextPattern(requestFile0260, "20191121", C_FileVersion, 0);		// search and replace request file fragment "20191121" with variable 'C_FileVersion' on all occurrences

		String requestHeader0260 = "GET " + requestFile0260 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0260, requestHost0260, requestPort0260, requestHeader0260, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0260 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 491514
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [260] <- Index 260
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [261] <- WEB ADMIN Index 261 ---
		String requestProt0261 = "https";
		String requestHost0261 = "analytics4.successfactors.com";
		int    requestPort0261 = 443;
		String requestFile0261 = "/Production/Resources/DojoToolkit/dijit/main.js";
		String requestHeader0261 = "GET " + requestFile0261 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0261, requestHost0261, requestPort0261, requestHeader0261, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0261 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [261] <- Index 261
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [262] <- WEB ADMIN Index 262 ---
		String requestProt0262 = "https";
		String requestHost0262 = "analytics4.successfactors.com";
		int    requestPort0262 = 443;
		String requestFile0262 = "/Production/Resources/DojoToolkit/dijit/nls/dijit_en-us.js";
		String requestHeader0262 = "GET " + requestFile0262 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0262, requestHost0262, requestPort0262, requestHeader0262, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0262 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 575
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [262] <- Index 262
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [263] <- WEB ADMIN Index 263 ---
		String requestProt0263 = "https";
		String requestHost0263 = "analytics4.successfactors.com";
		int    requestPort0263 = 443;
		String requestFile0263 = "/Production/Resources/DojoToolkit/dojo/require.js";
		String requestHeader0263 = "GET " + requestFile0263 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0263, requestHost0263, requestPort0263, requestHeader0263, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0263 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 494
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [263] <- Index 263
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [264] <- WEB ADMIN Index 264 ---
		String requestProt0264 = "https";
		String requestHost0264 = "analytics4.successfactors.com";
		int    requestPort0264 = 443;
		String requestFile0264 = "/Production/Resources/DojoToolkit/infohrm/nls/infohrm_en-us.js";
		String requestHeader0264 = "GET " + requestFile0264 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0264, requestHost0264, requestPort0264, requestHeader0264, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0264 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4717
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [264] <- Index 264
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [265] <- WEB ADMIN Index 265 ---
		log();
		log("# title: Object moved");
		String requestProt0265 = "https";
		String requestHost0265 = "analytics4.successfactors.com";
		int    requestPort0265 = 443;
		String requestFile0265 = "/Production/default.aspx" +
				"?landingPage=%7b%25PBRUNTIME(cbdd22b1-9103-4101-a99a-80b889f1ceea%2c+1%2c+ReportCenter)%25%7d";
		requestFile0265 = Lib.replaceTextPattern(requestFile0265, "cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID, 0);		// search and replace request file fragment "cbdd22b1-9103-4101-a99a-80b889f1ceea" with variable 'C_ReportID' on all occurrences

		String requestContent0265 = 
				"__VIEWSTATE=" + java.net.URLEncoder.encode(C_Viewstate1) +		// recorded value = KR3pBtOKuw5%2Fs4aHYahx3hqIF8Fbj%2FnualXrP5%2B1DyD5c5sWAZdzC%2FgGtdhePJeh77srclGqTvyACbI5fMywzbuMULqZBbmXH4CVICfN7skPy2XxP8mb%2BOxYPPMfOyeKK4ZMIA%3D%3D
				"&__VIEWSTATEGENERATOR=" + C_Vsgen1 +		// recorded value = 2485EDD4
				"&__EVENTVALIDATION=" + java.net.URLEncoder.encode(C_Eventval1);		// recorded value = %2BiGg9Rc52EMBWttiXglKCXAhRCE3PrJe2Kmwea%2FoeQ6kiKFAHsIbqbwCdmpCEMqi0C84WLs03oq7Qn9LSpOEaFW3%2F4bd1Zhyhs7H6HWj0grXP0kW
		byte[] binarySearchPattern0265_0 = Base64Decoder.decodeToBytes("JTJCaUdnOVJjNTJFTUJXdHRpWGdsS0NYQWhSQ0UzUHJKZTJLbXdlYSUyRm9lUTZraUtGQUhzSWJxYndDZG1wQ0VNcWkwQzg0V0xzMDNvcTdRbjlMU3BPRWFGVzMlMkY0YmQxWmh5aHM3SDZIV2owZ3JYUDBrVw==");		// note: the search pattern value is base 64 encoded. decoded value = %2BiGg9Rc52EMBWttiXglKCXAhRCE3PrJe2Kmwea%2FoeQ6kiKFAHsIbqbwCdmpCEMqi0C84WLs03oq7Qn9LSpOEaFW3%2F4bd1Zhyhs7H6HWj0grXP0kW
		requestContent0265 = new String(Lib.binaryReplace(requestContent0265.getBytes(), binarySearchPattern0265_0, java.net.URLEncoder.encode(C_Eventval1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[] binarySearchPattern0265_1 = Base64Decoder.decodeToBytes("S1IzcEJ0T0t1dzUlMkZzNGFIWWFoeDNocUlGOEZiaiUyRm51YWxYclA1JTJCMUR5RDVjNXNXQVpkekMlMkZnR3RkaGVQSmVoNzdzcmNsR3FUdnlBQ2JJNWZNeXd6YnVNVUxxWkJibVhINENWSUNmTjdza1B5Mlh4UDhtYiUyQk94WVBQTWZPeWVLSzRaTUlBJTNEJTNE");		// note: the search pattern value is base 64 encoded. decoded value = KR3pBtOKuw5%2Fs4aHYahx3hqIF8Fbj%2FnualXrP5%2B1DyD5c5sWAZdzC%2FgGtdhePJeh77srclGqTvyACbI5fMywzbuMULqZBbmXH4CVICfN7skPy2XxP8mb%2BOxYPPMfOyeKK4ZMIA%3D%3D
		requestContent0265 = new String(Lib.binaryReplace(requestContent0265.getBytes(), binarySearchPattern0265_1, java.net.URLEncoder.encode(C_Viewstate1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0265 = Lib.replaceTextPattern(requestContent0265, "2485EDD4", C_Vsgen1, 0);		// search and replace content fragment "2485EDD4" with variable 'C_Vsgen1' on all occurrences

		String requestHeader0265 = "POST " + requestFile0265 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0265.length() + "\r\n" + 		// Content-Length: 329
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: nested-navigate\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0265, requestHost0265, requestPort0265, requestHeader0265, requestContent0265.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0265 = null;		// support garbage collector to reduce memory
		requestContent0265 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 255
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [265] <- Index 265
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [266] <- WEB ADMIN Index 266 ---
		String requestProt0266 = "https";
		String requestHost0266 = "analytics4.successfactors.com";
		int    requestPort0266 = 443;
		String requestFile0266 = "/Production/RPC/SfUserInfo.aspx" +
				"?action=setEnvInfo" +
				"&rpcSecret=" + C_RPCSecret3 +		// recorded value = B4B04FF579D961D52B44975FCDC191DF732A7A26E88D9C8881D9D5C35E67D0AA5BAC905827FFCBBDC838E91629FDAA47
				"&reqId=1575486809449";
		requestFile0266 = Lib.replaceTextPattern(requestFile0266, "1575486809449", P_millis, 0);		// search and replace request file fragment "1575486809449" with variable 'P_millis' on all occurrences
		requestFile0266 = Lib.replaceTextPattern(requestFile0266, "B4B04FF579D961D52B44975FCDC191DF732A7A26E88D9C8881D9D5C35E67D0AA5BAC905827FFCBBDC838E91629FDAA47", C_RPCSecret3, 0);		// search and replace request file fragment "B4B04FF579D961D52B44975FCDC191DF732A7A26E88D9C8881D9D5C35E67D0AA5BAC905827FFCBBDC838E91629FDAA47" with variable 'C_RPCSecret3' on all occurrences

		String requestContent0266 = 
				"data=%257B%2522isInIframe%2522%253A%2522Y%2522%252C%2522utcOffset%2522%253A480%252C%2522screenSize%2522%253A%25221920x1080%2522%257D" +
				"&dojo.preventCache=1575486809450";
		requestContent0266 = Lib.replaceTextPattern(requestContent0266, "1575486809450", P_millis, 0);		// search and replace content fragment "1575486809450" with variable 'P_millis' on all occurrences

		String requestHeader0266 = "POST " + requestFile0266 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0266.length() + "\r\n" + 		// Content-Length: 164
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0266, requestHost0266, requestPort0266, requestHeader0266, requestContent0266.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0266 = null;		// support garbage collector to reduce memory
		requestContent0266 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 69
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [266] <- Index 266
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [267] <- WEB ADMIN Index 267 ---
		log();
		log("# title: Employee Login Details");
		String requestProt0267 = "https";
		String requestHost0267 = "analytics4.successfactors.com";
		int    requestPort0267 = 443;
		String requestFile0267 = "/Production/PageBuilder/Runtime/SfWfaRuntime.aspx" +
				"?bookId=" + C_ReportID +		// recorded value = cbdd22b1-9103-4101-a99a-80b889f1ceea
				"&pageNumber=1" +
				"&bizXSource=ReportCenter";
		requestFile0267 = Lib.replaceTextPattern(requestFile0267, "cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID, 0);		// search and replace request file fragment "cbdd22b1-9103-4101-a99a-80b889f1ceea" with variable 'C_ReportID' on all occurrences

		String requestHeader0267 = "GET " + requestFile0267 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: nested-navigate\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0267, requestHost0267, requestPort0267, requestHeader0267, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0267 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 23623
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [267] <- Index 267
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_RPCSecret1'
		ContentTokenExtractorItem contentTokenExtractorItem0267_1 = new ContentTokenExtractorItem("true;infohrm.rpcSecret", "\t\n\r '(),={}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0267_1);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'C_RPCSecret1'
			C_RPCSecret1 = contentTokenExtractorItem0267_1.getResultToken();
			log("<<< C_RPCSecret1 = " + C_RPCSecret1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_RPCSecret1!= null && C_RPCSecret1.trim().length() == 0)
			{
				C_RPCSecret1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_RPCSecret1' ends up with an empty string - a substitute value was set");
				log("<<< C_RPCSecret1 = " + C_RPCSecret1);
			}
		}
		catch (Exception e) { C_RPCSecret1 = null; log(e); }
		if (C_RPCSecret1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_RPCSecret1' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [268] <- WEB ADMIN Index 268 ---
		String requestProt0268 = "https";
		String requestHost0268 = "analytics4.successfactors.com";
		int    requestPort0268 = 443;
		String requestFile0268 = "/Production/Resources/Stylesheets/SfWfaRuntime.css";
		String requestHeader0268 = "GET " + requestFile0268 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0268, requestHost0268, requestPort0268, requestHeader0268, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0268 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2911
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [268] <- Index 268
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [269] <- WEB ADMIN Index 269 ---
		String requestProt0269 = "https";
		String requestHost0269 = "analytics4.successfactors.com";
		int    requestPort0269 = 443;
		String requestFile0269 = "/Production/Resources/QuickCard/css/sfOverlayMgr.css";
		String requestHeader0269 = "GET " + requestFile0269 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0269, requestHost0269, requestPort0269, requestHeader0269, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0269 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1359
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [269] <- Index 269
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [270] <- WEB ADMIN Index 270 ---
		String requestProt0270 = "https";
		String requestHost0270 = "analytics4.successfactors.com";
		int    requestPort0270 = 443;
		String requestFile0270 = "/Production/Resources/QuickCard/css/external-quickcard.css";
		String requestHeader0270 = "GET " + requestFile0270 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0270, requestHost0270, requestPort0270, requestHeader0270, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0270 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1633
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [270] <- Index 270
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 3 of 7)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [271] <- WEB ADMIN Index 271 ---
		String requestProt0271 = "https";
		String requestHost0271 = "analytics4.successfactors.com";
		int    requestPort0271 = 443;
		String requestFile0271 = "/Production/Resources/DojoToolkit/infohrm/widget/OdsReportRuntime.js";
		String requestHeader0271 = "GET " + requestFile0271 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0271, requestHost0271, requestPort0271, requestHeader0271, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0271 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6017
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [271] <- Index 271
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [272] <- WEB ADMIN Index 272 ---
		String requestProt0272 = "https";
		String requestHost0272 = "analytics4.successfactors.com";
		int    requestPort0272 = 443;
		String requestFile0272 = "/Production/Resources/DojoToolkit/infohrm/scripts/SfWfaRuntime.js";
		String requestHeader0272 = "GET " + requestFile0272 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0272, requestHost0272, requestPort0272, requestHeader0272, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0272 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 23369
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [272] <- Index 272
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [273] <- WEB ADMIN Index 273 ---
		String requestProt0273 = "https";
		String requestHost0273 = "analytics4.successfactors.com";
		int    requestPort0273 = 443;
		String requestFile0273 = "/Production/Resources/QuickCard/js/jquery.js";
		String requestHeader0273 = "GET " + requestFile0273 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0273, requestHost0273, requestPort0273, requestHeader0273, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0273 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 92633
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [273] <- Index 273
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [274] <- WEB ADMIN Index 274 ---
		String requestProt0274 = "https";
		String requestHost0274 = "analytics4.successfactors.com";
		int    requestPort0274 = 443;
		String requestFile0274 = "/Production/Resources/DojoToolkit/infohrm/widget/InteractiveToolbar.js";
		String requestHeader0274 = "GET " + requestFile0274 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0274, requestHost0274, requestPort0274, requestHeader0274, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0274 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 65029
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [274] <- Index 274
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [275] <- WEB ADMIN Index 275 ---
		String requestProt0275 = "https";
		String requestHost0275 = "analytics4.successfactors.com";
		int    requestPort0275 = 443;
		String requestFile0275 = "/Production/Resources/Highcharts/js/highcharts-more.js";
		String requestHeader0275 = "GET " + requestFile0275 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0275, requestHost0275, requestPort0275, requestHeader0275, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0275 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 25175
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [275] <- Index 275
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [276] <- WEB ADMIN Index 276 ---
		String requestProt0276 = "https";
		String requestHost0276 = "analytics4.successfactors.com";
		int    requestPort0276 = 443;
		String requestFile0276 = "/Production/Resources/Highcharts/js/exporting.js";
		String requestHeader0276 = "GET " + requestFile0276 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0276, requestHost0276, requestPort0276, requestHeader0276, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0276 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8717
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [276] <- Index 276
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [277] <- WEB ADMIN Index 277 ---
		String requestProt0277 = "https";
		String requestHost0277 = "analytics4.successfactors.com";
		int    requestPort0277 = 443;
		String requestFile0277 = "/Production/Resources/QuickCard/js/juic/Util.js";
		String requestHeader0277 = "GET " + requestFile0277 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0277, requestHost0277, requestPort0277, requestHeader0277, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0277 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 62887
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [277] <- Index 277
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [278] <- WEB ADMIN Index 278 ---
		String requestProt0278 = "https";
		String requestHost0278 = "analytics4.successfactors.com";
		int    requestPort0278 = 443;
		String requestFile0278 = "/Production/Resources/QuickCard/js/juic/component.js";
		String requestHeader0278 = "GET " + requestFile0278 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0278, requestHost0278, requestPort0278, requestHeader0278, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0278 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 70374
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [278] <- Index 278
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [279] <- WEB ADMIN Index 279 ---
		String requestProt0279 = "https";
		String requestHost0279 = "analytics4.successfactors.com";
		int    requestPort0279 = 443;
		String requestFile0279 = "/Production/Resources/Highcharts/js/highcharts.js";
		String requestHeader0279 = "GET " + requestFile0279 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0279, requestHost0279, requestPort0279, requestHeader0279, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0279 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 172111
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [279] <- Index 279
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [280] <- WEB ADMIN Index 280 ---
		String requestProt0280 = "https";
		String requestHost0280 = "analytics4.successfactors.com";
		int    requestPort0280 = 443;
		String requestFile0280 = "/Production/Resources/QuickCard/js/juic/componentLegacy.js";
		String requestHeader0280 = "GET " + requestFile0280 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0280, requestHost0280, requestPort0280, requestHeader0280, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0280 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3858
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [280] <- Index 280
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [281] <- WEB ADMIN Index 281 ---
		String requestProt0281 = "https";
		String requestHost0281 = "analytics4.successfactors.com";
		int    requestPort0281 = 443;
		String requestFile0281 = "/Production/Resources/DojoToolkit/infohrm/SfWidgetEnum.js";
		String requestHeader0281 = "GET " + requestFile0281 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0281, requestHost0281, requestPort0281, requestHeader0281, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0281 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 925
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [281] <- Index 281
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [282] <- WEB ADMIN Index 282 ---
		String requestProt0282 = "https";
		String requestHost0282 = "analytics4.successfactors.com";
		int    requestPort0282 = 443;
		String requestFile0282 = "/Production/Resources/QuickCard/js/juic/SFResizer.js";
		String requestHeader0282 = "GET " + requestFile0282 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0282, requestHost0282, requestPort0282, requestHeader0282, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0282 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4109
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [282] <- Index 282
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [283] <- WEB ADMIN Index 283 ---
		String requestProt0283 = "https";
		String requestHost0283 = "analytics4.successfactors.com";
		int    requestPort0283 = 443;
		String requestFile0283 = "/Production/Resources/QuickCard/js/juic/sfDOMEvent.js";
		String requestHeader0283 = "GET " + requestFile0283 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0283, requestHost0283, requestPort0283, requestHeader0283, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0283 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 31488
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [283] <- Index 283
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [284] <- WEB ADMIN Index 284 ---
		String requestProt0284 = "https";
		String requestHost0284 = "analytics4.successfactors.com";
		int    requestPort0284 = 443;
		String requestFile0284 = "/Production/Resources/QuickCard/js/juic/sfRegion.js";
		String requestHeader0284 = "GET " + requestFile0284 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0284, requestHost0284, requestPort0284, requestHeader0284, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0284 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2917
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [284] <- Index 284
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [285] <- WEB ADMIN Index 285 ---
		String requestProt0285 = "https";
		String requestHost0285 = "analytics4.successfactors.com";
		int    requestPort0285 = 443;
		String requestFile0285 = "/Production/Resources/QuickCard/js/juic/sfDom.js";
		String requestHeader0285 = "GET " + requestFile0285 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0285, requestHost0285, requestPort0285, requestHeader0285, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0285 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 88179
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [285] <- Index 285
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [286] <- WEB ADMIN Index 286 ---
		String requestProt0286 = "https";
		String requestHost0286 = "analytics4.successfactors.com";
		int    requestPort0286 = 443;
		String requestFile0286 = "/Production/Resources/QuickCard/js/juic/sfDefaultListModel.js";
		String requestHeader0286 = "GET " + requestFile0286 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0286, requestHost0286, requestPort0286, requestHeader0286, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0286 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 18061
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [286] <- Index 286
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [287] <- WEB ADMIN Index 287 ---
		String requestProt0287 = "https";
		String requestHost0287 = "analytics4.successfactors.com";
		int    requestPort0287 = 443;
		String requestFile0287 = "/Production/Resources/DojoToolkit/infohrm/widget/FontSelector.js";
		String requestHeader0287 = "GET " + requestFile0287 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0287, requestHost0287, requestPort0287, requestHeader0287, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0287 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 7862
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [287] <- Index 287
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [288] <- WEB ADMIN Index 288 ---
		String requestProt0288 = "https";
		String requestHost0288 = "analytics4.successfactors.com";
		int    requestPort0288 = 443;
		String requestFile0288 = "/Production/Resources/QuickCard/js/juic/sfContainer.js";
		String requestHeader0288 = "GET " + requestFile0288 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0288, requestHost0288, requestPort0288, requestHeader0288, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0288 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 19651
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [288] <- Index 288
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [289] <- WEB ADMIN Index 289 ---
		String requestProt0289 = "https";
		String requestHost0289 = "analytics4.successfactors.com";
		int    requestPort0289 = 443;
		String requestFile0289 = "/Production/Resources/QuickCard/js/juic/sfListContainer.js";
		String requestHeader0289 = "GET " + requestFile0289 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0289, requestHost0289, requestPort0289, requestHeader0289, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0289 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6447
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [289] <- Index 289
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [290] <- WEB ADMIN Index 290 ---
		String requestProt0290 = "https";
		String requestHost0290 = "analytics4.successfactors.com";
		int    requestPort0290 = 443;
		String requestFile0290 = "/Production/Resources/DojoToolkit/infohrm/widget/PagingControl.js";
		String requestHeader0290 = "GET " + requestFile0290 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0290, requestHost0290, requestPort0290, requestHeader0290, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0290 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 7481
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [290] <- Index 290
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 4 of 7)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [291] <- WEB ADMIN Index 291 ---
		String requestProt0291 = "https";
		String requestHost0291 = "analytics4.successfactors.com";
		int    requestPort0291 = 443;
		String requestFile0291 = "/Production/Resources/QuickCard/js/juic/sfOverlayMgr.js";
		String requestHeader0291 = "GET " + requestFile0291 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0291, requestHost0291, requestPort0291, requestHeader0291, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0291 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 34802
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [291] <- Index 291
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [292] <- WEB ADMIN Index 292 ---
		String requestProt0292 = "https";
		String requestHost0292 = "analytics4.successfactors.com";
		int    requestPort0292 = 443;
		String requestFile0292 = "/Production/Resources/QuickCard/js/external-quickcard.js";
		String requestHeader0292 = "GET " + requestFile0292 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0292, requestHost0292, requestPort0292, requestHeader0292, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0292 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 7227
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [292] <- Index 292
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [293] <- WEB ADMIN Index 293 ---
		String requestProt0293 = "https";
		String requestHost0293 = "analytics4.successfactors.com";
		int    requestPort0293 = 443;
		String requestFile0293 = "/Production/Resources/DojoToolkit/infohrm/widget/MeasuresMenuSearch.js";
		String requestHeader0293 = "GET " + requestFile0293 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0293, requestHost0293, requestPort0293, requestHeader0293, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0293 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4768
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [293] <- Index 293
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [294] <- WEB ADMIN Index 294 ---
		String requestProt0294 = "https";
		String requestHost0294 = "analytics4.successfactors.com";
		int    requestPort0294 = 443;
		String requestFile0294 = "/Production/Resources/QuickCard/js/juic/sfPositionManager.js";
		String requestHeader0294 = "GET " + requestFile0294 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0294, requestHost0294, requestPort0294, requestHeader0294, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0294 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 17103
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [294] <- Index 294
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [295] <- WEB ADMIN Index 295 ---
		String requestProt0295 = "https";
		String requestHost0295 = "analytics4.successfactors.com";
		int    requestPort0295 = 443;
		String requestFile0295 = "/Production/Resources/Images/PbRt/dialani.gif";
		String requestHeader0295 = "GET " + requestFile0295 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0295, requestHost0295, requestPort0295, requestHeader0295, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0295 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 4232
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [295] <- Index 295
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [296] <- WEB ADMIN Index 296 ---
		String requestProt0296 = "https";
		String requestHost0296 = "analytics4.successfactors.com";
		int    requestPort0296 = 443;
		String requestFile0296 = "/Production/Resources/DojoToolkit/infohrm/widget/ReportCenterUniversalNotification.js";
		String requestHeader0296 = "GET " + requestFile0296 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0296, requestHost0296, requestPort0296, requestHeader0296, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0296 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3057
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [296] <- Index 296
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [297] <- WEB ADMIN Index 297 ---
		String requestProt0297 = "https";
		String requestHost0297 = "analytics4.successfactors.com";
		int    requestPort0297 = 443;
		String requestFile0297 = "/Production/RPC/SfWidgetRuiMenuBar.aspx" +
				"?action=getHomeLinkParameters" +
				"&rpcSecret=" + C_RPCSecret1 +		// recorded value = D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F
				"&reqId=1575486813625";
		requestFile0297 = Lib.replaceTextPattern(requestFile0297, "1575486813625", P_millis, 0);		// search and replace request file fragment "1575486813625" with variable 'P_millis' on all occurrences
		requestFile0297 = Lib.replaceTextPattern(requestFile0297, "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F", C_RPCSecret1, 0);		// search and replace request file fragment "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F" with variable 'C_RPCSecret1' on all occurrences

		String requestContent0297 = 
				"data=null" +
				"&dojo.preventCache=1575486813625";
		requestContent0297 = Lib.replaceTextPattern(requestContent0297, "1575486813625", P_millis, 0);		// search and replace content fragment "1575486813625" with variable 'P_millis' on all occurrences

		String requestHeader0297 = "POST " + requestFile0297 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0297.length() + "\r\n" + 		// Content-Length: 41
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0297, requestHost0297, requestPort0297, requestHeader0297, requestContent0297.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0297 = null;		// support garbage collector to reduce memory
		requestContent0297 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 109
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [297] <- Index 297
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [298] <- WEB ADMIN Index 298 ---
		String requestProt0298 = "https";
		String requestHost0298 = "analytics4.successfactors.com";
		int    requestPort0298 = 443;
		String requestFile0298 = "/Production/RPC/SfWidgetRuiLeftMenu.aspx" +
				"?action=getIsLeftMenuPinned" +
				"&rpcSecret=" + C_RPCSecret1 +		// recorded value = D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F
				"&reqId=1575486813615";
		requestFile0298 = Lib.replaceTextPattern(requestFile0298, "1575486813615", P_millis, 0);		// search and replace request file fragment "1575486813615" with variable 'P_millis' on all occurrences
		requestFile0298 = Lib.replaceTextPattern(requestFile0298, "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F", C_RPCSecret1, 0);		// search and replace request file fragment "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F" with variable 'C_RPCSecret1' on all occurrences

		String requestContent0298 = 
				"data=null" +
				"&dojo.preventCache=1575486813615";
		requestContent0298 = Lib.replaceTextPattern(requestContent0298, "1575486813615", P_millis, 0);		// search and replace content fragment "1575486813615" with variable 'P_millis' on all occurrences

		String requestHeader0298 = "POST " + requestFile0298 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0298.length() + "\r\n" + 		// Content-Length: 41
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0298, requestHost0298, requestPort0298, requestHeader0298, requestContent0298.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0298 = null;		// support garbage collector to reduce memory
		requestContent0298 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 92
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [298] <- Index 298
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [299] <- WEB ADMIN Index 299 ---
		String requestProt0299 = "https";
		String requestHost0299 = "analytics4.successfactors.com";
		int    requestPort0299 = 443;
		String requestFile0299 = "/Production/RPC/SfWidgetRuiMenuBar.aspx" +
				"?action=getRuiPageNavigator" +
				"&rpcSecret=" + C_RPCSecret1 +		// recorded value = D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F
				"&reqId=1575486813623";
		requestFile0299 = Lib.replaceTextPattern(requestFile0299, "1575486813623", P_millis, 0);		// search and replace request file fragment "1575486813623" with variable 'P_millis' on all occurrences
		requestFile0299 = Lib.replaceTextPattern(requestFile0299, "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F", C_RPCSecret1, 0);		// search and replace request file fragment "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F" with variable 'C_RPCSecret1' on all occurrences

		String requestContent0299 = 
				"data=null" +
				"&dojo.preventCache=1575486813623";
		requestContent0299 = Lib.replaceTextPattern(requestContent0299, "1575486813623", P_millis, 0);		// search and replace content fragment "1575486813623" with variable 'P_millis' on all occurrences

		String requestHeader0299 = "POST " + requestFile0299 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0299.length() + "\r\n" + 		// Content-Length: 41
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0299, requestHost0299, requestPort0299, requestHeader0299, requestContent0299.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0299 = null;		// support garbage collector to reduce memory
		requestContent0299 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 225
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [299] <- Index 299
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [300] <- WEB ADMIN Index 300 ---
		String requestProt0300 = "https";
		String requestHost0300 = "analytics4.successfactors.com";
		int    requestPort0300 = 443;
		String requestFile0300 = "/Production/RPC/SfWidgetRuiMenuBar.aspx" +
				"?action=getRtNavMenus" +
				"&rpcSecret=" + C_RPCSecret1 +		// recorded value = D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F
				"&reqId=1575486813730";
		requestFile0300 = Lib.replaceTextPattern(requestFile0300, "1575486813730", P_millis, 0);		// search and replace request file fragment "1575486813730" with variable 'P_millis' on all occurrences
		requestFile0300 = Lib.replaceTextPattern(requestFile0300, "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F", C_RPCSecret1, 0);		// search and replace request file fragment "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F" with variable 'C_RPCSecret1' on all occurrences

		String requestContent0300 = 
				"data=null" +
				"&dojo.preventCache=1575486813730";
		requestContent0300 = Lib.replaceTextPattern(requestContent0300, "1575486813730", P_millis, 0);		// search and replace content fragment "1575486813730" with variable 'P_millis' on all occurrences

		String requestHeader0300 = "POST " + requestFile0300 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0300.length() + "\r\n" + 		// Content-Length: 41
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0300, requestHost0300, requestPort0300, requestHeader0300, requestContent0300.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0300 = null;		// support garbage collector to reduce memory
		requestContent0300 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 87
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [300] <- Index 300
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [301] <- WEB ADMIN Index 301 ---
		String requestProt0301 = "https";
		String requestHost0301 = "analytics4.successfactors.com";
		int    requestPort0301 = 443;
		String requestFile0301 = "/Production/RPC/SfUserInfo.aspx" +
				"?action=setEnvInfo" +
				"&rpcSecret=" + C_RPCSecret1 +		// recorded value = D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F
				"&reqId=1575486813744";
		requestFile0301 = Lib.replaceTextPattern(requestFile0301, "1575486813744", P_millis, 0);		// search and replace request file fragment "1575486813744" with variable 'P_millis' on all occurrences
		requestFile0301 = Lib.replaceTextPattern(requestFile0301, "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F", C_RPCSecret1, 0);		// search and replace request file fragment "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F" with variable 'C_RPCSecret1' on all occurrences

		String requestContent0301 = 
				"data=%257B%2522isInIframe%2522%253A%2522Y%2522%252C%2522utcOffset%2522%253A480%252C%2522screenSize%2522%253A%25221920x1080%2522%257D" +
				"&dojo.preventCache=1575486813744";
		requestContent0301 = Lib.replaceTextPattern(requestContent0301, "1575486813744", P_millis, 0);		// search and replace content fragment "1575486813744" with variable 'P_millis' on all occurrences

		String requestHeader0301 = "POST " + requestFile0301 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0301.length() + "\r\n" + 		// Content-Length: 164
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0301, requestHost0301, requestPort0301, requestHeader0301, requestContent0301.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0301 = null;		// support garbage collector to reduce memory
		requestContent0301 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 69
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [301] <- Index 301
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [302] <- WEB ADMIN Index 302 ---
		String requestProt0302 = "https";
		String requestHost0302 = "analytics4.successfactors.com";
		int    requestPort0302 = 443;
		String requestFile0302 = "/Production/PageBuilder/Runtime/SfWfaRuntime.aspx" +
				"?action=showMandatoryPrompt" +
				"&rpcSecret=" + C_RPCSecret1 +		// recorded value = D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F
				"&reqId=1575486813746";
		requestFile0302 = Lib.replaceTextPattern(requestFile0302, "1575486813746", P_millis, 0);		// search and replace request file fragment "1575486813746" with variable 'P_millis' on all occurrences
		requestFile0302 = Lib.replaceTextPattern(requestFile0302, "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F", C_RPCSecret1, 0);		// search and replace request file fragment "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F" with variable 'C_RPCSecret1' on all occurrences

		String requestContent0302 = 
				"data=%257B%2522forceShow%2522%253Afalse%252C%2522refreshPage%2522%253Atrue%257D" +
				"&dojo.preventCache=1575486813747";
		requestContent0302 = Lib.replaceTextPattern(requestContent0302, "1575486813747", P_millis, 0);		// search and replace content fragment "1575486813747" with variable 'P_millis' on all occurrences

		String requestHeader0302 = "POST " + requestFile0302 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0302.length() + "\r\n" + 		// Content-Length: 111
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0302, requestHost0302, requestPort0302, requestHeader0302, requestContent0302.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0302 = null;		// support garbage collector to reduce memory
		requestContent0302 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 172
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [302] <- Index 302
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [303] <- WEB ADMIN Index 303 ---
		String requestProt0303 = "https";
		String requestHost0303 = "analytics4.successfactors.com";
		int    requestPort0303 = 443;
		String requestFile0303 = "/Production/PageBuilder/Runtime/SfWfaRuntime.aspx" +
				"?action=initOptions" +
				"&rpcSecret=" + C_RPCSecret1 +		// recorded value = D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F
				"&reqId=1575486813748";
		requestFile0303 = Lib.replaceTextPattern(requestFile0303, "1575486813748", P_millis, 0);		// search and replace request file fragment "1575486813748" with variable 'P_millis' on all occurrences
		requestFile0303 = Lib.replaceTextPattern(requestFile0303, "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F", C_RPCSecret1, 0);		// search and replace request file fragment "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F" with variable 'C_RPCSecret1' on all occurrences

		String requestContent0303 = 
				"data=null" +
				"&dojo.preventCache=1575486813748";
		requestContent0303 = Lib.replaceTextPattern(requestContent0303, "1575486813748", P_millis, 0);		// search and replace content fragment "1575486813748" with variable 'P_millis' on all occurrences

		String requestHeader0303 = "POST " + requestFile0303 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0303.length() + "\r\n" + 		// Content-Length: 41
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0303, requestHost0303, requestPort0303, requestHeader0303, requestContent0303.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0303 = null;		// support garbage collector to reduce memory
		requestContent0303 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1275
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "Save Profile");		// Test [303] <- Index 303
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [304] <- WEB ADMIN Index 304 ---
		String requestProt0304 = "https";
		String requestHost0304 = "analytics4.successfactors.com";
		int    requestPort0304 = 443;
		String requestFile0304 = "/Production/Resources/DojoToolkit/infohrm/images/menuUpArrow.gif";
		String requestHeader0304 = "GET " + requestFile0304 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0304, requestHost0304, requestPort0304, requestHeader0304, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0304 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [304] <- Index 304
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [305] <- WEB ADMIN Index 305 ---
		String requestProt0305 = "https";
		String requestHost0305 = "analytics4.successfactors.com";
		int    requestPort0305 = 443;
		String requestFile0305 = "/Production/Resources/DojoToolkit/infohrm/images/menuDownArrow.gif";
		String requestHeader0305 = "GET " + requestFile0305 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0305, requestHost0305, requestPort0305, requestHeader0305, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0305 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 843
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [305] <- Index 305
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [306] <- WEB ADMIN Index 306 ---
		String requestProt0306 = "https";
		String requestHost0306 = "analytics4.successfactors.com";
		int    requestPort0306 = 443;
		String requestFile0306 = "/Production/Resources/Revolution/Images/close_panel_icon.gif";
		String requestHeader0306 = "GET " + requestFile0306 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0306, requestHost0306, requestPort0306, requestHeader0306, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0306 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 276
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [306] <- Index 306
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [307] <- WEB ADMIN Index 307 ---
		String requestProt0307 = "https";
		String requestHost0307 = "analytics4.successfactors.com";
		int    requestPort0307 = 443;
		String requestFile0307 = "/Production/RPC/SfWidgetRui.aspx" +
				"?action=getReportCenterUniversalNotificationStatus" +
				"&rpcSecret=" + C_RPCSecret1 +		// recorded value = D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F
				"&reqId=1575486814752";
		requestFile0307 = Lib.replaceTextPattern(requestFile0307, "1575486814752", P_millis, 0);		// search and replace request file fragment "1575486814752" with variable 'P_millis' on all occurrences
		requestFile0307 = Lib.replaceTextPattern(requestFile0307, "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F", C_RPCSecret1, 0);		// search and replace request file fragment "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F" with variable 'C_RPCSecret1' on all occurrences

		String requestContent0307 = 
				"data=null" +
				"&dojo.preventCache=1575486814752";
		requestContent0307 = Lib.replaceTextPattern(requestContent0307, "1575486814752", P_millis, 0);		// search and replace content fragment "1575486814752" with variable 'P_millis' on all occurrences

		String requestHeader0307 = "POST " + requestFile0307 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0307.length() + "\r\n" + 		// Content-Length: 41
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0307, requestHost0307, requestPort0307, requestHeader0307, requestContent0307.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0307 = null;		// support garbage collector to reduce memory
		requestContent0307 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 86
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [307] <- Index 307
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [308] <- WEB ADMIN Index 308 ---
		String requestProt0308 = "https";
		String requestHost0308 = "analytics4.successfactors.com";
		int    requestPort0308 = 443;
		String requestFile0308 = "/Production/PageBuilder/Runtime/SfMandatoryPromptEditor.aspx";
		String requestHeader0308 = "GET " + requestFile0308 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: nested-navigate\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0308, requestHost0308, requestPort0308, requestHeader0308, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0308 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 28935
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [308] <- Index 308
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_RPCSecret'
		ContentTokenExtractorItem contentTokenExtractorItem0308_1 = new ContentTokenExtractorItem("true;infohrm.rpcSecret", "\t\n\r '(),={}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0308_1);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'C_RPCSecret'
			C_RPCSecret = contentTokenExtractorItem0308_1.getResultToken();
			log("<<< C_RPCSecret = " + C_RPCSecret);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_RPCSecret!= null && C_RPCSecret.trim().length() == 0)
			{
				C_RPCSecret = "";
				log("runtime note: the extraction of a new value for the variable 'C_RPCSecret' ends up with an empty string - a substitute value was set");
				log("<<< C_RPCSecret = " + C_RPCSecret);
			}
		}
		catch (Exception e) { C_RPCSecret = null; log(e); }
		if (C_RPCSecret == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_RPCSecret' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [309] <- WEB ADMIN Index 309 ---
		String requestProt0309 = "https";
		String requestHost0309 = "analytics4.successfactors.com";
		int    requestPort0309 = 443;
		String requestFile0309 = "/Production/RPC/SfWidgetRui.aspx" +
				"?action=hasUserAccessibility" +
				"&rpcSecret=" + C_RPCSecret1 +		// recorded value = D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F
				"&reqId=1575486815411";
		requestFile0309 = Lib.replaceTextPattern(requestFile0309, "1575486815411", P_millis, 0);		// search and replace request file fragment "1575486815411" with variable 'P_millis' on all occurrences
		requestFile0309 = Lib.replaceTextPattern(requestFile0309, "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F", C_RPCSecret1, 0);		// search and replace request file fragment "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F" with variable 'C_RPCSecret1' on all occurrences

		String requestContent0309 = 
				"data=null" +
				"&dojo.preventCache=1575486815411";
		requestContent0309 = Lib.replaceTextPattern(requestContent0309, "1575486815411", P_millis, 0);		// search and replace content fragment "1575486815411" with variable 'P_millis' on all occurrences

		String requestHeader0309 = "POST " + requestFile0309 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0309.length() + "\r\n" + 		// Content-Length: 41
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0309, requestHost0309, requestPort0309, requestHeader0309, requestContent0309.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0309 = null;		// support garbage collector to reduce memory
		requestContent0309 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 97
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [309] <- Index 309
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [310] <- WEB ADMIN Index 310 ---
		String requestProt0310 = "https";
		String requestHost0310 = "analytics4.successfactors.com";
		int    requestPort0310 = 443;
		String requestFile0310 = "/Production/Resources/Images/SAPUI_Images/people.svg";
		String requestHeader0310 = "GET " + requestFile0310 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0310, requestHost0310, requestPort0310, requestHeader0310, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0310 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/SVG+XML", header text fragment = [verification disabled], recorded content size = 1792
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/SVG+XML", null, null);		// Test [310] <- Index 310
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 5 of 7)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [311] <- WEB ADMIN Index 311 ---
		String requestProt0311 = "https";
		String requestHost0311 = "analytics4.successfactors.com";
		int    requestPort0311 = 443;
		String requestFile0311 = "/Production/Resources/Images/SAPUI_Images/filter.svg";
		String requestHeader0311 = "GET " + requestFile0311 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0311, requestHost0311, requestPort0311, requestHeader0311, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0311 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/SVG+XML", header text fragment = [verification disabled], recorded content size = 941
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/SVG+XML", null, null);		// Test [311] <- Index 311
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [312] <- WEB ADMIN Index 312 ---
		String requestProt0312 = "https";
		String requestHost0312 = "analytics4.successfactors.com";
		int    requestPort0312 = 443;
		String requestFile0312 = "/Production/Resources/Images/SAPUI_Images/thin_arrow_down.svg";
		String requestHeader0312 = "GET " + requestFile0312 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0312, requestHost0312, requestPort0312, requestHeader0312, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0312 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/SVG+XML", header text fragment = [verification disabled], recorded content size = 503
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/SVG+XML", null, null);		// Test [312] <- Index 312
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [313] <- WEB ADMIN Index 313 ---
		String requestProt0313 = "https";
		String requestHost0313 = "analytics4.successfactors.com";
		int    requestPort0313 = 443;
		String requestFile0313 = "/Production/Resources/DojoToolkit/infohrm/scripts/SfMandatoryPromptEditor.js";
		String requestHeader0313 = "GET " + requestFile0313 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0313, requestHost0313, requestPort0313, requestHeader0313, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0313 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 30451
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [313] <- Index 313
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [314] <- WEB ADMIN Index 314 ---
		log();
		log("# title: Bad Request");
		String requestProt0314 = "https";
		String requestHost0314 = "analytics4.successfactors.com";
		int    requestPort0314 = 443;
		String requestFile0314 = "/Production/PageBuilder/Runtime/%22https://performancemanager4.successfactors.com/public/ui-dcss/Teck/_/3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!13YzS_!/.dcss";
		requestFile0314 = Lib.replaceTextPattern(requestFile0314, "598758c08d82beb795c1663b536ed101", C_Mod8, 0);		// search and replace request file fragment "598758c08d82beb795c1663b536ed101" with variable 'C_Mod8' on all occurrences
		requestFile0314 = Lib.replaceTextPattern(requestFile0314, "82137484cd2fcde38d057a0be1a23986", C_Mod7, 0);		// search and replace request file fragment "82137484cd2fcde38d057a0be1a23986" with variable 'C_Mod7' on all occurrences
		requestFile0314 = Lib.replaceTextPattern(requestFile0314, "!11!THRBPLPT!NO0!SD1BUT1", C_belieze1, 0);		// search and replace request file fragment "!11!THRBPLPT!NO0!SD1BUT1" with variable 'C_belieze1' on all occurrences
		requestFile0314 = Lib.replaceTextPattern(requestFile0314, "3a197762f867d55aceaee0bb261f6b2b", C_Mod1, 0);		// search and replace request file fragment "3a197762f867d55aceaee0bb261f6b2b" with variable 'C_Mod1' on all occurrences
		requestFile0314 = Lib.replaceTextPattern(requestFile0314, "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1", C_belieze0, 0);		// search and replace request file fragment "!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1" with variable 'C_belieze0' on all occurrences
		requestFile0314 = Lib.replaceTextPattern(requestFile0314, "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11", C_tctest0, 0);		// search and replace request file fragment "3l!3782cu7pgp!!mDB4L0g!011Ds3uTBNOBTRXPLPT!11" with variable 'C_tctest0' on all occurrences
		requestFile0314 = Lib.replaceTextPattern(requestFile0314, "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU", C_Img1, 0);		// search and replace request file fragment "!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BU" with variable 'C_Img1' on all occurrences

		String requestHeader0314 = "GET " + requestFile0314 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0314, requestHost0314, requestPort0314, requestHeader0314, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0314 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 400, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 324
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {400}, null, null, null);		// Test [314] <- Index 314
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [315] <- WEB ADMIN Index 315 ---
		String requestProt0315 = "https";
		String requestHost0315 = "analytics4.successfactors.com";
		int    requestPort0315 = 443;
		String requestFile0315 = "/Production/Resources/DojoToolkit/infohrm/BasePage.js";
		String requestHeader0315 = "GET " + requestFile0315 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0315, requestHost0315, requestPort0315, requestHeader0315, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0315 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1501
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [315] <- Index 315
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [316] <- WEB ADMIN Index 316 ---
		String requestProt0316 = "https";
		String requestHost0316 = "analytics4.successfactors.com";
		int    requestPort0316 = 443;
		String requestFile0316 = "/Production/Resources/DojoToolkit/infohrm/widget/BaseFilterEditor.js";
		String requestHeader0316 = "GET " + requestFile0316 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0316, requestHost0316, requestPort0316, requestHeader0316, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0316 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 66745
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [316] <- Index 316
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [317] <- WEB ADMIN Index 317 ---
		String requestProt0317 = "https";
		String requestHost0317 = "analytics4.successfactors.com";
		int    requestPort0317 = 443;
		String requestFile0317 = "/Production/Resources/DojoToolkit/infohrm/OdsEnums.js";
		String requestHeader0317 = "GET " + requestFile0317 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0317, requestHost0317, requestPort0317, requestHeader0317, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0317 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1054
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [317] <- Index 317
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [318] <- WEB ADMIN Index 318 ---
		String requestProt0318 = "https";
		String requestHost0318 = "analytics4.successfactors.com";
		int    requestPort0318 = 443;
		String requestFile0318 = "/Production/Resources/DojoToolkit/infohrm/widget/RuiComboBox.js";
		String requestHeader0318 = "GET " + requestFile0318 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0318, requestHost0318, requestPort0318, requestHeader0318, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0318 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8930
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [318] <- Index 318
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [319] <- WEB ADMIN Index 319 ---
		String requestProt0319 = "https";
		String requestHost0319 = "analytics4.successfactors.com";
		int    requestPort0319 = 443;
		String requestFile0319 = "/Production/Resources/DojoToolkit/infohrm/widget/Spinner.js";
		String requestHeader0319 = "GET " + requestFile0319 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0319, requestHost0319, requestPort0319, requestHeader0319, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0319 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6878
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [319] <- Index 319
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [320] <- WEB ADMIN Index 320 ---
		String requestProt0320 = "https";
		String requestHost0320 = "analytics4.successfactors.com";
		int    requestPort0320 = 443;
		String requestFile0320 = "/Production/Resources/DojoToolkit/infohrm/widget/DateTextBox.js";
		String requestHeader0320 = "GET " + requestFile0320 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0320, requestHost0320, requestPort0320, requestHeader0320, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0320 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1604
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [320] <- Index 320
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [321] <- WEB ADMIN Index 321 ---
		String requestProt0321 = "https";
		String requestHost0321 = "analytics4.successfactors.com";
		int    requestPort0321 = 443;
		String requestFile0321 = "/Production/Resources/DojoToolkit/dijit/form/DateTextBox.js";
		String requestHeader0321 = "GET " + requestFile0321 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0321, requestHost0321, requestPort0321, requestHeader0321, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0321 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 577
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [321] <- Index 321
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [322] <- WEB ADMIN Index 322 ---
		String requestProt0322 = "https";
		String requestHost0322 = "analytics4.successfactors.com";
		int    requestPort0322 = 443;
		String requestFile0322 = "/Production/Resources/DojoToolkit/dijit/Calendar.js";
		String requestHeader0322 = "GET " + requestFile0322 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0322, requestHost0322, requestPort0322, requestHeader0322, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0322 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4889
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [322] <- Index 322
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [323] <- WEB ADMIN Index 323 ---
		String requestProt0323 = "https";
		String requestHost0323 = "analytics4.successfactors.com";
		int    requestPort0323 = 443;
		String requestFile0323 = "/Production/Resources/DojoToolkit/dijit/CalendarLite.js";
		String requestHeader0323 = "GET " + requestFile0323 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0323, requestHost0323, requestPort0323, requestHeader0323, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0323 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 9548
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [323] <- Index 323
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [324] <- WEB ADMIN Index 324 ---
		String requestProt0324 = "https";
		String requestHost0324 = "analytics4.successfactors.com";
		int    requestPort0324 = 443;
		String requestFile0324 = "/Production/Resources/DojoToolkit/dijit/form/_DateTimeTextBox.js";
		String requestHeader0324 = "GET " + requestFile0324 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0324, requestHost0324, requestPort0324, requestHeader0324, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0324 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4871
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [324] <- Index 324
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [325] <- WEB ADMIN Index 325 ---
		String requestProt0325 = "https";
		String requestHost0325 = "analytics4.successfactors.com";
		int    requestPort0325 = 443;
		String requestFile0325 = "/Production/Resources/DojoToolkit/dijit/form/RangeBoundTextBox.js";
		String requestHeader0325 = "GET " + requestFile0325 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0325, requestHost0325, requestPort0325, requestHeader0325, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0325 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1713
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [325] <- Index 325
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [326] <- WEB ADMIN Index 326 ---
		String requestProt0326 = "https";
		String requestHost0326 = "analytics4.successfactors.com";
		int    requestPort0326 = 443;
		String requestFile0326 = "/Production/Resources/DojoToolkit/dijit/form/MappedTextBox.js";
		String requestHeader0326 = "GET " + requestFile0326 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0326, requestHost0326, requestPort0326, requestHeader0326, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0326 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1138
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [326] <- Index 326
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [327] <- WEB ADMIN Index 327 ---
		String requestProt0327 = "https";
		String requestHost0327 = "analytics4.successfactors.com";
		int    requestPort0327 = 443;
		String requestFile0327 = "/Production/Resources/DojoToolkit/dijit/form/ValidationTextBox.js";
		String requestHeader0327 = "GET " + requestFile0327 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0327, requestHost0327, requestPort0327, requestHeader0327, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0327 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5336
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [327] <- Index 327
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [328] <- WEB ADMIN Index 328 ---
		String requestProt0328 = "https";
		String requestHost0328 = "analytics4.successfactors.com";
		int    requestPort0328 = 443;
		String requestFile0328 = "/Production/Resources/DojoToolkit/dijit/form/TextBox.js";
		String requestHeader0328 = "GET " + requestFile0328 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0328, requestHost0328, requestPort0328, requestHeader0328, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0328 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3697
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [328] <- Index 328
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [329] <- WEB ADMIN Index 329 ---
		String requestProt0329 = "https";
		String requestHost0329 = "analytics4.successfactors.com";
		int    requestPort0329 = 443;
		String requestFile0329 = "/Production/Resources/DojoToolkit/dijit/form/_TextBoxMixin.js";
		String requestHeader0329 = "GET " + requestFile0329 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0329, requestHost0329, requestPort0329, requestHeader0329, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0329 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5689
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [329] <- Index 329
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [330] <- WEB ADMIN Index 330 ---
		String requestProt0330 = "https";
		String requestHost0330 = "analytics4.successfactors.com";
		int    requestPort0330 = 443;
		String requestFile0330 = "/Production/Resources/DojoToolkit/dijit/form/nls/validate.js";
		String requestHeader0330 = "GET " + requestFile0330 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0330, requestHost0330, requestPort0330, requestHeader0330, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0330 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 832
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [330] <- Index 330
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 6 of 7)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [331] <- WEB ADMIN Index 331 ---
		String requestProt0331 = "https";
		String requestHost0331 = "analytics4.successfactors.com";
		int    requestPort0331 = 443;
		String requestFile0331 = "/Production/Resources/DojoToolkit/infohrm/widget/TabbedContainer.js";
		String requestHeader0331 = "GET " + requestFile0331 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0331, requestHost0331, requestPort0331, requestHeader0331, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0331 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 7608
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [331] <- Index 331
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [332] <- WEB ADMIN Index 332 ---
		String requestProt0332 = "https";
		String requestHost0332 = "analytics4.successfactors.com";
		int    requestPort0332 = 443;
		String requestFile0332 = "/Production/Resources/DojoToolkit/infohrm/widget/OdsDateSelector.js";
		String requestHeader0332 = "GET " + requestFile0332 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0332, requestHost0332, requestPort0332, requestHeader0332, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0332 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 17005
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [332] <- Index 332
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [333] <- WEB ADMIN Index 333 ---
		String requestProt0333 = "https";
		String requestHost0333 = "analytics4.successfactors.com";
		int    requestPort0333 = 443;
		String requestFile0333 = "/Production/Resources/DojoToolkit/dijit/layout/TabContainer.js";
		String requestHeader0333 = "GET " + requestFile0333 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0333, requestHost0333, requestPort0333, requestHeader0333, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0333 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1316
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [333] <- Index 333
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [334] <- WEB ADMIN Index 334 ---
		String requestProt0334 = "https";
		String requestHost0334 = "analytics4.successfactors.com";
		int    requestPort0334 = 443;
		String requestFile0334 = "/Production/Resources/DojoToolkit/dijit/layout/_TabContainerBase.js";
		String requestHeader0334 = "GET " + requestFile0334 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0334, requestHost0334, requestPort0334, requestHeader0334, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0334 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2808
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [334] <- Index 334
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [335] <- WEB ADMIN Index 335 ---
		String requestProt0335 = "https";
		String requestHost0335 = "analytics4.successfactors.com";
		int    requestPort0335 = 443;
		String requestFile0335 = "/Production/Resources/DojoToolkit/dijit/layout/StackContainer.js";
		String requestHeader0335 = "GET " + requestFile0335 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0335, requestHost0335, requestPort0335, requestHeader0335, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0335 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4273
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [335] <- Index 335
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [336] <- WEB ADMIN Index 336 ---
		String requestProt0336 = "https";
		String requestHost0336 = "analytics4.successfactors.com";
		int    requestPort0336 = 443;
		String requestFile0336 = "/Production/Resources/DojoToolkit/dijit/layout/TabController.js";
		String requestHeader0336 = "GET " + requestFile0336 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0336, requestHost0336, requestPort0336, requestHeader0336, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0336 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3173
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [336] <- Index 336
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [337] <- WEB ADMIN Index 337 ---
		String requestProt0337 = "https";
		String requestHost0337 = "analytics4.successfactors.com";
		int    requestPort0337 = 443;
		String requestFile0337 = "/Production/Resources/DojoToolkit/dijit/layout/StackController.js";
		String requestHeader0337 = "GET " + requestFile0337 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0337, requestHost0337, requestPort0337, requestHeader0337, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0337 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5627
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [337] <- Index 337
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [338] <- WEB ADMIN Index 338 ---
		String requestProt0338 = "https";
		String requestHost0338 = "analytics4.successfactors.com";
		int    requestPort0338 = 443;
		String requestFile0338 = "/Production/Resources/DojoToolkit/dijit/Menu.js";
		String requestHeader0338 = "GET " + requestFile0338 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0338, requestHost0338, requestPort0338, requestHeader0338, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0338 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4565
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [338] <- Index 338
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [339] <- WEB ADMIN Index 339 ---
		String requestProt0339 = "https";
		String requestHost0339 = "analytics4.successfactors.com";
		int    requestPort0339 = 443;
		String requestFile0339 = "/Production/Resources/DojoToolkit/dijit/DropDownMenu.js";
		String requestHeader0339 = "GET " + requestFile0339 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0339, requestHost0339, requestPort0339, requestHeader0339, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0339 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1469
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [339] <- Index 339
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [340] <- WEB ADMIN Index 340 ---
		String requestProt0340 = "https";
		String requestHost0340 = "analytics4.successfactors.com";
		int    requestPort0340 = 443;
		String requestFile0340 = "/Production/Resources/DojoToolkit/dijit/_MenuBase.js";
		String requestHeader0340 = "GET " + requestFile0340 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0340, requestHost0340, requestPort0340, requestHeader0340, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0340 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5189
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [340] <- Index 340
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [341] <- WEB ADMIN Index 341 ---
		String requestProt0341 = "https";
		String requestHost0341 = "analytics4.successfactors.com";
		int    requestPort0341 = 443;
		String requestFile0341 = "/Production/Resources/DojoToolkit/dijit/_KeyNavContainer.js";
		String requestHeader0341 = "GET " + requestFile0341 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0341, requestHost0341, requestPort0341, requestHeader0341, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0341 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3023
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [341] <- Index 341
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [342] <- WEB ADMIN Index 342 ---
		String requestProt0342 = "https";
		String requestHost0342 = "analytics4.successfactors.com";
		int    requestPort0342 = 443;
		String requestFile0342 = "/Production/Resources/DojoToolkit/dijit/MenuItem.js";
		String requestHeader0342 = "GET " + requestFile0342 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0342, requestHost0342, requestPort0342, requestHeader0342, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0342 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3287
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [342] <- Index 342
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [343] <- WEB ADMIN Index 343 ---
		String requestProt0343 = "https";
		String requestHost0343 = "analytics4.successfactors.com";
		int    requestPort0343 = 443;
		String requestFile0343 = "/Production/Resources/DojoToolkit/dijit/layout/ScrollingTabController.js";
		String requestHeader0343 = "GET " + requestFile0343 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0343, requestHost0343, requestPort0343, requestHeader0343, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0343 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 9290
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [343] <- Index 343
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [344] <- WEB ADMIN Index 344 ---
		String requestProt0344 = "https";
		String requestHost0344 = "analytics4.successfactors.com";
		int    requestPort0344 = 443;
		String requestFile0344 = "/Production/Resources/DojoToolkit/infohrm/widget/InputTextArea.js";
		String requestHeader0344 = "GET " + requestFile0344 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0344, requestHost0344, requestPort0344, requestHeader0344, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0344 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 613
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [344] <- Index 344
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [345] <- WEB ADMIN Index 345 ---
		String requestProt0345 = "https";
		String requestHost0345 = "analytics4.successfactors.com";
		int    requestPort0345 = 443;
		String requestFile0345 = "/Production/Resources/DojoToolkit/infohrm/widget/Table.js";
		String requestHeader0345 = "GET " + requestFile0345 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0345, requestHost0345, requestPort0345, requestHeader0345, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0345 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 23534
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [345] <- Index 345
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [346] <- WEB ADMIN Index 346 ---
		String requestProt0346 = "https";
		String requestHost0346 = "analytics4.successfactors.com";
		int    requestPort0346 = 443;
		String requestFile0346 = "/Production/Resources/DojoToolkit/dijit/PopupMenuItem.js";
		String requestHeader0346 = "GET " + requestFile0346 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0346, requestHost0346, requestPort0346, requestHeader0346, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0346 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1205
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [346] <- Index 346
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [347] <- WEB ADMIN Index 347 ---
		String requestProt0347 = "https";
		String requestHost0347 = "analytics4.successfactors.com";
		int    requestPort0347 = 443;
		String requestFile0347 = "/Production/Resources/DojoToolkit/infohrm/css/calendar.css";
		String requestHeader0347 = "GET " + requestFile0347 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0347, requestHost0347, requestPort0347, requestHeader0347, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0347 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2267
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [347] <- Index 347
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [348] <- WEB ADMIN Index 348 ---
		String requestProt0348 = "https";
		String requestHost0348 = "analytics4.successfactors.com";
		int    requestPort0348 = 443;
		String requestFile0348 = "/Production/Resources/DojoToolkit/dijit/CheckedMenuItem.js";
		String requestHeader0348 = "GET " + requestFile0348 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0348, requestHost0348, requestPort0348, requestHeader0348, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0348 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1702
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [348] <- Index 348
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [349] <- WEB ADMIN Index 349 ---
		String requestProt0349 = "https";
		String requestHost0349 = "analytics4.successfactors.com";
		int    requestPort0349 = 443;
		String requestFile0349 = "/Production/Resources/DojoToolkit/dijit/MenuSeparator.js";
		String requestHeader0349 = "GET " + requestFile0349 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0349, requestHost0349, requestPort0349, requestHeader0349, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0349 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1170
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [349] <- Index 349
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [350] <- WEB ADMIN Index 350 ---
		String requestProt0350 = "https";
		String requestHost0350 = "clients1.google.com";
		int    requestPort0350 = 443;
		String requestFile0350 = "/tbproxy/af/query" +
				"?q=Chc2LjEuMTcxNS4xNDQyL2VuIChHR0xMKRMZi_OKVHKnbyYjLZFhlU4kIy2RYZVOJCMtTHHuFiQjLZFhlU4kIy2RYZVOJCMtkWGVTiQjLZxb9CgkIy2RYZVOJCMtkWGVTiQjLa0ALwEkIy2RYZVOJBQ=";
		String requestHeader0350 = "GET " + requestFile0350 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: clients1.google.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"X-Goog-Api-Key: AIzaSyBOti4mM-6x9WDnZIjIeyEU21OpBXqWBgw\r\n" + 
				"X-Client-Data: CJW2yQEIpLbJAQjEtskBCKmdygEI/J/KAQjiqMoBCMqvygEIzrDKAQj3tMoB\r\n" + 
				"Sec-Fetch-Site: none\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0350, requestHost0350, requestPort0350, requestHeader0350, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0350 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PROTO", header text fragment = [verification disabled], recorded content size = 28
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PROTO", null, null);		// Test [350] <- Index 350
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_5 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_6.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 7 of 7)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [351] <- WEB ADMIN Index 351 ---
		String requestProt0351 = "https";
		String requestHost0351 = "analytics4.successfactors.com";
		int    requestPort0351 = 443;
		String requestFile0351 = "/Production/Resources/Revolution/Images/button_gradient.png";
		String requestHeader0351 = "GET " + requestFile0351 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0351, requestHost0351, requestPort0351, requestHeader0351, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0351 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 3002
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [351] <- Index 351
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [352] <- WEB ADMIN Index 352 ---
		String requestProt0352 = "https";
		String requestHost0352 = "analytics4.successfactors.com";
		int    requestPort0352 = 443;
		String requestFile0352 = "/Production/PageBuilder/Runtime/SfMandatoryPromptEditor.aspx" +
				"?action=init" +
				"&rpcSecret=" + C_RPCSecret +		// recorded value = 0F89DA97942D75CBC9A4B0CDC1254003C255A71AAD707ED20DF4AF380F76249C30939898936421A2B97562E76E03858B
				"&reqId=1575486827335";
		requestFile0352 = Lib.replaceTextPattern(requestFile0352, "1575486827335", P_millis, 0);		// search and replace request file fragment "1575486827335" with variable 'P_millis' on all occurrences
		requestFile0352 = Lib.replaceTextPattern(requestFile0352, "0F89DA97942D75CBC9A4B0CDC1254003C255A71AAD707ED20DF4AF380F76249C30939898936421A2B97562E76E03858B", C_RPCSecret, 0);		// search and replace request file fragment "0F89DA97942D75CBC9A4B0CDC1254003C255A71AAD707ED20DF4AF380F76249C30939898936421A2B97562E76E03858B" with variable 'C_RPCSecret' on all occurrences

		String requestContent0352 = 
				"data=null" +
				"&dojo.preventCache=1575486827335";
		requestContent0352 = Lib.replaceTextPattern(requestContent0352, "1575486827335", P_millis, 0);		// search and replace content fragment "1575486827335" with variable 'P_millis' on all occurrences

		String requestHeader0352 = "POST " + requestFile0352 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0352.length() + "\r\n" + 		// Content-Length: 41
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0352, requestHost0352, requestPort0352, requestHeader0352, requestContent0352.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0352 = null;		// support garbage collector to reduce memory
		requestContent0352 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 11344
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"Employee Login Details\"}");		// Test [352] <- Index 352
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_6 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #6.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #6: FilterDone
		// # -------------------



		// --- HTTP REQUEST: Test [354] <- WEB ADMIN Index 354 ---
		String requestProt0354 = "https";
		String requestHost0354 = "analytics4.successfactors.com";
		int    requestPort0354 = 443;
		String requestFile0354 = "/Production/PageBuilder/Runtime/SfMandatoryPromptEditor.aspx" +
				"?action=updateMandatoryFilterOptions" +
				"&rpcSecret=" + C_RPCSecret +		// recorded value = 0F89DA97942D75CBC9A4B0CDC1254003C255A71AAD707ED20DF4AF380F76249C30939898936421A2B97562E76E03858B
				"&reqId=1575486842351";
		requestFile0354 = Lib.replaceTextPattern(requestFile0354, "1575486842351", P_millis, 0);		// search and replace request file fragment "1575486842351" with variable 'P_millis' on all occurrences
		requestFile0354 = Lib.replaceTextPattern(requestFile0354, "0F89DA97942D75CBC9A4B0CDC1254003C255A71AAD707ED20DF4AF380F76249C30939898936421A2B97562E76E03858B", C_RPCSecret, 0);		// search and replace request file fragment "0F89DA97942D75CBC9A4B0CDC1254003C255A71AAD707ED20DF4AF380F76249C30939898936421A2B97562E76E03858B" with variable 'C_RPCSecret' on all occurrences

		String requestContent0354 = 
				"data=%257B%2522ignoreMandatoryPrompt%2522%253Afalse%252C%2522runOffline%2522%253Afalse%252C%2522runOfflineFormat%2522%253A%2522CSV%2522%257D" +
				"&dojo.preventCache=1575486842351";
		requestContent0354 = Lib.replaceTextPattern(requestContent0354, "1575486842351", P_millis, 0);		// search and replace content fragment "1575486842351" with variable 'P_millis' on all occurrences

		String requestHeader0354 = "POST " + requestFile0354 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0354.length() + "\r\n" + 		// Content-Length: 172
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0354, requestHost0354, requestPort0354, requestHeader0354, requestContent0354.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0354 = null;		// support garbage collector to reduce memory
		requestContent0354 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 300
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"}],\"updatestatus\":\"OK\"}");		// Test [354] <- Index 354
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_RenderHandler'
		ContentTokenExtractorItem contentTokenExtractorItem0354_1 = new ContentTokenExtractorItem("renderHandler", "\t\n\r \"(),=\\{}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0354_1);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'C_RenderHandler'
			C_RenderHandler = contentTokenExtractorItem0354_1.getResultToken();
			log("<<< C_RenderHandler = " + C_RenderHandler);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_RenderHandler!= null && C_RenderHandler.trim().length() == 0)
			{
				C_RenderHandler = "";
				log("runtime note: the extraction of a new value for the variable 'C_RenderHandler' ends up with an empty string - a substitute value was set");
				log("<<< C_RenderHandler = " + C_RenderHandler);
			}
		}
		catch (Exception e) { C_RenderHandler = null; log(e); }
		if (C_RenderHandler == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_RenderHandler' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [355] <- WEB ADMIN Index 355 ---
		String requestProt0355 = "https";
		String requestHost0355 = "analytics4.successfactors.com";
		int    requestPort0355 = 443;
		String requestFile0355 = "/Production/PageBuilder/Runtime/SfWfaRuntime.aspx" +
				"?action=setScrollBar" +
				"&rpcSecret=" + C_RPCSecret1 +		// recorded value = D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F
				"&reqId=1575486842463";
		requestFile0355 = Lib.replaceTextPattern(requestFile0355, "1575486842463", P_millis, 0);		// search and replace request file fragment "1575486842463" with variable 'P_millis' on all occurrences
		requestFile0355 = Lib.replaceTextPattern(requestFile0355, "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F", C_RPCSecret1, 0);		// search and replace request file fragment "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F" with variable 'C_RPCSecret1' on all occurrences

		String requestContent0355 = 
				"data=%257B%2522scrollBar%2522%253A17%257D" +
				"&dojo.preventCache=1575486842469";
		requestContent0355 = Lib.replaceTextPattern(requestContent0355, "1575486842469", P_millis, 0);		// search and replace content fragment "1575486842469" with variable 'P_millis' on all occurrences

		String requestHeader0355 = "POST " + requestFile0355 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0355.length() + "\r\n" + 		// Content-Length: 73
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0355, requestHost0355, requestPort0355, requestHeader0355, requestContent0355.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0355 = null;		// support garbage collector to reduce memory
		requestContent0355 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 86
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [355] <- Index 355
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [356] <- WEB ADMIN Index 356 ---
		String requestProt0356 = "https";
		String requestHost0356 = "analytics4.successfactors.com";
		int    requestPort0356 = 443;
		String requestFile0356 = "/Production/PageBuilder/Runtime/SfWfaRuntime.aspx" +
				"?action=initOptions" +
				"&rpcSecret=" + C_RPCSecret1 +		// recorded value = D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F
				"&reqId=1575486842473";
		requestFile0356 = Lib.replaceTextPattern(requestFile0356, "1575486842473", P_millis, 0);		// search and replace request file fragment "1575486842473" with variable 'P_millis' on all occurrences
		requestFile0356 = Lib.replaceTextPattern(requestFile0356, "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F", C_RPCSecret1, 0);		// search and replace request file fragment "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F" with variable 'C_RPCSecret1' on all occurrences

		String requestContent0356 = 
				"data=null" +
				"&dojo.preventCache=1575486842474";
		requestContent0356 = Lib.replaceTextPattern(requestContent0356, "1575486842474", P_millis, 0);		// search and replace content fragment "1575486842474" with variable 'P_millis' on all occurrences

		String requestHeader0356 = "POST " + requestFile0356 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0356.length() + "\r\n" + 		// Content-Length: 41
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0356, requestHost0356, requestPort0356, requestHeader0356, requestContent0356.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0356 = null;		// support garbage collector to reduce memory
		requestContent0356 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1275
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "Current Selections");		// Test [356] <- Index 356
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [357] <- WEB ADMIN Index 357 ---
		String requestProt0357 = "https";
		String requestHost0357 = "analytics4.successfactors.com";
		int    requestPort0357 = 443;
		String requestFile0357 = "/Production/Resources/Images/PbRt/dialsmall.gif";
		String requestHeader0357 = "GET " + requestFile0357 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0357, requestHost0357, requestPort0357, requestHeader0357, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0357 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 1801
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [357] <- Index 357
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [358] <- WEB ADMIN Index 358 ---
		String requestProt0358 = "https";
		String requestHost0358 = "analytics4.successfactors.com";
		int    requestPort0358 = 443;
		String requestFile0358 = "/Production/PageBuilder/Runtime/SfWfaRuntime.aspx" +
				"?action=updateRendering" +
				"&rpcSecret=" + C_RPCSecret1 +		// recorded value = D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F
				"&reqId=1575486845478";
		requestFile0358 = Lib.replaceTextPattern(requestFile0358, "1575486845478", P_millis, 0);		// search and replace request file fragment "1575486845478" with variable 'P_millis' on all occurrences
		requestFile0358 = Lib.replaceTextPattern(requestFile0358, "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F", C_RPCSecret1, 0);		// search and replace request file fragment "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F" with variable 'C_RPCSecret1' on all occurrences

		String requestContent0358 = 
				"data=%257B%2522renderHandler%2522%253A%2522c66c5621-9a25-40ed-aa3f-ce7e42e5afd5%2522%257D" +
				"&dojo.preventCache=1575486845478";
		requestContent0358 = Lib.replaceTextPattern(requestContent0358, "1575486845478", P_millis, 0);		// search and replace content fragment "1575486845478" with variable 'P_millis' on all occurrences
		requestContent0358 = Lib.replaceTextPattern(requestContent0358, "c66c5621-9a25-40ed-aa3f-ce7e42e5afd5", C_RenderHandler, 0);		// search and replace content fragment "c66c5621-9a25-40ed-aa3f-ce7e42e5afd5" with variable 'C_RenderHandler' on all occurrences

		String requestHeader0358 = "POST " + requestFile0358 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0358.length() + "\r\n" + 		// Content-Length: 121
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0358, requestHost0358, requestPort0358, requestHeader0358, requestContent0358.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0358 = null;		// support garbage collector to reduce memory
		requestContent0358 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 109481
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [358] <- Index 358
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [359] <- WEB ADMIN Index 359 ---
		String requestProt0359 = "https";
		String requestHost0359 = "analytics4.successfactors.com";
		int    requestPort0359 = 443;
		String requestFile0359 = "/Production/PageBuilder/Runtime/HrmlPbRuntime.aspx" +
				"?action=getExcelUrl" +
				"&rpcSecret=" + C_RPCSecret1 +		// recorded value = D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F
				"&reqId=1575486846006";
		requestFile0359 = Lib.replaceTextPattern(requestFile0359, "1575486846006", P_millis, 0);		// search and replace request file fragment "1575486846006" with variable 'P_millis' on all occurrences
		requestFile0359 = Lib.replaceTextPattern(requestFile0359, "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F", C_RPCSecret1, 0);		// search and replace request file fragment "D750794E095DBB1E2BA8786DDDC0FBB79850D43498E2854F515615D91536056AC57D1DED7B5483C7EE77ED4149C69E0F" with variable 'C_RPCSecret1' on all occurrences

		String requestContent0359 = 
				"data=%257B%2522compId%2522%253A%25221%2522%257D" +
				"&dojo.preventCache=1575486846006";
		requestContent0359 = Lib.replaceTextPattern(requestContent0359, "1575486846006", P_millis, 0);		// search and replace content fragment "1575486846006" with variable 'P_millis' on all occurrences

		String requestHeader0359 = "POST " + requestFile0359 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0359.length() + "\r\n" + 		// Content-Length: 79
				"Sec-Fetch-Mode: cors\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0359, requestHost0359, requestPort0359, requestHeader0359, requestContent0359.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0359 = null;		// support garbage collector to reduce memory
		requestContent0359 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 172
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [359] <- Index 359
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [360] <- WEB ADMIN Index 360 ---
		String requestProt0360 = "https";
		String requestHost0360 = "analytics4.successfactors.com";
		int    requestPort0360 = 443;
		String requestFile0360 = "/Production/Resources/DojoToolkit/infohrm/images/comboButton.gif";
		String requestHeader0360 = "GET " + requestFile0360 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0360, requestHost0360, requestPort0360, requestHeader0360, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_ReportID);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0360 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 404
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [360] <- Index 360
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [361] <- WEB ADMIN Index 361 ---
		String requestProt0361 = "https";
		String requestHost0361 = "clients1.google.com";
		int    requestPort0361 = 443;
		String requestFile0361 = "/tbproxy/af/query" +
				"?q=Chc2LjEuMTcxNS4xNDQyL2VuIChHR0xMKRMZ4KkTxM3Vvx0jLbEb7Y8kIy3sTb5aJCMtten9VSQjLZFhlU4kFA==";
		String requestHeader0361 = "GET " + requestFile0361 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: clients1.google.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"X-Goog-Api-Key: AIzaSyBOti4mM-6x9WDnZIjIeyEU21OpBXqWBgw\r\n" + 
				"X-Client-Data: CJW2yQEIpLbJAQjEtskBCKmdygEI/J/KAQjiqMoBCMqvygEIzrDKAQj3tMoB\r\n" + 
				"Sec-Fetch-Site: none\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0361, requestHost0361, requestPort0361, requestHeader0361, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0361 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PROTO", header text fragment = [verification disabled], recorded content size = 28
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PROTO", null, null);		// Test [361] <- Index 361
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #6 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #7: SignOut
		// # ----------------



		// --- HTTP REQUEST: Test [363] <- WEB ADMIN Index 363 ---
		String requestProt0363 = "https";
		String requestHost0363 = "performancemanager4.successfactors.com";
		int    requestPort0363 = 443;
		String requestFile0363 = "/sf/idp/SAML2/slo" +
				"?_s.crb=" + C_AjaxsecKey1;		// recorded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d
		requestFile0363 = Lib.replaceTextPattern(requestFile0363, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'vScrb' on all occurrences
		requestFile0363 = Lib.replaceTextPattern(requestFile0363, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1, 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'C_AjaxsecKey1' on all occurrences

		String requestContent0363 = 
				"LogoutUrl=https%3A%2F%2Fonboarding4.successfactors.com%2FONB%2FSSO%2FSAML20%2FSingleLogoutService.aspx" +
				"&company=Teck";
		String requestHeader0363 = "POST " + requestFile0363 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0363.length() + "\r\n" + 		// Content-Length: 115
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: nested-navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0363, requestHost0363, requestPort0363, requestHeader0363, requestContent0363.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0363 = null;		// support garbage collector to reduce memory
		requestContent0363 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1927
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [363] <- Index 363
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [364] <- WEB ADMIN Index 364 ---
		String requestProt0364 = "https";
		String requestHost0364 = "performancemanager4.successfactors.com";
		int    requestPort0364 = 443;
		String requestFile0364 = "/sf/idp/SAML2/slo" +
				"?_s.crb=" + C_AjaxsecKey1;		// recorded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d
		requestFile0364 = Lib.replaceTextPattern(requestFile0364, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'vScrb' on all occurrences
		requestFile0364 = Lib.replaceTextPattern(requestFile0364, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1, 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'C_AjaxsecKey1' on all occurrences

		String requestContent0364 = 
				"LogoutUrl=https%3A%2F%2Fteck.plateau.com%2Flearning%2Fsaml%2FSSO" +
				"&company=Teck";
		String requestHeader0364 = "POST " + requestFile0364 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0364.length() + "\r\n" + 		// Content-Length: 77
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: nested-navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0364, requestHost0364, requestPort0364, requestHeader0364, requestContent0364.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0364 = null;		// support garbage collector to reduce memory
		requestContent0364 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1891
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [364] <- Index 364
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [365] <- WEB ADMIN Index 365 ---
		String requestProt0365 = "https";
		String requestHost0365 = "performancemanager4.successfactors.com";
		int    requestPort0365 = 443;
		String requestFile0365 = "/sf/idp/SAML2/slo" +
				"?_s.crb=" + C_AjaxsecKey1;		// recorded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d
		requestFile0365 = Lib.replaceTextPattern(requestFile0365, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", java.net.URLDecoder.decode(vScrb), 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'vScrb' on all occurrences
		requestFile0365 = Lib.replaceTextPattern(requestFile0365, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1, 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d" with variable 'C_AjaxsecKey1' on all occurrences

		String requestContent0365 = 
				"LogoutUrl=https%3A%2F%2Fanalytics4.successfactors.com%2FProduction%2FHrmlLogout.aspx" +
				"&company=Teck";
		String requestHeader0365 = "POST " + requestFile0365 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0365.length() + "\r\n" + 		// Content-Length: 97
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: nested-navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0365, requestHost0365, requestPort0365, requestHeader0365, requestContent0365.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		testURL.execute(performanceData);
		requestHeader0365 = null;		// support garbage collector to reduce memory
		requestContent0365 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1906
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [365] <- Index 365
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [366] <- WEB ADMIN Index 366 ---
		String requestProt0366 = "https";
		String requestHost0366 = "performancemanager4.successfactors.com";
		int    requestPort0366 = 443;
		String requestFile0366 = "/sf/logout" +
				"?bplte_company=Teck" +
				"&_s.crb=" + java.net.URLEncoder.encode(C_AjaxsecKey1);		// recorded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestFile0366 = Lib.replaceTextPattern(requestFile0366, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences
		requestFile0366 = Lib.replaceTextPattern(requestFile0366, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", java.net.URLEncoder.encode(C_AjaxsecKey1), 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'C_AjaxsecKey1' on all occurrences

		String requestHeader0366 = "GET " + requestFile0366 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0366, requestHost0366, requestPort0366, requestHeader0366, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0366 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [366] <- Index 366
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [367] <- WEB ADMIN Index 367 ---
		String requestProt0367 = "https";
		String requestHost0367 = "performancemanager4.successfactors.com";
		int    requestPort0367 = 443;
		String requestFile0367 = "/login" +
				"?company=Teck" +
				"&bplte_logout=1" +
				"&username=TestAutomation" +
				"&_s.crb=" + java.net.URLEncoder.encode(C_AjaxsecKey1);		// recorded value = AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d
		requestFile0367 = Lib.replaceTextPattern(requestFile0367, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb, 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'vScrb' on all occurrences
		requestFile0367 = Lib.replaceTextPattern(requestFile0367, "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", java.net.URLEncoder.encode(C_AjaxsecKey1), 0);		// search and replace request file fragment "AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d" with variable 'C_AjaxsecKey1' on all occurrences

		String requestHeader0367 = "GET " + requestFile0367 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0367, requestHost0367, requestPort0367, requestHeader0367, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%253d", vScrb);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0367 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 6335
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [367] <- Index 367
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [368] <- WEB ADMIN Index 368 ---
		log();
		log("# title: Onboarding");
		String requestProt0368 = "https";
		String requestHost0368 = "onboarding4.successfactors.com";
		int    requestPort0368 = 443;
		String requestFile0368 = "/ONB/SSO/SAML20/SingleLogoutService.aspx" +
				"?SAMLRequest=nZJBc9owEIX%2Fikd3W5Zjh6DBZJwCHRIKE0xp4dIRskyc2pKrlQn011eYkEkybQ696LC72vftm9e73lelsxMaCiVjRDwfOUJylRVyG6Ovi5F7ha77PWBVGdR0oraqMXPxqxFgHPtTAj21YtRoSRWDAqhklQBqOE2TLxMaeD6ttTKKqxI5A%2FuxkMy0ag%2FG1EAxVnKjmD5Khh40nAuAnHGjNHhcVXg2vcFpOsPHdYGPUztXihNKKvSu4MJjUO%2BRMx7E6MdV3gnC4CJ3MxIQN8w23N3kWeReRuQyFyQIxUXXjgI0YizBMGliFPik65LA9cMF6VIS0oB43Y6%2FRs5cMDiifnRd2aLQBoRGzvJspe2gZ%2BNoq6ZfG%2FbxRgZ219Ej1D97VAudK10xyYV92Fbov3oFOS6y%2BmQVtoWayQNeCP6zh1%2BjnMGmVno8%2BB8wZ3SkMf8eJx5pK0XmtuDWIAm14EVeiAz1FzYISWNU1WbhTHfieclbaq%2Bz3bHMxL6v59G4mQyr1WbWrKvi9uHwKb0pV2m9W6bDJBkkT%2Bvh5zy9iyI9%2Br5PugGsZqv9cma%2BVbuwusP35vHwGJa30%2BEh2jx1ft8fVJht4%2FhZ%2B53aS%2FVN5vt%2FAA%3D%3D" +
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=UswMWJzCFSuHukPXniB8Rl1%2F9cS%2BV8BH9PLBiE5vG%2F0QeDriyJ5FxxGflf2nyW6wzrBkxxALUChIi2toXmR1L%2FaSrjuOy1hcMg9lvlDuMrZWdZoFt72f7l4gToxPZZX2vlaXsX4VQld3VNxHOUc9SmPL1acF6DC8Ddkja%2F6zGQo%3D";
		String requestHeader0368 = "GET " + requestFile0368 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Sec-Fetch-Mode: nested-navigate\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-US,en;q=0.9\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0368, requestHost0368, requestPort0368, requestHeader0368, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("AvQ5vOpgRAR9jYV4Y18UpXFq3vk%3d", C_AjaxsecKey1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		
		// execute inline script "miilistime"
		inlineScriptContext = executeInlineScript_1575679227340(testURL, threadStep, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// set non-executed URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		testURL.execute(performanceData);
		requestHeader0368 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1158
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, null);		// Test [368] <- Index 368
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #7 successful done
		return true;
	}



	boolean synchResponsesParallelRequestsPage_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 1 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_1(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_1 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 2 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_2(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_2 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 3 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_3(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_3 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 4 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_4(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_4 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 5 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_5(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_5 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 6 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_6(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_6 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_7(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 7 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_7(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_7 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	/**
	 * implement GetRealTimeUserInputFieldsInterface: get the definition and the value of all real-time user input fields.
	 */
	public ArrayList<RealTimeUserInputField> getRealTimeUserInputFields()
	{
		try
		{
			ArrayList<RealTimeUserInputField> realTimeUserInputFieldList = new ArrayList<RealTimeUserInputField>();
			return realTimeUserInputFieldList;
		}
		catch (Exception e)
		{
			log(e);
			return null;
		}
	}



	/**
	 * implement ThreadStepInterface: get the current execution step (current URL call or page break) of a simulated user.
	 */
	public int getExecutionStep()
	{
		return threadStep;
	}



	/**
	 * implement SetThreadStepInterface: set the current execution step (current URL call or page break) of a simulated user.
	 */
	public void setExecutionStep(int threadStep)
	{
		this.threadStep = threadStep;
	}



	/**
	 * implement SSLSessionCacheStatisticInterface: get statistic data about the SSL session cache behavior of a simulated user.
	 */
	public SSLSessionCacheStatistic getSSLSessionCacheStatistic()
	{
		return sslStatistic;
	}



	/**
	 * implement VaryingTestDurationInterface: support to extend or to reduce the planned test duration.
	 */
	public int getPlannedTestDuration()
	{
		return plannedTestDuration;
	}
	
	public void setExtendTestDuration(int deltaSeconds)
	{
		if (plannedTestDuration == 0)
		{
			plannedTestDuration = deltaSeconds;		// the old planned test duration was unlimited but is now limited
			return;
		}
		if (deltaSeconds == 0)
		{
			plannedTestDuration = 0;		// the new planned test duration is now unlimited
			return;
		}
		plannedTestDuration = plannedTestDuration + deltaSeconds;
	}



	/**
	 * implement SuspendResumeInterface: support to suspend and to resume the test execution.
	 */
	public int getPlannedStartupDelay()
	{
		return plannedStartupDelay;
	}
	
	public void setUserResumeStartWaitDelay(int millis)
	{
		userResumeStartWaitDelay = millis;
	}



	/**
	 * implement VaryingLoadInterface: support to decrement the number of simulated users at runtime.
	 */
	public void setDecrementEndOfLoopFlag(boolean decrementEndOfLoopFlag)
	{
		this.decrementEndOfLoopFlag = decrementEndOfLoopFlag;
	}

	public boolean isDecrementEndOfLoopFlag()
	{
		return decrementEndOfLoopFlag;
	}



	/**
	 * internal method: execute the loops for one simulated user as a thread.
	 * controls the thread and displays the (thread-)log if one loop has been completed.
	 */
	public void run()
	{
		// user terminated by inline script, at start of user ?
		if (isTerminateUser())
		{
			System.out.println("# --- thread " + Thread.currentThread().getName() + " aborted --- " + ZoneTime.dateToShortString() + " ---");
			return;
		}
		try
		{
			while (true)
			{
				threadStep = ThreadStepInterface.THREAD_NO_STEP;
				clearLog();
				
				// execute loop
				log("--- loop started --- " + ZoneTime.dateToShortString() + " ---");
				boolean loopPassed = this.execute(totalLoopCounter.getAndIncrement());
				performanceData.addUserTransactionMeasuredSamples(transactionHandler.getPendingTransactions());
				ArrayList<UserTransactionContext> nonExecutedTransactions = transactionHandler.getNotExecutedTransactions();

				for (UserTransactionContext nonExecutedTransaction : new ArrayList<>(nonExecutedTransactions))
				{
					if(transactionContextMap.containsKey(nonExecutedTransaction.getTransactionId()+"") && transactionContextMap.get(nonExecutedTransaction.getTransactionId()+"") == null)
					{
						transactionContextMap.remove(nonExecutedTransaction.getTransactionId()+"");
						nonExecutedTransactions.remove(nonExecutedTransaction);
					}
				}

				performanceData.addUserTransactionNotExecutedSamples(nonExecutedTransactions);
				performanceData.addSocktPoolStatistic(socketPool);
				socketPool.closePool();
				performanceData.addSSLCacheStatistic(sslStatistic.getSSLSessionCacheStatisticResult());
				sslStatistic.reset();
				
				// eof of input file ?
				if (abortedByEofInputFile())
					return;		// endOfRun() not called in such a case
				
				// check loop result
				String remainingLoopInfo = "";
				if (checkLoopCount)
					remainingLoopInfo = " [remaining loops = " + (remainingLoops - 1) + "]";
				if (loopPassed)
				{
					performanceData.addPassedLoop();
					log("--- loop passed ---  " + ZoneTime.dateToShortString() + " ---" + remainingLoopInfo);
				}
				else
				{
					performanceData.addFailedLoop();
					log("--- loop failed ---  " + ZoneTime.dateToShortString() + " ---" + remainingLoopInfo);
				}
				threadStep = ThreadStepInterface.THREAD_NO_STEP;
				
				// display thread log to standard output
				if (debugLoops || (debugFailedLoops && (!loopPassed)))
				{
					synchronized (dumpLock)
					{
						dumpLog(System.out);				// full log
					}
				}
				
				// check if max loops reached
				if (checkLoopCount)
				{
					// all done ?
					remainingLoops--;
					if (remainingLoops <= 0)
					{
						endOfRun();
						return;
					}
				}
				
				// check if simulated user must be decremented
				if (decrementEndOfLoopFlag && (getOwnLoadTestUserContext().getDecrementEndOfLoopPointInTime() <= System.currentTimeMillis()))
				{
					return;
				}
				
				// check if max test duration reached
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				{
					endOfRun();
					return;
				}
				
				// check if this specific user is terminated earlier than planned by a HTTP content verification or by a plug-in
				if (isTerminateUser())
				{
					endOfRun();
					System.out.println("# --- thread " + Thread.currentThread().getName() + " terminate failed user --- " + ZoneTime.dateToShortString() + " ---");
					return;
				}
				
				// check if load test execution is temporary suspended
				boolean wasSuspended = false;
				while (isSuspend())
				{
					wasSuspended = true;
					try { Thread.currentThread().sleep(20); } catch (InterruptedException ie) {}
					if (abortedByRemote() || abortedByEofInputFile())
					{
						endOfRun();
						return;
					}
					
					// check if max test duration reached during suspend
					if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
					{
						endOfRun();
						return;
					}
				}
				// check if load test execution is resumed
				if (wasSuspended)
				{
					try { sleepRemoteInterruptable(userResumeStartWaitDelay); } catch (InterruptedException ie) {}
				}
				
				// wait 20 milliseconds if loop has failed
				if (!loopPassed)
					try { Thread.currentThread().sleep(loopErrorDelay); } catch (InterruptedException ie) {}
				
				// execute next loop
				threadLoopCounter++;
			}	// end: while (true)
		}
		catch (Throwable tex)
		{
			log("*** INTERNAL ERROR / LOAD TEST ABORTED ***");
			log(tex);
			log();
			synchronized (dumpLock)
			{
				dumpLog(System.out);				// full log
				System.err.println("*** INTERNAL ERROR / LOAD TEST ABORTED ***");
				tex.printStackTrace(System.err);
				System.exit(-2);
			}
		}
		finally
		{
			// remove the reference to this load test instance and the reference to the thread that runs this instance
			try
			{
				if (!decrementEndOfLoopFlag)
				{
					getUserContextTable().getWriteLock().lock();
					getOwnLoadTestUserContext().setLoadTestUserFinallyEnded();
					getUserContextTable().getWriteLock().unlock();
				}
				else
					decrementEndOfLoopFlag = false;
			}
			catch (Throwable texFinal)
			{
				System.err.println("*** INTERNAL FINALLY ERROR / LOAD TEST ABORTED ***");
				texFinal.printStackTrace(System.err);
				System.exit(-2);
			}
		}
	}



	/**
	 * internal method: called when a user has completed the test-run.
	 */
	public void endOfRun()
	{
		clearLog();
		
		if (debugLoops && (getLog().size() > 0))
		{
			synchronized (dumpLock)
			{
				dumpLog(System.out);		// dump log of inline scripts and load test plug-ins which are executed at end of user
			}
		}
	}



	/**
	 * Main program. Starts the test and waits until all have been done.
	 */
	public static void main(String[] args)
	{
		// check command line argument -h or -help
		if ((ParseArgs.hasOption(args, "-h")) || (ParseArgs.hasOption(args, "-help")))
		{
			System.out.println();
			System.out.println("Help - Proxy Sniffer Load Test Program:");
			System.out.println();
			System.out.println("-u <number>              ->> required argument: number of concurrent users");
			System.out.println("-d <seconds>             ->> required argument: planned test duration in seconds (default: 30, 0 = unlimited)");
			System.out.println("-t <seconds>             ->> required argument: request timeout per url in seconds");
			System.out.println();
			System.out.println("-tconnect <seconds>      ->> TCP/IP socket connect timeout in seconds (default: use value of -t <seconds>)");
			System.out.println();
			System.out.println("-sdelay <milliseconds>   ->> startup delay time between concurrent users in milliseconds (default: 200)");
			System.out.println("-mtpu <number>           ->> maximum number of parallel threads per user (default: " + MAX_PARALLEL_THREADS_PER_USER + ")");
			System.out.println("-maxloops <number>       ->> maximum number of loops per user (default: 0 = unlimited)");
			System.out.println("-downlink <kbps>         ->> maximum downlink network bandwidth per user in kilobits per second (default: 0 = unlimited)");
			System.out.println("-uplink <kbps>           ->> maximum uplink network bandwidth per user in kilobits per second (default: 0 = unlimited)");
			System.out.println("-multihomed <filename>   ->> use serveral client ip addresses - file format: <addr1>, <addr2>, ... (all on the same line)");
			System.out.println("-sampling <seconds>      ->> statistic sampling interval in seconds (default: 15)");
			System.out.println("-percpage <percent>      ->> additional sampling rate per web page call in percent (default: 100)");
			System.out.println("-percurl <percent>       ->> additional sampling rate per url call in percent (default: 0)");
			System.out.println("-percurlopt <level>      ->> extended sampling level per url call, see application reference manual (default: 0 = disabled)");
			System.out.println("-maxerrsnap <number>     ->> maximum number of error snapshots per url (default: 0 = unlimited)");
			System.out.println("-maxerrmem <megabytes>   ->> maximum size of memory in megabytes which can be used for error snapshots (default: 20, -1 = unlimited)");
			System.out.println("-nosdelayCluster         ->> apply startup delay time between concurrent users per exec agent, but not per cluster job (default: apply per cluster job)");
			System.out.println("-setuseragent \"<text>\"   ->> replace the recorded value of the HTTP request header field User-Agent with a new value");
			System.out.println("-collect <host>[:<port>] ->> collect additional data from external measuring agents (data collectors)");
			System.out.println("-res <filename>          ->> overrides the default name of the binary output file");
			System.out.println("-nores                   ->> disables to create the binary output file");
			System.out.println();
			System.out.println("-ssl <version>           ->> set SSL version: possible options are \"all\" (default), \"v3\", \"tls\", \"tls11\" or \"tls12\"");
			System.out.println("-sslcache <seconds>      ->> timeout of user-related SSL session cache (default: 300, 0 = cache disabled)");
			System.out.println("-sslrandom <type>        ->> set the type of the random generator used for SSL handshakes: possible options are \"fast\", \"iaik\" (default) or \"java\"");
			System.out.println("-sslcmode                ->> apply SSL/HTTPS compatibility workarounds for deficient SSL servers");
			System.out.println("-ecc                     ->> enable support of elliptic curve cryptography (ECC)");
			System.out.println("-nosni                   ->> disable support of server name indication (SNI)");
			System.out.println("-snicritical             ->> set the TLS SNI extension as critical (default: non-critical)");
			System.out.println("-tlssessiontickets       ->> set the TLS to use Session Tickets (non-critical)");
			System.out.println("-iaikLast                ->> adds the IAIK security provider at the last position (instead of default: IAIK at first position)");
			System.out.println();
			System.out.println("-dnssrv <IP-1>[,IP-N])   ->> use specific DNS server(s) to resolve DNS host names (default: use OS to resolve host names)");
			System.out.println("-dnshosts <filename>     ->> use specific DNS hosts file (default: use OS to resolve host names)");
			System.out.println("-dnstranslation <filename> ->> use a DNS translation file that converts DNS names. It might be needed to disable TLS SNI if this option is used");
			System.out.println("-dnsenattl               ->> enable consideration of DNS TTL by using the received TTL-values from the DNS Server(s) (default: TTL disabled)");
			System.out.println("-dnsfixttl <seconds>     ->> enable DNS TTL by using a fixed TTL-value of seconds for all DNS resolves");
			System.out.println("-dnsperloop              ->> perform new DNS resolves for each executed loop. All resolves are stable within the same loop (no consideration of DNS TTL within a loop)");
			System.out.println("-dnsstatistic            ->> collect statistical data about DNS resolutions. Note: use this option only if not any other, more specific DNS option is enabled");
			System.out.println("-dnsdebug                ->> debug DNS resolves and the DNS cache");
			System.out.println("-enableIPv6 <networkinterface-name>  ->> enable only IPv6 support for recording, also can provide the IPv6 network interface of the load generator");
			System.out.println("-enableIPv6v4 <networkinterface-name> ->> enable both IPv6 and IPv4 (first will try with IPv6 ,if fails will try with IPv4 support for recording),also can provide the IPv6 network interface of the load generator");
			System.out.println();
			System.out.println("-dfl                     ->> debug execution steps of all failed loops to standard output");
			System.out.println("-dl                      ->> debug execution steps of all loops to standard output");
			System.out.println("-dh                      ->> debug HTTP protocol headers to standard output, includes the -dl option");
			System.out.println("-dc                      ->> debug HTTP content data to standard output, includes the -dl option");
			System.out.println("-dhc                     ->> debug HTTP protocol headers and HTTP content data to standard output, includes the -dl option");
			System.out.println("-dC                      ->> debug cookies to standard output, includes the -dl option");
			System.out.println("-dK                      ->> debug keep-alive (socket pool) to standard output, includes the -dl option");
			System.out.println("-dssl                    ->> debug SSL handshake (https) to standard output, includes the -dl and the -dK option");
			System.out.println();
			System.out.println("-tz <timezone>           ->> set time zone (see Application Reference Manual: supported time zones)");
			System.out.println("-dgs a|c                 ->> set number format (decimal group separator) a = '  c = ,");
			System.out.println("-annotation <text>       ->> adds an annotation for this test run");
			System.out.println();
			System.out.println("-execAgentHost <ip address or dns name>      ->> set the ip address or the dns name of the exec agent from which the license is used (default: 127.0.0.1)");
			System.out.println("-execAgentPort <port>                        ->> set the tcp/ip port of the exec agent (default: 7993)");
			System.out.println("-execAgentProtocol <plain | http | https>    ->> set the protocol of the exec agent (default: plain)");
			System.out.println("-execAgentUsername <string>                  ->> set the auth. username for the exec agent (default: [no username])");
			System.out.println("-execAgentPassword <string>                  ->> set the auth. password for the exec agent (default: [no password])");
			System.out.println();
			System.out.println("-h                       ->> display this help text");
			System.out.println("-help                    ->> display this help text");
			System.out.println();
			System.exit(-1);
		}
		
		System.out.println("+----------------------------------------------------------------+");
		System.out.println("| Welcome to the ZebraTester Load Test Program.                  |");
		System.out.println("| Additional help available with program argument \"-help\"        |");
		System.out.println("| Procedure Copyright by Ingenieurbuero David Fischer AG,        |");
		System.out.println("| a company of the Apica group. All rights reserved.             |");
		System.out.println("+----------------------------------------------------------------+");
		
		
		if (commonNextProxyConfig != null)
		{
			System.out.println();
			System.out.println("*** Warning: Loadtest over HTTP(S) Proxy ***");
		}
		
		// check command line argument -ecc
		sslECC = (ParseArgs.hasOption(args, "-ecc"));       // enable ssl ecc ?
		
		// initialize ssl/https support
		SSLInit.execute(!ParseArgs.hasOption(args, "-iaikLast"), true);
		if (sslECC)
			SSLInit.enableECC();
		
		// check command line argument -nosni
		if (ParseArgs.hasOption(args, "-nosni"))            // disable ssl sni ?
			sslSNI = false;
		
		// check command line argument -snicritical
		if (ParseArgs.hasOption(args, "-snicritical"))      // set ssl sni as critical tls extension ?
			sslSNICirical = true;
		
		// check command line argument -tlssessiontickets
		if (ParseArgs.hasOption(args, "-tlssessiontickets"))      // set tls extension session tickets?
			useTlsSessionTickets = true;
		
		// set default character set for response content tests
		setCharEncoding(prxCharEncoding);
		
		// check command line argument -tz <timezone>
		String timeZoneString = ParseArgs.getString(args, "-tz");
		if (timeZoneString != null)
			defaultTimeZone = timeZoneString.toUpperCase(); // set time zone?
		ZoneTime.setDefaultTimeZone(defaultTimeZone);
		
		// check command line argument -dgs a|c
		String dgs = ParseArgs.getString(args, "-dgs");
		if (dgs != null)
		{
			if (dgs.equalsIgnoreCase("a"))
				defaultNumberGroupingSeparator = '\'';
			if (dgs.equalsIgnoreCase("c"))
				defaultNumberGroupingSeparator = ',';
		}
		Lib.setDefaultNumberGroupingSeparator(defaultNumberGroupingSeparator);
		
		// check command line argument -annotation <text>
		String testRunAnnotation = ParseArgs.getString(args, "-annotation");
		if (testRunAnnotation != null)
		{
			if (testRunAnnotation.startsWith("\"") && testRunAnnotation.endsWith("\""))
				testRunAnnotation = testRunAnnotation.substring(1, testRunAnnotation.length() - 1);
		}
		
		// check command line argument -ssl
		String newSslProtocolVersion = ParseArgs.getString(args, "-ssl");
		if (newSslProtocolVersion != null)
		{
			if (newSslProtocolVersion.equalsIgnoreCase("v2"))
				sslProtocolVersion = "v2";
			if (newSslProtocolVersion.equalsIgnoreCase("v3"))
				sslProtocolVersion = "v3";
			if (newSslProtocolVersion.equalsIgnoreCase("tls"))
				sslProtocolVersion = "tls";
			if (newSslProtocolVersion.equalsIgnoreCase("tls11"))
				sslProtocolVersion = "tls11";
			if (newSslProtocolVersion.equalsIgnoreCase("tls12"))
				sslProtocolVersion = "tls12";
		}
		
		// check command line argument -sslcache <seconds>
		Integer newSslSessionCacheTimeout = ParseArgs.getInteger(args, "-sslcache");
		if (newSslSessionCacheTimeout != null)
			sslSessionCacheTimeout = newSslSessionCacheTimeout.intValue();
		
		// check command line argument -sslrandom
		String sslHandshakeRandomGeneratorTypeStr = ParseArgs.getString(args, "-sslrandom");
		if (sslHandshakeRandomGeneratorTypeStr != null)
		{
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("java"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_JAVA_DEFAULT;
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("iaik"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_IAIK_DEFAULT;
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("fast"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_FAST;
		}
		
		// check command line argument -sslcmode
		sslcmode = ParseArgs.hasOption(args, "-sslcmode");  // enable ssl/https compatibility workarounds?
		
		// check command line argument -dfl
		debugFailedLoops = ParseArgs.hasOption(args, "-dfl"); // debug failed loops?
		
		// check command line argument -dl
		debugLoops = ParseArgs.hasOption(args, "-dl");      // debug loops?
		
		// check command line argument -dh
		debugHttp = ParseArgs.hasOption(args, "-dh");       // debug http?
		if (debugHttp)
			debugLoops = true;
		
		// check command line argument -dc
		debugContent = ParseArgs.hasOption(args, "-dc");    // debug content?
		if (debugContent)
			debugLoops = true;
		
		// check command line argument -dhc
		if (ParseArgs.hasOption(args, "-dhc"))				// debug http and content
		{
			debugLoops = true;
			debugHttp = true;
			debugContent = true;
		}
		
		// check command line argument -dC
		debugCookies = ParseArgs.hasOption(args, "-dC");    // debug cookies?
		if (debugCookies)
			debugLoops = true;
		
		// check command line argument -dK
		debugKeepAlive = ParseArgs.hasOption(args, "-dK");  // debug keep.alive (socket pool)?
		if (debugKeepAlive)
			debugLoops = true;
		
		// check command line argument -dssl
		debugSsl = ParseArgs.hasOption(args, "-dssl");      // debug keep.alive (socket pool)?
		if (debugSsl)
		{
			debugLoops = true;
			debugKeepAlive = true;
		}
		
		// get startup delay
		Integer newStartupDelay = ParseArgs.getInteger(args, "-sdelay");
		if (newStartupDelay != null)
			plannedStartupDelay = newStartupDelay.intValue();
		
		// get max. parallel threads per user - note: only valid if CONTAINS_PARALLEL_EXECUTED_URLS = true
		Integer newMaxParallelThreadsPerUser = ParseArgs.getInteger(args, "-mtpu");
		if (newMaxParallelThreadsPerUser != null)
		{
			if (newMaxParallelThreadsPerUser.intValue() > 0)
				maxParallelThreadsPerUser = newMaxParallelThreadsPerUser.intValue();
		}
		// get maximum number of loops per user
		maxPlannedLoops = 0;  // maximum loops per user, 0 = unlimited
		Integer newLoops = ParseArgs.getInteger(args, "-maxloops");
		if (newLoops != null)
			maxPlannedLoops = newLoops.intValue();
		
		// get maximum downlink network bandwidth per user (default = unlimited)
		Integer newDownlinkBandwidth = ParseArgs.getInteger(args, "-downlink");
		if (newDownlinkBandwidth != null)
			downlinkBandwidth = newDownlinkBandwidth.intValue();
		
		// get maximum uplink network bandwidth per user (default = unlimited)
		Integer newUplinkBandwidth = ParseArgs.getInteger(args, "-uplink");
		if (newUplinkBandwidth != null)
			uplinkBandwidth = newUplinkBandwidth.intValue();
		
		// get statistic sampling interval
		int samplingInterval = 15;  // statistic sampling interval in seconds
		Integer newSamplingInterval = ParseArgs.getInteger(args, "-sampling");
		if (newSamplingInterval != null)
			samplingInterval = newSamplingInterval.intValue();
		
		// get additional sampling rate per web page call
		int percentilePageSampling = 100;  // additional sampling rate per web page call in percent
		Integer newPercentilePageSampling = ParseArgs.getInteger(args, "-percpage");
		if (newPercentilePageSampling != null)
			percentilePageSampling = newPercentilePageSampling.intValue();
		
		// get additional sampling rate per url call
		int percentileUrlSampling = 0;  // additional sampling rate per url call in percent
		Integer newPercentileUrlSampling = ParseArgs.getInteger(args, "-percurl");
		if (newPercentileUrlSampling != null)
			percentileUrlSampling = newPercentileUrlSampling.intValue();
		
		// get extended sampling level per url call
		int percentileUrlSamplingAddOption = 0;  // extended sampling level per url call, 0 = disabled
		Integer newPercentileUrlSamplingAddOption = ParseArgs.getInteger(args, "-percurlopt");
		if (newPercentileUrlSamplingAddOption != null)
			percentileUrlSamplingAddOption = newPercentileUrlSamplingAddOption.intValue();
		
		// get maximum number of error snapshots per URL (0 = unlimited)
		int maxErrorSnapshots = 0;
		Integer newMaxErrorSnapshots = ParseArgs.getInteger(args, "-maxerrsnap");
		if (newMaxErrorSnapshots != null)
			maxErrorSnapshots = newMaxErrorSnapshots.intValue();
		
		// get maximum memory in megabytes which can be used for error snapshots (-1 = unlimited, default = 10)
		long maxErrorSnapshotMemory = 20;
		Long newMaxErrorSnapshotMemory = ParseArgs.getLong(args, "-maxerrmem");
		if (newMaxErrorSnapshotMemory != null)
			maxErrorSnapshotMemory = newMaxErrorSnapshotMemory.longValue();
		
		// single user mode ?
		boolean singleUserMode = ParseArgs.hasOption(args, "-singleuser");
		
		// override value for http user agent field ?
		String setUserAgentStr = ParseArgs.getIgnoreCaseString(args, "-setuseragent");
		if (setUserAgentStr != null)
		{
			USER_AGENT_1 = setUserAgentStr;
		}
		// get required input arguments
		int concurrentUsers = 0;     // number of concurrent users
		plannedRequestTimeout = 0;   // request timeout in seconds
		
		System.out.println();
		
		// parse -u argument or ask --> <number of concurrent users>
		Integer i = ParseArgs.getIntegerOrAsk(args, "-u", "Concurrent Users, <RETURN>=1 : ", new Integer(1));
		if (i == null)
			System.exit(-1);
		else
			concurrentUsers = i.intValue();
		
		// parse -d argument or ask --> <test duration in seconds>
		i = ParseArgs.getIntegerOrAsk(args, "-d", "Test Duration in Seconds, <RETURN>=30 : ", new Integer(30));
		if (i == null)
			System.exit(-1);
		else
			plannedTestDuration = i.intValue();
		
		// parse -t argument or ask --> <request timeout in seconds>
		i = ParseArgs.getIntegerOrAsk(args, "-t", "HTTP Request Timeout per URL in Seconds, <RETURN>=60 : ", new Integer(60));
		if (i == null)
			System.exit(-1);
		else
			plannedRequestTimeout = i.intValue();
		
		// parse optional -tconnect argument (TCP/IP socket connect timeout in seconds)
		i = ParseArgs.getInteger(args, "-tconnect");
		if (i != null)
			plannedConnectTimeout = i.intValue();
		
		String genericFileName = PerformanceData.proposeFileName("RunLoginReportSM1", concurrentUsers, ParseArgs.getString(args, "-executionPlan"));
		
		// auto-configure binary result file
		if (!ParseArgs.hasOption(args, "-nores"))
		{
			String newResultFile = ParseArgs.getString(args, "-res");
			if (newResultFile == null)
				resultFile = genericFileName + ".prxres";
			else
				resultFile = newResultFile;
			System.out.println("Result File : " + resultFile);
		}
		
		// display common arguments at console output
		System.out.println();
		System.out.println("# concurrent users = " + concurrentUsers);
		System.out.println("# max. parallel threads per user = [serial execution order for all URLs]");
		System.out.print("# planned test duration = ");
		if (plannedTestDuration == 0)
			System.out.println("unlimited");
		else
			System.out.println("" + plannedTestDuration + " seconds");
		System.out.println("# http request timeout = " + plannedRequestTimeout + " seconds");
		if (plannedConnectTimeout != 0)
			System.out.println("# tcp/ip socket connect timeout = " + plannedConnectTimeout + " seconds");
		System.out.println("# startup delay = " + plannedStartupDelay + " milliseconds");
		System.out.println("# statistic sampling interval = " + samplingInterval + " seconds");
		System.out.println("# additional sampling rate per web page call = " + percentilePageSampling + " %");
		System.out.println("# additional sampling rate per url call = " + percentileUrlSampling + " %");
		System.out.println("# extended sampling per url call = " + PerformanceDataTickExtension.extTypeToString(percentileUrlSamplingAddOption).toLowerCase());
		System.out.print("# max loops per user = ");
		if (maxPlannedLoops == 0)
			System.out.println("unlimited");
		else
			System.out.println("" + maxPlannedLoops + " loops");
		if (downlinkBandwidth > 0)
			System.out.println("# max downlink bandwidth per user = " + downlinkBandwidth + " kbps");
		if (uplinkBandwidth > 0)
			System.out.println("# max uplink bandwidth per user = " + uplinkBandwidth + " kbps");
		System.out.println("# http protocol version = v" + httpProtocolVersion);
		System.out.println("# ssl protocol version = " + sslProtocolVersion);
		if (sslSessionCacheTimeout != 0)
			System.out.println("# ssl session cache timeout = " + sslSessionCacheTimeout + " seconds");
		else
			System.out.println("# ssl session cache disabled");
		if (resultFile != null)
			System.out.println("# result file = " + resultFile);
		else
			System.out.println("# no result file");
		if (debugFailedLoops)
			System.out.println("# debug failed loops");
		if (debugLoops)
			System.out.println("# debug loops");
		if (debugHttp)
			System.out.println("# debug http protocol headers");
		if (debugContent)
			System.out.println("# debug http content data");
		if (debugCookies)
			System.out.println("# debug cookies");
		if (debugKeepAlive)
			System.out.println("# debug keep-alive (socket pool)");
		if (debugSsl)
			System.out.println("# debug ssl (https)");
		
		
		// ----------------------------
		// *** initialize load test ***
		// ----------------------------
		
		
		// initialize performance data
		// ---------------------------
		final int PAGE_BREAKS = 7;  // number of page breaks in execute()  - modify this value if you add or delete some page breaks
		final int MAX_THREAD_STEPS = 362;  // number of URL requests in execute() - modify this value if you add or delete some requests
		performanceData = new PerformanceData(PAGE_BREAKS, MAX_THREAD_STEPS, concurrentUsers, -1, plannedTestDuration, maxPlannedLoops, httpProtocolVersion, plannedStartupDelay, plannedRequestTimeout, samplingInterval, percentilePageSampling, percentileUrlSampling, percentileUrlSamplingAddOption);
		performanceData.setInfoText("RunLoginReportSM1");
		performanceData.setExecutorsAnnotation(testRunAnnotation);
		if (commonNextProxyConfig != null)
		{
			performanceData.setProxyInfo(proxyHttpHost, proxyHttpPort, proxyHttpsHost, proxyHttpsPort);
			performanceData.addTestDescription("*** Warning: Load test executed via outbound proxy ***");
		}
		performanceData.setResultFileName(resultFile);
		performanceData.setDumpStream(System.out, "# ");
		performanceData.setMaxErrorSnapshots(maxErrorSnapshots);		// 0 = unlimited
		if (maxErrorSnapshotMemory >= 0)
			performanceData.setMaxErrorSnapshotsMemory(maxErrorSnapshotMemory * 1048576l);		// value in bytes
		
		if (sslECC)
			performanceData.addTestDescription("*** Warning: SSL/TLS option -ecc enabled ***");
		
		if ((downlinkBandwidth != 0) || (uplinkBandwidth != 0))
		{
			String downlinkBandwidthStr = "unlimited";
			String uplinkBandwidthStr = "unlimited";
			
			if (downlinkBandwidth != 0)
				downlinkBandwidthStr = "" + downlinkBandwidth + " kbps";
			if (uplinkBandwidth != 0)
				uplinkBandwidthStr = "" + uplinkBandwidth + " kbps";
			
			performanceData.addTestDescription("*** Warning: Max. network bandwidth per user limited. downlink = " + downlinkBandwidthStr + ", uplink = " + uplinkBandwidthStr + " ***");
		}
		
		if ((percentileUrlSamplingAddOption != PerformanceDataTickExtension.EXT_TYPE_NOTYPE) && (percentileUrlSampling > 0))
			performanceData.addTestDescription("*** Warning: Option \"" + PerformanceDataTickExtension.extTypeToString(percentileUrlSamplingAddOption).toLowerCase() + "\" enabled for additional sampling rate per URL call ***");
		if (debugFailedLoops)
			performanceData.addTestDescription("*** Warning: Debug failed loops enabled ***");
		if (debugLoops)
			performanceData.addTestDescription("*** Warning: Debug loops enabled ***");
		if (debugHttp)
			performanceData.addTestDescription("*** Warning: Debug HTTP protocol headers enabled ***");
		if (debugContent)
			performanceData.addTestDescription("*** Warning: Debug HTTP content data enabled ***");
		if (debugCookies)
			performanceData.addTestDescription("*** Warning: Debug cookies enabled ***");
		if (debugKeepAlive)
			performanceData.addTestDescription("*** Warning: Debug keep-alive enabled ***");
		if (debugSsl)
			performanceData.addTestDescription("*** Warning: Debug SSL/TLS enabled ***");
		if (!sslProtocolVersion.equalsIgnoreCase("all"))
			performanceData.addTestDescription("*** Warning: SSL/TLS protocol version fixed to " + sslProtocolVersion.toUpperCase() + " ***");
		if (sslSessionCacheTimeout == 0)
			performanceData.addTestDescription("*** Warning: SSL/TLS session cache disabled ***");
		if (singleUserMode)
		{
			String singleUserModeWarning = "*** Warning: Single user mode enabled ***";
			System.out.println(singleUserModeWarning);
			performanceData.addTestDescription(singleUserModeWarning);
		}
		if (setUserAgentStr != null)
		{
			String overrideUserAgentWarning = "*** Warning: User agent set to \"" + setUserAgentStr + "\" ***";
			System.out.println(overrideUserAgentWarning);
			performanceData.addTestDescription(overrideUserAgentWarning);
		}
		
		
		// ready to start load test...
		initNull(concurrentUsers);
		performanceData.setUserContextTable(getUserContextTable());
		
		// ... but init first remote interface ...
		initRemote(args);
		
		// ... and init plug-in class loader ...
		try
		{
			if (getPluginClassLoader() == null)
				setPluginClassLoader(new LoadtestPluginClassLoader(getSymmetricEncryptContext(), getEncryptedClasspathList()));
		}
		catch (Throwable pluginClassLoaderThrowable)
		{
			System.out.println("*** ERROR: Unable to load encrypted files ***");
			pluginClassLoaderThrowable.printStackTrace();
			System.exit(-1);
		}
		
		// ... and check multihomed option ...
		initMultihomed(args);
		
		// ... and add dynaTrace session ID to load test result - if available ...
		initDynaTrace();
		
		
		// use test-specific DNS hosts file (optional) ?
		String dnsHostsFile = ParseArgs.getIgnoreCaseString(args, "-dnshosts");
		if (dnsHostsFile != null)
		{
			try
			{
				dnsCache = new DNSCache(getSymmetricEncryptContext(), dnsHostsFile);
			}
			catch (IOException ie)
			{
				System.out.println("*** ERROR: unable to read DNS hosts file " + dnsHostsFile + " ***");
				System.out.println("*** Hint: you have to ZIP " + dnsHostsFile + " together with the compiled class of the load test program ***");
				ie.printStackTrace();
				System.exit(-1);
			}
		}
		
		// use test-specific DNS translation table (optional) ?
		String dnsTranslationTableFile = ParseArgs.getIgnoreCaseString(args, "-dnstranslation");
		if (dnsTranslationTableFile != null)
		{
			try
			{
				DNSTranslationTable dnsTranslationTable = new DNSTranslationTable(getSymmetricEncryptContext(), new File(dnsTranslationTableFile));
				if (dnsCache == null)
					dnsCache = new DNSCache();
				dnsCache.setDNSTranslationTable(dnsTranslationTable);
			}
			catch (IOException ie)
			{
				System.out.println("*** ERROR: unable to read DNS translation table file " + dnsTranslationTableFile + " ***");
				System.out.println("*** Hint: you have to ZIP " + dnsTranslationTableFile + " together with the compiled class of the load test program ***");
				ie.printStackTrace();
				System.exit(-1);
			}
		}
		
		// use test-specific DNS servers (optional) ?
		String dnsSrvStr = ParseArgs.getIgnoreCaseString(args, "-dnssrv");
		if (dnsSrvStr != null)
		{
			ArrayList<String> dnsSrvList = new ArrayList<String>();
			StringTokenizer dnsTok = new StringTokenizer(dnsSrvStr, ",;");
			while (dnsTok.hasMoreTokens())
				dnsSrvList.add(dnsTok.nextToken());
			if (dnsCache == null)
				dnsCache = new DNSCache(dnsSrvList);
			else
				dnsCache.setDnsServers(dnsSrvList);
		}
		
		// enable DNS TTL ?
		if (ParseArgs.hasOption(args, "-dnsenattl"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.enableTTL();
		}
		
		// set fixed DNS TTL ?
		Integer dnsFixTTL = ParseArgs.getInteger(args, "-dnsfixttl");
		{
			if (dnsFixTTL != null)
			{
				if (dnsCache == null)
					dnsCache = new DNSCache();
				dnsCache.setFixedTTL(dnsFixTTL.intValue());
			}
		}
		
		// enable DNS resolves per loop ?
		if (ParseArgs.hasOption(args, "-dnsperloop"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsPerLoop = true;
		}
		
		// enable DNS statistic ?   // note: use this option only if not any other, more specific DNS option is enabled.
		if (ParseArgs.hasOption(args, "-dnsstatistic"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
		}
		
		// debug DNS resolver ?
		if (ParseArgs.hasOption(args, "-dnsdebug"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setDebugToStdout(true);
		}
		
		// enable IPv6 
		if (ParseArgs.hasIgnoreCaseOption(args, "-enableIPv6"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setEnableIPv6(true);
			String networkInterfaceName = ParseArgs.getString(args, "-enableIPv6");
			if(null != networkInterfaceName && !networkInterfaceName.startsWith("-"))
				dnsCache.setNetworkInterfaceName(networkInterfaceName);
		}
		
		// enable IPv6 and V4 
		if (ParseArgs.hasIgnoreCaseOption(args, "-enableIPv6v4"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setEnableIPv6v4(true);
			String networkInterfaceName = ParseArgs.getString(args, "-enableIPv6v4");
			if(null != networkInterfaceName && !networkInterfaceName.startsWith("-"))
				dnsCache.setNetworkInterfaceName(networkInterfaceName);
		}
		
		if (dnsCache != null)
		{
			// update performance data with DNS settings
			performanceData.addDNSCacheStatistic(dnsCache.getCacheStatistic());
			performanceData.addTestDescription("*** Warning: OS-independent DNS access enabled. " + dnsCache.getConfigInfoText() + " ***");
			if (dnsPerLoop)
				performanceData.addTestDescription("*** Warning: DNS option -dnsperloop enabled ***");
			
			// log DNS settings
			System.out.println("# OS-independent DNS access enabled. " + dnsCache.getConfigInfoText());
			if (dnsPerLoop)
				System.out.println("# DNS option -dnsperloop enabled");
		}
		
		// calculate sampling offset and virtual user startup offset for cluster jobs (time shift per cluster member)
		int samplingTimeshift = 0;	// value in seconds
		if (!ParseArgs.hasOption(args, "-nosdelayCluster"))
		{
			if ((getClusterTotalMemberCount() > 1) && (getClusterMemberLocalId() > 0))
			{
				samplingTimeshift = Math.round(((float) samplingInterval / (float) getClusterTotalMemberCount()) * (float) getClusterMemberLocalId());
				System.out.println("# samplingTimeshift = " + samplingTimeshift + " seconds");
				
				long startupDelayOffset = (plannedStartupDelay / ((long) getClusterTotalMemberCount())) * ((long) getClusterMemberLocalId());
				System.out.println("# startupDelayTimeshift = " + startupDelayOffset + " milliseconds");
				System.out.println();
				if (startupDelayOffset > 0)
				{
					try { sleepRemoteInterruptable(startupDelayOffset); } catch (InterruptedException ie) {}
				}
			}
		}
		
		
		// update performance data
		// -----------------------
		testDurationStart = System.currentTimeMillis();
		performanceData.setStartDate();
		performanceData.addSnapshot(getCpuUsagePercent());
		performanceData.setSnapshotsTimeshift(samplingTimeshift);
		performanceData.setEndDate();
		
		// initialize global context for plug-ins  
		LoadtestPluginContext globalPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, new RunLoginReportSM1());
		
		
		// --------------------------
		// *** start of load test ***
		// ---------------------------
		
		
		// special case for execution plans - start test with zero virtual users
		// ---------------------------------------------------------------------
		if (hasExecutionPlan())
		{
			if (concurrentUsers != 0)
			{
				System.out.println("*** Fatal Error: Load test with execution plan must start with zero number of virtual users - Load test program aborted ***");
				System.exit(1);
			}
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				RunLoginReportSM1 simulatedUser = new RunLoginReportSM1(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				
				HttpLoadTestUserContext userContext = new HttpLoadTestUserContext(simulatedUser, null);
				userContext.setLoadTestUserExecutionPlanPlaceholder();
				getUserContextTable().getUserContextList().add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
		}
		
		
		// start virtual users as threads (normal case)
		// --------------------------------------------
		usersToBeIncreasedAtStartupOffset.set(concurrentUsers);
		for (int x = 0; x < concurrentUsers; x++)
		{
			if (cancelIncrementDecrementUser || cancelInitialIncrementUser)
			{
				usersToBeIncreasedAtStartupOffset.set(0);
				break;
			}
			
			// start load test thread
			// ----------------------
			Thread t = null;
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				RunLoginReportSM1 simulatedUser = new RunLoginReportSM1(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				t = new Thread(simulatedUser);
				String threadName = "" + getUserContextTable().getUserContextList().size();
				threadName = THREAD_NAME.substring(0, 7 - threadName.length()) + threadName;
				t.setName(threadName);
				if (debugLoops && (simulatedUser.getLog().size() > 0))
				{
					synchronized (dumpLock)
					{
						simulatedUser.dumpLog(threadName + " ", System.out);		// dump log of constructor
					}
				}
				HttpLoadTestUserContext userContext = new HttpLoadTestUserContext(simulatedUser, t);
				getUserContextTable().getUserContextList().add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
			t.start();
			usersToBeIncreasedAtStartupOffset.decrementAndGet();
			System.out.println("# --- thread " + t.getName() + " created --- " + ZoneTime.dateToShortString() + " ---");
			
			while (isSuspend())
			{
				try { Thread.currentThread().sleep(100); } catch (InterruptedException ie) { break; }
				if (abortedByRemote() || abortedByEofInputFile())
					break;
				
				// check if max test duration reached during suspend
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
					break;
				
				// display and sample temporary performance data all "sampling interval" seconds - also during suspend
				if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
				{
					performanceData.addSnapshot(getCpuUsagePercent());
					performanceData.setEndDate();
				}
			}
			
			if (abortedByRemote() || abortedByEofInputFile())
				break;
			
			if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				break;
			
			// startup delay for next thread
			// -----------------------------
			try
			{
				if (!singleUserMode)   // create concurrent users
				{
					if (plannedStartupDelay <= 3000)
						sleepRemoteInterruptable(plannedStartupDelay);
					else
					{
						long startupDelayStartTime = System.currentTimeMillis();
						while (true)
						{
							if (abortedByRemote() || abortedByEofInputFile())
								break;
							if ((System.currentTimeMillis() - startupDelayStartTime) >= plannedStartupDelay)
								break;
							
							Thread.currentThread().sleep(100);
							
							// display and sample temporary performance data all "sampling interval" seconds
							if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
							{
								performanceData.addSnapshot(getCpuUsagePercent());
								performanceData.setEndDate();
							}
						}
						while (isSuspend())
						{
							try { Thread.currentThread().sleep(100); } catch (InterruptedException ie) { break; }
							if (abortedByRemote() || abortedByEofInputFile())
								break;
							
							// check if max test duration reached during suspend
							if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
								break;
							
							// display and sample temporary performance data all "sampling interval" seconds - also during suspend
							if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
							{
								performanceData.addSnapshot(getCpuUsagePercent());
								performanceData.setEndDate();
							}
						}
						
					}
				}
				else
					t.join();   // single user mode
			}
			catch (InterruptedException ie) { break; }
			if (abortedByRemote() || abortedByEofInputFile())
				break;
			
			
			// display and sample temporary performance data all "sampling interval" seconds
			if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
			{
				performanceData.addSnapshot(getCpuUsagePercent());
				performanceData.setEndDate();
				if (!isRemote())
				{
					synchronized (dumpLock)
					{
						performanceData.dump(false);
					}
				}
			}
		}
		usersToBeIncreasedAtStartupOffset.set(0);	// just in case that a thread is not started for any reason
		
		
		// wait for test-end in a loop
		// ---------------------------
		boolean allDone = false;
		while (!allDone)
		{
			// test aborted ?
			if (abortedByRemote() || abortedByEofInputFile())
			{
				nearRemoteEnd();
				String abort = "";
				if (abortedByRemote())
					abort = "*** test aborted by remote command ***";
				if (abortedByEofInputFile())
				{
					abort = "*** test aborted at eof of input file ***";
					performanceData.addTestDescription(abort);
				}
				synchronized (dumpLock)
				{
					addSSLCacheStatistic();
					performanceData.addSnapshot(getCpuUsagePercent());
					performanceData.setEndDate();
					
					if (!isRemote())
						performanceData.dump(false);
					if (resultFile != null)
						try { performanceData.writeObjectToFile(getSymmetricEncryptContext(), resultFile); } catch (IOException ie) { ie.printStackTrace(); }
					
					System.out.println();
					System.out.println(abort);
					System.out.println();
					System.out.flush();
					try { Thread.currentThread().sleep(10000); } catch (InterruptedException ie) {}
					System.exit(0);
				}
			}
			
			// display and sample temporary performance data all "sampling interval" seconds
			if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
			{
				performanceData.addSnapshot(getCpuUsagePercent());
				performanceData.setEndDate();
				if (!isRemote())
				{
					synchronized (dumpLock)
					{
						performanceData.dump(false);
					}
				}
			}
			
			// check if test has been done in case of decrement users to zero
			if ((decrementUser) && (plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				decrementUser = false;
			// check if test has been done
			if (!hasExecutionPlan())
				allDone = isTestDone();
			else
			{
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				{
					performanceData.addTestDescription("*** Warning: Load test aborted. Execution plan time limit exceeded after " + plannedTestDuration + " seconds ***");
					triggerAbort();
				}
			}
			
			// if not all is done: sleep one second
			if (!allDone)
				try { sleepRemoteInterruptable(1000); } catch (InterruptedException ie) { break; }
		} // end of wait loop
		
		
		// mark near end of test - only if a remote interface has been used
		nearRemoteEnd();
		
		
		
		// final test result - test completed
		// ----------------------------------
		performanceData.addSnapshot(getCpuUsagePercent());
		performanceData.setEndDate();
		
		// save test result
		performanceData.dump(true);
		if (resultFile != null)
			try { performanceData.writeObjectToFile(getSymmetricEncryptContext(), resultFile); } catch (IOException ie) { ie.printStackTrace(); }
		
		// all done
		System.out.flush();
		
		// wait for official end of test - only if a remote interface has been used
		waitRemoteEnd();
		
		System.out.println();
		System.out.println("Result File: " + resultFile);
		
		// now dead
		System.exit(0);
	}


	/**
	 * implement VaryingLoadInterface: support to increment the number of simulated users at runtime.
	 */
	public void setIncrementUser(long startTime)
	{
		incrementUserStartTime = startTime;
		incrementUserFlag = true;
	}

	public boolean isIncrementUser()
	{
		return incrementUserFlag;
	}

	public long getIncrementUserStartTime()
	{
		return incrementUserStartTime;
	}

	public void setIncrementUserStartTime(long startTime)
	{
		incrementUserStartTime = startTime;
	}

	public void clearIncrementUser()
	{
		incrementUserFlag = false;
	}

	public int incrementUsers(int numAddUsers, long startupDelay)
	{
		if (startupDelay < 0)
			startupDelay = plannedStartupDelay;
		return incrementUsersImplementation(numAddUsers, startupDelay, this);
	}

	static int incrementUsersImplementation(int numAddUsers, long startupDelay, HttpLoadTest httpLoadTest)
	{
		long startupDelayOffset = 0;
		if ((getClusterTotalMemberCount() > 1) && (getClusterMemberLocalId() > 0))
			startupDelayOffset = (startupDelay / ((long) getClusterTotalMemberCount())) * ((long) getClusterMemberLocalId());
		
		ArrayList<HttpLoadTestUserContext> addUserContextList = new ArrayList<HttpLoadTestUserContext>(numAddUsers);
		for (int x = 0; x < numAddUsers; x++)
		{
			if (abortedByRemote() || abortedByEofInputFile())
				return x;
			
			// initialize load test thread
			// ---------------------------
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				RunLoginReportSM1 simulatedUser = new RunLoginReportSM1(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				HttpLoadTestUserContext userContext = prepareIncrementUser(simulatedUser, System.currentTimeMillis() + startupDelayOffset + (x * startupDelay));
				addUserContextList.add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
				if (debugLoops && (simulatedUser.getLog().size() > 0))
				{
					synchronized (dumpLock)
					{
						simulatedUser.dumpLog(userContext.getLoadTestThread().getName() + " ", System.out);		// dump log of constructor
					}
				}
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
		}
		
		// start load test threads by a thread
		// -----------------------------------
		HttpLoadTestIncrementUserThread incrementUserThread = new HttpLoadTestIncrementUserThread(httpLoadTest, addUserContextList);
		incrementUserThread.start();
		return numAddUsers;
	}


	/**
	 * Internal method used to load and apply next proxy settings from ZBAProxySettings.properties file.
	 * Settings are applied only if file exists and nextProxyIsActive is set to true in the file.
	 * Note that settings stored with the session, will be ineffective.
	 *
	 * @since V5.5-D
	 */
	private void applyNextProxySettingsFromFileIfExists()
	{
		
		String filename = "ZBAProxySettings.properties";
		BufferedReader bin = null;
		SymmetricEncryptContext decryptContext = getSymmetricEncryptContext();
		File file = new File(filename);
		
		if (file.exists())
		// open input file
		try
		{
			if (decryptContext == null)
			{
				bin = new BufferedReader(new InputStreamReader(new FileInputStream(filename), Charset.forName("UTF-8")));
			}
			else
			{
				// create a reader stream that decrypts the data on the fly
				bin = new BufferedReader(new InputStreamReader(SymmetricEncrypt.getCipherInputStream(new FileInputStream(filename), decryptContext), Charset.forName("UTF-8")));
			}
			
			if (bin != null)
			{
				Properties nextProxyConfigProperties = new Properties();
				nextProxyConfigProperties.load(bin);
				NextProxyConfig nextProxyConfig = new NextProxyConfig();
				nextProxyConfig.setActive(Boolean.valueOf(nextProxyConfigProperties.getProperty("nextProxyIsActive")));
				proxyEnabled = nextProxyConfig.isActive();                             // if false: do not use a proxy server
				
				if (proxyEnabled)
				{
					nextProxyConfig.disableHttpProxyCache(Boolean.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpCacheDisabled")));
					proxyCacheDisabled = nextProxyConfig.isDisabledHttpProxyCache();
					nextProxyConfig.setHttpHost(nextProxyConfigProperties.getProperty("nextProxyHttpHost"));
					proxyHttpHost = nextProxyConfig.getHttpHost();
					nextProxyConfig.setHttpPort(Integer.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpPort")));
					proxyHttpPort = nextProxyConfig.getHttpPort();
					nextProxyConfig.setHttpsHost(nextProxyConfigProperties.getProperty("nextProxyHttpsHost"));
					proxyHttpsHost = nextProxyConfig.getHttpsHost();
					nextProxyConfig.setHttpsPort(Integer.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpsPort")));
					proxyHttpsPort = nextProxyConfig.getHttpsPort();
					nextProxyConfig.setAuthUsername(nextProxyConfigProperties.getProperty("nextProxyAuthUsername"));
					nextProxyConfig.setAuthPassword(nextProxyConfigProperties.getProperty("nextProxyAuthPassword"));
					nextProxyConfig.setNoNextProxy(nextProxyConfigProperties.getProperty("noNextProxy"));
					noProxyFor = nextProxyConfig.getNoNextProxy();
					
					String proxyAuth = "";
					
					if (nextProxyConfig.getAuthUsername() != null)
					{
						proxyAuth = nextProxyConfig.getAuthUsername() + ":";
						if (nextProxyConfig.getAuthPassword() != null)
							proxyAuth = proxyAuth + nextProxyConfig.getAuthPassword();
					}
					
					String  proxyAuthorization = null;
					
					if (proxyAuth.length() > 1)
						proxyAuthorization = Base64Encoder.encode(proxyAuth);		// Base 64 encoded - used for basic authentication only
					
					commonNextProxyConfig = new NextProxyConfig(proxyEnabled, proxyCacheDisabled, proxyHttpHost, proxyHttpPort, proxyHttpsHost, proxyHttpsPort, proxyAuthorization, noProxyFor);
					
					log("*** Warning: Applying proxy configuration from file " + filename + " ***");
				}
				
			}
		}
		catch (Throwable tr)
		{
			log("*** Unable to load proxy configuration from properties file " + filename + " ***");
			tr.printStackTrace();
		}
		finally
		{
			if (bin != null)
			{
				try { bin.close(); } catch (Exception e) {}
			}
		}
		
	}
		
	
	// source code of inline script "miilistime"
	public static String getInlineScriptCode_1575679227340()
	{
		return "P_millis=getUnixTimestampMillis()";
	}
	
	
	/**
	* Execute the inline script "miilistime"
	* 
	* @param testURL 	the context of the executed URL call
	* @param threadStep 	the current execution step of the simulated user (page break or URL call)
	* @param totalLoopCounter 	the total number of executed loops - counted overall simulated users
	* @param innerLoopContext 	the context of the current inner loop, or null if the inline script in not executed inside an inner loop
	*
	* @return the context of the inline script
	*/
	public LoadtestInlineScriptContext executeInlineScript_1575679227340(HttpTestURL testURL, int threadStep, int totalLoopCounter, InnerLoopContext innerLoopContext)
	{
		LoadtestInlineScriptContext inlineScriptContext = new LoadtestInlineScriptContext("miilistime", ProxySnifferVarSourceInlineScript.EXEC_SCOPE_ALL_URLS_START, "", this, LoadtestInlineScriptContext.RESULT_TYPE_SET_OUTPUT_VARS, 15, threadNumber, threadLoopCounter, socketPool, cookieHandler, testURL, threadStep);
		InlineScriptExecutor inlineScriptExecutor = new InlineScriptExecutor(getInlineScriptCode_1575679227340(), inlineScriptContext);
		log("Executing inline script \"" + inlineScriptContext.getScriptTitle() + "\"");
		LoadtestInlineScriptVar inputVar1 = new LoadtestInlineScriptVar("P_millis", Lib.nullToBlank(P_millis), 1);		// note: parameter no. 3 is the scope of the var
		inlineScriptContext.addInputVar(inputVar1);
		LoadtestInlineScriptVar outputVar1 = new LoadtestInlineScriptVar("P_millis", Lib.nullToBlank(P_millis), 1);		// note: parameter no. 3 is the scope of the var
		inlineScriptContext.addOutputVar(outputVar1);
		inlineScriptExecutor.execute();		// execute inline script
		P_millis = inlineScriptContext.getOutputVar("P_millis").getVarValue();
		log("<<< P_millis = " + P_millis);
		for (String stdoutLine : inlineScriptContext.getOutputStreamData())
			log(inlineScriptContext.getScriptTitle() + ": " + stdoutLine);
		for (String stderrLine : inlineScriptContext.getErrorStreamData())
			System.err.println(inlineScriptContext.getScriptTitle() + ": " + stderrLine);
		if (!inlineScriptExecutor.wasSuccessFulExecution())
		{
			if (!inlineScriptContext.isScriptAbort())
				throw new InlineScriptExecutionException("*** Execution of inline script \"" + inlineScriptContext.getScriptTitle() + "\" failed ***");
		}
		return inlineScriptContext;
	}

}	// end of class

