
// *********************************************************************************************
//
// Automatically Generated Load Test Program
// -----------------------------------------
//
// Source: LoginReport_Prod_SM_corr.java
// Date  : 23 Feb 2021 09:50:18 PST
// Author: Apica ZebraTester V5.5-F / automatically generated
//
// Procedure Copyright by Apica
// All Rights Reserved
//
// http://www.apicasystem.com                                         http://www.zebratester.com
// *********************************************************************************************


import java.io.*;
import java.nio.charset.Charset;
import java.util.*;
import java.util.concurrent.atomic.*;
import dfischer.utils.AbstractInputFileReader;
import dfischer.utils.Base64Decoder;
import dfischer.utils.Base64Encoder;
import dfischer.utils.ConvertToDoubleNumber;
import dfischer.utils.ContentTokenExtractor;
import dfischer.utils.ContentTokenExtractorItem;
import dfischer.utils.Cookie;
import dfischer.utils.CookieHandler;
import dfischer.utils.DigestAuthContext;
import dfischer.utils.DNSCache;
import dfischer.utils.DNSTranslationTable;
import dfischer.utils.DynamicProtobufContentParser;
import dfischer.utils.ExternalParamFile;
import dfischer.utils.FileCache;
import dfischer.utils.GenericPluginInterface;
import dfischer.utils.GetRealTimeUserInputFieldsInterface;
import dfischer.utils.HtmlContentParser;
import dfischer.utils.HtmlHeaderCookieExtractor;
import dfischer.utils.HttpLoadTest;
import dfischer.utils.HttpLoadTestIncrementUserThread;
import dfischer.utils.HttpLoadTestUserContext;
import dfischer.utils.HttpSocketPool;
import dfischer.utils.HttpTestURL;
import dfischer.utils.HttpTestURLDNSContext;
import dfischer.utils.HttpTestURLThreadHandler;
import dfischer.utils.InlineScriptExecutionException;
import dfischer.utils.InlineScriptExecutor;
import dfischer.utils.InnerLoopContext;
import dfischer.utils.JSONHtmlBasedExtractor;
import dfischer.utils.JSONPathBasedExtractor;
import dfischer.utils.JSONPathBasedExtractorItem;
import dfischer.utils.Lib;
import dfischer.utils.LoadtestInlineScriptContext;
import dfischer.utils.LoadtestInlineScriptVar;
import dfischer.utils.LoadtestPluginClassLoader;
import dfischer.utils.LoadtestPluginContext;
import dfischer.utils.NextProxyConfig;
import dfischer.utils.ParseArgs;
import dfischer.utils.ParseUrl;
import dfischer.utils.PerformanceData;
import dfischer.utils.PerformanceDataTickExtension;
import dfischer.utils.ProtobufFieldAndValueElement;
import dfischer.utils.ProtobufLib;
import dfischer.utils.RealTimeUserInputField;
import dfischer.utils.ScreenshotImage;
import dfischer.utils.SetThreadStepInterface;
import dfischer.utils.SSLInit;
import dfischer.utils.SSLSessionCacheStatistic;
import dfischer.utils.SSLSessionCacheStatisticInterface;
import dfischer.utils.SuspendResumeInterface;
import dfischer.utils.SymmetricEncrypt;
import dfischer.utils.SymmetricEncryptContext;
import dfischer.utils.TextLineTokenExtractor;
import dfischer.utils.TextLineTokenExtractorItem;
import dfischer.utils.ThreadStepInterface;
import dfischer.utils.UserInputField;
import dfischer.utils.UserTransactionContext;
import dfischer.utils.UserTransactionRuntimeHandler;
import dfischer.utils.VarInputFileReader;
import dfischer.utils.VarRandomInputFileReader;
import dfischer.utils.VaryingLoadInterface;
import dfischer.utils.VaryingTestDurationInterface;
import dfischer.utils.XmlContentParser;
import dfischer.utils.XmlDoctypeCommentParser;
import dfischer.utils.ZoneTime;
import dfischer.proxysniffer.ProxySnifferVarSourceInlineScript;
import dfischer.utils.WebSocketPluginInterface;
import dfischer.utils.BoundaryBasedExtractor;
import dfischer.utils.BoundaryBasedExtractorItem;
import dfischer.utils.RegExpBasedExtractor;
import dfischer.utils.RegExpBasedExtractorItem;
import dfischer.utils.XpathBasedExtractor;
import dfischer.utils.XpathBasedExtractorItem;
import dfischer.proxysniffer.WebSocketData;
import dfischer.utils.HttpTestWebsocketContext;
import dfischer.websocket.*;
import replay.ReplaySnapShotsDump;


/**
 * Automatically generated load test program.
 */
public class LoginReport_Prod_SM_corr extends HttpLoadTest implements Runnable, ThreadStepInterface, SetThreadStepInterface, SSLSessionCacheStatisticInterface, VaryingLoadInterface, VaryingTestDurationInterface, SuspendResumeInterface, GetRealTimeUserInputFieldsInterface
{
	public static final String prxVersion = "V5.5-F";
	public static final int    prxCharEncoding = 3;                         // 1 = OS Default, 2 = ISO-8859-1, 3 = UTF-8
	public static final String testDescription = "LoginReport_Prod_SM_Corr";

	public static String USER_AGENT_1 = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36";

	private static final boolean CONTAINS_PARALLEL_EXECUTED_URLS = false;
	private static final int MAX_PARALLEL_THREADS_PER_USER = 6;                       // default value for max. parallel executed URLs per user
	private static int maxParallelThreadsPerUser = MAX_PARALLEL_THREADS_PER_USER;     // configured value for max. parallel executed URLs per user

	private static final boolean CONTAINS_EXTERNAL_RESOURCES = false;       // note: external resources are typically additional Java library files (*.jar files) invoked by self-developed plug-ins. Consider that Input Files and the Main Class of Plug-Ins are NOT external resources in this context because ZebraTester knows already their declarations.

	// --- WebSocket Object ---
	WebSocketData webSocketData = null;                                     // WebSocket Object that contains data of recorded WebSocket frames.
	WebSocketPluginInterface[] webSocketPluginsForURL = null;               // all assiciated web socket plugins for specific URL.

	// --- proxy configuration ---
	private static boolean proxyEnabled = false;                             // if false: do not use a proxy server
	private static boolean proxyCacheDisabled = true;
	private static String  proxyHttpHost = "";
	private static int     proxyHttpPort = -1;
	private static String  proxyHttpsHost = "";
	private static int     proxyHttpsPort = -1;
	private static String  noProxyFor = "";
	private static String  proxyAuthorization = null;
	private static NextProxyConfig commonNextProxyConfig = null;
	private NextProxyConfig userNextProxyConfig = null;
	
	private static int plannedStartupDelay = 200;                           // startup delay between concurrent users in milliseconds, see main argument "-sdelay"
	private static int plannedTestDuration = -1;                            // planned load test duration in seconds, 0 = unlimited, see main argument "-d"
	private static int maxPlannedLoops = 0;  								// maximum planned loops per user, 0 = unlimited, see main argument "-maxloops"
	private static int pacing = 0;  								        // pacing for loops per user, 0 = no pacing, see main argument "-pacing"
	private static int plannedRequestTimeout = 0;                           // planned request timeout in seconds, see main argument "-t"
	private static int plannedConnectTimeout = 0;                           // planned TCP/IP socket connect timeout in seconds (default = use plannedRequestTimeout), see main argument "-tconnect"
	
	private static String defaultTimeZone = "PST";                          // use main argument -tz <timezone> to alter
	private static char defaultNumberGroupingSeparator = '\'';              // use main argument -dgs a|c to alter
	private static String sslProtocolVersion = "all";                       // applied ssl protocol version: "all" = v3/tls/tls11/tls12, use main argument -ssl to set a fixed protocol version
	private static boolean sslcmode = false;                                // support of deficient ssl servers, use main argument -sslcmode to enable
	private static boolean sslECC = true;                                   // elliptic curve cryptography (ECC) is enabled by default, use main argument -noECC to disable
	private static boolean sslSNI = true;                                   // server name indication (SNI) is enabled by default, use main argument -nosni to disable
	private static boolean sslSNICirical = false;                           // the SNI TLS extension is by default set as non-critical, use main argument -snicritical to set as critical
	private static boolean useTlsSessionTickets = false;                    // Session Tickets can only be used with TLS, use main argument -tlssessiontickets to set to use
	private static final long loopErrorDelay = 20;                          // error delay (in milliseconds) applied if a loop of a virtual user has failed
	private static final String THREAD_NAME = "T000000";                    // internal
	private static Integer dumpLock = new Integer(0);                       // internal
	private static Integer inputFileLock = new Integer(0);                  // internal
	private volatile int threadStep = ThreadStepInterface.THREAD_NO_STEP;   // internal
	private boolean urlCallPassed = false;                                  // internal
	private String localIpAddress = null;                                   // internal
	private static long downlinkBandwidth = 0;                              // max. downlink bandwidth per user. 0 = unlimited. use main argument -downlink <kbps> to alter
	private static long uplinkBandwidth = 0;                                // max. uplink bandwidth per user. 0 = unlimited. use main argument -uplink <kbps> to alter
	private static boolean dnsPerLoop = false;								// true if main argument "-dnsperloop" is set = perform new DNS resolves for each executed loop. normally false
	private HttpTestURLDNSContext userDNSContext = null;                    // user specific DNS context - normally null when no special DNS servers are used
	
	private static volatile boolean debugFailedLoops = false;               // true if main argument "-dfl" is set
	private static volatile boolean debugLoops = false;                     // true if main argument "-dl" is set
	private static volatile boolean debugHttp = false;                      // true if main argument "-dh" is set
	private static volatile boolean debugContent = false;                   // true if main argument "-dc" is set
	private static volatile boolean debugCookies = false;                   // true if main argument "-dC" is set
	private static volatile boolean debugKeepAlive = false;                 // true if main argument "-dK" is set
	private static volatile boolean debugSsl = false;                       // true if main argument "-dssl" is set
	
	private static String resultFile = null;                                // name of binary test result file or null
	private static String browserLanguage = null;                           // name of browser language, argument -browserlang <text>
	private static boolean replayMode = false;                              // indicated the replay mode of the load test, use main argument -replay to enable it
	
	private final static String httpProtocolVersion = "1.1";      // applied HTTP protocol version V1.1
	
	private static ExternalParamFile externalParamFile = null;                              // used only for very large parameter values (commonly unused)
	private static final String EXTERNAL_PARAM_FILE = "LoginReport_Prod_SM_corrExtParams.dat";// input file name for very large parameter values
	private static FileCache requestFileCache = new FileCache();  // file cache for large XML, SOAP and ASCII requests
	
	private int requestTimeout = -1;                              // thread input data from constructor, timeout per url request in seconds
	private int remainingLoops = -1;                              // thread input data from constructor, number of loops per thread (optional)
	private boolean checkLoopCount = false;                       // thread input data from constructor, number of loops per thread (optional)
	private int threadNumber = -1;                                // thread input data from constructor, internal thread number
	private int threadLoopCounter = 0;                            // internal loop counter per thread
	private volatile int userResumeStartWaitDelay = 0;            // internal, user specific delay when the load test execution is resumed
	private volatile boolean decrementEndOfLoopFlag = false;	  // internal flag to decrement the simulated user at runtime
	private volatile boolean incrementUserFlag = false;           // internal flag to increment the simulated user at runtime
	private volatile long incrementUserStartTime = -1;            // internal start time when increment the simulated user at runtime
	private static AtomicInteger totalLoopCounter = new AtomicInteger(0);    // internal overall loop counter

	private LoadtestPluginContext userPluginContext = null;       // plug-in context per user
	private LoadtestInlineScriptContext inlineScriptContext = null;          // re-used, scratch, the returned context of an inline script that runs at item or URL exec scope

	private Object sslSessionCache = null;                        // internal ssl session cache per thread
	private SSLSessionCacheStatistic sslStatistic = null;         // internal ssl session cache statistic per thread
	private static int sslSessionCacheTimeout = 300;              // timeout of ssl session cache in seconds, 0 = session cache disabled
	private static int sslHandshakeRandomGeneratorType = -1;      // invalid initial value, use the default secure random generator for SSL handshakes
	private HttpSocketPool socketPool = null;                     // re-used, scratch, internal socket pool per thread and loop
	private CookieHandler cookieHandler = null;                   // re-used, scratch, internal cookie handler per thread and loop

	private HttpTestURL testURL = null;                           // re-used, scratch, http request and response
	private HttpTestURLThreadHandler pageThreadHandler = null;    // re-used, scratch, support for parallel processing of http request within a page
	private int httpStatus = -1;                                  // re-used, scratch, http response status code from webserver
	private HtmlContentParser htmlContentParser = null;           // re-used, scratch, used to extract vars from http response
	private XmlContentParser xmlContentParser = null;             // re-used, scratch, used to extract vars from http response
	private JSONHtmlBasedExtractor jsonHtmlBasedExtractor = null; // re-used, scratch, used to extract vars from http response
	private DynamicProtobufContentParser protobufContentParser = null;  // re-used, scratch, used to extract vars from http response
	private TextLineTokenExtractor textLineTokenExtractor = null; // re-used, scratch, used to extract vars from http response
	private ContentTokenExtractor contentTokenExtractor = null;   // re-used, scratch, used to extract vars from http response
	private BoundaryBasedExtractor boundaryBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private RegExpBasedExtractor regExpBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private XpathBasedExtractor xpathBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	private JSONPathBasedExtractor jsonPathBasedExtractor = null;   // re-used, scratch, used to extract vars from http response
	
	private volatile UserTransactionRuntimeHandler transactionHandler = new UserTransactionRuntimeHandler();		// re-used, support to manage user-defined transactions
	private Map<String,String> transactionContextMap = new HashMap<>();		// used to correctly measure the user-defined transactions

	private String C_SAMLRequest13 = null;               // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest12 = null;               // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest11 = null;               // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest10 = null;               // var declaration from web admin var handler: scope = per loop
	private String C_BelizePlusLanding1 = null;          // var declaration from web admin var handler: scope = per loop
	private String C_SFcontent = null;                   // var declaration from web admin var handler: scope = per loop
	private String vscrbdec = null;                      // var declaration from web admin var handler: scope = per loop
	private String vScrb = null;                         // var declaration from web admin var handler: scope = per loop
	private String C_SpID = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_EventVal1 = null;                   // var declaration from web admin var handler: scope = per loop
	private String C_UIRes = null;                       // var declaration from web admin var handler: scope = per loop
	private String C_CSRFToken1 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_Token1 = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_MOD3 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_VSGEN1 = null;                      // var declaration from web admin var handler: scope = per loop
	private String vSignature = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_ViewState1 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_VValue = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_RenderHandler = null;               // var declaration from web admin var handler: scope = per loop
	private String C_MODvalue = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_JSVersion3 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_IDPName = null;                     // var declaration from web admin var handler: scope = per loop
	private String C_Signature5 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_XsrfProtection = null;              // var declaration from web admin var handler: scope = per loop
	private String C_Signature4 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_SAMLResponseContent = null;         // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest9 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest8 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_MoD2 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_3Mvalue = null;                     // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest7 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_MoD1 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest6 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_AjaxSecretKey = null;               // var declaration from web admin var handler: scope = per loop
	private String C_StatusToken2 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest5 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_TenantID = null;                    // var declaration from web admin var handler: scope = per loop
	private String C_StatusToken1 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest = null;                 // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest4 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest3 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest2 = null;                // var declaration from web admin var handler: scope = per loop
	private String C_RequestURI = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_EID2 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_AuthenticityToken3 = null;          // var declaration from web admin var handler: scope = per loop
	private String C_EID1 = null;                        // var declaration from web admin var handler: scope = per loop
	private String C_AuthenticityToken2 = null;          // var declaration from web admin var handler: scope = per loop
	private String C_SAMLResponse3 = null;               // var declaration from web admin var handler: scope = per loop
	private String C_SAMLResponse2 = null;               // var declaration from web admin var handler: scope = per loop
	private String vSignature_1 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_RelayState2 = null;                 // var declaration from web admin var handler: scope = per loop
	private String C_RelayState1 = null;                 // var declaration from web admin var handler: scope = per loop
	private String C_Report = null;                      // var declaration from web admin var handler: scope = per loop
	private String C_Signature = null;                   // var declaration from web admin var handler: scope = per loop
	private String C_RPCSecret4 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_RPCSecret3 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_RPCSecret1 = null;                  // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest15 = null;               // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequestID = null;               // var declaration from web admin var handler: scope = per loop
	private String C_SAMLRequest14 = null;               // var declaration from web admin var handler: scope = per loop
	
	/**
	 * constructor: called from load test plug-ins (scope = global).
	 */
	public LoginReport_Prod_SM_corr()
	{
		super();
	}


	/**
	 * constructor: called when a user is created (per user).
	 */
	public LoginReport_Prod_SM_corr(int maxLoops, int requestTimeout, int threadNumber)
	{
		super();
		this.requestTimeout = requestTimeout;
		this.remainingLoops = maxLoops;
		this.checkLoopCount = (maxLoops > 0);
		this.threadNumber = threadNumber;
		this.sslSessionCache = SSLInit.getNewSslSessionCache(sslSessionCacheTimeout);
		this.sslStatistic = new SSLSessionCacheStatistic();
		if (isMultihomed() && (!ipPerLoop()))
			this.localIpAddress = getNextMultihomedIpAddress();
		if (dnsCache != null)
			userDNSContext = new HttpTestURLDNSContext(dnsCache, threadNumber);
		
		applyNextProxySettingsFromFileIfExists();
		
		if (commonNextProxyConfig != null)
			// set proxy configuration data per user 
			userNextProxyConfig = new NextProxyConfig(commonNextProxyConfig);
		
		// initialize context for plug-ins which are executed per user
		userPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, this, threadNumber);
		if(replayMode)
		{
			replaySnapShotsDump = new ReplaySnapShotsDump();
		}
	}


	/**
	 * internal method: called when a user starts a loop.
	 * contains the recorded session which is called by users x loops.
	 * 
	 * @param totalLoopCounter total number of loops (0..n-1) counted overall threads. This value is unique per loop.
	 * 
	 * @return  true:  loop successful completed.
	 *          false: loop failed.
	 */
	private boolean execute(int totalLoopCounter) throws Exception
	{
		markStartOfLoop();
		threadStep = 0;                 // internal - start loop at thread step 0
		
		// enable DNS resolves per loop?
		if (dnsPerLoop)
			userDNSContext = new HttpTestURLDNSContext(dnsCache.clone(false), threadNumber);
		
		// debug http headers?
		Object httpLogVectorObject = null;
		if (debugHttp)
			httpLogVectorObject = this;
		
		// create socket pool per loop
		sslSessionCache = SSLInit.getNewSslSessionCache(sslSessionCacheTimeout);		// reset the SSL session cache to get new SSL session IDs for this loop
		socketPool = new HttpSocketPool(this, sslProtocolVersion, sslSessionCache, sslStatistic, sslcmode);
		if (plannedConnectTimeout > 0)
			socketPool.setConnectTimeout(plannedConnectTimeout);
		if (sslHandshakeRandomGeneratorType != -1)
			socketPool.setSslHandshakeRandomGeneratorType(sslHandshakeRandomGeneratorType);
		socketPool.setSupportEllipticCurves(sslECC);
		socketPool.setHintUseSNI(sslSNI);
		socketPool.setSniCritical(sslSNICirical);
		socketPool.setUseTlsSessionTickets(useTlsSessionTickets);
		if (debugKeepAlive)
		{
			socketPool.setlogVectorObject(this);
			if (debugSsl)
				socketPool.enableSslLog();
		}
		
		if (downlinkBandwidth > 0)
			socketPool.setDownlinkBandwidth(downlinkBandwidth);
		if (uplinkBandwidth > 0)
			socketPool.setUplinkBandwidth(uplinkBandwidth);
		
		if (isMultihomed())
		{
			if (ipPerLoop())
				localIpAddress = getNextMultihomedIpAddress();
			socketPool.setClientIpAddress(localIpAddress);
			log();
			log("multihomed client ip address = " + localIpAddress);
		}
		
		// setup cookie handler per loop
		cookieHandler = new CookieHandler();
		if (debugCookies)
			cookieHandler.setLogVectorInterface(this);
		
		// customised vars from web admin var handler: scope = per loop
		htmlContentParser = null;
		xmlContentParser = null;
		jsonHtmlBasedExtractor = null;
		protobufContentParser = null;
		C_SAMLRequest13 = null;
		C_SAMLRequest12 = null;
		C_SAMLRequest11 = null;
		C_SAMLRequest10 = null;
		C_BelizePlusLanding1 = null;
		C_SFcontent = null;
		vscrbdec = "";
		vScrb = null;
		C_SpID = null;
		C_EventVal1 = null;
		C_UIRes = null;
		C_CSRFToken1 = null;
		C_Token1 = null;
		C_MOD3 = null;
		C_VSGEN1 = null;
		vSignature = null;
		C_ViewState1 = null;
		C_VValue = null;
		C_RenderHandler = null;
		C_MODvalue = null;
		C_JSVersion3 = null;
		C_IDPName = null;
		C_Signature5 = null;
		C_XsrfProtection = null;
		C_Signature4 = null;
		C_SAMLResponseContent = null;
		C_SAMLRequest9 = null;
		C_SAMLRequest8 = null;
		C_MoD2 = null;
		C_3Mvalue = null;
		C_SAMLRequest7 = null;
		C_MoD1 = null;
		C_SAMLRequest6 = null;
		C_AjaxSecretKey = null;
		C_StatusToken2 = null;
		C_SAMLRequest5 = null;
		C_TenantID = null;
		C_StatusToken1 = null;
		C_SAMLRequest = null;
		C_SAMLRequest4 = null;
		C_SAMLRequest3 = null;
		C_SAMLRequest2 = null;
		C_RequestURI = null;
		C_EID2 = null;
		C_AuthenticityToken3 = null;
		C_EID1 = null;
		C_AuthenticityToken2 = null;
		C_SAMLResponse3 = null;
		C_SAMLResponse2 = null;
		vSignature_1 = null;
		C_RelayState2 = null;
		C_RelayState1 = null;
		C_Report = null;
		C_Signature = null;
		C_RPCSecret4 = null;
		C_RPCSecret3 = null;
		C_RPCSecret1 = null;
		C_SAMLRequest15 = null;
		C_SAMLRequestID = null;
		C_SAMLRequest14 = null;
		log();
		log("<<< C_SAMLRequest13 = " + C_SAMLRequest13);
		log("<<< C_SAMLRequest12 = " + C_SAMLRequest12);
		log("<<< C_SAMLRequest11 = " + C_SAMLRequest11);
		log("<<< C_SAMLRequest10 = " + C_SAMLRequest10);
		log("<<< C_BelizePlusLanding1 = " + C_BelizePlusLanding1);
		log("<<< C_SFcontent = " + C_SFcontent);
		log("<<< vscrbdec = " + vscrbdec);
		log("<<< vScrb = " + vScrb);
		log("<<< C_SpID = " + C_SpID);
		log("<<< C_EventVal1 = " + C_EventVal1);
		log("<<< C_UIRes = " + C_UIRes);
		log("<<< C_CSRFToken1 = " + C_CSRFToken1);
		log("<<< C_Token1 = " + C_Token1);
		log("<<< C_MOD3 = " + C_MOD3);
		log("<<< C_VSGEN1 = " + C_VSGEN1);
		log("<<< vSignature = " + vSignature);
		log("<<< C_ViewState1 = " + C_ViewState1);
		log("<<< C_VValue = " + C_VValue);
		log("<<< C_RenderHandler = " + C_RenderHandler);
		log("<<< C_MODvalue = " + C_MODvalue);
		log("<<< C_JSVersion3 = " + C_JSVersion3);
		log("<<< C_IDPName = " + C_IDPName);
		log("<<< C_Signature5 = " + C_Signature5);
		log("<<< C_XsrfProtection = " + C_XsrfProtection);
		log("<<< C_Signature4 = " + C_Signature4);
		log("<<< C_SAMLResponseContent = " + C_SAMLResponseContent);
		log("<<< C_SAMLRequest9 = " + C_SAMLRequest9);
		log("<<< C_SAMLRequest8 = " + C_SAMLRequest8);
		log("<<< C_MoD2 = " + C_MoD2);
		log("<<< C_3Mvalue = " + C_3Mvalue);
		log("<<< C_SAMLRequest7 = " + C_SAMLRequest7);
		log("<<< C_MoD1 = " + C_MoD1);
		log("<<< C_SAMLRequest6 = " + C_SAMLRequest6);
		log("<<< C_AjaxSecretKey = " + C_AjaxSecretKey);
		log("<<< C_StatusToken2 = " + C_StatusToken2);
		log("<<< C_SAMLRequest5 = " + C_SAMLRequest5);
		log("<<< C_TenantID = " + C_TenantID);
		log("<<< C_StatusToken1 = " + C_StatusToken1);
		log("<<< C_SAMLRequest = " + C_SAMLRequest);
		log("<<< C_SAMLRequest4 = " + C_SAMLRequest4);
		log("<<< C_SAMLRequest3 = " + C_SAMLRequest3);
		log("<<< C_SAMLRequest2 = " + C_SAMLRequest2);
		log("<<< C_RequestURI = " + C_RequestURI);
		log("<<< C_EID2 = " + C_EID2);
		log("<<< C_AuthenticityToken3 = " + C_AuthenticityToken3);
		log("<<< C_EID1 = " + C_EID1);
		log("<<< C_AuthenticityToken2 = " + C_AuthenticityToken2);
		log("<<< C_SAMLResponse3 = " + C_SAMLResponse3);
		log("<<< C_SAMLResponse2 = " + C_SAMLResponse2);
		log("<<< vSignature_1 = " + vSignature_1);
		log("<<< C_RelayState2 = " + C_RelayState2);
		log("<<< C_RelayState1 = " + C_RelayState1);
		log("<<< C_Report = " + C_Report);
		log("<<< C_Signature = " + C_Signature);
		log("<<< C_RPCSecret4 = " + C_RPCSecret4);
		log("<<< C_RPCSecret3 = " + C_RPCSecret3);
		log("<<< C_RPCSecret1 = " + C_RPCSecret1);
		log("<<< C_SAMLRequest15 = " + C_SAMLRequest15);
		log("<<< C_SAMLRequestID = " + C_SAMLRequestID);
		log("<<< C_SAMLRequest14 = " + C_SAMLRequest14);
		
		// initialize context for plug-ins which are executed per loop
		LoadtestPluginContext loopPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, this, threadNumber, socketPool, cookieHandler);
		



		// --- VIRTUAL PAGE #0 ---
		if (!executePage_0(totalLoopCounter, loopPluginContext, new InnerLoopContext(), 0,0, httpLogVectorObject))
			return false;



		// --- PAGE BREAK: Test [0] ---
		log();
		log();
		log("# Page #1: LaunchURL");
		log("# ------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #1: LaunchURL", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_1_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 1 failed
			synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 1 failed
		
		// page 1 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [52] ---
		log();
		log();
		log("# Page #2: CompanyID");
		log("# ------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #2: CompanyID", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 2 failed
			synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 2 failed
		
		// page 2 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [61] ---
		log();
		log();
		log("# Page #3: Username");
		log("# -----------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #3: Username", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 3 failed
			synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 3 failed
		
		// page 3 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [63] ---
		log();
		log();
		log("# Page #4: Login");
		log("# --------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #4: Login", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_4_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 4 failed
			synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 4 failed
		
		// page 4 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [136] ---
		log();
		log();
		log("# Page #5: Reporting");
		log("# ------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #5: Reporting", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_5_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 5 failed
			synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 5 failed
		
		// page 5 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [244] ---
		log();
		log();
		log("# Page #6: SearchReporting");
		log("# ------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #6: SearchReporting", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 6 failed
			synchResponsesParallelRequestsPage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 6 failed
		
		// page 6 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [257] ---
		log();
		log();
		log("# Page #7: ClickLoginReport");
		log("# -------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #7: ClickLoginReport", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_7_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_7_2(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_7_3(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_7_4(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_7_5(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_7_6(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 7 failed
			synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_7(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 7 failed
		
		// page 7 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [387] ---
		log();
		log();
		log("# Page #8: ApplyDefaultFilter");
		log("# ---------------------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #8: ApplyDefaultFilter", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_8(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 8 failed
			synchResponsesParallelRequestsPage_8(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_8(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 8 failed
		
		// page 8 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);



		// --- PAGE BREAK: Test [396] ---
		log();
		log();
		log("# Page #9: LogOut");
		log("# ---------------");
		threadStep = setPageBreak(performanceData, threadStep, "Page #9: LogOut", 3000, 35, -1);		// hint: param #4 is the user's think time in milliseconds, param #5 is randomness of the user's think time in percent (+/- 0..100%), param #6 is the maximum acceptable response time in milliseconds (-1 = not configured)
		pageThreadHandler = new HttpTestURLThreadHandler(threadStep - 1, maxParallelThreadsPerUser, performanceData, this);   // support for parallel processing of http(s) requests within a page. hint: param #2 is the number of parallel threads per user
		log();

		if (!executePage_9(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 9 failed
			synchResponsesParallelRequestsPage_9(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!executePage_9_1(totalLoopCounter, loopPluginContext, new InnerLoopContext(),0,0, httpLogVectorObject))
		{
			// execution of page 9 failed
			synchResponsesParallelRequestsPage_9(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject);
			return false;
		}
		if (!synchResponsesParallelRequestsPage_9(totalLoopCounter, loopPluginContext, new InnerLoopContext(), httpLogVectorObject))
			return false;		// execution of page 9 failed
		
		// page 9 successfully executed
		pageThreadHandler.addPageResponseTimeToResult(this);
		
		
		// loop successful done
		// --------------------
		
		markEndOfPage(performanceData);
		
		endOfExecuteLoop(true, null, -1, loopPluginContext);
		log();
		return true;
	}		// end of execute()
		
		
		
	/**
	 * internal method: called when a user has completed a loop.
	 */
	private void endOfExecuteLoop(boolean loopPassed, HttpTestURL testURL, int threadStep, LoadtestPluginContext loopPluginContext) throws Exception
	{
		// log URL if last call has failed
		if ((!loopPassed) && (testURL != null))
			log(testURL);
		
		// update plugin context
		loopPluginContext.setLoopPassed(loopPassed);
		if ((testURL != null) && (loopPluginContext.getHttpTestURL() == null))
			loopPluginContext.setHttpTestURL(testURL);
		if ((threadStep != -1) && (loopPluginContext.getThreadStep() == -1))
			loopPluginContext.setThreadStep(threadStep);
	}


	/**
	 * Recorded http requests of page #0.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_0(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{

		// all http requests of page #0 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #1: LaunchURL
		// # ------------------



		// --- HTTP REQUEST: Test [1] <- WEB ADMIN Index 1 ---
		String requestProt0001 = "https";
		String requestHost0001 = "performancemanager4.successfactors.com";
		int    requestPort0001 = 443;
		String requestFile0001 = "/";
		String requestHeader0001 = "GET " + requestFile0001 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: none\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0001, requestHost0001, requestPort0001, requestHeader0001, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0001 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 301, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {301}, null, null, null);		// Test [1] <- Index 1
		if(replayMode)
		{
			long proxyDataRecordId =1612210716568L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [2] <- WEB ADMIN Index 2 ---
		String requestProt0002 = "https";
		String requestHost0002 = "performancemanager4.successfactors.com";
		int    requestPort0002 = 443;
		String requestFile0002 = "/sf/start/";
		String requestHeader0002 = "GET " + requestFile0002 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: none\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0002, requestHost0002, requestPort0002, requestHeader0002, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0002 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 18785
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors Business Execution Suite");		// Test [2] <- Index 2
		if(replayMode)
		{
			long proxyDataRecordId =1612210716723L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_AjaxSecretKey'
		ContentTokenExtractorItem contentTokenExtractorItem0002_1 = new ContentTokenExtractorItem("ajaxSecKey", "\t\n\r \"(),={}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0002_1);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'C_AjaxSecretKey'
			C_AjaxSecretKey = contentTokenExtractorItem0002_1.getResultToken();
			log("<<< C_AjaxSecretKey = " + C_AjaxSecretKey);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_AjaxSecretKey!= null && C_AjaxSecretKey.trim().length() == 0)
			{
				C_AjaxSecretKey = "";
				log("runtime note: the extraction of a new value for the variable 'C_AjaxSecretKey' ends up with an empty string - a substitute value was set");
				log("<<< C_AjaxSecretKey = " + C_AjaxSecretKey);
			}
		}
		catch (Exception e) { C_AjaxSecretKey = null; log(e); }
		if (C_AjaxSecretKey == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_AjaxSecretKey' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [3] <- WEB ADMIN Index 3 ---
		String requestProt0003 = "https";
		String requestHost0003 = "performancemanager4.successfactors.com";
		int    requestPort0003 = 443;
		String requestFile0003 = "/ui/extlib/XMLHttpRequest_1.0.5_sf.17/XMLHttpRequest.js";
		String requestHeader0003 = "GET " + requestFile0003 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0003, requestHost0003, requestPort0003, requestHeader0003, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0003 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2721
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [3] <- Index 3
		if(replayMode)
		{
			long proxyDataRecordId =1612210716973L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [4] <- WEB ADMIN Index 4 ---
		String requestProt0004 = "https";
		String requestHost0004 = "performancemanager4.successfactors.com";
		int    requestPort0004 = 443;
		String requestFile0004 = "/ui/perflog/js/perflog_07617187397ffed9380c6b31948d3234.js";
		String requestHeader0004 = "GET " + requestFile0004 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0004, requestHost0004, requestPort0004, requestHeader0004, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0004 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4196
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [4] <- Index 4
		if(replayMode)
		{
			long proxyDataRecordId =1612210717018L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [5] <- WEB ADMIN Index 5 ---
		String requestProt0005 = "https";
		String requestHost0005 = "performancemanager4.successfactors.com";
		int    requestPort0005 = 443;
		String requestFile0005 = "/ui/uicore/css/revolutionfont-Icons_e66c293a573ac22c088d0dae05237b02.css";
		String requestHeader0005 = "GET " + requestFile0005 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0005, requestHost0005, requestPort0005, requestHeader0005, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0005 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 675
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [5] <- Index 5
		if(replayMode)
		{
			long proxyDataRecordId =1612210717023L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [6] <- WEB ADMIN Index 6 ---
		String requestProt0006 = "https";
		String requestHost0006 = "performancemanager4.successfactors.com";
		int    requestPort0006 = 443;
		String requestFile0006 = "/ui/extlib/yui_2.9_sf.3/js/yahoo-dom-event/yahoo-dom-event.js";
		String requestHeader0006 = "GET " + requestFile0006 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0006, requestHost0006, requestPort0006, requestHeader0006, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0006 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 13255
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [6] <- Index 6
		if(replayMode)
		{
			long proxyDataRecordId =1612210717027L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [7] <- WEB ADMIN Index 7 ---
		String requestProt0007 = "https";
		String requestHost0007 = "performancemanager4.successfactors.com";
		int    requestPort0007 = 443;
		String requestFile0007 = "/ui/extlib/yui_2.9_sf.3/js/connection/connection.js";
		String requestHeader0007 = "GET " + requestFile0007 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0007, requestHost0007, requestPort0007, requestHeader0007, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0007 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4707
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [7] <- Index 7
		if(replayMode)
		{
			long proxyDataRecordId =1612210717030L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [8] <- WEB ADMIN Index 8 ---
		String requestProt0008 = "https";
		String requestHost0008 = "performancemanager4.successfactors.com";
		int    requestPort0008 = 443;
		String requestFile0008 = "/ui/extlib/yui_2.9_sf.3/js/animation/animation.js";
		String requestHeader0008 = "GET " + requestFile0008 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0008, requestHost0008, requestPort0008, requestHeader0008, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0008 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4887
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [8] <- Index 8
		if(replayMode)
		{
			long proxyDataRecordId =1612210717032L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [9] <- WEB ADMIN Index 9 ---
		String requestProt0009 = "https";
		String requestHost0009 = "performancemanager4.successfactors.com";
		int    requestPort0009 = 443;
		String requestFile0009 = "/ui/login/css/bizx/BizXLogin_56dd8c62b0aa5492158e8b0dfebe8064.css";
		String requestHeader0009 = "GET " + requestFile0009 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0009, requestHost0009, requestPort0009, requestHeader0009, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0009 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2537
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [9] <- Index 9
		if(replayMode)
		{
			long proxyDataRecordId =1612210717079L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [10] <- WEB ADMIN Index 10 ---
		String requestProt0010 = "https";
		String requestHost0010 = "performancemanager4.successfactors.com";
		int    requestPort0010 = 443;
		String requestFile0010 = "/ui/extlib/yui_2.9_sf.3/js/autocomplete/autocomplete.js";
		String requestHeader0010 = "GET " + requestFile0010 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0010, requestHost0010, requestPort0010, requestHeader0010, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0010 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 15497
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [10] <- Index 10
		if(replayMode)
		{
			long proxyDataRecordId =1612210717082L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [11] <- WEB ADMIN Index 11 ---
		String requestProt0011 = "https";
		String requestHost0011 = "performancemanager4.successfactors.com";
		int    requestPort0011 = 443;
		String requestFile0011 = "/ui/extlib/jshash_2.2/sha256.js";
		String requestHeader0011 = "GET " + requestFile0011 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0011, requestHost0011, requestPort0011, requestHeader0011, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0011 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2403
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [11] <- Index 11
		if(replayMode)
		{
			long proxyDataRecordId =1612210717097L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [12] <- WEB ADMIN Index 12 ---
		String requestProt0012 = "https";
		String requestHost0012 = "performancemanager4.successfactors.com";
		int    requestPort0012 = 443;
		String requestFile0012 = "/ui/juic/js/InterstitialUtil_1f1a1807326bb0d8ceaa3c1c842340d9.js";
		String requestHeader0012 = "GET " + requestFile0012 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0012, requestHost0012, requestPort0012, requestHeader0012, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0012 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [12] <- Index 12
		if(replayMode)
		{
			long proxyDataRecordId =1612210717131L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [13] <- WEB ADMIN Index 13 ---
		String requestProt0013 = "https";
		String requestHost0013 = "performancemanager4.successfactors.com";
		int    requestPort0013 = 443;
		String requestFile0013 = "/ui/juic/js/GlobalFunctions_7c6c0000b683cb791f25f3210a0a1731.js";
		String requestHeader0013 = "GET " + requestFile0013 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0013, requestHost0013, requestPort0013, requestHeader0013, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0013 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 910
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [13] <- Index 13
		if(replayMode)
		{
			long proxyDataRecordId =1612210717132L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [14] <- WEB ADMIN Index 14 ---
		String requestProt0014 = "https";
		String requestHost0014 = "performancemanager4.successfactors.com";
		int    requestPort0014 = 443;
		String requestFile0014 = "/ui/surj/js/core/config-util_1f1411d7d63c13c9fff25c556f656cd6.js";
		String requestHeader0014 = "GET " + requestFile0014 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0014, requestHost0014, requestPort0014, requestHeader0014, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0014 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 771
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [14] <- Index 14
		if(replayMode)
		{
			long proxyDataRecordId =1612210717133L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [15] <- WEB ADMIN Index 15 ---
		String requestProt0015 = "https";
		String requestHost0015 = "performancemanager4.successfactors.com";
		int    requestPort0015 = 443;
		String requestFile0015 = "/ui/extlib/jquery_3.5.1/jquery.js";
		String requestHeader0015 = "GET " + requestFile0015 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0015, requestHost0015, requestPort0015, requestHeader0015, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0015 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 34457
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [15] <- Index 15
		if(replayMode)
		{
			long proxyDataRecordId =1612210717135L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [16] <- WEB ADMIN Index 16 ---
		String requestProt0016 = "https";
		String requestHost0016 = "performancemanager4.successfactors.com";
		int    requestPort0016 = 443;
		String requestFile0016 = "/ui/sfgrp/js/SURJUtil_305d4ce02664e4587a9021eb38d00f50.js";
		String requestHeader0016 = "GET " + requestFile0016 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0016, requestHost0016, requestPort0016, requestHeader0016, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0016 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 10044
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [16] <- Index 16
		if(replayMode)
		{
			long proxyDataRecordId =1612210717157L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [17] <- WEB ADMIN Index 17 ---
		String requestProt0017 = "https";
		String requestHost0017 = "performancemanager4.successfactors.com";
		int    requestPort0017 = 443;
		String requestFile0017 = "/ui/sfgrp/js/SURJStartup_e37f0d7ec1c3eb1b17908d9f79657ea2.js";
		String requestHeader0017 = "GET " + requestFile0017 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0017, requestHost0017, requestPort0017, requestHeader0017, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0017 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3245
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [17] <- Index 17
		if(replayMode)
		{
			long proxyDataRecordId =1612210717159L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [18] <- WEB ADMIN Index 18 ---
		String requestProt0018 = "https";
		String requestHost0018 = "performancemanager4.successfactors.com";
		int    requestPort0018 = 443;
		String requestFile0018 = "/ui/surj/js/core/surj-ui-config_85207fa07871c8bab0e0d7288e8d18eb.js";
		String requestHeader0018 = "GET " + requestFile0018 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0018, requestHost0018, requestPort0018, requestHeader0018, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0018 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2989
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [18] <- Index 18
		if(replayMode)
		{
			long proxyDataRecordId =1612210717178L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [19] <- WEB ADMIN Index 19 ---
		String requestProt0019 = "https";
		String requestHost0019 = "performancemanager4.successfactors.com";
		int    requestPort0019 = 443;
		String requestFile0019 = "/ui/surj/resources_1.4/lite/resources/sap-ui-core-nojQuery.js";
		String requestHeader0019 = "GET " + requestFile0019 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0019, requestHost0019, requestPort0019, requestHeader0019, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0019 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 67
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [19] <- Index 19
		if(replayMode)
		{
			long proxyDataRecordId =1612210717191L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [20] <- WEB ADMIN Index 20 ---
		String requestProt0020 = "https";
		String requestHost0020 = "performancemanager4.successfactors.com";
		int    requestPort0020 = 443;
		String requestFile0020 = "/ui/sapui5/lite_1.78.6/common-0.js";
		String requestHeader0020 = "GET " + requestFile0020 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0020, requestHost0020, requestPort0020, requestHeader0020, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0020 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 203907
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [20] <- Index 20
		if(replayMode)
		{
			long proxyDataRecordId =1612210717204L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 2 of 3)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [21] <- WEB ADMIN Index 21 ---
		String requestProt0021 = "https";
		String requestHost0021 = "performancemanager4.successfactors.com";
		int    requestPort0021 = 443;
		String requestFile0021 = "/ui/sapui5/lite_1.78.6/common-1.js";
		String requestHeader0021 = "GET " + requestFile0021 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0021, requestHost0021, requestPort0021, requestHeader0021, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0021 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 181765
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [21] <- Index 21
		if(replayMode)
		{
			long proxyDataRecordId =1612210717213L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [22] <- WEB ADMIN Index 22 ---
		String requestProt0022 = "https";
		String requestHost0022 = "performancemanager4.successfactors.com";
		int    requestPort0022 = 443;
		String requestFile0022 = "/ui/sapui5/lite_1.78.6/common-2.js";
		String requestHeader0022 = "GET " + requestFile0022 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0022, requestHost0022, requestPort0022, requestHeader0022, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0022 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 195939
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [22] <- Index 22
		if(replayMode)
		{
			long proxyDataRecordId =1612210717215L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [23] <- WEB ADMIN Index 23 ---
		String requestProt0023 = "https";
		String requestHost0023 = "performancemanager4.successfactors.com";
		int    requestPort0023 = 443;
		String requestFile0023 = "/ui/sapui5/lite_1.78.6/common-3.js";
		String requestHeader0023 = "GET " + requestFile0023 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0023, requestHost0023, requestPort0023, requestHeader0023, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0023 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 199680
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [23] <- Index 23
		if(replayMode)
		{
			long proxyDataRecordId =1612210717234L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [24] <- WEB ADMIN Index 24 ---
		String requestProt0024 = "https";
		String requestHost0024 = "performancemanager4.successfactors.com";
		int    requestPort0024 = 443;
		String requestFile0024 = "/ui/sfgrp/js/loginBizX_8bfd80dba2b30a79c927f231e20d21ef.js";
		String requestHeader0024 = "GET " + requestFile0024 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0024, requestHost0024, requestPort0024, requestHeader0024, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0024 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8412
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [24] <- Index 24
		if(replayMode)
		{
			long proxyDataRecordId =1612210717235L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [25] <- WEB ADMIN Index 25 ---
		String requestProt0025 = "https";
		String requestHost0025 = "performancemanager4.successfactors.com";
		int    requestPort0025 = 443;
		String requestFile0025 = "/ui/surj/js/LastPageVisitedUtil_a912d80b1d360ccc66c9d0b67d597c10.js";
		String requestHeader0025 = "GET " + requestFile0025 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0025, requestHost0025, requestPort0025, requestHeader0025, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0025 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1615
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [25] <- Index 25
		if(replayMode)
		{
			long proxyDataRecordId =1612210717285L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [26] <- WEB ADMIN Index 26 ---
		String requestProt0026 = "https";
		String requestHost0026 = "performancemanager4.successfactors.com";
		int    requestPort0026 = 443;
		String requestFile0026 = "/ui/uicore/img/successfactors-large_abf7640c2701d6e38bbb0fe0d0fa326b.gif";
		String requestHeader0026 = "GET " + requestFile0026 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0026, requestHost0026, requestPort0026, requestHeader0026, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0026 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 2621
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [26] <- Index 26
		if(replayMode)
		{
			long proxyDataRecordId =1612210717291L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [27] <- WEB ADMIN Index 27 ---
		String requestProt0027 = "https";
		String requestHost0027 = "performancemanager4.successfactors.com";
		int    requestPort0027 = 443;
		String requestFile0027 = "/ui/surj/resources_0D669CF44A13E0E9F573CB4E8C114330/sap/sf/surj/shell/library-preload.js";
		String requestHeader0027 = "GET " + requestFile0027 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965\r\n" + 
				"OPTR_CXT: 01000500016b5762bf-68c2-4a06-bc29-869c2150932429820909-1501-babe-face-0000000000038ce93287-6a52-4dda-b324-ba5027104425HTTP    ;\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0027, requestHost0027, requestPort0027, requestHeader0027, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0027 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 104710
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [27] <- Index 27
		if(replayMode)
		{
			long proxyDataRecordId =1612210717440L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [28] <- WEB ADMIN Index 28 ---
		String requestProt0028 = "https";
		String requestHost0028 = "performancemanager4.successfactors.com";
		int    requestPort0028 = 443;
		String requestFile0028 = "/ui/sapui5/main_1.78.6/sap/ui/core/themes/sap_belize/library.css";
		String requestHeader0028 = "GET " + requestFile0028 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0028, requestHost0028, requestPort0028, requestHeader0028, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0028 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 21654
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [28] <- Index 28
		if(replayMode)
		{
			long proxyDataRecordId =1612210717527L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [29] <- WEB ADMIN Index 29 ---
		String requestProt0029 = "https";
		String requestHost0029 = "performancemanager4.successfactors.com";
		int    requestPort0029 = 443;
		String requestFile0029 = "/ui/sapui5/lite_1.78.6/messagebundle-preload_en.js";
		String requestHeader0029 = "GET " + requestFile0029 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965\r\n" + 
				"OPTR_CXT: 01000500011c3ac245-1522-4ae9-942d-9cb324f7c92829820909-1501-babe-face-0000000000032e8ad2d0-6db2-4809-8f27-94ac2d993f2aHTTP    ;\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0029, requestHost0029, requestPort0029, requestHeader0029, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0029 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 12667
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [29] <- Index 29
		if(replayMode)
		{
			long proxyDataRecordId =1612210717530L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [30] <- WEB ADMIN Index 30 ---
		String requestProt0030 = "https";
		String requestHost0030 = "performancemanager4.successfactors.com";
		int    requestPort0030 = 443;
		String requestFile0030 = "/ui/sapui5/main_1.78.6/sap/m/themes/sap_belize/library.css";
		String requestHeader0030 = "GET " + requestFile0030 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0030, requestHost0030, requestPort0030, requestHeader0030, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0030 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 124609
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [30] <- Index 30
		if(replayMode)
		{
			long proxyDataRecordId =1612210717531L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [31] <- WEB ADMIN Index 31 ---
		String requestProt0031 = "https";
		String requestHost0031 = "performancemanager4.successfactors.com";
		int    requestPort0031 = 443;
		String requestFile0031 = "/ui/sapui5/lite_1.78.6/themes/sap_belize/library.css";
		String requestHeader0031 = "GET " + requestFile0031 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0031, requestHost0031, requestPort0031, requestHeader0031, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0031 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 53403
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [31] <- Index 31
		if(replayMode)
		{
			long proxyDataRecordId =1612210717532L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [32] <- WEB ADMIN Index 32 ---
		String requestProt0032 = "https";
		String requestHost0032 = "performancemanager4.successfactors.com";
		int    requestPort0032 = 443;
		String requestFile0032 = "/ui/surj/resources_0D669CF44A13E0E9F573CB4E8C114330/sap/sf/surj/shell/themes/sap_belize/library.css";
		String requestHeader0032 = "GET " + requestFile0032 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0032, requestHost0032, requestPort0032, requestHeader0032, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0032 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 8944
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [32] <- Index 32
		if(replayMode)
		{
			long proxyDataRecordId =1612210717582L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [33] <- WEB ADMIN Index 33 ---
		String requestProt0033 = "https";
		String requestHost0033 = "performancemanager4.successfactors.com";
		int    requestPort0033 = 443;
		String requestFile0033 = "/ui/sapui5/main_1.78.6/sap/ui/layout/themes/sap_belize/library.css";
		String requestHeader0033 = "GET " + requestFile0033 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0033, requestHost0033, requestPort0033, requestHeader0033, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0033 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 24608
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [33] <- Index 33
		if(replayMode)
		{
			long proxyDataRecordId =1612210717594L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [34] <- WEB ADMIN Index 34 ---
		String requestProt0034 = "https";
		String requestHost0034 = "performancemanager4.successfactors.com";
		int    requestPort0034 = 443;
		String requestFile0034 = "/ui/login/img/topnav/belize_light_bg_132a77170450d7007fd6f1b60109ccd6.png";
		String requestHeader0034 = "GET " + requestFile0034 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0034, requestHost0034, requestPort0034, requestHeader0034, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0034 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 3765
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [34] <- Index 34
		if(replayMode)
		{
			long proxyDataRecordId =1612210717608L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [35] <- WEB ADMIN Index 35 ---
		String requestProt0035 = "https";
		String requestHost0035 = "performancemanager4.successfactors.com";
		int    requestPort0035 = 443;
		String requestFile0035 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/patch/sap-ui-core-Popup-PATCH.js";
		String requestHeader0035 = "GET " + requestFile0035 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965\r\n" + 
				"OPTR_CXT: 0100050001642612c5-30b2-4027-aa2e-7fe02494ff2329820909-1501-babe-face-000000000003f0226298-0cd2-42ad-9129-541a2f278b23HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0035, requestHost0035, requestPort0035, requestHeader0035, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0035 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 415
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [35] <- Index 35
		if(replayMode)
		{
			long proxyDataRecordId =1612210717636L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [36] <- WEB ADMIN Index 36 ---
		String requestProt0036 = "https";
		String requestHost0036 = "performancemanager4.successfactors.com";
		int    requestPort0036 = 443;
		String requestFile0036 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/patch/sap-m-Wizard-PATCH.js";
		String requestHeader0036 = "GET " + requestFile0036 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965\r\n" + 
				"OPTR_CXT: 0100050001ed10d201-6ea2-4b3a-8125-512b22a0fe2b29820909-1501-babe-face-0000000000036c56e2ea-5902-4f6e-8f23-726c2ec7e928HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0036, requestHost0036, requestPort0036, requestHeader0036, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0036 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 323
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [36] <- Index 36
		if(replayMode)
		{
			long proxyDataRecordId =1612210717678L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [37] <- WEB ADMIN Index 37 ---
		String requestProt0037 = "https";
		String requestHost0037 = "performancemanager4.successfactors.com";
		int    requestPort0037 = 443;
		String requestFile0037 = "/ui/sapui5/main_1.78.6/sap/m/Wizard.js";
		String requestHeader0037 = "GET " + requestFile0037 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965\r\n" + 
				"OPTR_CXT: 0100050001455462d6-e692-4e5e-bd28-e0dc26fd1e2c29820909-1501-babe-face-000000000003863c82ae-d8e2-44e8-9028-c3412276222cHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0037, requestHost0037, requestPort0037, requestHeader0037, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0037 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4183
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [37] <- Index 37
		if(replayMode)
		{
			long proxyDataRecordId =1612210717719L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [38] <- WEB ADMIN Index 38 ---
		String requestProt0038 = "https";
		String requestHost0038 = "performancemanager4.successfactors.com";
		int    requestPort0038 = 443;
		String requestFile0038 = "/ui/sapui5/main_1.78.6/sap/m/WizardProgressNavigator.js";
		String requestHeader0038 = "GET " + requestFile0038 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965\r\n" + 
				"OPTR_CXT: 0100050001b637521d-82d2-4864-8625-a33d2dca312429820909-1501-babe-face-00000000000353364260-cd92-4f70-b628-a43a279dc123HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0038, requestHost0038, requestPort0038, requestHeader0038, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0038 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2582
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [38] <- Index 38
		if(replayMode)
		{
			long proxyDataRecordId =1612210717764L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [39] <- WEB ADMIN Index 39 ---
		String requestProt0039 = "https";
		String requestHost0039 = "performancemanager4.successfactors.com";
		int    requestPort0039 = 443;
		String requestFile0039 = "/ui/sapui5/main_1.78.6/sap/m/WizardProgressNavigatorRenderer.js";
		String requestHeader0039 = "GET " + requestFile0039 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965\r\n" + 
				"OPTR_CXT: 01000500016eca6211-8f32-492d-9423-0d9c2bcd552729820909-1501-babe-face-000000000003e4478288-51d2-48f9-8f23-57af25aedc20HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0039, requestHost0039, requestPort0039, requestHeader0039, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0039 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1266
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [39] <- Index 39
		if(replayMode)
		{
			long proxyDataRecordId =1612210717819L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [40] <- WEB ADMIN Index 40 ---
		String requestProt0040 = "https";
		String requestHost0040 = "performancemanager4.successfactors.com";
		int    requestPort0040 = 443;
		String requestFile0040 = "/ui/sapui5/main_1.78.6/sap/m/WizardRenderer.js";
		String requestHeader0040 = "GET " + requestFile0040 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965\r\n" + 
				"OPTR_CXT: 0100050001775f72c6-eac2-483f-882b-16972332c52729820909-1501-babe-face-000000000003ed3a822e-00d2-4175-9d2d-3c7621cfaf2dHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0040, requestHost0040, requestPort0040, requestHeader0040, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0040 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 743
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [40] <- Index 40
		if(replayMode)
		{
			long proxyDataRecordId =1612210717863L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #1_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_1_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #1 (fragment 3 of 3)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [41] <- WEB ADMIN Index 41 ---
		String requestProt0041 = "https";
		String requestHost0041 = "performancemanager4.successfactors.com";
		int    requestPort0041 = 443;
		String requestFile0041 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/patch/DragAndDrop-PATCH.js";
		String requestHeader0041 = "GET " + requestFile0041 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965\r\n" + 
				"OPTR_CXT: 01000500010f1b3246-e0c2-4ec9-ae24-283b2c2a5b2529820909-1501-babe-face-00000000000374d0c2eb-ca32-486c-a62e-d76021876624HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0041, requestHost0041, requestPort0041, requestHeader0041, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0041 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 192
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [41] <- Index 41
		if(replayMode)
		{
			long proxyDataRecordId =1612210717927L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [42] <- WEB ADMIN Index 42 ---
		String requestProt0042 = "https";
		String requestHost0042 = "performancemanager4.successfactors.com";
		int    requestPort0042 = 443;
		String requestFile0042 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/patch/sap-m-SuggestionsPopover-PATCH.js";
		String requestHeader0042 = "GET " + requestFile0042 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965\r\n" + 
				"OPTR_CXT: 01000500018ac90290-8112-48e0-ab23-9d7a21c27d2f29820909-1501-babe-face-000000000003a7bae2a8-11d2-417f-bd2b-f8552ff58c27HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0042, requestHost0042, requestPort0042, requestHeader0042, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0042 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 223
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [42] <- Index 42
		if(replayMode)
		{
			long proxyDataRecordId =1612210718004L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [43] <- WEB ADMIN Index 43 ---
		String requestProt0043 = "https";
		String requestHost0043 = "performancemanager4.successfactors.com";
		int    requestPort0043 = 443;
		String requestFile0043 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/patch/sap-m-MultiInput-PATCH.js";
		String requestHeader0043 = "GET " + requestFile0043 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965\r\n" + 
				"OPTR_CXT: 0100050001f5ec723a-5832-41d6-a822-b5b22ebb9b2b29820909-1501-babe-face-0000000000035b9d824c-a652-4d63-9621-6cf52daf3720HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0043, requestHost0043, requestPort0043, requestHeader0043, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0043 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 317
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [43] <- Index 43
		if(replayMode)
		{
			long proxyDataRecordId =1612210718070L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [44] <- WEB ADMIN Index 44 ---
		String requestProt0044 = "https";
		String requestHost0044 = "performancemanager4.successfactors.com";
		int    requestPort0044 = 443;
		String requestFile0044 = "/messagebundle/_/vmod_d7f00fec/ui/login/resources/sap/sf/login/i18n/messagebundle_en.properties";
		String requestHeader0044 = "GET " + requestFile0044 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965\r\n" + 
				"OPTR_CXT: 0100050001025f920e-a1c2-4873-9022-ac9a2d8c752b29820909-1501-babe-face-0000000000038d0d9215-ae42-4c21-af2e-91512980ff2aHTTP    ;\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0044, requestHost0044, requestPort0044, requestHeader0044, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0044 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 3043
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [44] <- Index 44
		if(replayMode)
		{
			long proxyDataRecordId =1612210718134L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [45] <- WEB ADMIN Index 45 ---
		String requestProt0045 = "https";
		String requestHost0045 = "performancemanager4.successfactors.com";
		int    requestPort0045 = 443;
		String requestFile0045 = "/ui/login/img/sf_logo_new_dark_bbca44d394a268f0a40b207fdf794ae9.png";
		String requestHeader0045 = "GET " + requestFile0045 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0045, requestHost0045, requestPort0045, requestHeader0045, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0045 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 1792
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [45] <- Index 45
		if(replayMode)
		{
			long proxyDataRecordId =1612210718242L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [46] <- WEB ADMIN Index 46 ---
		String requestProt0046 = "https";
		String requestHost0046 = "performancemanager4.successfactors.com";
		int    requestPort0046 = 443;
		String requestFile0046 = "/ui/login/img/logos/SF_Logo_Lg-Black_1bb78e4680d8a1d50d3813c5900759df.png";
		String requestHeader0046 = "GET " + requestFile0046 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0046, requestHost0046, requestPort0046, requestHeader0046, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0046 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 7116
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [46] <- Index 46
		if(replayMode)
		{
			long proxyDataRecordId =1612210718258L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [47] <- WEB ADMIN Index 47 ---
		String requestProt0047 = "https";
		String requestHost0047 = "performancemanager4.successfactors.com";
		int    requestPort0047 = 443;
		String requestFile0047 = "/ui/surj/resources_1.4/SF-supp-icons.ttf";
		String requestHeader0047 = "GET " + requestFile0047 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0047, requestHost0047, requestPort0047, requestHeader0047, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0047 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-TTF", header text fragment = [verification disabled], recorded content size = 42072
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-TTF", null, null);		// Test [47] <- Index 47
		if(replayMode)
		{
			long proxyDataRecordId =1612210718267L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [48] <- WEB ADMIN Index 48 ---
		String requestProt0048 = "https";
		String requestHost0048 = "performancemanager4.successfactors.com";
		int    requestPort0048 = 443;
		String requestFile0048 = "/ui/sapui5/main_1.71.10/sap/ui/core/themes/base/fonts/SAP-icons.woff2";
		String requestHeader0048 = "GET " + requestFile0048 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0048, requestHost0048, requestPort0048, requestHeader0048, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0048 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 97220
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [48] <- Index 48
		if(replayMode)
		{
			long proxyDataRecordId =1612210718268L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [49] <- WEB ADMIN Index 49 ---
		String requestProt0049 = "https";
		String requestHost0049 = "performancemanager4.successfactors.com";
		int    requestPort0049 = 443;
		String requestFile0049 = "/perfLogServlet" +
				"?callId=5225057076-0" +
				"&eventId=EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965" +
				"&moduleId=LOGIN" +
				"&pageId=LOGIN" +
				"&pageQualifier=BIZX_LOGIN" +
				"&ST=1612210716882" +
				"&STC=1612210716408" +
				"&ETC=1612210718284" +
				"&MEM=1617" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=9" +
				"&UCPU=0" +
				"&CPU=0" +
				"&FRE=0" +
				"&FWR=0" +
				"&CCON=0" +
				"&CSUP=0" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=22" +
				"&cssNum=7" +
				"&renderTime=1036" +
				"&RED=1" +
				"&TTB=170" +
				"&RSR=500" +
				"&DIA=1215";
		String requestContent0049 = 
				"OPTR_INFO=6b5762bf-68c2-4a06-bc29-869c21509324!1612210717432!1612210717502!0" +
				"&OPTR_INFO=1c3ac245-1522-4ae9-942d-9cb324f7c928!1612210717520!1612210717572!0" +
				"&OPTR_INFO=aa5460c8-64ca-11eb-84bd-6149e6cf885e!0!1612210717621!1" +
				"&OPTR_INFO=642612c5-30b2-4027-aa2e-7fe02494ff23!1612210717625!1612210717670!0" +
				"&OPTR_INFO=ed10d201-6ea2-4b3a-8125-512b22a0fe2b!1612210717672!1612210717710!0" +
				"&OPTR_INFO=455462d6-e692-4e5e-bd28-e0dc26fd1e2c!1612210717711!1612210717756!0" +
				"&OPTR_INFO=b637521d-82d2-4864-8625-a33d2dca3124!1612210717757!1612210717798!0" +
				"&OPTR_INFO=6eca6211-8f32-492d-9423-0d9c2bcd5527!1612210717811!1612210717851!0" +
				"&OPTR_INFO=775f72c6-eac2-483f-882b-16972332c527!1612210717855!1612210717918!0" +
				"&OPTR_INFO=0f1b3246-e0c2-4ec9-ae24-283b2c2a5b25!1612210717918!1612210717995!0" +
				"&OPTR_INFO=8ac90290-8112-48e0-ab23-9d7a21c27d2f!1612210717995!1612210718051!0" +
				"&OPTR_INFO=f5ec723a-5832-41d6-a822-b5b22ebb9b2b!1612210718062!1612210718102!0" +
				"&OPTR_INFO=025f920e-a1c2-4873-9022-ac9a2d8c752b!1612210718117!1612210718167!0";
		String requestHeader0049 = "POST " + requestFile0049 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0049.length() + "\r\n" + 		// Content-Length: 988
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: efLt0OmhkPmJmNWKf5aE0gsc2MifiqyTkrVRh9u9iZWDlvjh3Tf3_h8Ynam7h4FAsaWQfHJHtcGrX3tBOY45n4Vqa5dBW7yMRp3Dl0Nj6k-8HFg79y2KEHlxHDEjFlsTFEsv4K\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0049, requestHost0049, requestPort0049, requestHeader0049, requestContent0049.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0049 = null;		// support garbage collector to reduce memory
		requestContent0049 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [49] <- Index 49
		if(replayMode)
		{
			long proxyDataRecordId =1612210718294L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [50] <- WEB ADMIN Index 50 ---
		String requestProt0050 = "https";
		String requestHost0050 = "performancemanager4.successfactors.com";
		int    requestPort0050 = 443;
		String requestFile0050 = "/ui/sapui5/main_1.78.6/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		String requestHeader0050 = "GET " + requestFile0050 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0050, requestHost0050, requestPort0050, requestHeader0050, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0050 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [50] <- Index 50
		if(replayMode)
		{
			long proxyDataRecordId =1612210718304L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [51] <- WEB ADMIN Index 51 ---
		String requestProt0051 = "https";
		String requestHost0051 = "performancemanager4.successfactors.com";
		int    requestPort0051 = 443;
		String requestFile0051 = "/perfLogServlet" +
				"?callId=5225057076-X" +
				"&moduleId=LOGIN" +
				"&pageId=LOGIN" +
				"&pageQualifier=BIZX_LOGIN" +
				"&ST=1612210716408" +
				"&ET=1612210718385" +
				"&RED=1" +
				"&TTB=170" +
				"&RSR=500" +
				"&DIA=1215" +
				"&DCP=1977";
		String requestHeader0051 = "GET " + requestFile0051 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: yk-zCDTMHlIq9E6BBD29_TEsDjYbAwoh1RzMyvIl5h9NxCXw8WgRLUA-2zr78j6i5BXyCz-nEyMO2BQi3CbojBb5zQvr1wfG-wzDzxiXq89-wfXmtO1jt6ztvdOLn7eMm7eKnK\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain; charset=UTF-8\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965-X\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0051, requestHost0051, requestPort0051, requestHeader0051, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0051 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [51] <- Index 51
		if(replayMode)
		{
			long proxyDataRecordId =1612210718400L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #1_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #2: CompanyID
		// # ------------------



		// --- HTTP REQUEST: Test [53] <- WEB ADMIN Index 53 ---
		String requestProt0053 = "https";
		String requestHost0053 = "performancemanager4.successfactors.com";
		int    requestPort0053 = 443;
		String requestFile0053 = "/login" +
				"?_s.crb=" + C_AjaxSecretKey;		// recorded value = L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d
		requestFile0053 = Lib.replaceTextPattern(requestFile0053, "L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey, 0);		// search and replace request file fragment "L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d" with variable 'C_AjaxSecretKey' on all occurrences

		String requestContent0053 = 
				"company=Teck" +
				"&loginMethod=PWD" +
				"&referer=%2Fsf%2Fstart%2F" +
				"&bplte_userid=" +
				"&ajax=1";
		byte[] requestContentBinary0053 = requestContent0053.getBytes("UTF-8");
		String requestHeader0053 = "POST " + requestFile0053 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContentBinary0053.length + "\r\n" + 		// Content-Length: 74
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n" + 
				"Accept: */*\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965-1\r\n" + 
				"OPTR_CXT: 0100050001a0fbe26e-2eb2-404b-8f21-ef052e448a2329820909-1501-babe-face-0000000000033dc682a7-e512-44d1-8320-19522a1b3929HTTP    ;\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0053, requestHost0053, requestPort0053, requestHeader0053, requestContentBinary0053, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0053 = null;		// support garbage collector to reduce memory
		requestContent0053 = null;		// support garbage collector to reduce memory
		requestContentBinary0053 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [53] <- Index 53
		if(replayMode)
		{
			long proxyDataRecordId =1612210730222L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [54] <- WEB ADMIN Index 54 ---
		String requestProt0054 = "https";
		String requestHost0054 = "performancemanager4.successfactors.com";
		int    requestPort0054 = 443;
		String requestFile0054 = "/saml2/Login" +
				"?company=Teck" +
				"&RelayState=/login?_s.crb=L0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d";
		requestFile0054 = Lib.replaceTextPattern(requestFile0054, "L0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d", java.net.URLEncoder.encode(C_AjaxSecretKey), 0);		// search and replace request file fragment "L0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d" with variable 'C_AjaxSecretKey' on all occurrences

		String requestHeader0054 = "GET " + requestFile0054 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965-1\r\n" + 
				"OPTR_CXT: 0100050001a0fbe26e-2eb2-404b-8f21-ef052e448a2329820909-1501-babe-face-0000000000033dc682a7-e512-44d1-8320-19522a1b3929HTTP    ;\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0054, requestHost0054, requestPort0054, requestHeader0054, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0054 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1178
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "try {PerfLog.addOnloadHook();} catch(err) {}");		// Test [54] <- Index 54
		if(replayMode)
		{
			long proxyDataRecordId =1612210730331L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0054_1 = new BoundaryBasedExtractorItem( "SAMLRequest=" , "&RelayState",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0054_1);

		// setup var extractor for 'C_Signature'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0054_2 = new BoundaryBasedExtractorItem( "Signature=" , "\">",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0054_2);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest'
			C_SAMLRequest = boundaryBasedContentExtractorItem0054_1.getResultText();
			log("<<< C_SAMLRequest = " + C_SAMLRequest);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest!= null && C_SAMLRequest.trim().length() == 0)
			{
				C_SAMLRequest = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest = " + C_SAMLRequest);
			}
		}
		catch (Exception e) { C_SAMLRequest = null; log(e); }
		if (C_SAMLRequest == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Signature'
			C_Signature = boundaryBasedContentExtractorItem0054_2.getResultText();
			log("<<< C_Signature = " + C_Signature);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Signature!= null && C_Signature.trim().length() == 0)
			{
				C_Signature = "";
				log("runtime note: the extraction of a new value for the variable 'C_Signature' ends up with an empty string - a substitute value was set");
				log("<<< C_Signature = " + C_Signature);
			}
		}
		catch (Exception e) { C_Signature = null; log(e); }
		if (C_Signature == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Signature' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [55] <- WEB ADMIN Index 55 ---
		String requestProt0055 = "https";
		String requestHost0055 = "performancemanager4.successfactors.com";
		int    requestPort0055 = 443;
		String requestFile0055 = "/perfLogServlet" +
				"?callId=5225057076-1" +
				"&moduleId=LOGIN" +
				"&pageId=LOGIN" +
				"&pageQualifier=BIZX_LOGIN" +
				"&ST=1612210730215" +
				"&ET=1612210730545" +
				"&MEM=9434" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=29" +
				"&UCPU=20" +
				"&CPU=20" +
				"&FRE=0" +
				"&FWR=0" +
				"&CCON=0" +
				"&CSUP=2" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=2" +
				"&cssNum=0" +
				"&renderTime=229" +
				"&RED=1" +
				"&TTB=170" +
				"&RSR=500" +
				"&DIA=1215" +
				"&DCP=1977";
		String requestContent0055 = 
				"OPTR_INFO=a0fbe26e-2eb2-404b-8f21-ef052e448a23!0!1612210730443!1";
		String requestHeader0055 = "POST " + requestFile0055 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0055.length() + "\r\n" + 		// Content-Length: 64
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: S6a2fKkyXKV9TIxzLnFLJHRrNm3aRFJwHkYyFlIJGzEOD2dwUKC3c3diRpOdRrqjKUTMnr05doGgHK4nYnEX6mZ-dZVsTmISeJRVXYcACDxJYK_gHE23IFN5OEEiFFAT9-wzM4\r\n" + 
				"X-Ajax-Token: L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151836-2378965-1\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0055, requestHost0055, requestPort0055, requestHeader0055, requestContent0055.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("L0wuVu3WJcNiRYLiEIn7IsSi1Do%2bVvFheSjro64QqCw%3d", C_AjaxSecretKey);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0055 = null;		// support garbage collector to reduce memory
		requestContent0055 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [55] <- Index 55
		if(replayMode)
		{
			long proxyDataRecordId =1612210730554L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [56] <- WEB ADMIN Index 56 ---
		log();
		log("# title: SuccessFactors - Teck: Log On");
		String requestProt0056 = "https";
		String requestHost0056 = "teck.accounts.ondemand.com";
		int    requestPort0056 = 443;
		String requestFile0056 = "/saml2/idp/sso/" +
				"?SAMLRequest=" + C_SAMLRequest +		// recorded value = fZLBbtswEER%2Fhdg7JUpwa4WwHLg1ghpIUqNRe%2BiloFfLhqhEqlwqbv4%2BquwUyaG5krMzs49cXf7pO%2FFAkV3wNRSZAkEeQ%2Bv8zxq%2BNleygsv1ik3flYPejOnef6HfI3ES06BnfbqpYYxeB8OOtTc9sU6o7zY317rMlB5iSAFDB2I7DTpv0hx2n9LAOs8T4a%2FMIIbRJ86Cb6k3vs0w9Pnsnrt2yJlDDuIqRKS5RQ3WdEwgdtsaftgCVVUplEQHKxft0kpzIJRYGVrY5Xu7XBwmKfNIO8%2FJ%2BFRDqcpCqlKqoimVLir9TmWLi%2BI7iP257wfnTxzeWu5wErH%2B1DR7uf9814D49sxzEsCZnp7T40tsbxsbZop%2FScH6mdTxeMx4RCRmazCFyDOlZgK4yl%2Bm%2FHux28l2t92HzuGj2HRdOH6MZBLVkOJIM9DepP8XKbJiPnGttLNUj54HQmcdtZCvz7Gvv8b6CQ%3D%3D
				"&RelayState=%2Flogin%3F_s.crb%3DL0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d" +
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=" + C_Signature;		// recorded value = G1IIsheCmaENZ%2BLrVmxcfleREbWNF9abDFPz5%2FDV6%2FvDB7wCRTJX%2Fo9Ov0iHAtgVhLZxk%2BLAi%2BtOsQjhpu8p1bDJXbU79EoO%2FWDBMtY9XMiJ44iXxGkgPU0616SBqFwaD%2BNJHbJveEY%2F3%2BlbuIEi5mjzH25u%2FohYDiXOKIv2swE%3D
		requestFile0056 = Lib.replaceTextPattern(requestFile0056, "L0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d", java.net.URLEncoder.encode(C_AjaxSecretKey), 0);		// search and replace request file fragment "L0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d" with variable 'C_AjaxSecretKey' on all occurrences
		requestFile0056 = Lib.replaceTextPattern(requestFile0056, "fZLBbtswEER%2Fhdg7JUpwa4WwHLg1ghpIUqNRe%2BiloFfLhqhEqlwqbv4%2BquwUyaG5krMzs49cXf7pO%2FFAkV3wNRSZAkEeQ%2Bv8zxq%2BNleygsv1ik3flYPejOnef6HfI3ES06BnfbqpYYxeB8OOtTc9sU6o7zY317rMlB5iSAFDB2I7DTpv0hx2n9LAOs8T4a%2FMIIbRJ86Cb6k3vs0w9Pnsnrt2yJlDDuIqRKS5RQ3WdEwgdtsaftgCVVUplEQHKxft0kpzIJRYGVrY5Xu7XBwmKfNIO8%2FJ%2BFRDqcpCqlKqoimVLir9TmWLi%2BI7iP257wfnTxzeWu5wErH%2B1DR7uf9814D49sxzEsCZnp7T40tsbxsbZop%2FScH6mdTxeMx4RCRmazCFyDOlZgK4yl%2Bm%2FHux28l2t92HzuGj2HRdOH6MZBLVkOJIM9DepP8XKbJiPnGttLNUj54HQmcdtZCvz7Gvv8b6CQ%3D%3D", C_SAMLRequest, 0);		// search and replace request file fragment "fZLBbtswEER%2Fhdg7JUpwa4WwHLg1ghpIUqNRe%2BiloFfLhqhEqlwqbv4%2BquwUyaG5krMzs49cXf7pO%2FFAkV3wNRSZAkEeQ%2Bv8zxq%2BNleygsv1ik3flYPejOnef6HfI3ES06BnfbqpYYxeB8OOtTc9sU6o7zY317rMlB5iSAFDB2I7DTpv0hx2n9LAOs8T4a%2FMIIbRJ86Cb6k3vs0w9Pnsnrt2yJlDDuIqRKS5RQ3WdEwgdtsaftgCVVUplEQHKxft0kpzIJRYGVrY5Xu7XBwmKfNIO8%2FJ%2BFRDqcpCqlKqoimVLir9TmWLi%2BI7iP257wfnTxzeWu5wErH%2B1DR7uf9814D49sxzEsCZnp7T40tsbxsbZop%2FScH6mdTxeMx4RCRmazCFyDOlZgK4yl%2Bm%2FHux28l2t92HzuGj2HRdOH6MZBLVkOJIM9DepP8XKbJiPnGttLNUj54HQmcdtZCvz7Gvv8b6CQ%3D%3D" with variable 'C_SAMLRequest' on all occurrences
		requestFile0056 = Lib.replaceTextPattern(requestFile0056, "G1IIsheCmaENZ%2BLrVmxcfleREbWNF9abDFPz5%2FDV6%2FvDB7wCRTJX%2Fo9Ov0iHAtgVhLZxk%2BLAi%2BtOsQjhpu8p1bDJXbU79EoO%2FWDBMtY9XMiJ44iXxGkgPU0616SBqFwaD%2BNJHbJveEY%2F3%2BlbuIEi5mjzH25u%2FohYDiXOKIv2swE%3D", C_Signature, 0);		// search and replace request file fragment "G1IIsheCmaENZ%2BLrVmxcfleREbWNF9abDFPz5%2FDV6%2FvDB7wCRTJX%2Fo9Ov0iHAtgVhLZxk%2BLAi%2BtOsQjhpu8p1bDJXbU79EoO%2FWDBMtY9XMiJ44iXxGkgPU0616SBqFwaD%2BNJHbJveEY%2F3%2BlbuIEi5mjzH25u%2FohYDiXOKIv2swE%3D" with variable 'C_Signature' on all occurrences

		String requestHeader0056 = "GET " + requestFile0056 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0056, requestHost0056, requestPort0056, requestHeader0056, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0056 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3427
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "E-Mail or User Name");		// Test [56] <- Index 56
		if(replayMode)
		{
			long proxyDataRecordId =1612210731445L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SpID'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0056_1 = new BoundaryBasedExtractorItem( "'Login' data-spid='" , "' data-spname",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0056_1);

		// setup var extractor for 'C_CSRFToken1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0056_2 = new BoundaryBasedExtractorItem( "csrf-token\" content=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0056_2);

		// setup var extractor for 'C_XsrfProtection'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0056_3 = new BoundaryBasedExtractorItem( "\"xsrfProtection\" value=\"" , "\" >",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0056_3);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SpID'
			C_SpID = boundaryBasedContentExtractorItem0056_1.getResultText();
			log("<<< C_SpID = " + C_SpID);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SpID!= null && C_SpID.trim().length() == 0)
			{
				C_SpID = "";
				log("runtime note: the extraction of a new value for the variable 'C_SpID' ends up with an empty string - a substitute value was set");
				log("<<< C_SpID = " + C_SpID);
			}
		}
		catch (Exception e) { C_SpID = null; log(e); }
		if (C_SpID == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SpID' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_CSRFToken1'
			C_CSRFToken1 = boundaryBasedContentExtractorItem0056_2.getResultText();
			log("<<< C_CSRFToken1 = " + C_CSRFToken1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_CSRFToken1!= null && C_CSRFToken1.trim().length() == 0)
			{
				C_CSRFToken1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_CSRFToken1' ends up with an empty string - a substitute value was set");
				log("<<< C_CSRFToken1 = " + C_CSRFToken1);
			}
		}
		catch (Exception e) { C_CSRFToken1 = null; log(e); }
		if (C_CSRFToken1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_CSRFToken1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_XsrfProtection'
			C_XsrfProtection = boundaryBasedContentExtractorItem0056_3.getResultText();
			log("<<< C_XsrfProtection = " + C_XsrfProtection);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_XsrfProtection!= null && C_XsrfProtection.trim().length() == 0)
			{
				C_XsrfProtection = "";
				log("runtime note: the extraction of a new value for the variable 'C_XsrfProtection' ends up with an empty string - a substitute value was set");
				log("<<< C_XsrfProtection = " + C_XsrfProtection);
			}
		}
		catch (Exception e) { C_XsrfProtection = null; log(e); }
		if (C_XsrfProtection == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_XsrfProtection' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [57] <- WEB ADMIN Index 57 ---
		String requestProt0057 = "https";
		String requestHost0057 = "teck.accounts.ondemand.com";
		int    requestPort0057 = 443;
		String requestFile0057 = "/universalui/assets/ids-7f95baa671871b6a0aae8f925a11defd85b56678bc98351daaf9ffc52a47b2d2.css";
		String requestHeader0057 = "GET " + requestFile0057 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0057, requestHost0057, requestPort0057, requestHeader0057, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("MO+/ve+/ve+/vRvvv73vv73vv71R77+9zJDvv70eZO+/vXsfHndhADs9yZDvv73vv71KfO+/ve+/vToxNjEyMjEwNzMxNjA1", C_XsrfProtection);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0057 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 20714
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [57] <- Index 57
		if(replayMode)
		{
			long proxyDataRecordId =1612210731640L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [58] <- WEB ADMIN Index 58 ---
		String requestProt0058 = "https";
		String requestHost0058 = "teck.accounts.ondemand.com";
		int    requestPort0058 = 443;
		String requestFile0058 = "/universalui/assets/login-76164bba98bcef23fd84be65f08c9b1b914fcac88bfaad45a3f71f63d8365ffb.js";
		String requestHeader0058 = "GET " + requestFile0058 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0058, requestHost0058, requestPort0058, requestHeader0058, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("MO+/ve+/ve+/vRvvv73vv73vv71R77+9zJDvv70eZO+/vXsfHndhADs9yZDvv73vv71KfO+/ve+/vToxNjEyMjEwNzMxNjA1", C_XsrfProtection);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0058 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 405
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [58] <- Index 58
		if(replayMode)
		{
			long proxyDataRecordId =1612210732005L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [59] <- WEB ADMIN Index 59 ---
		String requestProt0059 = "https";
		String requestHost0059 = "teck.accounts.ondemand.com";
		int    requestPort0059 = 443;
		String requestFile0059 = "/universalui/assets/application-6d6b6e04a18900f64323d6b651921ef42030f64a652f113d3f5bd134cfbece49.js";
		String requestHeader0059 = "GET " + requestFile0059 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0059, requestHost0059, requestPort0059, requestHeader0059, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("MO+/ve+/ve+/vRvvv73vv73vv71R77+9zJDvv70eZO+/vXsfHndhADs9yZDvv73vv71KfO+/ve+/vToxNjEyMjEwNzMxNjA1", C_XsrfProtection);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0059 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 64002
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [59] <- Index 59
		if(replayMode)
		{
			long proxyDataRecordId =1612210732107L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [60] <- WEB ADMIN Index 60 ---
		String requestProt0060 = "https";
		String requestHost0060 = "teck.accounts.ondemand.com";
		int    requestPort0060 = 443;
		String requestFile0060 = "/universalui/assets/sap-ias-logo-powered-by-1371dbe016cf3ff1e9f04af5c4a34c065e40bb7a37792210788899d3309170fc.svg";
		String requestHeader0060 = "GET " + requestFile0060 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0060, requestHost0060, requestPort0060, requestHeader0060, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("MO+/ve+/ve+/vRvvv73vv73vv71R77+9zJDvv70eZO+/vXsfHndhADs9yZDvv73vv71KfO+/ve+/vToxNjEyMjEwNzMxNjA1", C_XsrfProtection);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0060 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/SVG+XML", header text fragment = [verification disabled], recorded content size = 3264
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/SVG+XML", null, null);		// Test [60] <- Index 60
		if(replayMode)
		{
			long proxyDataRecordId =1612210732111L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #3: Username
		// # -----------------



		// --- HTTP REQUEST: Test [62] <- WEB ADMIN Index 62 ---
		log();
		log("# title: SuccessFactors - Teck: Log On");
		String requestProt0062 = "https";
		String requestHost0062 = "teck.accounts.ondemand.com";
		int    requestPort0062 = 443;
		String requestFile0062 = "/saml2/idp/sso/" +
				"?SAMLRequest=" + C_SAMLRequest +		// recorded value = fZLBbtswEER%2Fhdg7JUpwa4WwHLg1ghpIUqNRe%2BiloFfLhqhEqlwqbv4%2BquwUyaG5krMzs49cXf7pO%2FFAkV3wNRSZAkEeQ%2Bv8zxq%2BNleygsv1ik3flYPejOnef6HfI3ES06BnfbqpYYxeB8OOtTc9sU6o7zY317rMlB5iSAFDB2I7DTpv0hx2n9LAOs8T4a%2FMIIbRJ86Cb6k3vs0w9Pnsnrt2yJlDDuIqRKS5RQ3WdEwgdtsaftgCVVUplEQHKxft0kpzIJRYGVrY5Xu7XBwmKfNIO8%2FJ%2BFRDqcpCqlKqoimVLir9TmWLi%2BI7iP257wfnTxzeWu5wErH%2B1DR7uf9814D49sxzEsCZnp7T40tsbxsbZop%2FScH6mdTxeMx4RCRmazCFyDOlZgK4yl%2Bm%2FHux28l2t92HzuGj2HRdOH6MZBLVkOJIM9DepP8XKbJiPnGttLNUj54HQmcdtZCvz7Gvv8b6CQ%3D%3D
				"&RelayState=%2Flogin%3F_s.crb%3DL0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d" +
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=" + C_Signature;		// recorded value = G1IIsheCmaENZ%2BLrVmxcfleREbWNF9abDFPz5%2FDV6%2FvDB7wCRTJX%2Fo9Ov0iHAtgVhLZxk%2BLAi%2BtOsQjhpu8p1bDJXbU79EoO%2FWDBMtY9XMiJ44iXxGkgPU0616SBqFwaD%2BNJHbJveEY%2F3%2BlbuIEi5mjzH25u%2FohYDiXOKIv2swE%3D
		requestFile0062 = Lib.replaceTextPattern(requestFile0062, "L0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d", java.net.URLEncoder.encode(C_AjaxSecretKey), 0);		// search and replace request file fragment "L0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d" with variable 'C_AjaxSecretKey' on all occurrences
		requestFile0062 = Lib.replaceTextPattern(requestFile0062, "fZLBbtswEER%2Fhdg7JUpwa4WwHLg1ghpIUqNRe%2BiloFfLhqhEqlwqbv4%2BquwUyaG5krMzs49cXf7pO%2FFAkV3wNRSZAkEeQ%2Bv8zxq%2BNleygsv1ik3flYPejOnef6HfI3ES06BnfbqpYYxeB8OOtTc9sU6o7zY317rMlB5iSAFDB2I7DTpv0hx2n9LAOs8T4a%2FMIIbRJ86Cb6k3vs0w9Pnsnrt2yJlDDuIqRKS5RQ3WdEwgdtsaftgCVVUplEQHKxft0kpzIJRYGVrY5Xu7XBwmKfNIO8%2FJ%2BFRDqcpCqlKqoimVLir9TmWLi%2BI7iP257wfnTxzeWu5wErH%2B1DR7uf9814D49sxzEsCZnp7T40tsbxsbZop%2FScH6mdTxeMx4RCRmazCFyDOlZgK4yl%2Bm%2FHux28l2t92HzuGj2HRdOH6MZBLVkOJIM9DepP8XKbJiPnGttLNUj54HQmcdtZCvz7Gvv8b6CQ%3D%3D", C_SAMLRequest, 0);		// search and replace request file fragment "fZLBbtswEER%2Fhdg7JUpwa4WwHLg1ghpIUqNRe%2BiloFfLhqhEqlwqbv4%2BquwUyaG5krMzs49cXf7pO%2FFAkV3wNRSZAkEeQ%2Bv8zxq%2BNleygsv1ik3flYPejOnef6HfI3ES06BnfbqpYYxeB8OOtTc9sU6o7zY317rMlB5iSAFDB2I7DTpv0hx2n9LAOs8T4a%2FMIIbRJ86Cb6k3vs0w9Pnsnrt2yJlDDuIqRKS5RQ3WdEwgdtsaftgCVVUplEQHKxft0kpzIJRYGVrY5Xu7XBwmKfNIO8%2FJ%2BFRDqcpCqlKqoimVLir9TmWLi%2BI7iP257wfnTxzeWu5wErH%2B1DR7uf9814D49sxzEsCZnp7T40tsbxsbZop%2FScH6mdTxeMx4RCRmazCFyDOlZgK4yl%2Bm%2FHux28l2t92HzuGj2HRdOH6MZBLVkOJIM9DepP8XKbJiPnGttLNUj54HQmcdtZCvz7Gvv8b6CQ%3D%3D" with variable 'C_SAMLRequest' on all occurrences
		requestFile0062 = Lib.replaceTextPattern(requestFile0062, "G1IIsheCmaENZ%2BLrVmxcfleREbWNF9abDFPz5%2FDV6%2FvDB7wCRTJX%2Fo9Ov0iHAtgVhLZxk%2BLAi%2BtOsQjhpu8p1bDJXbU79EoO%2FWDBMtY9XMiJ44iXxGkgPU0616SBqFwaD%2BNJHbJveEY%2F3%2BlbuIEi5mjzH25u%2FohYDiXOKIv2swE%3D", C_Signature, 0);		// search and replace request file fragment "G1IIsheCmaENZ%2BLrVmxcfleREbWNF9abDFPz5%2FDV6%2FvDB7wCRTJX%2Fo9Ov0iHAtgVhLZxk%2BLAi%2BtOsQjhpu8p1bDJXbU79EoO%2FWDBMtY9XMiJ44iXxGkgPU0616SBqFwaD%2BNJHbJveEY%2F3%2BlbuIEi5mjzH25u%2FohYDiXOKIv2swE%3D" with variable 'C_Signature' on all occurrences

		String requestContent0062 = 
				"utf8=%E2%9C%93" +
				"&authenticity_token=" + java.net.URLEncoder.encode(C_CSRFToken1) +		// recorded value = VlMG0%2BHk7Mx08YjG84Q0hyNzLOS7n5cJNI4iopRjxDQZ6wxKfbGrYFxsQOp3u3b%2BQK8sRaomfEscxeiaVIabWA%3D%3D
				"&xsrfProtection=" + java.net.URLEncoder.encode(C_XsrfProtection) +		// recorded value = MO%2B%2Fve%2B%2Fve%2B%2FvRvvv73vv73vv71R77%2B9zJDvv70eZO%2B%2FvXsfHndhADs9yZDvv73vv71KfO%2B%2Fve%2B%2FvToxNjEyMjEwNzMxNjA1
				"&method=GET" +
				"&idpSSOEndpoint=https%3A%2F%2Fteck.accounts.ondemand.com%2Fsaml2%2Fidp%2Fsso%2F" +
				"&SAMLRequest=" + C_SAMLRequest +		// recorded value = fZLBbtswEER%2Fhdg7JUpwa4WwHLg1ghpIUqNRe%2BiloFfLhqhEqlwqbv4%2BquwUyaG5krMzs49cXf7pO%2FFAkV3wNRSZAkEeQ%2Bv8zxq%2BNleygsv1ik3flYPejOnef6HfI3ES06BnfbqpYYxeB8OOtTc9sU6o7zY317rMlB5iSAFDB2I7DTpv0hx2n9LAOs8T4a%2FMIIbRJ86Cb6k3vs0w9Pnsnrt2yJlDDuIqRKS5RQ3WdEwgdtsaftgCVVUplEQHKxft0kpzIJRYGVrY5Xu7XBwmKfNIO8%2FJ%2BFRDqcpCqlKqoimVLir9TmWLi%2BI7iP257wfnTxzeWu5wErH%2B1DR7uf9814D49sxzEsCZnp7T40tsbxsbZop%2FScH6mdTxeMx4RCRmazCFyDOlZgK4yl%2Bm%2FHux28l2t92HzuGj2HRdOH6MZBLVkOJIM9DepP8XKbJiPnGttLNUj54HQmcdtZCvz7Gvv8b6CQ%3D%3D
				"&RelayState=%2Flogin%3F_s.crb%3DL0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d" +
				"&Signature=" + C_Signature +		// recorded value = G1IIsheCmaENZ%2BLrVmxcfleREbWNF9abDFPz5%2FDV6%2FvDB7wCRTJX%2Fo9Ov0iHAtgVhLZxk%2BLAi%2BtOsQjhpu8p1bDJXbU79EoO%2FWDBMtY9XMiJ44iXxGkgPU0616SBqFwaD%2BNJHbJveEY%2F3%2BlbuIEi5mjzH25u%2FohYDiXOKIv2swE%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&targetUrl=" +
				"&sourceUrl=" +
				"&org=" +
				"&spId=" + C_SpID +		// recorded value = 5f2d6e8977f0162cf3470508
				"&spName=https%3A%2F%2Fwww.successfactors.com%2FTeck" +
				"&mobileSSOToken=" +
				"&tfaToken=" +
				"&css=" +
				"&j_username=balash.akbari%40teck.com";
		byte[][] searchPattern0062_0 = new byte[1][];
		searchPattern0062_0[0] = Base64Decoder.decodeToBytes("VmxNRzAlMkJIazdNeDA4WWpHODRRMGh5TnpMT1M3bjVjSk5JNGlvcFJqeERRWjZ3eEtmYkdyWUZ4c1FPcDN1M2IlMkJRSzhzUmFvbWZFc2N4ZWlhVklhYldBJTNEJTNE");
		byte[] binarySearchPattern0062_0   = Lib.mergeByteArrays(searchPattern0062_0);		// note: the search pattern value is base 64 encoded. decoded value = VlMG0%2BHk7Mx08YjG84Q0hyNzLOS7n5cJNI4iopRjxDQZ6wxKfbGrYFxsQOp3u3b%2BQK8sRaomfEscxeiaVIabWA%3D%3D
		requestContent0062 = new String(Lib.binaryReplace(requestContent0062.getBytes(), binarySearchPattern0062_0, java.net.URLEncoder.encode(C_CSRFToken1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0062_1 = new byte[1][];
		searchPattern0062_1[0] = Base64Decoder.decodeToBytes("TU8lMkIlMkZ2ZSUyQiUyRnZlJTJCJTJGdlJ2dnY3M3Z2NzN2djcxUjc3JTJCOXpKRHZ2NzBlWk8lMkIlMkZ2WHNmSG5kaEFEczl5WkR2djczdnY3MUtmTyUyQiUyRnZlJTJCJTJGdlRveE5qRXlNakV3TnpNeE5qQTE=");
		byte[] binarySearchPattern0062_1   = Lib.mergeByteArrays(searchPattern0062_1);		// note: the search pattern value is base 64 encoded. decoded value = MO%2B%2Fve%2B%2Fve%2B%2FvRvvv73vv73vv71R77%2B9zJDvv70eZO%2B%2FvXsfHndhADs9yZDvv73vv71KfO%2B%2Fve%2B%2FvToxNjEyMjEwNzMxNjA1
		requestContent0062 = new String(Lib.binaryReplace(requestContent0062.getBytes(), binarySearchPattern0062_1, java.net.URLEncoder.encode(C_XsrfProtection).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0062_2 = new byte[1][];
		searchPattern0062_2[0] = Base64Decoder.decodeToBytes("TDB3dVZ1M1dKY05pUllMaUVJbjdJc1NpMURvJTI1MmJWdkZoZVNqcm82NFFxQ3clMjUzZA==");
		byte[] binarySearchPattern0062_2   = Lib.mergeByteArrays(searchPattern0062_2);		// note: the search pattern value is base 64 encoded. decoded value = L0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d
		requestContent0062 = new String(Lib.binaryReplace(requestContent0062.getBytes(), binarySearchPattern0062_2, java.net.URLEncoder.encode(C_AjaxSecretKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0062 = Lib.replaceTextPattern(requestContent0062, "5f2d6e8977f0162cf3470508", C_SpID, 0);		// search and replace content fragment "5f2d6e8977f0162cf3470508" with variable 'C_SpID' on all occurrences
		requestContent0062 = Lib.replaceTextPattern(requestContent0062, "fZLBbtswEER%2Fhdg7JUpwa4WwHLg1ghpIUqNRe%2BiloFfLhqhEqlwqbv4%2BquwUyaG5krMzs49cXf7pO%2FFAkV3wNRSZAkEeQ%2Bv8zxq%2BNleygsv1ik3flYPejOnef6HfI3ES06BnfbqpYYxeB8OOtTc9sU6o7zY317rMlB5iSAFDB2I7DTpv0hx2n9LAOs8T4a%2FMIIbRJ86Cb6k3vs0w9Pnsnrt2yJlDDuIqRKS5RQ3WdEwgdtsaftgCVVUplEQHKxft0kpzIJRYGVrY5Xu7XBwmKfNIO8%2FJ%2BFRDqcpCqlKqoimVLir9TmWLi%2BI7iP257wfnTxzeWu5wErH%2B1DR7uf9814D49sxzEsCZnp7T40tsbxsbZop%2FScH6mdTxeMx4RCRmazCFyDOlZgK4yl%2Bm%2FHux28l2t92HzuGj2HRdOH6MZBLVkOJIM9DepP8XKbJiPnGttLNUj54HQmcdtZCvz7Gvv8b6CQ%3D%3D", C_SAMLRequest, 0);		// search and replace content fragment "fZLBbtswEER%2Fhdg7JUpwa4WwHLg1ghpIUqNRe%2BiloFfLhqhEqlwqbv4%2BquwUyaG5krMzs49cXf7pO%2FFAkV3wNRSZAkEeQ%2Bv8zxq%2BNleygsv1ik3flYPejOnef6HfI3ES06BnfbqpYYxeB8OOtTc9sU6o7zY317rMlB5iSAFDB2I7DTpv0hx2n9LAOs8T4a%2FMIIbRJ86Cb6k3vs0w9Pnsnrt2yJlDDuIqRKS5RQ3WdEwgdtsaftgCVVUplEQHKxft0kpzIJRYGVrY5Xu7XBwmKfNIO8%2FJ%2BFRDqcpCqlKqoimVLir9TmWLi%2BI7iP257wfnTxzeWu5wErH%2B1DR7uf9814D49sxzEsCZnp7T40tsbxsbZop%2FScH6mdTxeMx4RCRmazCFyDOlZgK4yl%2Bm%2FHux28l2t92HzuGj2HRdOH6MZBLVkOJIM9DepP8XKbJiPnGttLNUj54HQmcdtZCvz7Gvv8b6CQ%3D%3D" with variable 'C_SAMLRequest' on all occurrences
		requestContent0062 = Lib.replaceTextPattern(requestContent0062, "G1IIsheCmaENZ%2BLrVmxcfleREbWNF9abDFPz5%2FDV6%2FvDB7wCRTJX%2Fo9Ov0iHAtgVhLZxk%2BLAi%2BtOsQjhpu8p1bDJXbU79EoO%2FWDBMtY9XMiJ44iXxGkgPU0616SBqFwaD%2BNJHbJveEY%2F3%2BlbuIEi5mjzH25u%2FohYDiXOKIv2swE%3D", C_Signature, 0);		// search and replace content fragment "G1IIsheCmaENZ%2BLrVmxcfleREbWNF9abDFPz5%2FDV6%2FvDB7wCRTJX%2Fo9Ov0iHAtgVhLZxk%2BLAi%2BtOsQjhpu8p1bDJXbU79EoO%2FWDBMtY9XMiJ44iXxGkgPU0616SBqFwaD%2BNJHbJveEY%2F3%2BlbuIEi5mjzH25u%2FohYDiXOKIv2swE%3D" with variable 'C_Signature' on all occurrences

		String requestHeader0062 = "POST " + requestFile0062 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0062.length() + "\r\n" + 		// Content-Length: 1409
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://teck.accounts.ondemand.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0062, requestHost0062, requestPort0062, requestHeader0062, requestContent0062.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("MO+/ve+/ve+/vRvvv73vv73vv71R77+9zJDvv70eZO+/vXsfHndhADs9yZDvv73vv71KfO+/ve+/vToxNjEyMjEwNzMxNjA1", C_XsrfProtection);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0062 = null;		// support garbage collector to reduce memory
		requestContent0062 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3727
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors - Teck: Log On");		// Test [62] <- Index 62
		if(replayMode)
		{
			long proxyDataRecordId =1612210757661L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_AuthenticityToken2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0062_1 = new BoundaryBasedExtractorItem( "<meta name=\"csrf-token\" content=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0062_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_AuthenticityToken2'
			C_AuthenticityToken2 = boundaryBasedContentExtractorItem0062_1.getResultText();
			log("<<< C_AuthenticityToken2 = " + C_AuthenticityToken2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_AuthenticityToken2!= null && C_AuthenticityToken2.trim().length() == 0)
			{
				C_AuthenticityToken2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_AuthenticityToken2' ends up with an empty string - a substitute value was set");
				log("<<< C_AuthenticityToken2 = " + C_AuthenticityToken2);
			}
		}
		catch (Exception e) { C_AuthenticityToken2 = null; log(e); }
		if (C_AuthenticityToken2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_AuthenticityToken2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #4: Login
		// # --------------



		// --- HTTP REQUEST: Test [64] <- WEB ADMIN Index 64 ---
		String requestProt0064 = "https";
		String requestHost0064 = "teck.accounts.ondemand.com";
		int    requestPort0064 = 443;
		String requestFile0064 = "/saml2/idp/sso/" +
				"?SAMLRequest=" + C_SAMLRequest +		// recorded value = fZLBbtswEER%2Fhdg7JUpwa4WwHLg1ghpIUqNRe%2BiloFfLhqhEqlwqbv4%2BquwUyaG5krMzs49cXf7pO%2FFAkV3wNRSZAkEeQ%2Bv8zxq%2BNleygsv1ik3flYPejOnef6HfI3ES06BnfbqpYYxeB8OOtTc9sU6o7zY317rMlB5iSAFDB2I7DTpv0hx2n9LAOs8T4a%2FMIIbRJ86Cb6k3vs0w9Pnsnrt2yJlDDuIqRKS5RQ3WdEwgdtsaftgCVVUplEQHKxft0kpzIJRYGVrY5Xu7XBwmKfNIO8%2FJ%2BFRDqcpCqlKqoimVLir9TmWLi%2BI7iP257wfnTxzeWu5wErH%2B1DR7uf9814D49sxzEsCZnp7T40tsbxsbZop%2FScH6mdTxeMx4RCRmazCFyDOlZgK4yl%2Bm%2FHux28l2t92HzuGj2HRdOH6MZBLVkOJIM9DepP8XKbJiPnGttLNUj54HQmcdtZCvz7Gvv8b6CQ%3D%3D
				"&RelayState=%2Flogin%3F_s.crb%3DL0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d" +
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=" + C_Signature;		// recorded value = G1IIsheCmaENZ%2BLrVmxcfleREbWNF9abDFPz5%2FDV6%2FvDB7wCRTJX%2Fo9Ov0iHAtgVhLZxk%2BLAi%2BtOsQjhpu8p1bDJXbU79EoO%2FWDBMtY9XMiJ44iXxGkgPU0616SBqFwaD%2BNJHbJveEY%2F3%2BlbuIEi5mjzH25u%2FohYDiXOKIv2swE%3D
		requestFile0064 = Lib.replaceTextPattern(requestFile0064, "L0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d", java.net.URLEncoder.encode(C_AjaxSecretKey), 0);		// search and replace request file fragment "L0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d" with variable 'C_AjaxSecretKey' on all occurrences
		requestFile0064 = Lib.replaceTextPattern(requestFile0064, "fZLBbtswEER%2Fhdg7JUpwa4WwHLg1ghpIUqNRe%2BiloFfLhqhEqlwqbv4%2BquwUyaG5krMzs49cXf7pO%2FFAkV3wNRSZAkEeQ%2Bv8zxq%2BNleygsv1ik3flYPejOnef6HfI3ES06BnfbqpYYxeB8OOtTc9sU6o7zY317rMlB5iSAFDB2I7DTpv0hx2n9LAOs8T4a%2FMIIbRJ86Cb6k3vs0w9Pnsnrt2yJlDDuIqRKS5RQ3WdEwgdtsaftgCVVUplEQHKxft0kpzIJRYGVrY5Xu7XBwmKfNIO8%2FJ%2BFRDqcpCqlKqoimVLir9TmWLi%2BI7iP257wfnTxzeWu5wErH%2B1DR7uf9814D49sxzEsCZnp7T40tsbxsbZop%2FScH6mdTxeMx4RCRmazCFyDOlZgK4yl%2Bm%2FHux28l2t92HzuGj2HRdOH6MZBLVkOJIM9DepP8XKbJiPnGttLNUj54HQmcdtZCvz7Gvv8b6CQ%3D%3D", C_SAMLRequest, 0);		// search and replace request file fragment "fZLBbtswEER%2Fhdg7JUpwa4WwHLg1ghpIUqNRe%2BiloFfLhqhEqlwqbv4%2BquwUyaG5krMzs49cXf7pO%2FFAkV3wNRSZAkEeQ%2Bv8zxq%2BNleygsv1ik3flYPejOnef6HfI3ES06BnfbqpYYxeB8OOtTc9sU6o7zY317rMlB5iSAFDB2I7DTpv0hx2n9LAOs8T4a%2FMIIbRJ86Cb6k3vs0w9Pnsnrt2yJlDDuIqRKS5RQ3WdEwgdtsaftgCVVUplEQHKxft0kpzIJRYGVrY5Xu7XBwmKfNIO8%2FJ%2BFRDqcpCqlKqoimVLir9TmWLi%2BI7iP257wfnTxzeWu5wErH%2B1DR7uf9814D49sxzEsCZnp7T40tsbxsbZop%2FScH6mdTxeMx4RCRmazCFyDOlZgK4yl%2Bm%2FHux28l2t92HzuGj2HRdOH6MZBLVkOJIM9DepP8XKbJiPnGttLNUj54HQmcdtZCvz7Gvv8b6CQ%3D%3D" with variable 'C_SAMLRequest' on all occurrences
		requestFile0064 = Lib.replaceTextPattern(requestFile0064, "G1IIsheCmaENZ%2BLrVmxcfleREbWNF9abDFPz5%2FDV6%2FvDB7wCRTJX%2Fo9Ov0iHAtgVhLZxk%2BLAi%2BtOsQjhpu8p1bDJXbU79EoO%2FWDBMtY9XMiJ44iXxGkgPU0616SBqFwaD%2BNJHbJveEY%2F3%2BlbuIEi5mjzH25u%2FohYDiXOKIv2swE%3D", C_Signature, 0);		// search and replace request file fragment "G1IIsheCmaENZ%2BLrVmxcfleREbWNF9abDFPz5%2FDV6%2FvDB7wCRTJX%2Fo9Ov0iHAtgVhLZxk%2BLAi%2BtOsQjhpu8p1bDJXbU79EoO%2FWDBMtY9XMiJ44iXxGkgPU0616SBqFwaD%2BNJHbJveEY%2F3%2BlbuIEi5mjzH25u%2FohYDiXOKIv2swE%3D" with variable 'C_Signature' on all occurrences

		String requestContent0064 = 
				"utf8=%E2%9C%93" +
				"&authenticity_token=" + java.net.URLEncoder.encode(C_AuthenticityToken2) +		// recorded value = EUT6bhGoqScCMSuqQ3mmKKo8Oh5zO2ec%2B%2Bv9%2FleoTKu6mcfSEwD5aZVjP8FwOP%2BtGpY02ueJAHQl%2FsW2YXJfEg%3D%3D
				"&xsrfProtection=" + java.net.URLEncoder.encode(C_XsrfProtection) +		// recorded value = MO%2B%2Fve%2B%2Fve%2B%2FvRvvv73vv73vv71R77%2B9zJDvv70eZO%2B%2FvXsfHndhADs9yZDvv73vv71KfO%2B%2Fve%2B%2FvToxNjEyMjEwNzMxNjA1
				"&method=GET" +
				"&idpSSOEndpoint=https%3A%2F%2Fteck.accounts.ondemand.com%2Fsaml2%2Fidp%2Fsso%2F" +
				"&SAMLRequest=" + C_SAMLRequest +		// recorded value = fZLBbtswEER%2Fhdg7JUpwa4WwHLg1ghpIUqNRe%2BiloFfLhqhEqlwqbv4%2BquwUyaG5krMzs49cXf7pO%2FFAkV3wNRSZAkEeQ%2Bv8zxq%2BNleygsv1ik3flYPejOnef6HfI3ES06BnfbqpYYxeB8OOtTc9sU6o7zY317rMlB5iSAFDB2I7DTpv0hx2n9LAOs8T4a%2FMIIbRJ86Cb6k3vs0w9Pnsnrt2yJlDDuIqRKS5RQ3WdEwgdtsaftgCVVUplEQHKxft0kpzIJRYGVrY5Xu7XBwmKfNIO8%2FJ%2BFRDqcpCqlKqoimVLir9TmWLi%2BI7iP257wfnTxzeWu5wErH%2B1DR7uf9814D49sxzEsCZnp7T40tsbxsbZop%2FScH6mdTxeMx4RCRmazCFyDOlZgK4yl%2Bm%2FHux28l2t92HzuGj2HRdOH6MZBLVkOJIM9DepP8XKbJiPnGttLNUj54HQmcdtZCvz7Gvv8b6CQ%3D%3D
				"&RelayState=%2Flogin%3F_s.crb%3DL0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d" +
				"&Signature=" + C_Signature +		// recorded value = G1IIsheCmaENZ%2BLrVmxcfleREbWNF9abDFPz5%2FDV6%2FvDB7wCRTJX%2Fo9Ov0iHAtgVhLZxk%2BLAi%2BtOsQjhpu8p1bDJXbU79EoO%2FWDBMtY9XMiJ44iXxGkgPU0616SBqFwaD%2BNJHbJveEY%2F3%2BlbuIEi5mjzH25u%2FohYDiXOKIv2swE%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&targetUrl=" +
				"&sourceUrl=" +
				"&org=" +
				"&spId=" + C_SpID +		// recorded value = 5f2d6e8977f0162cf3470508
				"&spName=https%3A%2F%2Fwww.successfactors.com%2FTeck" +
				"&mobileSSOToken=" +
				"&tfaToken=" +
				"&css=" +
				"&j_username=balash.akbari%40teck.com" +
				"&j_password=PerfAutoTest01%21" +
				"&rememberme=on";
		byte[][] searchPattern0064_0 = new byte[1][];
		searchPattern0064_0[0] = Base64Decoder.decodeToBytes("TU8lMkIlMkZ2ZSUyQiUyRnZlJTJCJTJGdlJ2dnY3M3Z2NzN2djcxUjc3JTJCOXpKRHZ2NzBlWk8lMkIlMkZ2WHNmSG5kaEFEczl5WkR2djczdnY3MUtmTyUyQiUyRnZlJTJCJTJGdlRveE5qRXlNakV3TnpNeE5qQTE=");
		byte[] binarySearchPattern0064_0   = Lib.mergeByteArrays(searchPattern0064_0);		// note: the search pattern value is base 64 encoded. decoded value = MO%2B%2Fve%2B%2Fve%2B%2FvRvvv73vv73vv71R77%2B9zJDvv70eZO%2B%2FvXsfHndhADs9yZDvv73vv71KfO%2B%2Fve%2B%2FvToxNjEyMjEwNzMxNjA1
		requestContent0064 = new String(Lib.binaryReplace(requestContent0064.getBytes(), binarySearchPattern0064_0, java.net.URLEncoder.encode(C_XsrfProtection).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0064_1 = new byte[1][];
		searchPattern0064_1[0] = Base64Decoder.decodeToBytes("TDB3dVZ1M1dKY05pUllMaUVJbjdJc1NpMURvJTI1MmJWdkZoZVNqcm82NFFxQ3clMjUzZA==");
		byte[] binarySearchPattern0064_1   = Lib.mergeByteArrays(searchPattern0064_1);		// note: the search pattern value is base 64 encoded. decoded value = L0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d
		requestContent0064 = new String(Lib.binaryReplace(requestContent0064.getBytes(), binarySearchPattern0064_1, java.net.URLEncoder.encode(C_AjaxSecretKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0064_2 = new byte[1][];
		searchPattern0064_2[0] = Base64Decoder.decodeToBytes("RVVUNmJoR29xU2NDTVN1cVEzbW1LS284T2g1ek8yZWMlMkIlMkJ2OSUyRmxlb1RLdTZtY2ZTRXdENWFaVmpQOEZ3T1AlMkJ0R3BZMDJ1ZUpBSFFsJTJGc1cyWVhKZkVnJTNEJTNE");
		byte[] binarySearchPattern0064_2   = Lib.mergeByteArrays(searchPattern0064_2);		// note: the search pattern value is base 64 encoded. decoded value = EUT6bhGoqScCMSuqQ3mmKKo8Oh5zO2ec%2B%2Bv9%2FleoTKu6mcfSEwD5aZVjP8FwOP%2BtGpY02ueJAHQl%2FsW2YXJfEg%3D%3D
		requestContent0064 = new String(Lib.binaryReplace(requestContent0064.getBytes(), binarySearchPattern0064_2, java.net.URLEncoder.encode(C_AuthenticityToken2).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0064 = Lib.replaceTextPattern(requestContent0064, "5f2d6e8977f0162cf3470508", C_SpID, 0);		// search and replace content fragment "5f2d6e8977f0162cf3470508" with variable 'C_SpID' on all occurrences
		requestContent0064 = Lib.replaceTextPattern(requestContent0064, "fZLBbtswEER%2Fhdg7JUpwa4WwHLg1ghpIUqNRe%2BiloFfLhqhEqlwqbv4%2BquwUyaG5krMzs49cXf7pO%2FFAkV3wNRSZAkEeQ%2Bv8zxq%2BNleygsv1ik3flYPejOnef6HfI3ES06BnfbqpYYxeB8OOtTc9sU6o7zY317rMlB5iSAFDB2I7DTpv0hx2n9LAOs8T4a%2FMIIbRJ86Cb6k3vs0w9Pnsnrt2yJlDDuIqRKS5RQ3WdEwgdtsaftgCVVUplEQHKxft0kpzIJRYGVrY5Xu7XBwmKfNIO8%2FJ%2BFRDqcpCqlKqoimVLir9TmWLi%2BI7iP257wfnTxzeWu5wErH%2B1DR7uf9814D49sxzEsCZnp7T40tsbxsbZop%2FScH6mdTxeMx4RCRmazCFyDOlZgK4yl%2Bm%2FHux28l2t92HzuGj2HRdOH6MZBLVkOJIM9DepP8XKbJiPnGttLNUj54HQmcdtZCvz7Gvv8b6CQ%3D%3D", C_SAMLRequest, 0);		// search and replace content fragment "fZLBbtswEER%2Fhdg7JUpwa4WwHLg1ghpIUqNRe%2BiloFfLhqhEqlwqbv4%2BquwUyaG5krMzs49cXf7pO%2FFAkV3wNRSZAkEeQ%2Bv8zxq%2BNleygsv1ik3flYPejOnef6HfI3ES06BnfbqpYYxeB8OOtTc9sU6o7zY317rMlB5iSAFDB2I7DTpv0hx2n9LAOs8T4a%2FMIIbRJ86Cb6k3vs0w9Pnsnrt2yJlDDuIqRKS5RQ3WdEwgdtsaftgCVVUplEQHKxft0kpzIJRYGVrY5Xu7XBwmKfNIO8%2FJ%2BFRDqcpCqlKqoimVLir9TmWLi%2BI7iP257wfnTxzeWu5wErH%2B1DR7uf9814D49sxzEsCZnp7T40tsbxsbZop%2FScH6mdTxeMx4RCRmazCFyDOlZgK4yl%2Bm%2FHux28l2t92HzuGj2HRdOH6MZBLVkOJIM9DepP8XKbJiPnGttLNUj54HQmcdtZCvz7Gvv8b6CQ%3D%3D" with variable 'C_SAMLRequest' on all occurrences
		requestContent0064 = Lib.replaceTextPattern(requestContent0064, "G1IIsheCmaENZ%2BLrVmxcfleREbWNF9abDFPz5%2FDV6%2FvDB7wCRTJX%2Fo9Ov0iHAtgVhLZxk%2BLAi%2BtOsQjhpu8p1bDJXbU79EoO%2FWDBMtY9XMiJ44iXxGkgPU0616SBqFwaD%2BNJHbJveEY%2F3%2BlbuIEi5mjzH25u%2FohYDiXOKIv2swE%3D", C_Signature, 0);		// search and replace content fragment "G1IIsheCmaENZ%2BLrVmxcfleREbWNF9abDFPz5%2FDV6%2FvDB7wCRTJX%2Fo9Ov0iHAtgVhLZxk%2BLAi%2BtOsQjhpu8p1bDJXbU79EoO%2FWDBMtY9XMiJ44iXxGkgPU0616SBqFwaD%2BNJHbJveEY%2F3%2BlbuIEi5mjzH25u%2FohYDiXOKIv2swE%3D" with variable 'C_Signature' on all occurrences

		String requestHeader0064 = "POST " + requestFile0064 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0064.length() + "\r\n" + 		// Content-Length: 1458
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://teck.accounts.ondemand.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0064, requestHost0064, requestPort0064, requestHeader0064, requestContent0064.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("MO+/ve+/ve+/vRvvv73vv73vv71R77+9zJDvv70eZO+/vXsfHndhADs9yZDvv73vv71KfO+/ve+/vToxNjEyMjEwNzMxNjA1", C_XsrfProtection);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0064 = null;		// support garbage collector to reduce memory
		requestContent0064 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [64] <- Index 64
		if(replayMode)
		{
			long proxyDataRecordId =1612210776005L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [65] <- WEB ADMIN Index 65 ---
		log();
		log("# title: SAML Response from Identity Authentication");
		String requestProt0065 = "https";
		String requestHost0065 = "teck.accounts.ondemand.com";
		int    requestPort0065 = 443;
		String requestFile0065 = "/saml2/idp/sso" +
				"?redirect=true";
		String requestHeader0065 = "GET " + requestFile0065 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0065, requestHost0065, requestPort0065, requestHeader0065, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0065 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 5811
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "You have now been authenticated. Your request has been forwarded to the target system for processing.");		// Test [65] <- Index 65
		if(replayMode)
		{
			long proxyDataRecordId =1612210776768L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_AuthenticityToken3'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0065_1 = new BoundaryBasedExtractorItem( "authenticity_token\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0065_1);

		// setup var extractor for 'C_SAMLResponse2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0065_2 = new BoundaryBasedExtractorItem( "id=\"SAMLResponse\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0065_2);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_AuthenticityToken3'
			C_AuthenticityToken3 = boundaryBasedContentExtractorItem0065_1.getResultText();
			log("<<< C_AuthenticityToken3 = " + C_AuthenticityToken3);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_AuthenticityToken3!= null && C_AuthenticityToken3.trim().length() == 0)
			{
				C_AuthenticityToken3 = "";
				log("runtime note: the extraction of a new value for the variable 'C_AuthenticityToken3' ends up with an empty string - a substitute value was set");
				log("<<< C_AuthenticityToken3 = " + C_AuthenticityToken3);
			}
		}
		catch (Exception e) { C_AuthenticityToken3 = null; log(e); }
		if (C_AuthenticityToken3 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_AuthenticityToken3' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_SAMLResponse2'
			C_SAMLResponse2 = boundaryBasedContentExtractorItem0065_2.getResultText();
			log("<<< C_SAMLResponse2 = " + C_SAMLResponse2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLResponse2!= null && C_SAMLResponse2.trim().length() == 0)
			{
				C_SAMLResponse2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLResponse2' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLResponse2 = " + C_SAMLResponse2);
			}
		}
		catch (Exception e) { C_SAMLResponse2 = null; log(e); }
		if (C_SAMLResponse2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLResponse2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [66] <- WEB ADMIN Index 66 ---
		String requestProt0066 = "https";
		String requestHost0066 = "performancemanager4.successfactors.com";
		int    requestPort0066 = 443;
		String requestFile0066 = "/saml2/SAMLAssertionConsumer" +
				"?company=Teck";
		String requestContent0066 = 
				"utf8=%E2%9C%93" +
				"&authenticity_token=" + java.net.URLEncoder.encode(C_AuthenticityToken3) +		// recorded value = F6nd1DxOMnQqipszx7JM5O%2BogkiNBbvsJ80IbKfHCCJcAfi14izAUGNvx8%2FCCtUjnE%2B4xzH6RGazhIy4ApoSeg%3D%3D
				"&SAMLResponse=" + java.net.URLEncoder.encode(C_SAMLResponse2) +		// recorded value = PFJlc3BvbnNlIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOm5zMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgeG1sbnM6bnMzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIiB4bWxuczpuczQ9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jIyIgRGVzdGluYXRpb249Imh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2FtbDIvU0FNTEFzc2VydGlvbkNvbnN1bWVyP2NvbXBhbnk9VGVjayIgSUQ9IlJFUy1TU08tY2E0MzkyNTQtNTg4Ny00MjBiLTgxMGQtNWE2NDk0OWU2MTcxIiBJblJlc3BvbnNlVG89Il9mMWMwODgwYy1lZWJmLTRkN2YtYWJlYy1jOGFlNGY3NmY3NGIiIElzc3VlSW5zdGFudD0iMjAyMS0wMi0wMVQyMDoxOTozNi43MjBaIiBWZXJzaW9uPSIyLjAiPjxuczI6SXNzdWVyPmh0dHBzOi8vdGVjay5hY2NvdW50cy5vbmRlbWFuZC5jb208L25zMjpJc3N1ZXI%2BPFN0YXR1cz48U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8%2BPC9TdGF0dXM%2BPEFzc2VydGlvbiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgeG1sbnM6bnMyPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIiB4bWxuczpuczM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jIyIgSUQ9IkEtYmNmMzA4YTMtMTQxZi00ZjNiLTg0NTctMjVlZDI2ZDE1NDNmIiBJc3N1ZUluc3RhbnQ9IjIwMjEtMDItMDFUMjA6MTk6MzYuNzIwWiIgVmVyc2lvbj0iMi4wIj48SXNzdWVyPmh0dHBzOi8vdGVjay5hY2NvdW50cy5vbmRlbWFuZC5jb208L0lzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI0EtYmNmMzA4YTMtMTQxZi00ZjNiLTg0NTctMjVlZDI2ZDE1NDNmIj48ZHM6VHJhbnNmb3Jtcz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8%2BPC9kczpUcmFuc2Zvcm1zPjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPjxkczpEaWdlc3RWYWx1ZT5sMDRkWUV4d202M0RHVHJlaGkvVVVaekVqU3M9PC9kczpEaWdlc3RWYWx1ZT48L2RzOlJlZmVyZW5jZT48L2RzOlNpZ25lZEluZm8%2BPGRzOlNpZ25hdHVyZVZhbHVlPnBzZGlwUkFXMWN0NGk2cG5hL3VsZDBiWHV1dnRmNEZHaG9Td3R2TURtc3ZFY2ZYMXp3QVd2UFJCZE1vMDBLeWZPSjY1NXRiYjBFMWJlL1J5YmpqbWtCanhmL1RvVVZxT2lNQXZxY3RaNkthNXVxUXRmd2puZ1RkMG1NNkpFb0xjTDZkcFZ2TXJKUldmYkVNR21wd09JL2FyV2JOMkYwQ29qeHFON2x0ajIycUN5alhwQXNBbkc4R3U5M0szb2hERGxwRm9xNUV3Y0tHQnJEWWVPRjNYMXNsOExCVlR0bG9yMlZHUWpOTm1NRmdMUHB3VTEyKzBTZlNjS2Z1VG9TVkVZTEQySEh3bEZhcVlMTGRQYTl1REZhNUg3OUdVREJScEdtSS9waEk2K3k2UExpcEJkVHZiaGt4akNFYlJmWUovcUdHdDNMRzEwYzBTMjhaRkdBamdPdz09PC9kczpTaWduYXR1cmVWYWx1ZT48ZHM6S2V5SW5mbz48ZHM6WDUwOURhdGE%2BPGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlEQ0RDQ0FmQ2dBd0lCQVFJR0FXMjFNa2hHTUEwR0NTcUdTSWIzRFFFQkN3VUFNRU14Q3pBSkJnTlZCQVlUQWtSRk1ROHdEUVlEVlFRS0V3WlRRVkF0VTBVeEl6QWhCZ05WQkFNVEduUmxZMnN1WVdOamIzVnVkSE11YjI1a1pXMWhibVF1WTI5dE1CNFhEVEU1TVRBeE1ERXdNak0xTkZvWERUSTVNVEF4TURFd01qTTFORm93UXpFTE1Ba0dBMVVFQmhNQ1JFVXhEekFOQmdOVkJBb1RCbE5CVUMxVFJURWpNQ0VHQTFVRUF4TWFkR1ZqYXk1aFkyTnZkVzUwY3k1dmJtUmxiV0Z1WkM1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDcVNXdk4va2xpV2tSMmJHNVhDZHFQbGJPOVhZclRxV1l1My9CVmtONE9pM0NzWUhsdEVMTTVuNzJHMWFwK2RyREhWMHBPMzlkaWY2M2o1VWZuVVRXNEErVWxrOHdSaXZndk1VRXJVNHc2NGZmU2tlaTFSR1RkWUk5ZDkxMndxOERCOGVlMmM0K3ZGR28yQUd5aFFpQk5ST1JGdzRoNHJZOWZQaWhHMHg3eUJoSlNhT2UveEkrbFdONFlnb1BEWXlwUSt6TEZTOUVjcEVwLzFvNytXRCtXblBRYU8zMFhGUVVSbFVXdXluak02eW5GT1VFdVhKZVJHV0k1aHlsaC9jcWJVV2JBVnc3VjNqYWJLMVpsUlJjNktDZjF1U3JVdlJDRExnamR1VjBNWXhFOC8ySTAvdXh6eFBMUXE5eHhaYTNUbE1sbUF2bVc0R2k3T0JvWUl5aW5BZ01CQUFHQ0FnQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNoQVAxcnJDbXpiUTRPR2ZTNzVXaHNkSC9hYi9RZjhtYThoV2x3UEpFZHJDMkJLK1JMUk5wOVY2bHM1dngwUExyRi9VbElmRENUNWJYOGRMS3N0U294RG1rMERiOU11bDdRV2YvcWlpaTYrQ1U4NWIwUW5CU1dqUnhVTmZycUx2OGtsYS9oTHM2Y3FqWTlmbXhzZllFTll3LzFMNmsza0Fkb3ZYcUloL2Y2eGhlWkZtWmFNRGEwN0dsRytjdm9nODdlTUxXOXF3WHlCSGZvNWZYcXdhOElvU2JMRTNidVV3MWVqaHc1c2EzMzhwQ1UzeStvWGU1YXVsOSt1NUgvL0xGT3J3a1NZOFdPZll1V1NMaHhiSGNLUDlNVEdEOWZmcThyOW1PSzhaUG14RU9JYVQyNEVqMzA5aHZ1Q00zcUhRRHpld0dmWUp1UTZMQWxuQVFIenFUbTwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE%2BPGRzOktleVZhbHVlPjxkczpSU0FLZXlWYWx1ZT48ZHM6TW9kdWx1cz5xa2xyemY1SllscEVkbXh1VnduYWo1V3p2VjJLMDZsbUx0L3dWWkRlRG90d3JHQjViUkN6T1orOWh0V3FmbmF3eDFkS1R0L1hZbit0NCtWSDUxRTF1QVBsSlpQTUVZcjRMekZCSzFPTU91SDMwcEhvdFVSazNXQ1BYZmRkc0t2QXdmSG50bk9QcnhScU5nQnNvVUlnVFVUa1JjT0llSzJQWHo0b1J0TWU4Z1lTVW1qbnY4U1BwVmplR0lLRHcyTXFVUHN5eFV2UkhLUktmOWFPL2xnL2xwejBHanQ5RnhVRkVaVkZyc3A0ek9zcHhUbEJMbHlYa1JsaU9ZY3BZZjNLbTFGbXdGY08xZDQybXl0V1pVVVhPaWduOWJrcTFMMFFneTRJM2JsZERHTVJQUDlpTlA3c2M4VHkwS3ZjY1dXdDA1VEpaZ0w1bHVCb3V6Z2FHQ01vcHc9PTwvZHM6TW9kdWx1cz48ZHM6RXhwb25lbnQ%2BQVFBQjwvZHM6RXhwb25lbnQ%2BPC9kczpSU0FLZXlWYWx1ZT48L2RzOktleVZhbHVlPjwvZHM6S2V5SW5mbz48L2RzOlNpZ25hdHVyZT48U3ViamVjdD48TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPlRlc3RBdXRvbWF0aW9uPC9OYW1lSUQ%2BPFN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJfZjFjMDg4MGMtZWViZi00ZDdmLWFiZWMtYzhhZTRmNzZmNzRiIiBOb3RPbk9yQWZ0ZXI9IjIwMjEtMDItMDFUMjA6Mjk6MzYuNzIwWiIgUmVjaXBpZW50PSJodHRwczovL3BlcmZvcm1hbmNlbWFuYWdlcjQuc3VjY2Vzc2ZhY3RvcnMuY29tL3NhbWwyL1NBTUxBc3NlcnRpb25Db25zdW1lcj9jb21wYW55PVRlY2siLz48L1N1YmplY3RDb25maXJtYXRpb24%2BPC9TdWJqZWN0PjxDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAyMS0wMi0wMVQyMDoxNDozNi43MjBaIiBOb3RPbk9yQWZ0ZXI9IjIwMjEtMDItMDFUMjA6Mjk6MzYuNzIwWiI%2BPEF1ZGllbmNlUmVzdHJpY3Rpb24%2BPEF1ZGllbmNlPmh0dHBzOi8vd3d3LnN1Y2Nlc3NmYWN0b3JzLmNvbS9UZWNrPC9BdWRpZW5jZT48L0F1ZGllbmNlUmVzdHJpY3Rpb24%2BPC9Db25kaXRpb25zPjxBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMjEtMDItMDFUMjA6MTk6MzYuNzIwWiIgU2Vzc2lvbkluZGV4PSJTLVNQLTVmMmQ5NDhmLThiYzgtNGEyNS05ZTM5LTY0MTFmZjg5NjRkNSIgU2Vzc2lvbk5vdE9uT3JBZnRlcj0iMjAyMS0wMi0wMlQwODoxOTozNi43MjBaIj48QXV0aG5Db250ZXh0PjxBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZFByb3RlY3RlZFRyYW5zcG9ydDwvQXV0aG5Db250ZXh0Q2xhc3NSZWY%2BPC9BdXRobkNvbnRleHQ%2BPC9BdXRoblN0YXRlbWVudD48QXR0cmlidXRlU3RhdGVtZW50PjxBdHRyaWJ1dGUgTmFtZT0idXNlcl91dWlkIj48QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj40NzQ1NjJmOC1kMmEwLTQ3MjQtYWI0ZC1kNmRhOWM1NzY0MmM8L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgTmFtZT0ibWFpbCI%2BPEF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BYmFsYXNoLmFrYmFyaUB0ZWNrLmNvbTwvQXR0cmlidXRlVmFsdWU%2BPC9BdHRyaWJ1dGU%2BPEF0dHJpYnV0ZSBOYW1lPSJsYXN0X25hbWUiPjxBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPkF1dG9tYXRpb248L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgTmFtZT0iZmlyc3RfbmFtZSI%2BPEF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BVGVzdDwvQXR0cmlidXRlVmFsdWU%2BPC9BdHRyaWJ1dGU%2BPC9BdHRyaWJ1dGVTdGF0ZW1lbnQ%2BPC9Bc3NlcnRpb24%2BPC9SZXNwb25zZT4%3D
				"&RelayState=%2Flogin%3F_s.crb%3DL0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d";
		byte[][] searchPattern0066_0 = new byte[1][];
		searchPattern0066_0[0] = Base64Decoder.decodeToBytes("TDB3dVZ1M1dKY05pUllMaUVJbjdJc1NpMURvJTI1MmJWdkZoZVNqcm82NFFxQ3clMjUzZA==");
		byte[] binarySearchPattern0066_0   = Lib.mergeByteArrays(searchPattern0066_0);		// note: the search pattern value is base 64 encoded. decoded value = L0wuVu3WJcNiRYLiEIn7IsSi1Do%252bVvFheSjro64QqCw%253d
		requestContent0066 = new String(Lib.binaryReplace(requestContent0066.getBytes(), binarySearchPattern0066_0, java.net.URLEncoder.encode(C_AjaxSecretKey).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0066_1 = new byte[1][];
		searchPattern0066_1[0] = Base64Decoder.decodeToBytes("RjZuZDFEeE9NblFxaXBzeng3Sk01TyUyQm9na2lOQmJ2c0o4MEliS2ZIQ0NKY0FmaTE0aXpBVUdOdng4JTJGQ0N0VWpuRSUyQjR4ekg2UkdhemhJeTRBcG9TZWclM0QlM0Q=");
		byte[] binarySearchPattern0066_1   = Lib.mergeByteArrays(searchPattern0066_1);		// note: the search pattern value is base 64 encoded. decoded value = F6nd1DxOMnQqipszx7JM5O%2BogkiNBbvsJ80IbKfHCCJcAfi14izAUGNvx8%2FCCtUjnE%2B4xzH6RGazhIy4ApoSeg%3D%3D
		requestContent0066 = new String(Lib.binaryReplace(requestContent0066.getBytes(), binarySearchPattern0066_1, java.net.URLEncoder.encode(C_AuthenticityToken3).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0066_2 = new byte[1][];
		searchPattern0066_2[0] = Base64Decoder.decodeToBytes("");
		byte[] binarySearchPattern0066_2   = Lib.mergeByteArrays(searchPattern0066_2);		// note: the search pattern value is base 64 encoded. decoded value = PFJlc3BvbnNlIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOm5zMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgeG1sbnM6bnMzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIiB4bWxuczpuczQ9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jIyIgRGVzdGluYXRpb249Imh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2FtbDIvU0FNTEFzc2VydGlvbkNvbnN1bWVyP2NvbXBhbnk9VGVjayIgSUQ9IlJFUy1TU08tY2E0MzkyNTQtNTg4Ny00MjBiLTgxMGQtNWE2NDk0OWU2MTcxIiBJblJlc3BvbnNlVG89Il9mMWMwODgwYy1lZWJmLTRkN2YtYWJlYy1jOGFlNGY3NmY3NGIiIElzc3VlSW5zdGFudD0iMjAyMS0wMi0wMVQyMDoxOTozNi43MjBaIiBWZXJzaW9uPSIyLjAiPjxuczI6SXNzdWVyPmh0dHBzOi8vdGVjay5hY2NvdW50cy5vbmRlbWFuZC5jb208L25zMjpJc3N1ZXI%2BPFN0YXR1cz48U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8%2BPC9TdGF0dXM%2BPEFzc2VydGlvbiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgeG1sbnM6bnMyPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIiB4bWxuczpuczM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jIyIgSUQ9IkEtYmNmMzA4YTMtMTQxZi00ZjNiLTg0NTctMjVlZDI2ZDE1NDNmIiBJc3N1ZUluc3RhbnQ9IjIwMjEtMDItMDFUMjA6MTk6MzYuNzIwWiIgVmVyc2lvbj0iMi4wIj48SXNzdWVyPmh0dHBzOi8vdGVjay5hY2NvdW50cy5vbmRlbWFuZC5jb208L0lzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI0EtYmNmMzA4YTMtMTQxZi00ZjNiLTg0NTctMjVlZDI2ZDE1NDNmIj48ZHM6VHJhbnNmb3Jtcz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8%2BPC9kczpUcmFuc2Zvcm1zPjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPjxkczpEaWdlc3RWYWx1ZT5sMDRkWUV4d202M0RHVHJlaGkvVVVaekVqU3M9PC9kczpEaWdlc3RWYWx1ZT48L2RzOlJlZmVyZW5jZT48L2RzOlNpZ25lZEluZm8%2BPGRzOlNpZ25hdHVyZVZhbHVlPnBzZGlwUkFXMWN0NGk2cG5hL3VsZDBiWHV1dnRmNEZHaG9Td3R2TURtc3ZFY2ZYMXp3QVd2UFJCZE1vMDBLeWZPSjY1NXRiYjBFMWJlL1J5YmpqbWtCanhmL1RvVVZxT2lNQXZxY3RaNkthNXVxUXRmd2puZ1RkMG1NNkpFb0xjTDZkcFZ2TXJKUldmYkVNR21wd09JL2FyV2JOMkYwQ29qeHFON2x0ajIycUN5alhwQXNBbkc4R3U5M0szb2hERGxwRm9xNUV3Y0tHQnJEWWVPRjNYMXNsOExCVlR0bG9yMlZHUWpOTm1NRmdMUHB3VTEyKzBTZlNjS2Z1VG9TVkVZTEQySEh3bEZhcVlMTGRQYTl1REZhNUg3OUdVREJScEdtSS9waEk2K3k2UExpcEJkVHZiaGt4akNFYlJmWUovcUdHdDNMRzEwYzBTMjhaRkdBamdPdz09PC9kczpTaWduYXR1cmVWYWx1ZT48ZHM6S2V5SW5mbz48ZHM6WDUwOURhdGE%2BPGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlEQ0RDQ0FmQ2dBd0lCQVFJR0FXMjFNa2hHTUEwR0NTcUdTSWIzRFFFQkN3VUFNRU14Q3pBSkJnTlZCQVlUQWtSRk1ROHdEUVlEVlFRS0V3WlRRVkF0VTBVeEl6QWhCZ05WQkFNVEduUmxZMnN1WVdOamIzVnVkSE11YjI1a1pXMWhibVF1WTI5dE1CNFhEVEU1TVRBeE1ERXdNak0xTkZvWERUSTVNVEF4TURFd01qTTFORm93UXpFTE1Ba0dBMVVFQmhNQ1JFVXhEekFOQmdOVkJBb1RCbE5CVUMxVFJURWpNQ0VHQTFVRUF4TWFkR1ZqYXk1aFkyTnZkVzUwY3k1dmJtUmxiV0Z1WkM1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDcVNXdk4va2xpV2tSMmJHNVhDZHFQbGJPOVhZclRxV1l1My9CVmtONE9pM0NzWUhsdEVMTTVuNzJHMWFwK2RyREhWMHBPMzlkaWY2M2o1VWZuVVRXNEErVWxrOHdSaXZndk1VRXJVNHc2NGZmU2tlaTFSR1RkWUk5ZDkxMndxOERCOGVlMmM0K3ZGR28yQUd5aFFpQk5ST1JGdzRoNHJZOWZQaWhHMHg3eUJoSlNhT2UveEkrbFdONFlnb1BEWXlwUSt6TEZTOUVjcEVwLzFvNytXRCtXblBRYU8zMFhGUVVSbFVXdXluak02eW5GT1VFdVhKZVJHV0k1aHlsaC9jcWJVV2JBVnc3VjNqYWJLMVpsUlJjNktDZjF1U3JVdlJDRExnamR1VjBNWXhFOC8ySTAvdXh6eFBMUXE5eHhaYTNUbE1sbUF2bVc0R2k3T0JvWUl5aW5BZ01CQUFHQ0FnQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNoQVAxcnJDbXpiUTRPR2ZTNzVXaHNkSC9hYi9RZjhtYThoV2x3UEpFZHJDMkJLK1JMUk5wOVY2bHM1dngwUExyRi9VbElmRENUNWJYOGRMS3N0U294RG1rMERiOU11bDdRV2YvcWlpaTYrQ1U4NWIwUW5CU1dqUnhVTmZycUx2OGtsYS9oTHM2Y3FqWTlmbXhzZllFTll3LzFMNmsza0Fkb3ZYcUloL2Y2eGhlWkZtWmFNRGEwN0dsRytjdm9nODdlTUxXOXF3WHlCSGZvNWZYcXdhOElvU2JMRTNidVV3MWVqaHc1c2EzMzhwQ1UzeStvWGU1YXVsOSt1NUgvL0xGT3J3a1NZOFdPZll1V1NMaHhiSGNLUDlNVEdEOWZmcThyOW1PSzhaUG14RU9JYVQyNEVqMzA5aHZ1Q00zcUhRRHpld0dmWUp1UTZMQWxuQVFIenFUbTwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE%2BPGRzOktleVZhbHVlPjxkczpSU0FLZXlWYWx1ZT48ZHM6TW9kdWx1cz5xa2xyemY1SllscEVkbXh1VnduYWo1V3p2VjJLMDZsbUx0L3dWWkRlRG90d3JHQjViUkN6T1orOWh0V3FmbmF3eDFkS1R0L1hZbit0NCtWSDUxRTF1QVBsSlpQTUVZcjRMekZCSzFPTU91SDMwcEhvdFVSazNXQ1BYZmRkc0t2QXdmSG50bk9QcnhScU5nQnNvVUlnVFVUa1JjT0llSzJQWHo0b1J0TWU4Z1lTVW1qbnY4U1BwVmplR0lLRHcyTXFVUHN5eFV2UkhLUktmOWFPL2xnL2xwejBHanQ5RnhVRkVaVkZyc3A0ek9zcHhUbEJMbHlYa1JsaU9ZY3BZZjNLbTFGbXdGY08xZDQybXl0V1pVVVhPaWduOWJrcTFMMFFneTRJM2JsZERHTVJQUDlpTlA3c2M4VHkwS3ZjY1dXdDA1VEpaZ0w1bHVCb3V6Z2FHQ01vcHc9PTwvZHM6TW9kdWx1cz48ZHM6RXhwb25lbnQ%2BQVFBQjwvZHM6RXhwb25lbnQ%2BPC9kczpSU0FLZXlWYWx1ZT48L2RzOktleVZhbHVlPjwvZHM6S2V5SW5mbz48L2RzOlNpZ25hdHVyZT48U3ViamVjdD48TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPlRlc3RBdXRvbWF0aW9uPC9OYW1lSUQ%2BPFN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJfZjFjMDg4MGMtZWViZi00ZDdmLWFiZWMtYzhhZTRmNzZmNzRiIiBOb3RPbk9yQWZ0ZXI9IjIwMjEtMDItMDFUMjA6Mjk6MzYuNzIwWiIgUmVjaXBpZW50PSJodHRwczovL3BlcmZvcm1hbmNlbWFuYWdlcjQuc3VjY2Vzc2ZhY3RvcnMuY29tL3NhbWwyL1NBTUxBc3NlcnRpb25Db25zdW1lcj9jb21wYW55PVRlY2siLz48L1N1YmplY3RDb25maXJtYXRpb24%2BPC9TdWJqZWN0PjxDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAyMS0wMi0wMVQyMDoxNDozNi43MjBaIiBOb3RPbk9yQWZ0ZXI9IjIwMjEtMDItMDFUMjA6Mjk6MzYuNzIwWiI%2BPEF1ZGllbmNlUmVzdHJpY3Rpb24%2BPEF1ZGllbmNlPmh0dHBzOi8vd3d3LnN1Y2Nlc3NmYWN0b3JzLmNvbS9UZWNrPC9BdWRpZW5jZT48L0F1ZGllbmNlUmVzdHJpY3Rpb24%2BPC9Db25kaXRpb25zPjxBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMjEtMDItMDFUMjA6MTk6MzYuNzIwWiIgU2Vzc2lvbkluZGV4PSJTLVNQLTVmMmQ5NDhmLThiYzgtNGEyNS05ZTM5LTY0MTFmZjg5NjRkNSIgU2Vzc2lvbk5vdE9uT3JBZnRlcj0iMjAyMS0wMi0wMlQwODoxOTozNi43MjBaIj48QXV0aG5Db250ZXh0PjxBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZFByb3RlY3RlZFRyYW5zcG9ydDwvQXV0aG5Db250ZXh0Q2xhc3NSZWY%2BPC9BdXRobkNvbnRleHQ%2BPC9BdXRoblN0YXRlbWVudD48QXR0cmlidXRlU3RhdGVtZW50PjxBdHRyaWJ1dGUgTmFtZT0idXNlcl91dWlkIj48QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj40NzQ1NjJmOC1kMmEwLTQ3MjQtYWI0ZC1kNmRhOWM1NzY0MmM8L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgTmFtZT0ibWFpbCI%2BPEF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BYmFsYXNoLmFrYmFyaUB0ZWNrLmNvbTwvQXR0cmlidXRlVmFsdWU%2BPC9BdHRyaWJ1dGU%2BPEF0dHJpYnV0ZSBOYW1lPSJsYXN0X25hbWUiPjxBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPkF1dG9tYXRpb248L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgTmFtZT0iZmlyc3RfbmFtZSI%2BPEF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BVGVzdDwvQXR0cmlidXRlVmFsdWU%2BPC9BdHRyaWJ1dGU%2BPC9BdHRyaWJ1dGVTdGF0ZW1lbnQ%2BPC9Bc3NlcnRpb24%2BPC9SZXNwb25zZT4%3D
		requestContent0066 = new String(Lib.binaryReplace(requestContent0066.getBytes(), binarySearchPattern0066_2, java.net.URLEncoder.encode(C_SAMLResponse2).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0066 = "POST " + requestFile0066 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0066.length() + "\r\n" + 		// Content-Length: 7428
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://teck.accounts.ondemand.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0066, requestHost0066, requestPort0066, requestHeader0066, requestContent0066.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0066 = null;		// support garbage collector to reduce memory
		requestContent0066 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [66] <- Index 66
		if(replayMode)
		{
			long proxyDataRecordId =1612210777158L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		htmlContentParser = new HtmlContentParser(testURL, this);
		try
		{
			// extract var 'vScrb'
			vScrb = testURL.getRedirectLocation().getParameter("_s.crb");		// recorded value = Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d
			log("<<< vScrb = " + vScrb);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && vScrb!= null && vScrb.trim().length() == 0)
			{
				vScrb = "";
				log("runtime note: the extraction of a new value for the variable 'vScrb' ends up with an empty string - a substitute value was set");
				log("<<< vScrb = " + vScrb);
			}
		}
		catch (Exception e) { vScrb = null; log(e); }
		if (vScrb == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'vScrb' from http redirection";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [67] <- WEB ADMIN Index 67 ---
		String requestProt0067 = "https";
		String requestHost0067 = "performancemanager4.successfactors.com";
		int    requestPort0067 = 443;
		String requestFile0067 = "/dpconsent" +
				"?_s.crb=" + vScrb;		// recorded value = Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d
		String requestHeader0067 = "GET " + requestFile0067 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0067, requestHost0067, requestPort0067, requestHeader0067, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0067 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [67] <- Index 67
		if(replayMode)
		{
			long proxyDataRecordId =1612210777665L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated
		
		// execute inline script "htmlconvdecode"
		inlineScriptContext = executeInlineScript_1614016884691(testURL, urlCallPassed, threadStep - 1, totalLoopCounter, innerLoopContext);
		if (inlineScriptContext.isScriptAbort())
		{
			// special case: url already executed but inline script aborted - set URL as failed and abort current loop
			log("*** INLINE SCRIPT \"" + inlineScriptContext.getScriptTitle() + "\" ABORTED / CURRENT LOOP ABORTED ***");
			log("Abort Message = " + inlineScriptContext.getScriptAbortMessage());
			testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			testURL.setStatusType(HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT);
			threadStep--;
			if (urlCallPassed)
				modPassed(performanceData, threadStep, -1);
			else
				modFailed(performanceData, threadStep, -1);
			performanceData.getPerformanceDataRecord(threadStep).modifyFailureActionType(HttpTestURL.FAILURE_ACTION_HANDLE_AS_ERROR);
			performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_ABORTED_BY_INLINE_SCRIPT, inlineScriptContext.getScriptAbortMessage(), testURL, this);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}






		// --- HTTP REQUEST: Test [68] <- WEB ADMIN Index 68 ---
		log();
		log("# title: SuccessFactors: Home");
		String requestProt0068 = "https";
		String requestHost0068 = "performancemanager4.successfactors.com";
		int    requestPort0068 = 443;
		String requestFile0068 = "/sf/start" +
				"?_s.crb=" + vScrb;		// recorded value = Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d
		String requestHeader0068 = "GET " + requestFile0068 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0068, requestHost0068, requestPort0068, requestHeader0068, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0068 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 29318
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors Business Execution Suite");		// Test [68] <- Index 68
		if(replayMode)
		{
			long proxyDataRecordId =1612210777805L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_EID2'
		ContentTokenExtractorItem contentTokenExtractorItem0068_1 = new ContentTokenExtractorItem("EID", "\t\n\r &(),={}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0068_1);

		contentTokenExtractor.extractTokens();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_BelizePlusLanding1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0068_1 = new BoundaryBasedExtractorItem( "belizePlusLanding!!" , "/.dcss",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0068_1);

		// setup var extractor for 'C_MODvalue'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0068_2 = new BoundaryBasedExtractorItem( "mod=" , "\" type=\"text/css",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0068_2);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_BelizePlusLanding1'
			C_BelizePlusLanding1 = boundaryBasedContentExtractorItem0068_1.getResultText();
			log("<<< C_BelizePlusLanding1 = " + C_BelizePlusLanding1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_BelizePlusLanding1!= null && C_BelizePlusLanding1.trim().length() == 0)
			{
				C_BelizePlusLanding1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_BelizePlusLanding1' ends up with an empty string - a substitute value was set");
				log("<<< C_BelizePlusLanding1 = " + C_BelizePlusLanding1);
			}
		}
		catch (Exception e) { C_BelizePlusLanding1 = null; log(e); }
		if (C_BelizePlusLanding1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_BelizePlusLanding1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_MODvalue'
			C_MODvalue = boundaryBasedContentExtractorItem0068_2.getResultText();
			log("<<< C_MODvalue = " + C_MODvalue);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_MODvalue!= null && C_MODvalue.trim().length() == 0)
			{
				C_MODvalue = "";
				log("runtime note: the extraction of a new value for the variable 'C_MODvalue' ends up with an empty string - a substitute value was set");
				log("<<< C_MODvalue = " + C_MODvalue);
			}
		}
		catch (Exception e) { C_MODvalue = null; log(e); }
		if (C_MODvalue == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_MODvalue' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_EID2'
			C_EID2 = contentTokenExtractorItem0068_1.getResultToken();
			log("<<< C_EID2 = " + C_EID2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_EID2!= null && C_EID2.trim().length() == 0)
			{
				C_EID2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_EID2' ends up with an empty string - a substitute value was set");
				log("<<< C_EID2 = " + C_EID2);
			}
		}
		catch (Exception e) { C_EID2 = null; log(e); }
		if (C_EID2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_EID2' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [69] <- WEB ADMIN Index 69 ---
		String requestProt0069 = "https";
		String requestHost0069 = "performancemanager4.successfactors.com";
		int    requestPort0069 = 443;
		String requestFile0069 = "/public/ui-dcss/Teck/_/3m!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!/.dcss;mod=7be3ac2d";
		requestFile0069 = Lib.replaceTextPattern(requestFile0069, "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1, 0);		// search and replace request file fragment "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!" with variable 'C_BelizePlusLanding1' on all occurrences
		requestFile0069 = Lib.replaceTextPattern(requestFile0069, "7be3ac2d", C_MODvalue, 0);		// search and replace request file fragment "7be3ac2d" with variable 'C_MODvalue' on all occurrences

		String requestHeader0069 = "GET " + requestFile0069 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0069, requestHost0069, requestPort0069, requestHeader0069, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0069 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 8973
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [69] <- Index 69
		if(replayMode)
		{
			long proxyDataRecordId =1612210780350L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [70] <- WEB ADMIN Index 70 ---
		String requestProt0070 = "https";
		String requestHost0070 = "performancemanager4.successfactors.com";
		int    requestPort0070 = 443;
		String requestFile0070 = "/ui/sapui5/main_1.78.6/sap/ui/thirdparty/jqueryui/jquery-ui-position.js";
		String requestHeader0070 = "GET " + requestFile0070 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0070, requestHost0070, requestPort0070, requestHeader0070, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0070 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2693
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [70] <- Index 70
		if(replayMode)
		{
			long proxyDataRecordId =1612210780353L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [71] <- WEB ADMIN Index 71 ---
		String requestProt0071 = "https";
		String requestHost0071 = "performancemanager4.successfactors.com";
		int    requestPort0071 = 443;
		String requestFile0071 = "/ui/topnav/img/belize_dark_bg_52da52583908a5afa7d86a9bc98e219d.png";
		String requestHeader0071 = "GET " + requestFile0071 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0071, requestHost0071, requestPort0071, requestHeader0071, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("7be3ac2d", C_MODvalue);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0071 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 32628
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [71] <- Index 71
		if(replayMode)
		{
			long proxyDataRecordId =1612210780485L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [72] <- WEB ADMIN Index 72 ---
		String requestProt0072 = "https";
		String requestHost0072 = "performancemanager4.successfactors.com";
		int    requestPort0072 = 443;
		String requestFile0072 = "/ui/homepage3/resources_9845F9D21661AFE5EFE157D7B537FA89/sap/ushell/library-preload.js";
		String requestHeader0072 = "GET " + requestFile0072 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0072, requestHost0072, requestPort0072, requestHeader0072, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0072 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 308290
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [72] <- Index 72
		if(replayMode)
		{
			long proxyDataRecordId =1612210780585L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [73] <- WEB ADMIN Index 73 ---
		String requestProt0073 = "https";
		String requestHost0073 = "performancemanager4.successfactors.com";
		int    requestPort0073 = 443;
		String requestFile0073 = "/ui/homepage3/resources_BB804D2AF6BEF70984AF2453CBEBF82B/sap/sf/homepage3/commons/library-preload.js";
		String requestHeader0073 = "GET " + requestFile0073 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0073, requestHost0073, requestPort0073, requestHeader0073, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0073 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5948
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [73] <- Index 73
		if(replayMode)
		{
			long proxyDataRecordId =1612210780586L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [74] <- WEB ADMIN Index 74 ---
		String requestProt0074 = "https";
		String requestHost0074 = "performancemanager4.successfactors.com";
		int    requestPort0074 = 443;
		String requestFile0074 = "/perfLogServlet" +
				"?callId=6173853616-0" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&ST=1612210777954" +
				"&STC=1612210777118" +
				"&ETC=1612210780691" +
				"&MEM=142799" +
				"&NRE=2500" +
				"&NWR=360" +
				"&SCPU=70" +
				"&SQLC=375" +
				"&SQLT=480" +
				"&SVT=2372" +
				"&UCPU=670" +
				"&CPU=740" +
				"&FRE=6" +
				"&FWR=0" +
				"&CCON=12" +
				"&CSUP=532" +
				"&CLOC=15" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=14" +
				"&cssNum=1" +
				"&renderTime=235" +
				"&RED=2" +
				"&TTB=2492" +
				"&RSR=3172" +
				"&DIA=3461";
		String requestContent0074 = 
				"OPTR_INFO=cebc24c7-64ca-11eb-84bd-6149e6cf885e!0!1612210780576!1";
		String requestHeader0074 = "POST " + requestFile0074 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0074.length() + "\r\n" + 		// Content-Length: 64
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: P5lZaq0OwemkZ4uFgbKMX4Gic3pMnq3XX2hnS27UVHtkOXV7holoQl7PSq_kHF6MFCxGOKtUMXk8CWlcKKhCKUw0Yn_-X0tFibNIcZNPXlQLVZpJSJhNHndoVmF0L_RRQYR5N4\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0074, requestHost0074, requestPort0074, requestHeader0074, requestContent0074.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0074 = null;		// support garbage collector to reduce memory
		requestContent0074 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [74] <- Index 74
		if(replayMode)
		{
			long proxyDataRecordId =1612210780700L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [75] <- WEB ADMIN Index 75 ---
		String requestProt0075 = "https";
		String requestHost0075 = "performancemanager4.successfactors.com";
		int    requestPort0075 = 443;
		String requestFile0075 = "/public/ui-dcss/Teck/_/3m!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css";
		requestFile0075 = Lib.replaceTextPattern(requestFile0075, "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1, 0);		// search and replace request file fragment "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!" with variable 'C_BelizePlusLanding1' on all occurrences

		String requestHeader0075 = "GET " + requestFile0075 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0075, requestHost0075, requestPort0075, requestHeader0075, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0075 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 14713
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [75] <- Index 75
		if(replayMode)
		{
			long proxyDataRecordId =1612210780731L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [76] <- WEB ADMIN Index 76 ---
		String requestProt0076 = "https";
		String requestHost0076 = "performancemanager4.successfactors.com";
		int    requestPort0076 = 443;
		String requestFile0076 = "/public/ui-dcss/Teck/_/3m!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library.css";
		requestFile0076 = Lib.replaceTextPattern(requestFile0076, "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1, 0);		// search and replace request file fragment "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!" with variable 'C_BelizePlusLanding1' on all occurrences

		String requestHeader0076 = "GET " + requestFile0076 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0076, requestHost0076, requestPort0076, requestHeader0076, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0076 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 95187
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [76] <- Index 76
		if(replayMode)
		{
			long proxyDataRecordId =1612210780740L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [77] <- WEB ADMIN Index 77 ---
		String requestProt0077 = "https";
		String requestHost0077 = "performancemanager4.successfactors.com";
		int    requestPort0077 = 443;
		String requestFile0077 = "/ui/homepage3/resources_9845F9D21661AFE5EFE157D7B537FA89/sap/ushell/themes/sap_belize/library.css";
		String requestHeader0077 = "GET " + requestFile0077 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0077, requestHost0077, requestPort0077, requestHeader0077, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0077 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 55724
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [77] <- Index 77
		if(replayMode)
		{
			long proxyDataRecordId =1612210780742L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [78] <- WEB ADMIN Index 78 ---
		String requestProt0078 = "https";
		String requestHost0078 = "performancemanager4.successfactors.com";
		int    requestPort0078 = 443;
		String requestFile0078 = "/ui/homepage3/resources_BB804D2AF6BEF70984AF2453CBEBF82B/sap/sf/homepage3/commons/themes/sap_belize/library.css";
		String requestHeader0078 = "GET " + requestFile0078 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0078, requestHost0078, requestPort0078, requestHeader0078, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0078 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2684
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [78] <- Index 78
		if(replayMode)
		{
			long proxyDataRecordId =1612210780743L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [79] <- WEB ADMIN Index 79 ---
		String requestProt0079 = "https";
		String requestHost0079 = "performancemanager4.successfactors.com";
		int    requestPort0079 = 443;
		String requestFile0079 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TRS";
		String requestHeader0079 = "GET " + requestFile0079 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0079, requestHost0079, requestPort0079, requestHeader0079, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0079 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [79] <- Index 79
		if(replayMode)
		{
			long proxyDataRecordId =1612210780769L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [80] <- WEB ADMIN Index 80 ---
		String requestProt0080 = "https";
		String requestHost0080 = "performancemanager4.successfactors.com";
		int    requestPort0080 = 443;
		String requestFile0080 = "/messagebundle/Teck/vmod_ad305c8c-614fc7e3/common!/ui/sapui5/main/sap/ui/core/messagebundle_en_US.properties";
		String requestHeader0080 = "GET " + requestFile0080 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 0100050001fafc328f-7e32-4078-b527-41af2ccf402729820909-1501-babe-face-000000000003ede1c236-e792-422c-9920-a3d6211bd124HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0080, requestHost0080, requestPort0080, requestHeader0080, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0080 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 3355
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [80] <- Index 80
		if(replayMode)
		{
			long proxyDataRecordId =1612210780826L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [81] <- WEB ADMIN Index 81 ---
		String requestProt0081 = "https";
		String requestHost0081 = "performancemanager4.successfactors.com";
		int    requestPort0081 = 443;
		String requestFile0081 = "/messagebundle/Teck/vmod_bf85f362-614fc7e3/sap.m!/ui/sapui5/main/sap/m/messagebundle_en_US.properties";
		String requestHeader0081 = "GET " + requestFile0081 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 0100050001d2312208-e8a2-4e71-b72d-11e52af70f2229820909-1501-babe-face-00000000000335f80213-44e2-4e7c-842d-ed2c24ce112eHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0081, requestHost0081, requestPort0081, requestHeader0081, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0081 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 7877
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [81] <- Index 81
		if(replayMode)
		{
			long proxyDataRecordId =1612210781075L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [82] <- WEB ADMIN Index 82 ---
		String requestProt0082 = "https";
		String requestHost0082 = "performancemanager4.successfactors.com";
		int    requestPort0082 = 443;
		String requestFile0082 = "/ui/homepage3/resources_6FBE4A565787242BEE7A183800E4FE65/sap/sf/homepage3/core/Component-preload.js";
		String requestHeader0082 = "GET " + requestFile0082 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 01000500012188426e-cd22-4074-9227-7ee22bda532029820909-1501-babe-face-000000000003dd94824c-cb82-4ce7-9020-7111232a9121HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0082, requestHost0082, requestPort0082, requestHeader0082, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0082 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 25536
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [82] <- Index 82
		if(replayMode)
		{
			long proxyDataRecordId =1612210781306L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [83] <- WEB ADMIN Index 83 ---
		String requestProt0083 = "https";
		String requestHost0083 = "performancemanager4.successfactors.com";
		int    requestPort0083 = 443;
		String requestFile0083 = "/ui/homepage3/resources_6FBE4A565787242BEE7A183800E4FE65/sap/sf/homepage3/core/css/homepage3.css";
		String requestHeader0083 = "GET " + requestFile0083 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0083, requestHost0083, requestPort0083, requestHeader0083, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0083 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 3592
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [83] <- Index 83
		if(replayMode)
		{
			long proxyDataRecordId =1612210781464L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 2 of 4)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [84] <- WEB ADMIN Index 84 ---
		String requestProt0084 = "https";
		String requestHost0084 = "performancemanager4.successfactors.com";
		int    requestPort0084 = 443;
		String requestFile0084 = "/messagebundle/Teck/vmod_a78e850e-614fc7e3/ui/homepage3/resources/sap/sf/homepage3/app/i18n/messagebundle_en_US.properties";
		String requestHeader0084 = "GET " + requestFile0084 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 01000500014235f277-7622-47a3-832a-5dc92d334d2c29820909-1501-babe-face-000000000003fd260245-66e2-4036-8526-60602367c922HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0084, requestHost0084, requestPort0084, requestHeader0084, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0084 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 3057
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [84] <- Index 84
		if(replayMode)
		{
			long proxyDataRecordId =1612210781467L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [85] <- WEB ADMIN Index 85 ---
		String requestProt0085 = "https";
		String requestHost0085 = "performancemanager4.successfactors.com";
		int    requestPort0085 = 443;
		String requestFile0085 = "/messagebundle/Teck/vmod_b53b2ae0-614fc7e3/home!/ui/homepage3/resources/sap/ushell/renderers/fiori2/resources/resources_en_US.properties";
		String requestHeader0085 = "GET " + requestFile0085 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 01000500017ef6c298-9832-4d9a-b82e-567d241e942029820909-1501-babe-face-000000000003d78fd215-5b22-4691-be2f-00bb2aa03127HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0085, requestHost0085, requestPort0085, requestHeader0085, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0085 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 8414
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [85] <- Index 85
		if(replayMode)
		{
			long proxyDataRecordId =1612210781599L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [86] <- WEB ADMIN Index 86 ---
		String requestProt0086 = "https";
		String requestHost0086 = "performancemanager4.successfactors.com";
		int    requestPort0086 = 443;
		String requestFile0086 = "/public/ui-dcss/Teck/_/3m!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library-parameters.json";
		requestFile0086 = Lib.replaceTextPattern(requestFile0086, "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1, 0);		// search and replace request file fragment "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!" with variable 'C_BelizePlusLanding1' on all occurrences

		String requestHeader0086 = "GET " + requestFile0086 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 0100050001d7d892f1-2902-4366-8222-a2e8228ff92a29820909-1501-babe-face-00000000000346619237-06b2-4619-8326-c2d72d2b9a29HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0086, requestHost0086, requestPort0086, requestHeader0086, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0086 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 14652
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [86] <- Index 86
		if(replayMode)
		{
			long proxyDataRecordId =1612210782053L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [87] <- WEB ADMIN Index 87 ---
		String requestProt0087 = "https";
		String requestHost0087 = "performancemanager4.successfactors.com";
		int    requestPort0087 = 443;
		String requestFile0087 = "/ui/surj/resources_0D669CF44A13E0E9F573CB4E8C114330/sap/sf/surj/shell/themes/sap_belize/library-parameters.json";
		String requestHeader0087 = "GET " + requestFile0087 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 010005000138c992c4-08a2-4820-9c2e-6a7227e4c52129820909-1501-babe-face-000000000003c9fc72c2-52a2-47cb-aa28-6e372c075b24HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0087, requestHost0087, requestPort0087, requestHeader0087, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0087 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 57
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{},\"scopes\":{\"sapContrast\":{}}}");		// Test [87] <- Index 87
		if(replayMode)
		{
			long proxyDataRecordId =1612210782151L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [88] <- WEB ADMIN Index 88 ---
		String requestProt0088 = "https";
		String requestHost0088 = "performancemanager4.successfactors.com";
		int    requestPort0088 = 443;
		String requestFile0088 = "/ui/sapui5/main_1.78.6/sap/ui/layout/themes/sap_belize/library-parameters.json";
		String requestHeader0088 = "GET " + requestFile0088 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 010005000197936240-1972-487d-9f22-49242fc0162429820909-1501-babe-face-0000000000030e1de235-bc72-463e-a82d-f8552bf3a52aHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0088, requestHost0088, requestPort0088, requestHeader0088, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0088 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1220
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{\"_sap_ui_layout_ColumnLayout");		// Test [88] <- Index 88
		if(replayMode)
		{
			long proxyDataRecordId =1612210782214L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [89] <- WEB ADMIN Index 89 ---
		String requestProt0089 = "https";
		String requestHost0089 = "performancemanager4.successfactors.com";
		int    requestPort0089 = 443;
		String requestFile0089 = "/public/ui-dcss/Teck/_/3m!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library-parameters.json";
		requestFile0089 = Lib.replaceTextPattern(requestFile0089, "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1, 0);		// search and replace request file fragment "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!" with variable 'C_BelizePlusLanding1' on all occurrences

		String requestHeader0089 = "GET " + requestFile0089 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 01000500014df1d24a-dcb2-4d91-b62e-996b29dac12929820909-1501-babe-face-00000000000300d652ed-6002-4da2-b226-19d22935dc2aHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0089, requestHost0089, requestPort0089, requestHeader0089, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0089 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 4232
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{\"_sap_m_Popover_Scroll_Width");		// Test [89] <- Index 89
		if(replayMode)
		{
			long proxyDataRecordId =1612210782300L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [90] <- WEB ADMIN Index 90 ---
		String requestProt0090 = "https";
		String requestHost0090 = "performancemanager4.successfactors.com";
		int    requestPort0090 = 443;
		String requestFile0090 = "/ui/homepage3/resources_9845F9D21661AFE5EFE157D7B537FA89/sap/ushell/themes/sap_belize/library-parameters.json";
		String requestHeader0090 = "GET " + requestFile0090 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 010005000108ade28c-7602-43b0-952a-619a26b8132129820909-1501-babe-face-000000000003f75cc29d-5272-4e23-b02b-19eb21ca1a24HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0090, requestHost0090, requestPort0090, requestHeader0090, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0090 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 10901
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [90] <- Index 90
		if(replayMode)
		{
			long proxyDataRecordId =1612210782360L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [91] <- WEB ADMIN Index 91 ---
		String requestProt0091 = "https";
		String requestHost0091 = "performancemanager4.successfactors.com";
		int    requestPort0091 = 443;
		String requestFile0091 = "/ui/homepage3/resources_BB804D2AF6BEF70984AF2453CBEBF82B/sap/sf/homepage3/commons/themes/sap_belize/library-parameters.json";
		String requestHeader0091 = "GET " + requestFile0091 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 0100050001de689290-0232-4d8a-bf27-597422562f2f29820909-1501-babe-face-000000000003ed3e7292-7152-4b26-b123-ce7e20387d24HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0091, requestHost0091, requestPort0091, requestHeader0091, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0091 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 57
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{},\"scopes\":{\"sapContrast\":{}}}");		// Test [91] <- Index 91
		if(replayMode)
		{
			long proxyDataRecordId =1612210782406L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [92] <- WEB ADMIN Index 92 ---
		String requestProt0092 = "https";
		String requestHost0092 = "performancemanager4.successfactors.com";
		int    requestPort0092 = 443;
		String requestFile0092 = "/ui/sapui5/lite_1.78.6/themes/sap_belize/library-parameters.json";
		String requestHeader0092 = "GET " + requestFile0092 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 0100050001441722b9-4bd2-434d-a524-ae74294f022829820909-1501-babe-face-000000000003486302cb-b1b2-431f-bf22-93de24fe3929HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0092, requestHost0092, requestPort0092, requestHeader0092, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0092 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 286
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"_sap_ui_commons_TabStrip_BorderRadius\": \"0\"");		// Test [92] <- Index 92
		if(replayMode)
		{
			long proxyDataRecordId =1612210782494L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [93] <- WEB ADMIN Index 93 ---
		String requestProt0093 = "https";
		String requestHost0093 = "performancemanager4.successfactors.com";
		int    requestPort0093 = 443;
		String requestFile0093 = "/perfLogServlet" +
				"?callId=6173853616-X" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&TRS=462" +
				"&TIP=2286" +
				"&TML=2286" +
				"&ST=1612210777118" +
				"&ET=1612210782568" +
				"&RED=2" +
				"&TTB=2492" +
				"&RSR=3172" +
				"&DIA=3461";
		String requestHeader0093 = "GET " + requestFile0093 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: y-k1EiM4Jloq9UsICCJh8UcsCDPV9ATA-gTE-wzFxh-k-C90BEgwDDM04zzM3C1N9QIOBDAlB_5Z5ygb3DfU8TvSFzsyBio_D_wECTMzEgTitOPfxPyNj9rsuNOOn7iAve9qpq\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain; charset=UTF-8\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-X\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0093, requestHost0093, requestPort0093, requestHeader0093, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0093 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [93] <- Index 93
		if(replayMode)
		{
			long proxyDataRecordId =1612210782585L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [94] <- WEB ADMIN Index 94 ---
		String requestProt0094 = "https";
		String requestHost0094 = "performancemanager4.successfactors.com";
		int    requestPort0094 = 443;
		String requestFile0094 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TML";
		String requestHeader0094 = "GET " + requestFile0094 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0094, requestHost0094, requestPort0094, requestHeader0094, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0094 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [94] <- Index 94
		if(replayMode)
		{
			long proxyDataRecordId =1612210782593L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [95] <- WEB ADMIN Index 95 ---
		String requestProt0095 = "https";
		String requestHost0095 = "performancemanager4.successfactors.com";
		int    requestPort0095 = 443;
		String requestFile0095 = "/xi/ui/commonshell/pages/smrf.xhtml" +
				"?js%5B%5D=%2Fui%2Fjuic%2Fjs%2Fcomponents%2FsfDom.js";
		String requestHeader0095 = "GET " + requestFile0095 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 0100050001fdc0d2dd-8f22-4205-a32b-3851257fbc2029820909-1501-babe-face-0000000000030e52f2ba-4292-4074-b22f-27fc29ea9d24HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0095, requestHost0095, requestPort0095, requestHeader0095, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0095 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3672
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "We found the following Knowledge Base Articles related to this error:");		// Test [95] <- Index 95
		if(replayMode)
		{
			long proxyDataRecordId =1612210782595L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [96] <- WEB ADMIN Index 96 ---
		String requestProt0096 = "https";
		String requestHost0096 = "performancemanager4.successfactors.com";
		int    requestPort0096 = 443;
		String requestFile0096 = "/ui/sapui5/main_1.78.6/sap/ui/core/themes/base/img/1x1.gif";
		String requestHeader0096 = "GET " + requestFile0096 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0096, requestHost0096, requestPort0096, requestHeader0096, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0096 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 807
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [96] <- Index 96
		if(replayMode)
		{
			long proxyDataRecordId =1612210782598L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [97] <- WEB ADMIN Index 97 ---
		String requestProt0097 = "https";
		String requestHost0097 = "performancemanager4.successfactors.com";
		int    requestPort0097 = 443;
		String requestFile0097 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TIP";
		String requestHeader0097 = "GET " + requestFile0097 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0097, requestHost0097, requestPort0097, requestHeader0097, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0097 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [97] <- Index 97
		if(replayMode)
		{
			long proxyDataRecordId =1612210782600L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [98] <- WEB ADMIN Index 98 ---
		String requestProt0098 = "https";
		String requestHost0098 = "performancemanager4.successfactors.com";
		int    requestPort0098 = 443;
		String requestFile0098 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/util/PanelManager.js";
		String requestHeader0098 = "GET " + requestFile0098 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 0100050001f2e7e2ab-3dc2-4421-b32e-303c28369b2329820909-1501-babe-face-0000000000036feef2a8-fe12-4782-a224-803b23ca3423HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0098, requestHost0098, requestPort0098, requestHeader0098, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0098 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1504
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [98] <- Index 98
		if(replayMode)
		{
			long proxyDataRecordId =1612210782655L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [99] <- WEB ADMIN Index 99 ---
		String requestProt0099 = "https";
		String requestHost0099 = "performancemanager4.successfactors.com";
		int    requestPort0099 = 443;
		String requestFile0099 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/util/Util.js";
		String requestHeader0099 = "GET " + requestFile0099 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 0100050001046182f4-df32-4535-b822-6df92cf6ea2d29820909-1501-babe-face-000000000003348442d4-de12-466d-942a-1e7f26b2c326HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0099, requestHost0099, requestPort0099, requestHeader0099, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0099 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 820
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [99] <- Index 99
		if(replayMode)
		{
			long proxyDataRecordId =1612210782802L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [100] <- WEB ADMIN Index 100 ---
		String requestProt0100 = "https";
		String requestHost0100 = "performancemanager4.successfactors.com";
		int    requestPort0100 = 443;
		String requestFile0100 = "/messagebundle/Teck/vmod_f29b5030-614fc7e3/ui/todo/resources/sap/sf/todo/i18n/messagebundle_en_US.properties";
		String requestHeader0100 = "GET " + requestFile0100 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 0100050001955e7244-3262-434c-b525-d2a92fffea2f29820909-1501-babe-face-000000000003eee19207-23d2-4612-b629-364521624329HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0100, requestHost0100, requestPort0100, requestHeader0100, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0100 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 1542
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [100] <- Index 100
		if(replayMode)
		{
			long proxyDataRecordId =1612210782850L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [101] <- WEB ADMIN Index 101 ---
		String requestProt0101 = "https";
		String requestHost0101 = "performancemanager4.successfactors.com";
		int    requestPort0101 = 443;
		String requestFile0101 = "/messagebundle/Teck/vmod_d7f00fec-614fc7e3/ui/surj/resources/sap/sf/surj/shell/i18n/messagebundle_en_US.properties";
		String requestHeader0101 = "GET " + requestFile0101 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 010005000107f8b218-ff62-4877-9524-b2d52640f72929820909-1501-babe-face-00000000000328904258-0cd2-4dfc-952c-29142e09d328HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0101, requestHost0101, requestPort0101, requestHeader0101, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0101 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 4364
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [101] <- Index 101
		if(replayMode)
		{
			long proxyDataRecordId =1612210783102L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [102] <- WEB ADMIN Index 102 ---
		String requestProt0102 = "https";
		String requestHost0102 = "performancemanager4.successfactors.com";
		int    requestPort0102 = 443;
		String requestFile0102 = "/ui/sapui5/main_1.78.6/sap/ui/core/themes/base/fonts/SAP-icons.woff2";
		String requestHeader0102 = "GET " + requestFile0102 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0102, requestHost0102, requestPort0102, requestHeader0102, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("7be3ac2d", C_MODvalue);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0102 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 97220
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/FONT-WOFF2", null, null);		// Test [102] <- Index 102
		if(replayMode)
		{
			long proxyDataRecordId =1612210783104L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [103] <- WEB ADMIN Index 103 ---
		String requestProt0103 = "https";
		String requestHost0103 = "performancemanager4.successfactors.com";
		int    requestPort0103 = 443;
		String requestFile0103 = "/xi/ajax/remoting/call/plaincall/showMeControllerProxy.signAPIUrl.dwr" +
				"?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d";
		String requestContent0103 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/start?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423523" + "\r\n" + 
				"c0-scriptName=showMeControllerProxy" + "\r\n" + 
				"c0-methodName=signAPIUrl" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:%2Fmedia%2Fshowme_ab3a783e_706e_40dd_a87a_a8283cabf42b%2FHOME_TAB%2Fstatus" + "\r\n" + 
				"c0-param1=string:HOME_TAB" + "\r\n" + 
				"c0-param2=string:727a1820ae53fe16b4a90eb72d5a4387" + "\r\n" + 
				"batchId=0";
		String requestHeader0103 = "POST " + requestFile0103 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0103.length() + "\r\n" + 		// Content-Length: 408
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 010005000136072240-9322-482e-b421-c808212b652129820909-1501-babe-face-000000000003471d32ca-6c92-4ee5-bc2e-402d25502c2cHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"viewid: /ui/homepage3/pages/index.xhtml\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0103, requestHost0103, requestPort0103, requestHeader0103, requestContent0103.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0103 = null;		// support garbage collector to reduce memory
		requestContent0103 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 406
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [103] <- Index 103
		if(replayMode)
		{
			long proxyDataRecordId =1612210783344L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_StatusToken1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0103_1 = new BoundaryBasedExtractorItem( "/status?token=" , "\");",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0103_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_StatusToken1'
			C_StatusToken1 = boundaryBasedContentExtractorItem0103_1.getResultText();
			log("<<< C_StatusToken1 = " + C_StatusToken1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_StatusToken1!= null && C_StatusToken1.trim().length() == 0)
			{
				C_StatusToken1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_StatusToken1' ends up with an empty string - a substitute value was set");
				log("<<< C_StatusToken1 = " + C_StatusToken1);
			}
		}
		catch (Exception e) { C_StatusToken1 = null; log(e); }
		if (C_StatusToken1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_StatusToken1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 3 of 4)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [104] <- WEB ADMIN Index 104 ---
		String requestProt0104 = "https";
		String requestHost0104 = "performancemanager4.successfactors.com";
		int    requestPort0104 = 443;
		String requestFile0104 = "/ui/notification/resources_F39F1DA045124E8F12EAD8F06CA84C63/sap/sf/notification/util/Util.js";
		String requestHeader0104 = "GET " + requestFile0104 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0104, requestHost0104, requestPort0104, requestHeader0104, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0104 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 824
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [104] <- Index 104
		if(replayMode)
		{
			long proxyDataRecordId =1612210783346L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [105] <- WEB ADMIN Index 105 ---
		String requestProt0105 = "https";
		String requestHost0105 = "performancemanager4.successfactors.com";
		int    requestPort0105 = 443;
		String requestFile0105 = "/ui/extlib/elastic_5.5.0/elastic-apm-rum.umd.min.js";
		String requestHeader0105 = "GET " + requestFile0105 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0105, requestHost0105, requestPort0105, requestHeader0105, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0105 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 18653
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [105] <- Index 105
		if(replayMode)
		{
			long proxyDataRecordId =1612210783356L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [106] <- WEB ADMIN Index 106 ---
		String requestProt0106 = "https";
		String requestHost0106 = "performancemanager4.successfactors.com";
		int    requestPort0106 = 443;
		String requestFile0106 = "/odata/v2/restricted/_Homepage3_/getHp3TileInitializer" +
				"?%24format=json" +
				"&_=1612210780471";
		String requestHeader0106 = "GET " + requestFile0106 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 010005000195aa7230-8202-4096-b622-0f2026fb9f2d29820909-1501-babe-face-000000000003c909228b-9fd2-4c68-ae2e-e9132b97cf2aHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0106, requestHost0106, requestPort0106, requestHeader0106, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0106 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 2049
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"d\" : {");		// Test [106] <- Index 106
		if(replayMode)
		{
			long proxyDataRecordId =1612210783379L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [107] <- WEB ADMIN Index 107 ---
		String requestProt0107 = "https";
		String requestHost0107 = "performancemanager4.successfactors.com";
		int    requestPort0107 = 443;
		String requestFile0107 = "/companyLogoServlet/" +
				"?companyId=Teck" +
				"&mod=1611970757165";
		String requestHeader0107 = "GET " + requestFile0107 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0107, requestHost0107, requestPort0107, requestHeader0107, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0107 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 1823
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [107] <- Index 107
		if(replayMode)
		{
			long proxyDataRecordId =1612210783408L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [108] <- WEB ADMIN Index 108 ---
		String requestProt0108 = "https";
		String requestHost0108 = "performancemanager4.successfactors.com";
		int    requestPort0108 = 443;
		String requestFile0108 = "/ui/smrf/js/smrf_78d348cd3b31f54393eaff400a956dc0.js";
		String requestHeader0108 = "GET " + requestFile0108 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0108, requestHost0108, requestPort0108, requestHeader0108, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0108 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2083
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [108] <- Index 108
		if(replayMode)
		{
			long proxyDataRecordId =1612210783419L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [109] <- WEB ADMIN Index 109 ---
		String requestProt0109 = "https";
		String requestHost0109 = "performancemanager4.successfactors.com";
		int    requestPort0109 = 443;
		String requestFile0109 = "/public/ui-dcss/Teck/_/3m!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		requestFile0109 = Lib.replaceTextPattern(requestFile0109, "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1, 0);		// search and replace request file fragment "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!" with variable 'C_BelizePlusLanding1' on all occurrences

		String requestHeader0109 = "GET " + requestFile0109 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0109, requestHost0109, requestPort0109, requestHeader0109, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0109 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [109] <- Index 109
		if(replayMode)
		{
			long proxyDataRecordId =1612210783432L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [110] <- WEB ADMIN Index 110 ---
		String requestProt0110 = "https";
		String requestHost0110 = "performancemanager4.successfactors.com";
		int    requestPort0110 = 443;
		String requestFile0110 = "/public/ui-dcss/Teck/_/3m!belizePlusLanding!!lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Bold.woff2";
		requestFile0110 = Lib.replaceTextPattern(requestFile0110, "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1, 0);		// search and replace request file fragment "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!" with variable 'C_BelizePlusLanding1' on all occurrences

		String requestHeader0110 = "GET " + requestFile0110 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0110, requestHost0110, requestPort0110, requestHeader0110, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0110 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 26732
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [110] <- Index 110
		if(replayMode)
		{
			long proxyDataRecordId =1612210783437L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [111] <- WEB ADMIN Index 111 ---
		String requestProt0111 = "https";
		String requestHost0111 = "performancemanager4.successfactors.com";
		int    requestPort0111 = 443;
		String requestFile0111 = "/ui/notification/resources_F39F1DA045124E8F12EAD8F06CA84C63/sap/sf/notification/main/service/DataService.js";
		String requestHeader0111 = "GET " + requestFile0111 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0111, requestHost0111, requestPort0111, requestHeader0111, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0111 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 748
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [111] <- Index 111
		if(replayMode)
		{
			long proxyDataRecordId =1612210783560L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [112] <- WEB ADMIN Index 112 ---
		String requestProt0112 = "https";
		String requestHost0112 = "performancemanager4.successfactors.com";
		int    requestPort0112 = 443;
		String requestFile0112 = "/ui/sfgrp/css/juicGlobal_1b129fc229faec7b392342e315cebbce.css";
		String requestHeader0112 = "GET " + requestFile0112 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0112, requestHost0112, requestPort0112, requestHeader0112, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0112 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 12393
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [112] <- Index 112
		if(replayMode)
		{
			long proxyDataRecordId =1612210783575L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [113] <- WEB ADMIN Index 113 ---
		String requestProt0113 = "https";
		String requestHost0113 = "performancemanager4.successfactors.com";
		int    requestPort0113 = 443;
		String requestFile0113 = "/odata/v4/NotificationService.svc/GetNumberOfNewNotifications(userId='TestAutomation')";
		String requestHeader0113 = "GET " + requestFile0113 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-c24c5544dc227a80207a96c0df371c53-381d5404872b4b90-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/json\r\n" + 
				"Accept: */*\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 0100050001a72332c6-5f92-4fa8-8229-62592becb32129820909-1501-babe-face-0000000000038e146288-bb52-45e1-ad2e-ba1225094128HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0113, requestHost0113, requestPort0113, requestHeader0113, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0113 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 195
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"@odata.context\":\"https://performancemanage");		// Test [113] <- Index 113
		if(replayMode)
		{
			long proxyDataRecordId =1612210783650L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [114] <- WEB ADMIN Index 114 ---
		String requestProt0114 = "https";
		String requestHost0114 = "performancemanager4.successfactors.com";
		int    requestPort0114 = 443;
		String requestFile0114 = "/ui/commonshell/js/createpageHeaderJsonData_94872b218be5f6ae190760dfd2b768ba.js";
		String requestHeader0114 = "GET " + requestFile0114 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0114, requestHost0114, requestPort0114, requestHeader0114, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0114 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 108
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [114] <- Index 114
		if(replayMode)
		{
			long proxyDataRecordId =1612210783672L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [115] <- WEB ADMIN Index 115 ---
		String requestProt0115 = "https";
		String requestHost0115 = "performancemanager4.successfactors.com";
		int    requestPort0115 = 443;
		String requestFile0115 = "/ui/juic/js/Util_ada164a354d018de59a64749919a0f42.js";
		String requestHeader0115 = "GET " + requestFile0115 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0115, requestHost0115, requestPort0115, requestHeader0115, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0115 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6351
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [115] <- Index 115
		if(replayMode)
		{
			long proxyDataRecordId =1612210783835L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [116] <- WEB ADMIN Index 116 ---
		String requestProt0116 = "https";
		String requestHost0116 = "performancemanager4.successfactors.com";
		int    requestPort0116 = 443;
		String requestFile0116 = "/ui/juic/js/core/component_ca4231790bc781dc49a1857b2a4e24d5.js";
		String requestHeader0116 = "GET " + requestFile0116 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0116, requestHost0116, requestPort0116, requestHeader0116, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0116 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3105
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [116] <- Index 116
		if(replayMode)
		{
			long proxyDataRecordId =1612210783918L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [117] <- WEB ADMIN Index 117 ---
		String requestProt0117 = "https";
		String requestHost0117 = "performancemanager4.successfactors.com";
		int    requestPort0117 = 443;
		String requestFile0117 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/model/ApvReqModel.js";
		String requestHeader0117 = "GET " + requestFile0117 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0117, requestHost0117, requestPort0117, requestHeader0117, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0117 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 338
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [117] <- Index 117
		if(replayMode)
		{
			long proxyDataRecordId =1612210783974L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [118] <- WEB ADMIN Index 118 ---
		String requestProt0118 = "https";
		String requestHost0118 = "performancemanager4.successfactors.com";
		int    requestPort0118 = 443;
		String requestFile0118 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/model/OnboardingModel.js";
		String requestHeader0118 = "GET " + requestFile0118 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0118, requestHost0118, requestPort0118, requestHeader0118, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0118 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 465
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [118] <- Index 118
		if(replayMode)
		{
			long proxyDataRecordId =1612210783975L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [119] <- WEB ADMIN Index 119 ---
		String requestProt0119 = "https";
		String requestHost0119 = "performancemanager4.successfactors.com";
		int    requestPort0119 = 443;
		String requestFile0119 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/model/PayrollHireModel.js";
		String requestHeader0119 = "GET " + requestFile0119 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0119, requestHost0119, requestPort0119, requestHeader0119, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0119 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 343
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [119] <- Index 119
		if(replayMode)
		{
			long proxyDataRecordId =1612210783976L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [120] <- WEB ADMIN Index 120 ---
		String requestProt0120 = "https";
		String requestHost0120 = "performancemanager4.successfactors.com";
		int    requestPort0120 = 443;
		String requestFile0120 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/model/ThirdPartyModel.js";
		String requestHeader0120 = "GET " + requestFile0120 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0120, requestHost0120, requestPort0120, requestHeader0120, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0120 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 453
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [120] <- Index 120
		if(replayMode)
		{
			long proxyDataRecordId =1612210783977L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [121] <- WEB ADMIN Index 121 ---
		String requestProt0121 = "https";
		String requestHost0121 = "performancemanager4.successfactors.com";
		int    requestPort0121 = 443;
		String requestFile0121 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/model/LearningModel.js";
		String requestHeader0121 = "GET " + requestFile0121 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0121, requestHost0121, requestPort0121, requestHeader0121, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0121 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 328
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [121] <- Index 121
		if(replayMode)
		{
			long proxyDataRecordId =1612210783979L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [122] <- WEB ADMIN Index 122 ---
		String requestProt0122 = "https";
		String requestHost0122 = "performancemanager4.successfactors.com";
		int    requestPort0122 = 443;
		String requestFile0122 = "/xi/ajax/remoting/call/plaincall/hp3TourControllerProxy.getTourPreference.dwr" +
				"?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d";
		String requestContent0122 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/start?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423523" + "\r\n" + 
				"c0-scriptName=hp3TourControllerProxy" + "\r\n" + 
				"c0-methodName=getTourPreference" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=1";
		String requestHeader0122 = "POST " + requestFile0122 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0122.length() + "\r\n" + 		// Content-Length: 248
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-c24c5544dc227a80207a96c0df371c53-5e75000a6f483cd3-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 0100050001a0bcf264-1432-4a7d-932e-e3e0226a272d29820909-1501-babe-face-0000000000030cc9222f-c802-4a38-bf2a-1b9f2d267528HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"viewid: /ui/homepage3/pages/index.xhtml\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0122, requestHost0122, requestPort0122, requestHeader0122, requestContent0122.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0122 = null;		// support garbage collector to reduce memory
		requestContent0122 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 170
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "dwr.engine._remoteHandleCallback('");		// Test [122] <- Index 122
		if(replayMode)
		{
			long proxyDataRecordId =1612210784124L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [123] <- WEB ADMIN Index 123 ---
		String requestProt0123 = "https";
		String requestHost0123 = "performancemanager4.successfactors.com";
		int    requestPort0123 = 443;
		String requestFile0123 = "/ui/sapui5/main_1.78.6/sap/ui/core/cldr/en.json";
		String requestHeader0123 = "GET " + requestFile0123 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-c24c5544dc227a80207a96c0df371c53-bf3d0abb8c5de3d9-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 010005000184ad82fa-9be2-4e81-8027-54982ed8552a29820909-1501-babe-face-0000000000037ed6c258-8302-43d6-892a-6375274b9226HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0123, requestHost0123, requestPort0123, requestHeader0123, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0123 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 17963
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"Cans\": \"Unified Canadian Aboriginal Syllabics\",");		// Test [123] <- Index 123
		if(replayMode)
		{
			long proxyDataRecordId =1612210784156L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #4_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_4_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #4 (fragment 4 of 4)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [124] <- WEB ADMIN Index 124 ---
		String requestProt0124 = "https";
		String requestHost0124 = "performancemanager4.successfactors.com";
		int    requestPort0124 = 443;
		String requestFile0124 = "/odata/v2/restricted/AdminAlertType,AttachmentInternal,COAHStatusBean,COAdminLinkItemBean,COAdminTileLinkBean,COAdminTileLinkListBean,SLActivityBean,SLEmpActivitiesBean,SLEmpActivitiesBeanList,Tour,changeFavoriteLink,getAdminTileLinks,getInternalJobPostingCount,getPreApprovedJobReqCount,getSLActivityList/getInternalJobPostingCount" +
				"?%24format=json" +
				"&_=1612210780472";
		String requestHeader0124 = "GET " + requestFile0124 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-c24c5544dc227a80207a96c0df371c53-7d7ba652bfdb8cd0-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 010005000172d8b21d-9842-4272-802c-17ea2a86942e29820909-1501-babe-face-0000000000036bdf72c5-e7c2-4bc3-8220-ee5e2a154924HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0124, requestHost0124, requestPort0124, requestHeader0124, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0124 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 65
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"getInternalJobPostingCount\" :");		// Test [124] <- Index 124
		if(replayMode)
		{
			long proxyDataRecordId =1612210784289L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [125] <- WEB ADMIN Index 125 ---
		String requestProt0125 = "https";
		String requestHost0125 = "performancemanager4.successfactors.com";
		int    requestPort0125 = 443;
		String requestFile0125 = "/odata/v2/restricted/AdminAlertType,AttachmentInternal,COAHStatusBean,COAdminLinkItemBean,COAdminTileLinkBean,COAdminTileLinkListBean,SLActivityBean,SLEmpActivitiesBean,SLEmpActivitiesBeanList,Tour,changeFavoriteLink,getAdminTileLinks,getInternalJobPostingCount,getPreApprovedJobReqCount,getSLActivityList/Tour" +
				"?%24format=json" +
				"&_=1612210780473";
		String requestHeader0125 = "GET " + requestFile0125 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-c24c5544dc227a80207a96c0df371c53-5d487fdc14309a4f-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 0100050001d11e925b-1e72-4966-9a2a-2e7720b1682e29820909-1501-babe-face-000000000003075c22c1-1772-4d85-aa21-9aaf2233d524HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0125, requestHost0125, requestPort0125, requestHeader0125, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0125 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 47
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"results\" : [");		// Test [125] <- Index 125
		if(replayMode)
		{
			long proxyDataRecordId =1612210784309L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [126] <- WEB ADMIN Index 126 ---
		String requestProt0126 = "https";
		String requestHost0126 = "performancemanager4.successfactors.com";
		int    requestPort0126 = 443;
		String requestFile0126 = "/ui/sfgrp/js/juicUtils_4c0c3f18c54d5225edf728d86f4efcd5.js";
		String requestHeader0126 = "GET " + requestFile0126 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0126, requestHost0126, requestPort0126, requestHeader0126, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0126 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 27185
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [126] <- Index 126
		if(replayMode)
		{
			long proxyDataRecordId =1612210784326L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [127] <- WEB ADMIN Index 127 ---
		String requestProt0127 = "https";
		String requestHost0127 = "performancemanager4.successfactors.com";
		int    requestPort0127 = 443;
		String requestFile0127 = "/ui/todo/resources_A967BA96C58DADAA3D502B01F82182F0/sap/sf/todo/popup/service/DueDateHelper.js";
		String requestHeader0127 = "GET " + requestFile0127 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0127, requestHost0127, requestPort0127, requestHeader0127, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0127 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 787
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [127] <- Index 127
		if(replayMode)
		{
			long proxyDataRecordId =1612210784327L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [128] <- WEB ADMIN Index 128 ---
		String requestProt0128 = "https";
		String requestHost0128 = "azprod.ms.successfactors.com";
		int    requestPort0128 = 443;
		String requestFile0128 = "/mediaservice/api/v2/media/showme_ab3a783e_706e_40dd_a87a_a8283cabf42b/HOME_TAB/status" +
				"?token=" + C_StatusToken1 +		// recorded value = a1783402eab9b2853728990e9359cd281b9221b60e44507d1cc2cbb92dda48f6d9663940a7696499ef6b90930f8c3dfe8b3e2c36ec08e0a37892a74e186e3b98,-8669176456599319668,1612212583,1
				"&callback=sfDeferredUtilCallback2";
		requestFile0128 = Lib.replaceTextPattern(requestFile0128, "a1783402eab9b2853728990e9359cd281b9221b60e44507d1cc2cbb92dda48f6d9663940a7696499ef6b90930f8c3dfe8b3e2c36ec08e0a37892a74e186e3b98,-8669176456599319668,1612212583,1", C_StatusToken1, 0);		// search and replace request file fragment "a1783402eab9b2853728990e9359cd281b9221b60e44507d1cc2cbb92dda48f6d9663940a7696499ef6b90930f8c3dfe8b3e2c36ec08e0a37892a74e186e3b98,-8669176456599319668,1612212583,1" with variable 'C_StatusToken1' on all occurrences

		String requestHeader0128 = "GET " + requestFile0128 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: azprod.ms.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0128, requestHost0128, requestPort0128, requestHeader0128, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0128 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 128
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "sfDeferredUtilCallback2({\"uploadID\":\"HOME");		// Test [128] <- Index 128
		if(replayMode)
		{
			long proxyDataRecordId =1612210784357L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [129] <- WEB ADMIN Index 129 ---
		String requestProt0129 = "https";
		String requestHost0129 = "performancemanager4.successfactors.com";
		int    requestPort0129 = 443;
		String requestFile0129 = "/odata/v2/restricted/TodoEntryV2,WfRequest/TodoEntryV2/$count" +
				"?%24filter=categoryId%20in%20%2714%27%2C%2717%27%2C%2718%27%2C%2721%27%2C%2724%27%2C%2725%27%2C%2729%27%2C%2739%27%2C%2746%27%20and%20status%20eq%202%20and%20wfRequestNav%2FwfRequestId%20ne%20null";
		String requestHeader0129 = "GET " + requestFile0129 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-CSRF-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-c24c5544dc227a80207a96c0df371c53-b6ebaa147204c29e-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 010005000197aec2a3-8ec2-4258-9129-1c9c2831d52d29820909-1501-babe-face-000000000003497e221f-18b2-4637-8826-86fb287e9529HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0129, requestHost0129, requestPort0129, requestHeader0129, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0129 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/PLAIN", header text fragment = [verification disabled], recorded content size = 21
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/PLAIN", null, null);		// Test [129] <- Index 129
		if(replayMode)
		{
			long proxyDataRecordId =1612210784410L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [130] <- WEB ADMIN Index 130 ---
		String requestProt0130 = "https";
		String requestHost0130 = "performancemanager4.successfactors.com";
		int    requestPort0130 = 443;
		String requestFile0130 = "/xi/ajax/remoting/call/plaincall/hp3TodoPanelControllerProxy.getLearningTodoDetails.dwr" +
				"?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d";
		String requestContent0130 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/start?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423523" + "\r\n" + 
				"c0-scriptName=hp3TodoPanelControllerProxy" + "\r\n" + 
				"c0-methodName=getLearningTodoDetails" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=2";
		String requestHeader0130 = "POST " + requestFile0130 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0130.length() + "\r\n" + 		// Content-Length: 258
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-c24c5544dc227a80207a96c0df371c53-abb681af9dd7a2db-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 0100050001b907c272-6b32-471d-8023-3aaf2ad16c2629820909-1501-babe-face-000000000003881852b2-91d2-484d-932c-d5f92aafe525HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"viewid: /ui/homepage3/pages/index.xhtml\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0130, requestHost0130, requestPort0130, requestHeader0130, requestContent0130.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0130 = null;		// support garbage collector to reduce memory
		requestContent0130 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 163
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [130] <- Index 130
		if(replayMode)
		{
			long proxyDataRecordId =1612210784416L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [131] <- WEB ADMIN Index 131 ---
		String requestProt0131 = "https";
		String requestHost0131 = "performancemanager4.successfactors.com";
		int    requestPort0131 = 443;
		String requestFile0131 = "/odata/v2/restricted/TodoEntryV2/TodoEntryV2" +
				"?%24filter=categoryId%20eq%2057%20and%20status%20eq%202" +
				"&%24orderby=dueDate" +
				"&%24select=dueDate";
		String requestHeader0131 = "GET " + requestFile0131 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-CSRF-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-c24c5544dc227a80207a96c0df371c53-3f02e38362ee2f60-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 0100050001d8c1127d-1e52-4b4c-8428-4ed725ecb22b29820909-1501-babe-face-00000000000321cbe2a0-e522-4a3c-b92e-c11428287224HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0131, requestHost0131, requestPort0131, requestHeader0131, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0131 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 47
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"results\" : [");		// Test [131] <- Index 131
		if(replayMode)
		{
			long proxyDataRecordId =1612210784418L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [132] <- WEB ADMIN Index 132 ---
		String requestProt0132 = "https";
		String requestHost0132 = "performancemanager4.successfactors.com";
		int    requestPort0132 = 443;
		String requestFile0132 = "/xi/ajax/remoting/call/plaincall/OnboardingHP3TileControllerProxy.getOnboardingTasksTile.dwr" +
				"?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d";
		String requestContent0132 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/start?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423523" + "\r\n" + 
				"c0-scriptName=OnboardingHP3TileControllerProxy" + "\r\n" + 
				"c0-methodName=getOnboardingTasksTile" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=3";
		String requestHeader0132 = "POST " + requestFile0132 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0132.length() + "\r\n" + 		// Content-Length: 263
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-c24c5544dc227a80207a96c0df371c53-5194d41a54b6001a-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"OPTR_CXT: 0100050001622c422e-6522-4a50-ac2a-c88a2400922b29820909-1501-babe-face-000000000003aeebd26d-b5b2-4823-9e2d-55ac23a7012bHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"viewid: /ui/homepage3/pages/index.xhtml\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0132, requestHost0132, requestPort0132, requestHeader0132, requestContent0132.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0132 = null;		// support garbage collector to reduce memory
		requestContent0132 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 117
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [132] <- Index 132
		if(replayMode)
		{
			long proxyDataRecordId =1612210784421L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [133] <- WEB ADMIN Index 133 ---
		String requestProt0133 = "https";
		String requestHost0133 = "performancemanager4.successfactors.com";
		int    requestPort0133 = 443;
		String requestFile0133 = "/ui/surj/img/__325472601571f31e1bf00674c368d335.gif" +
				"?perfPhase=TSL";
		String requestHeader0133 = "GET " + requestFile0133 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0133, requestHost0133, requestPort0133, requestHeader0133, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0133 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 43
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [133] <- Index 133
		if(replayMode)
		{
			long proxyDataRecordId =1612210784707L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [134] <- WEB ADMIN Index 134 ---
		String requestProt0134 = "https";
		String requestHost0134 = "performancemanager4.successfactors.com";
		int    requestPort0134 = 443;
		String requestFile0134 = "/perfLogServlet" +
				"?callId=6173853616-1" +
				"&moduleId=HOME" +
				"&pageId=HOME_TAB" +
				"&pageQualifier=HOME_V3" +
				"&TRS=462" +
				"&TIP=2286" +
				"&TML=2286" +
				"&TSL=4418" +
				"&ST=1612210780735" +
				"&ET=1612210784785" +
				"&MEM=9404" +
				"&NRE=35" +
				"&NWR=33" +
				"&SCPU=10" +
				"&SQLC=10" +
				"&SQLT=26" +
				"&SVT=105" +
				"&UCPU=50" +
				"&CPU=60" +
				"&FRE=0" +
				"&FWR=0" +
				"&CCON=0" +
				"&CSUP=6" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=41" +
				"&cssNum=11" +
				"&renderTime=3948" +
				"&RED=2" +
				"&TTB=2492" +
				"&RSR=3172" +
				"&DIA=3461" +
				"&DCP=7499";
		String requestContent0134 = 
				"OPTR_INFO=18e2925f-9132-4b77-932c-38a92222c520!1612210780735!1612210780742!0" +
				"&OPTR_INFO=fafc328f-7e32-4078-b527-41af2ccf4027!1612210780819!1612210781021!0" +
				"&OPTR_INFO=d2312208-e8a2-4e71-b72d-11e52af70f22!1612210781067!1612210781284!0" +
				"&OPTR_INFO=2188426e-cd22-4074-9227-7ee22bda5320!1612210781299!1612210781453!0" +
				"&OPTR_INFO=4235f277-7622-47a3-832a-5dc92d334d2c!1612210781460!1612210781585!0" +
				"&OPTR_INFO=7ef6c298-9832-4d9a-b82e-567d241e9420!1612210781592!1612210782015!0" +
				"&OPTR_INFO=d7d892f1-2902-4366-8222-a2e8228ff92a!1612210782045!1612210782141!0" +
				"&OPTR_INFO=38c992c4-08a2-4820-9c2e-6a7227e4c521!1612210782144!1612210782206!0" +
				"&OPTR_INFO=97936240-1972-487d-9f22-49242fc01624!1612210782206!1612210782291!0" +
				"&OPTR_INFO=4df1d24a-dcb2-4d91-b62e-996b29dac129!1612210782292!1612210782353!0" +
				"&OPTR_INFO=08ade28c-7602-43b0-952a-619a26b81321!1612210782354!1612210782398!0" +
				"&OPTR_INFO=de689290-0232-4d8a-bf27-597422562f2f!1612210782399!1612210782487!0" +
				"&OPTR_INFO=441722b9-4bd2-434d-a524-ae74294f0228!1612210782487!1612210782533!0" +
				"&OPTR_INFO=fdc0d2dd-8f22-4205-a32b-3851257fbc20!1612210782571!1612210783084!0" +
				"&OPTR_INFO=f2e7e2ab-3dc2-4421-b32e-303c28369b23!1612210782643!1612210782791!0" +
				"&OPTR_INFO=046182f4-df32-4535-b822-6df92cf6ea2d!1612210782793!1612210782839!0" +
				"&OPTR_INFO=955e7244-3262-434c-b525-d2a92fffea2f!1612210782841!1612210783018!0" +
				"&OPTR_INFO=07f8b218-ff62-4877-9524-b2d52640f729!1612210783094!1612210783286!0" +
				"&OPTR_INFO=36072240-9322-482e-b421-c808212b6521!1612210783335!1612210783551!0" +
				"&OPTR_INFO=95aa7230-8202-4096-b622-0f2026fb9f2d!1612210783369!1612210783951!0" +
				"&OPTR_INFO=a72332c6-5f92-4fa8-8229-62592becb321!1612210783638!1612210783815!0" +
				"&OPTR_INFO=a0bcf264-1432-4a7d-932e-e3e0226a272d!1612210784002!1612210784343!0" +
				"&OPTR_INFO=84ad82fa-9be2-4e81-8027-54982ed8552a!1612210784016!1612210784220!0" +
				"&OPTR_INFO=72d8b21d-9842-4272-802c-17ea2a86942e!1612210784277!1612210784683!0" +
				"&OPTR_INFO=d11e925b-1e72-4966-9a2a-2e7720b1682e!1612210784302!1612210784615!0" +
				"&OPTR_INFO=97aec2a3-8ec2-4258-9129-1c9c2831d52d!1612210784399!1612210784611!0" +
				"&OPTR_INFO=b907c272-6b32-471d-8023-3aaf2ad16c26!1612210784400!1612210784608!0" +
				"&OPTR_INFO=622c422e-6522-4a50-ac2a-c88a2400922b!1612210784400!1612210784640!0" +
				"&OPTR_INFO=d8c1127d-1e52-4b4c-8428-4ed725ecb22b!1612210784402!1612210784614!0";
		String requestHeader0134 = "POST " + requestFile0134 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0134.length() + "\r\n" + 		// Content-Length: 2232
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: bOeScLiJrc7BgrSynaaYoOavd37Lj2FGd330W2J_RmsMV4BDh4xNfcuIgbxNRpGgbnZ8NWh3N26AOGtaL1R4L_nWTp_YTXhBHYaEkZqneEdpKWpXdZELKrt4OlgxQ02UcZWoTq\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-3e7a3a4ee4b82fcebc1bf0ad396dab01-8d9d88d207afb75d-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304-1\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0134, requestHost0134, requestPort0134, requestHeader0134, requestContent0134.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0134 = null;		// support garbage collector to reduce memory
		requestContent0134 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [134] <- Index 134
		if(replayMode)
		{
			long proxyDataRecordId =1612210784793L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [135] <- WEB ADMIN Index 135 ---
		String requestProt0135 = "https";
		String requestHost0135 = "performancemanager4.successfactors.com";
		int    requestPort0135 = 443;
		String requestFile0135 = "/intake/v2/rum/events";
		String requestContent0135 = 
				requestFileCache.readFile(getSymmetricEncryptContext(), "LoginReport_Prod_SM_corr_RequestContent0135.txt").getFileDataAsString();		// note: consider duplicated definition of this file name near end of the load test program - used for ZIP-dialogue in Project Navigator
		requestContent0135 = Lib.replaceTextPattern(requestContent0135, "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!", C_BelizePlusLanding1, 0);		// search and replace content fragment "lN0gsV2!011Ds3uTBNOBTRXPLPT!10!0-1!PL-1!1!0!!SD0-1!vJ3_1OKjXDrr7-1!Drr7-1!1!!1-1!-1!OKjX11YLbOcPcP-1!-1!VvbVVvbVW=zEZ_vTTKHN8y8y7az!SD1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1cPcP-1!cPcP-1!gDOIYf3M__X=BHDm=LHW1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!7cjQcPcP=vDV7qE!ViAF-1!ViAFSDSDSDSDf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!cPcP1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!011!TH!!!!NO!SD1DE!!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!DE!1!2ZqNUl!" with variable 'C_BelizePlusLanding1' on all occurrences
		requestContent0135 = Lib.replaceTextPattern(requestContent0135, "7be3ac2d", C_MODvalue, 0);		// search and replace content fragment "7be3ac2d" with variable 'C_MODvalue' on all occurrences
		requestContent0135 = Lib.replaceTextPattern(requestContent0135, "a1783402eab9b2853728990e9359cd281b9221b60e44507d1cc2cbb92dda48f6d9663940a7696499ef6b90930f8c3dfe8b3e2c36ec08e0a37892a74e186e3b98,-8669176456599319668,1612212583,1", C_StatusToken1, 0);		// search and replace content fragment "a1783402eab9b2853728990e9359cd281b9221b60e44507d1cc2cbb92dda48f6d9663940a7696499ef6b90930f8c3dfe8b3e2c36ec08e0a37892a74e186e3b98,-8669176456599319668,1612212583,1" with variable 'C_StatusToken1' on all occurrences
		requestContent0135 = Lib.replaceTextPattern(requestContent0135, "EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304", C_EID2, 0);		// search and replace content fragment "EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201151937-2379304" with variable 'C_EID2' on all occurrences

		String requestHeader0135 = "POST " + requestFile0135 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0135.length() + "\r\n" + 		// Content-Length: 87473
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Content-Encoding: gzip\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=HOME&pageId=HOME_TAB&pageQualifier=HOME_V3&uiVersion=V12&userId=TestAutomation\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0135, requestHost0135, requestPort0135, requestHeader0135, requestContent0135.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0135 = null;		// support garbage collector to reduce memory
		requestContent0135 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [135] <- Index 135
		if(replayMode)
		{
			long proxyDataRecordId =1612210785213L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #4_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #5: Reporting
		// # ------------------



		// --- HTTP REQUEST: Test [137] <- WEB ADMIN Index 137 ---
		String requestProt0137 = "https";
		String requestHost0137 = "performancemanager4.successfactors.com";
		int    requestPort0137 = 443;
		String requestFile0137 = "/xi/ui/reportcenter/pages/reportCenter.xhtml" +
				"?bplte_company=Teck" +
				"&_s.crb=" + vScrb;		// recorded value = Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d
		String requestHeader0137 = "GET " + requestFile0137 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0137, requestHost0137, requestPort0137, requestHeader0137, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0137 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 70430
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors Business Execution Suite");		// Test [137] <- Index 137
		if(replayMode)
		{
			long proxyDataRecordId =1612210805291L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_UIRes'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0137_1 = new BoundaryBasedExtractorItem( "uires=" , "=",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0137_1);

		// setup var extractor for 'C_MoD2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0137_2 = new BoundaryBasedExtractorItem( "mod=" , "=",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0137_2);

		// setup var extractor for 'C_3Mvalue'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0137_3 = new BoundaryBasedExtractorItem( "/Teck/_/" , "uires=",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0137_3);

		// setup var extractor for 'C_MoD1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0137_4 = new BoundaryBasedExtractorItem( "mod=" , "=",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0137_4);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_UIRes'
			C_UIRes = boundaryBasedContentExtractorItem0137_1.getResultText();
			log("<<< C_UIRes = " + C_UIRes);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_UIRes!= null && C_UIRes.trim().length() == 0)
			{
				C_UIRes = "";
				log("runtime note: the extraction of a new value for the variable 'C_UIRes' ends up with an empty string - a substitute value was set");
				log("<<< C_UIRes = " + C_UIRes);
			}
		}
		catch (Exception e) { C_UIRes = null; log(e); }
		if (C_UIRes == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_UIRes' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_MoD2'
			C_MoD2 = boundaryBasedContentExtractorItem0137_2.getResultText();
			log("<<< C_MoD2 = " + C_MoD2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_MoD2!= null && C_MoD2.trim().length() == 0)
			{
				C_MoD2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_MoD2' ends up with an empty string - a substitute value was set");
				log("<<< C_MoD2 = " + C_MoD2);
			}
		}
		catch (Exception e) { C_MoD2 = null; log(e); }
		if (C_MoD2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_MoD2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_3Mvalue'
			C_3Mvalue = boundaryBasedContentExtractorItem0137_3.getResultText();
			log("<<< C_3Mvalue = " + C_3Mvalue);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_3Mvalue!= null && C_3Mvalue.trim().length() == 0)
			{
				C_3Mvalue = "";
				log("runtime note: the extraction of a new value for the variable 'C_3Mvalue' ends up with an empty string - a substitute value was set");
				log("<<< C_3Mvalue = " + C_3Mvalue);
			}
		}
		catch (Exception e) { C_3Mvalue = null; log(e); }
		if (C_3Mvalue == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_3Mvalue' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_MoD1'
			C_MoD1 = boundaryBasedContentExtractorItem0137_4.getResultText();
			log("<<< C_MoD1 = " + C_MoD1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_MoD1!= null && C_MoD1.trim().length() == 0)
			{
				C_MoD1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_MoD1' ends up with an empty string - a substitute value was set");
				log("<<< C_MoD1 = " + C_MoD1);
			}
		}
		catch (Exception e) { C_MoD1 = null; log(e); }
		if (C_MoD1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_MoD1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [138] <- WEB ADMIN Index 138 ---
		String requestProt0138 = "https";
		String requestHost0138 = "performancemanager4.successfactors.com";
		int    requestPort0138 = 443;
		String requestFile0138 = "/ui/topnav/css/SFRevolutionTopNav_e4282185fc71427772b9ad8eecfe2f3f.css";
		String requestHeader0138 = "GET " + requestFile0138 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0138, requestHost0138, requestPort0138, requestHeader0138, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0138 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 14218
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [138] <- Index 138
		if(replayMode)
		{
			long proxyDataRecordId =1612210805897L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [139] <- WEB ADMIN Index 139 ---
		String requestProt0139 = "https";
		String requestHost0139 = "performancemanager4.successfactors.com";
		int    requestPort0139 = 443;
		String requestFile0139 = "/ui/uicore/css/revolutioncommon_68959cfd0ca91a92cb126a73f2d4fa37.css";
		String requestHeader0139 = "GET " + requestFile0139 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0139, requestHost0139, requestPort0139, requestHeader0139, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0139 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2379
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [139] <- Index 139
		if(replayMode)
		{
			long proxyDataRecordId =1612210805909L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [140] <- WEB ADMIN Index 140 ---
		String requestProt0140 = "https";
		String requestHost0140 = "performancemanager4.successfactors.com";
		int    requestPort0140 = 443;
		String requestFile0140 = "/ui/uicore/css/fiori_cf10b97cbd8bd62757fdfeee76770415.css";
		String requestHeader0140 = "GET " + requestFile0140 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0140, requestHost0140, requestPort0140, requestHeader0140, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0140 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1312
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [140] <- Index 140
		if(replayMode)
		{
			long proxyDataRecordId =1612210805914L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [141] <- WEB ADMIN Index 141 ---
		String requestProt0141 = "https";
		String requestHost0141 = "performancemanager4.successfactors.com";
		int    requestPort0141 = 443;
		String requestFile0141 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/.dcss;mod=c08f8f08";
		requestFile0141 = Lib.replaceTextPattern(requestFile0141, "3A202", C_UIRes, 0);		// search and replace request file fragment "3A202" with variable 'C_UIRes' on all occurrences
		requestFile0141 = Lib.replaceTextPattern(requestFile0141, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD2, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD2' on all occurrences
		requestFile0141 = Lib.replaceTextPattern(requestFile0141, "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11", C_3Mvalue, 0);		// search and replace request file fragment "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11" with variable 'C_3Mvalue' on all occurrences
		requestFile0141 = Lib.replaceTextPattern(requestFile0141, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD1, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD1' on all occurrences

		String requestHeader0141 = "GET " + requestFile0141 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0141, requestHost0141, requestPort0141, requestHeader0141, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0141 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 8989
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [141] <- Index 141
		if(replayMode)
		{
			long proxyDataRecordId =1612210805915L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [142] <- WEB ADMIN Index 142 ---
		String requestProt0142 = "https";
		String requestHost0142 = "performancemanager4.successfactors.com";
		int    requestPort0142 = 443;
		String requestFile0142 = "/ui/admin/css/tutorial/tutorialvideo_1cad8f05b307a86757f0960d7c9afbc6.css";
		String requestHeader0142 = "GET " + requestFile0142 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0142, requestHost0142, requestPort0142, requestHeader0142, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0142 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 184
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [142] <- Index 142
		if(replayMode)
		{
			long proxyDataRecordId =1612210805919L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [143] <- WEB ADMIN Index 143 ---
		String requestProt0143 = "https";
		String requestHost0143 = "performancemanager4.successfactors.com";
		int    requestPort0143 = 443;
		String requestFile0143 = "/ui/reportcenter/css/common/PageHeader_9043a8bf6628b9b1e6bd6d21e56e91c4.css";
		String requestHeader0143 = "GET " + requestFile0143 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0143, requestHost0143, requestPort0143, requestHeader0143, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0143 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 180
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [143] <- Index 143
		if(replayMode)
		{
			long proxyDataRecordId =1612210805920L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [144] <- WEB ADMIN Index 144 ---
		String requestProt0144 = "https";
		String requestHost0144 = "performancemanager4.successfactors.com";
		int    requestPort0144 = 443;
		String requestFile0144 = "/ui/sfgrp/css/juicMatrixTables_08d30c781611c87566d4d807dee86ccb.css";
		String requestHeader0144 = "GET " + requestFile0144 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0144, requestHost0144, requestPort0144, requestHeader0144, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0144 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 957
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [144] <- Index 144
		if(replayMode)
		{
			long proxyDataRecordId =1612210805968L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [145] <- WEB ADMIN Index 145 ---
		String requestProt0145 = "https";
		String requestHost0145 = "performancemanager4.successfactors.com";
		int    requestPort0145 = 443;
		String requestFile0145 = "/ui/reportcenter/css/reportListPage_c7d45d3b60efd2bc5fa5b895c65ae037.css";
		String requestHeader0145 = "GET " + requestFile0145 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0145, requestHost0145, requestPort0145, requestHeader0145, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0145 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2915
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [145] <- Index 145
		if(replayMode)
		{
			long proxyDataRecordId =1612210805985L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [146] <- WEB ADMIN Index 146 ---
		String requestProt0146 = "https";
		String requestHost0146 = "performancemanager4.successfactors.com";
		int    requestPort0146 = 443;
		String requestFile0146 = "/ui/reportcenter/css/global_f4d3d8b582b5c0f82f57ad315b42bd2e.css";
		String requestHeader0146 = "GET " + requestFile0146 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0146, requestHost0146, requestPort0146, requestHeader0146, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0146 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 470
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [146] <- Index 146
		if(replayMode)
		{
			long proxyDataRecordId =1612210806113L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [147] <- WEB ADMIN Index 147 ---
		String requestProt0147 = "https";
		String requestHost0147 = "performancemanager4.successfactors.com";
		int    requestPort0147 = 443;
		String requestFile0147 = "/ui/ajaxservice/js/engine_116e1015e98245eacd3e1336ebb5e951.js";
		String requestHeader0147 = "GET " + requestFile0147 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0147, requestHost0147, requestPort0147, requestHeader0147, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0147 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6774
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [147] <- Index 147
		if(replayMode)
		{
			long proxyDataRecordId =1612210806117L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [148] <- WEB ADMIN Index 148 ---
		String requestProt0148 = "https";
		String requestHost0148 = "performancemanager4.successfactors.com";
		int    requestPort0148 = 443;
		String requestFile0148 = "/ui/ajaxservice/js/AjaxService_ad0f793e0a95e9692d56b84136745fa4.js";
		String requestHeader0148 = "GET " + requestFile0148 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0148, requestHost0148, requestPort0148, requestHeader0148, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0148 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3155
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [148] <- Index 148
		if(replayMode)
		{
			long proxyDataRecordId =1612210806119L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [149] <- WEB ADMIN Index 149 ---
		String requestProt0149 = "https";
		String requestHost0149 = "performancemanager4.successfactors.com";
		int    requestPort0149 = 443;
		String requestFile0149 = "/ui/sapui5/lite_1.78.6/analytics-modules.js";
		String requestHeader0149 = "GET " + requestFile0149 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0149, requestHost0149, requestPort0149, requestHeader0149, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0149 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 166576
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [149] <- Index 149
		if(replayMode)
		{
			long proxyDataRecordId =1612210806120L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [150] <- WEB ADMIN Index 150 ---
		String requestProt0150 = "https";
		String requestHost0150 = "performancemanager4.successfactors.com";
		int    requestPort0150 = 443;
		String requestFile0150 = "/ui/surj/js/core/surj-ui-core_a844b39e00a5e4a465ac91a46fd40158.js";
		String requestHeader0150 = "GET " + requestFile0150 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0150, requestHost0150, requestPort0150, requestHeader0150, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0150 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1662
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [150] <- Index 150
		if(replayMode)
		{
			long proxyDataRecordId =1612210806121L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [151] <- WEB ADMIN Index 151 ---
		String requestProt0151 = "https";
		String requestHost0151 = "performancemanager4.successfactors.com";
		int    requestPort0151 = 443;
		String requestFile0151 = "/ui/juic/js/core/component-surj_65973e1ae2132ef8c48b9e87c0eb9e55.js";
		String requestHeader0151 = "GET " + requestFile0151 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0151, requestHost0151, requestPort0151, requestHeader0151, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0151 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1273
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [151] <- Index 151
		if(replayMode)
		{
			long proxyDataRecordId =1612210806169L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [152] <- WEB ADMIN Index 152 ---
		String requestProt0152 = "https";
		String requestHost0152 = "performancemanager4.successfactors.com";
		int    requestPort0152 = 443;
		String requestFile0152 = "/ui/peopleprofile/js/actionEditPopup_0ee13f05d3b049aa83e7a148e14f86ce.js";
		String requestHeader0152 = "GET " + requestFile0152 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0152, requestHost0152, requestPort0152, requestHeader0152, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0152 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 353
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [152] <- Index 152
		if(replayMode)
		{
			long proxyDataRecordId =1612210806172L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [153] <- WEB ADMIN Index 153 ---
		String requestProt0153 = "https";
		String requestHost0153 = "performancemanager4.successfactors.com";
		int    requestPort0153 = 443;
		String requestFile0153 = "/ui/platform/js/TopNavBar_63d4e899c44909331682de71de95114f.js";
		String requestHeader0153 = "GET " + requestFile0153 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0153, requestHost0153, requestPort0153, requestHeader0153, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0153 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [153] <- Index 153
		if(replayMode)
		{
			long proxyDataRecordId =1612210806174L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [154] <- WEB ADMIN Index 154 ---
		String requestProt0154 = "https";
		String requestHost0154 = "performancemanager4.successfactors.com";
		int    requestPort0154 = 443;
		String requestFile0154 = "/ui/topnav/js/SFResponsiveHeader_f6a888dde49f266a05fd47137fcde137.js";
		String requestHeader0154 = "GET " + requestFile0154 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0154, requestHost0154, requestPort0154, requestHeader0154, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0154 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1956
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [154] <- Index 154
		if(replayMode)
		{
			long proxyDataRecordId =1612210806175L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [155] <- WEB ADMIN Index 155 ---
		String requestProt0155 = "https";
		String requestHost0155 = "performancemanager4.successfactors.com";
		int    requestPort0155 = 443;
		String requestFile0155 = "/ui/admin/js/tutorial/admTutorialVideoLinks_865b0d37450f2421ba4075681bfbd369.js";
		String requestHeader0155 = "GET " + requestFile0155 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0155, requestHost0155, requestPort0155, requestHeader0155, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0155 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 707
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [155] <- Index 155
		if(replayMode)
		{
			long proxyDataRecordId =1612210806216L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [156] <- WEB ADMIN Index 156 ---
		String requestProt0156 = "https";
		String requestHost0156 = "performancemanager4.successfactors.com";
		int    requestPort0156 = 443;
		String requestFile0156 = "/ui/reportcenter/js/common/PageHeader_0c4cd6fb9d391b5f2db3bc3e9c79940c.js";
		String requestHeader0156 = "GET " + requestFile0156 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0156, requestHost0156, requestPort0156, requestHeader0156, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0156 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 367
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [156] <- Index 156
		if(replayMode)
		{
			long proxyDataRecordId =1612210806217L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 2 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [157] <- WEB ADMIN Index 157 ---
		String requestProt0157 = "https";
		String requestHost0157 = "performancemanager4.successfactors.com";
		int    requestPort0157 = 443;
		String requestFile0157 = "/ui/reportcenter/js/ReportCenterUtil_cf5d320ac01dfb2a5c82f2e2947bc680.js";
		String requestHeader0157 = "GET " + requestFile0157 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0157, requestHost0157, requestPort0157, requestHeader0157, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0157 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2548
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [157] <- Index 157
		if(replayMode)
		{
			long proxyDataRecordId =1612210806227L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [158] <- WEB ADMIN Index 158 ---
		String requestProt0158 = "https";
		String requestHost0158 = "performancemanager4.successfactors.com";
		int    requestPort0158 = 443;
		String requestFile0158 = "/ui/reportcenter/js/utils/formatter_ef1cb4b2a9b0bf9aad3a37dc526f4ff7.js";
		String requestHeader0158 = "GET " + requestFile0158 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0158, requestHost0158, requestPort0158, requestHeader0158, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0158 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 447
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [158] <- Index 158
		if(replayMode)
		{
			long proxyDataRecordId =1612210806251L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [159] <- WEB ADMIN Index 159 ---
		String requestProt0159 = "https";
		String requestHost0159 = "performancemanager4.successfactors.com";
		int    requestPort0159 = 443;
		String requestFile0159 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library.css";
		requestFile0159 = Lib.replaceTextPattern(requestFile0159, "3A202", C_UIRes, 0);		// search and replace request file fragment "3A202" with variable 'C_UIRes' on all occurrences
		requestFile0159 = Lib.replaceTextPattern(requestFile0159, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD2, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD2' on all occurrences
		requestFile0159 = Lib.replaceTextPattern(requestFile0159, "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11", C_3Mvalue, 0);		// search and replace request file fragment "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11" with variable 'C_3Mvalue' on all occurrences
		requestFile0159 = Lib.replaceTextPattern(requestFile0159, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD1, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD1' on all occurrences

		String requestHeader0159 = "GET " + requestFile0159 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0159, requestHost0159, requestPort0159, requestHeader0159, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0159 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 14705
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [159] <- Index 159
		if(replayMode)
		{
			long proxyDataRecordId =1612210806382L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [160] <- WEB ADMIN Index 160 ---
		String requestProt0160 = "https";
		String requestHost0160 = "performancemanager4.successfactors.com";
		int    requestPort0160 = 443;
		String requestFile0160 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library.css";
		requestFile0160 = Lib.replaceTextPattern(requestFile0160, "3A202", C_UIRes, 0);		// search and replace request file fragment "3A202" with variable 'C_UIRes' on all occurrences
		requestFile0160 = Lib.replaceTextPattern(requestFile0160, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD2, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD2' on all occurrences
		requestFile0160 = Lib.replaceTextPattern(requestFile0160, "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11", C_3Mvalue, 0);		// search and replace request file fragment "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11" with variable 'C_3Mvalue' on all occurrences
		requestFile0160 = Lib.replaceTextPattern(requestFile0160, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD1, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD1' on all occurrences

		String requestHeader0160 = "GET " + requestFile0160 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0160, requestHost0160, requestPort0160, requestHeader0160, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0160 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 95194
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [160] <- Index 160
		if(replayMode)
		{
			long proxyDataRecordId =1612210806385L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [161] <- WEB ADMIN Index 161 ---
		String requestProt0161 = "https";
		String requestHost0161 = "performancemanager4.successfactors.com";
		int    requestPort0161 = 443;
		String requestFile0161 = "/ui/sfgrp/js/SURJCommon_a22e8e8da0a7f982cc6bd2794547b3ca.js";
		String requestHeader0161 = "GET " + requestFile0161 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0161, requestHost0161, requestPort0161, requestHeader0161, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0161 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6529
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [161] <- Index 161
		if(replayMode)
		{
			long proxyDataRecordId =1612210806390L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [162] <- WEB ADMIN Index 162 ---
		String requestProt0162 = "https";
		String requestHost0162 = "performancemanager4.successfactors.com";
		int    requestPort0162 = 443;
		String requestFile0162 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/uxap/themes/sap_belize/library.css";
		requestFile0162 = Lib.replaceTextPattern(requestFile0162, "3A202", C_UIRes, 0);		// search and replace request file fragment "3A202" with variable 'C_UIRes' on all occurrences
		requestFile0162 = Lib.replaceTextPattern(requestFile0162, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD2, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD2' on all occurrences
		requestFile0162 = Lib.replaceTextPattern(requestFile0162, "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11", C_3Mvalue, 0);		// search and replace request file fragment "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11" with variable 'C_3Mvalue' on all occurrences
		requestFile0162 = Lib.replaceTextPattern(requestFile0162, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD1, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD1' on all occurrences

		String requestHeader0162 = "GET " + requestFile0162 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0162, requestHost0162, requestPort0162, requestHeader0162, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0162 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 18860
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [162] <- Index 162
		if(replayMode)
		{
			long proxyDataRecordId =1612210806391L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [163] <- WEB ADMIN Index 163 ---
		String requestProt0163 = "https";
		String requestHost0163 = "performancemanager4.successfactors.com";
		int    requestPort0163 = 443;
		String requestFile0163 = "/ui/reportcenter/js/controller/reportListPage.controller_d0c70e753c86e94b39503730adb7a53f.js";
		String requestHeader0163 = "GET " + requestFile0163 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0163, requestHost0163, requestPort0163, requestHeader0163, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0163 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5673
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [163] <- Index 163
		if(replayMode)
		{
			long proxyDataRecordId =1612210806418L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [164] <- WEB ADMIN Index 164 ---
		String requestProt0164 = "https";
		String requestHost0164 = "performancemanager4.successfactors.com";
		int    requestPort0164 = 443;
		String requestFile0164 = "/ui/reportcenter/js/view/reportActionView.fragment_43d2c47ebfb46aedc8930741c46c0f55.js";
		String requestHeader0164 = "GET " + requestFile0164 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0164, requestHost0164, requestPort0164, requestHeader0164, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0164 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1549
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [164] <- Index 164
		if(replayMode)
		{
			long proxyDataRecordId =1612210806424L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [165] <- WEB ADMIN Index 165 ---
		String requestProt0165 = "https";
		String requestHost0165 = "performancemanager4.successfactors.com";
		int    requestPort0165 = 443;
		String requestFile0165 = "/ui/reportcenter/js/common/SortColumn_3a698b1bf5c308712131d712083fa3cd.js";
		String requestHeader0165 = "GET " + requestFile0165 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0165, requestHost0165, requestPort0165, requestHeader0165, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0165 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 458
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [165] <- Index 165
		if(replayMode)
		{
			long proxyDataRecordId =1612210806440L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [166] <- WEB ADMIN Index 166 ---
		String requestProt0166 = "https";
		String requestHost0166 = "performancemanager4.successfactors.com";
		int    requestPort0166 = 443;
		String requestFile0166 = "/ui/reportcenter/js/view/ReportNameView.fragment_c284fc533aa31241fd900d7bf275bafb.js";
		String requestHeader0166 = "GET " + requestFile0166 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0166, requestHost0166, requestPort0166, requestHeader0166, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0166 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1440
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [166] <- Index 166
		if(replayMode)
		{
			long proxyDataRecordId =1612210806479L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [167] <- WEB ADMIN Index 167 ---
		String requestProt0167 = "https";
		String requestHost0167 = "performancemanager4.successfactors.com";
		int    requestPort0167 = 443;
		String requestFile0167 = "/ui/surj/resources_FFDBFA14EE7C86780F850961DBAF8CE9/sap/sf/surj/commons/Breadcrumb.js";
		String requestHeader0167 = "GET " + requestFile0167 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 01000500011b5f02cf-0ff2-43dc-9c28-bd1d2d22e02229820909-1501-babe-face-000000000003727d6299-0ff2-49d2-9e24-bfe727681723HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0167, requestHost0167, requestPort0167, requestHeader0167, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0167 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 436
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [167] <- Index 167
		if(replayMode)
		{
			long proxyDataRecordId =1612210806493L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [168] <- WEB ADMIN Index 168 ---
		String requestProt0168 = "https";
		String requestHost0168 = "performancemanager4.successfactors.com";
		int    requestPort0168 = 443;
		String requestFile0168 = "/ui/reportcenter/js/notification/controller/SACThirdPartyCookieEnableNotification.controller_55b0dbb5c2725c7b521e21657b1c78fa.js";
		String requestHeader0168 = "GET " + requestFile0168 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0168, requestHost0168, requestPort0168, requestHeader0168, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0168 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 975
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [168] <- Index 168
		if(replayMode)
		{
			long proxyDataRecordId =1612210806494L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [169] <- WEB ADMIN Index 169 ---
		String requestProt0169 = "https";
		String requestHost0169 = "performancemanager4.successfactors.com";
		int    requestPort0169 = 443;
		String requestFile0169 = "/ui/reportcenter/js/controller/newReportDialog.controller_19ca4c0f4ee1cb4b4835ad4fde6c0577.js";
		String requestHeader0169 = "GET " + requestFile0169 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0169, requestHost0169, requestPort0169, requestHeader0169, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0169 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3735
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [169] <- Index 169
		if(replayMode)
		{
			long proxyDataRecordId =1612210806495L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [170] <- WEB ADMIN Index 170 ---
		String requestProt0170 = "https";
		String requestHost0170 = "performancemanager4.successfactors.com";
		int    requestPort0170 = 443;
		String requestFile0170 = "/ui/reportcenter/js/common/EnhancedDialog_de0ccd8b3bf56bb74594584dc2e38bd7.js";
		String requestHeader0170 = "GET " + requestFile0170 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0170, requestHost0170, requestPort0170, requestHeader0170, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0170 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 565
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [170] <- Index 170
		if(replayMode)
		{
			long proxyDataRecordId =1612210806503L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [171] <- WEB ADMIN Index 171 ---
		String requestProt0171 = "https";
		String requestHost0171 = "performancemanager4.successfactors.com";
		int    requestPort0171 = 443;
		String requestFile0171 = "/ui/reportcenter/js/common/ImageText_90891cd9b97c66e60b5945403aa217de.js";
		String requestHeader0171 = "GET " + requestFile0171 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0171, requestHost0171, requestPort0171, requestHeader0171, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0171 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 694
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [171] <- Index 171
		if(replayMode)
		{
			long proxyDataRecordId =1612210806645L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [172] <- WEB ADMIN Index 172 ---
		String requestProt0172 = "https";
		String requestHost0172 = "performancemanager4.successfactors.com";
		int    requestPort0172 = 443;
		String requestFile0172 = "/ui/reportcenter/js/view/newReportDialog.view_34800b997c0a70aed33b2089a5e83837.js";
		String requestHeader0172 = "GET " + requestFile0172 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0172, requestHost0172, requestPort0172, requestHeader0172, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0172 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1416
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [172] <- Index 172
		if(replayMode)
		{
			long proxyDataRecordId =1612210806648L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [173] <- WEB ADMIN Index 173 ---
		String requestProt0173 = "https";
		String requestHost0173 = "performancemanager4.successfactors.com";
		int    requestPort0173 = 443;
		String requestFile0173 = "/ui/reportcenter/js/view/ActionMenu.fragment_ff2b58f1380cee245b49f86f5b08eda6.js";
		String requestHeader0173 = "GET " + requestFile0173 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0173, requestHost0173, requestPort0173, requestHeader0173, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0173 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 702
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [173] <- Index 173
		if(replayMode)
		{
			long proxyDataRecordId =1612210806649L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [174] <- WEB ADMIN Index 174 ---
		String requestProt0174 = "https";
		String requestHost0174 = "performancemanager4.successfactors.com";
		int    requestPort0174 = 443;
		String requestFile0174 = "/ui/reportcenter/js/view/ReportListToolbar.fragment_d3f859eb0bea6b082e5137772e7f0012.js";
		String requestHeader0174 = "GET " + requestFile0174 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0174, requestHost0174, requestPort0174, requestHeader0174, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0174 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1649
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [174] <- Index 174
		if(replayMode)
		{
			long proxyDataRecordId =1612210806650L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [175] <- WEB ADMIN Index 175 ---
		String requestProt0175 = "https";
		String requestHost0175 = "performancemanager4.successfactors.com";
		int    requestPort0175 = 443;
		String requestFile0175 = "/ui/reportcenter/js/view/ReportListSortPopover.fragment_5296c6f136d76a8b77d35a0d3b30cad6.js";
		String requestHeader0175 = "GET " + requestFile0175 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0175, requestHost0175, requestPort0175, requestHeader0175, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0175 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 919
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [175] <- Index 175
		if(replayMode)
		{
			long proxyDataRecordId =1612210806651L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [176] <- WEB ADMIN Index 176 ---
		String requestProt0176 = "https";
		String requestHost0176 = "performancemanager4.successfactors.com";
		int    requestPort0176 = 443;
		String requestFile0176 = "/ui/reportcenter/js/view/ReportListFilterBar.fragment_34aadccfed9f4974a5e244ae9f7c6473.js";
		String requestHeader0176 = "GET " + requestFile0176 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0176, requestHost0176, requestPort0176, requestHeader0176, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0176 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1052
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [176] <- Index 176
		if(replayMode)
		{
			long proxyDataRecordId =1612210806692L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 3 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [177] <- WEB ADMIN Index 177 ---
		String requestProt0177 = "https";
		String requestHost0177 = "performancemanager4.successfactors.com";
		int    requestPort0177 = 443;
		String requestFile0177 = "/ui/reportcenter/js/view/ReportCenterLanguageDialog.fragment_b1bfec1539e5f44b67b22dd09a0867e6.js";
		String requestHeader0177 = "GET " + requestFile0177 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0177, requestHost0177, requestPort0177, requestHeader0177, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0177 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1056
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [177] <- Index 177
		if(replayMode)
		{
			long proxyDataRecordId =1612210806699L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [178] <- WEB ADMIN Index 178 ---
		String requestProt0178 = "https";
		String requestHost0178 = "performancemanager4.successfactors.com";
		int    requestPort0178 = 443;
		String requestFile0178 = "/ui/reportcenter/js/controller/scheduleJobDialog.controller_e176d11a89c0b50e50300fdd31a91521.js";
		String requestHeader0178 = "GET " + requestFile0178 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0178, requestHost0178, requestPort0178, requestHeader0178, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0178 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8443
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [178] <- Index 178
		if(replayMode)
		{
			long proxyDataRecordId =1612210806716L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [179] <- WEB ADMIN Index 179 ---
		String requestProt0179 = "https";
		String requestHost0179 = "performancemanager4.successfactors.com";
		int    requestPort0179 = 443;
		String requestFile0179 = "/ui/reportcenter/js/view/scheduleJobDialog.view_4a8dd3fe23682ac9153a0078145b23dc.js";
		String requestHeader0179 = "GET " + requestFile0179 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0179, requestHost0179, requestPort0179, requestHeader0179, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0179 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6150
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [179] <- Index 179
		if(replayMode)
		{
			long proxyDataRecordId =1612210806723L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [180] <- WEB ADMIN Index 180 ---
		String requestProt0180 = "https";
		String requestHost0180 = "performancemanager4.successfactors.com";
		int    requestPort0180 = 443;
		String requestFile0180 = "/ui/reportcenter/js/view/ReportCenterImportResponseHandler_0fdb44d0e509b4c19359d25a642b959a.js";
		String requestHeader0180 = "GET " + requestFile0180 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0180, requestHost0180, requestPort0180, requestHeader0180, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0180 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 132
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [180] <- Index 180
		if(replayMode)
		{
			long proxyDataRecordId =1612210806736L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [181] <- WEB ADMIN Index 181 ---
		String requestProt0181 = "https";
		String requestHost0181 = "performancemanager4.successfactors.com";
		int    requestPort0181 = 443;
		String requestFile0181 = "/ui/reportcenter/js/controller/ReportCenterImportDialog.controller_d0f64a303c5ef2cf6964738f27989b3f.js";
		String requestHeader0181 = "GET " + requestFile0181 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0181, requestHost0181, requestPort0181, requestHeader0181, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0181 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4072
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [181] <- Index 181
		if(replayMode)
		{
			long proxyDataRecordId =1612210806757L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [182] <- WEB ADMIN Index 182 ---
		String requestProt0182 = "https";
		String requestHost0182 = "performancemanager4.successfactors.com";
		int    requestPort0182 = 443;
		String requestFile0182 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/unified/themes/sap_belize/library.css";
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "3A202", C_UIRes, 0);		// search and replace request file fragment "3A202" with variable 'C_UIRes' on all occurrences
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD2, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD2' on all occurrences
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11", C_3Mvalue, 0);		// search and replace request file fragment "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11" with variable 'C_3Mvalue' on all occurrences
		requestFile0182 = Lib.replaceTextPattern(requestFile0182, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD1, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD1' on all occurrences

		String requestHeader0182 = "GET " + requestFile0182 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0182, requestHost0182, requestPort0182, requestHeader0182, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0182 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 26529
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [182] <- Index 182
		if(replayMode)
		{
			long proxyDataRecordId =1612210806785L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [183] <- WEB ADMIN Index 183 ---
		String requestProt0183 = "https";
		String requestHost0183 = "performancemanager4.successfactors.com";
		int    requestPort0183 = 443;
		String requestFile0183 = "/ui/reportcenter/js/view/ReportCenterImportDialog.view_068622b3f14bc239dd97eac3f8554136.js";
		String requestHeader0183 = "GET " + requestFile0183 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0183, requestHost0183, requestPort0183, requestHeader0183, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0183 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3718
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [183] <- Index 183
		if(replayMode)
		{
			long proxyDataRecordId =1612210806792L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [184] <- WEB ADMIN Index 184 ---
		String requestProt0184 = "https";
		String requestHost0184 = "performancemanager4.successfactors.com";
		int    requestPort0184 = 443;
		String requestFile0184 = "/ui/reportcenter/js/common/EnhancedLink_caa942f8258d3f03ebac296a9c16c122.js";
		String requestHeader0184 = "GET " + requestFile0184 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0184, requestHost0184, requestPort0184, requestHeader0184, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0184 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 293
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [184] <- Index 184
		if(replayMode)
		{
			long proxyDataRecordId =1612210806796L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [185] <- WEB ADMIN Index 185 ---
		String requestProt0185 = "https";
		String requestHost0185 = "performancemanager4.successfactors.com";
		int    requestPort0185 = 443;
		String requestFile0185 = "/ui/reportcenter/js/common/ReportCenterUserSearch_f518dc94e280001cbee872b0754c060c.js";
		String requestHeader0185 = "GET " + requestFile0185 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0185, requestHost0185, requestPort0185, requestHeader0185, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0185 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 881
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [185] <- Index 185
		if(replayMode)
		{
			long proxyDataRecordId =1612210806797L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [186] <- WEB ADMIN Index 186 ---
		String requestProt0186 = "https";
		String requestHost0186 = "performancemanager4.successfactors.com";
		int    requestPort0186 = 443;
		String requestFile0186 = "/ui/reportcenter/js/view/ReportCenterOwnerChangeDialog.fragment_bf4a0ad4a1cb073aadea04b6a6a20a4d.js";
		String requestHeader0186 = "GET " + requestFile0186 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0186, requestHost0186, requestPort0186, requestHeader0186, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0186 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1070
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [186] <- Index 186
		if(replayMode)
		{
			long proxyDataRecordId =1612210806846L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [187] <- WEB ADMIN Index 187 ---
		String requestProt0187 = "https";
		String requestHost0187 = "performancemanager4.successfactors.com";
		int    requestPort0187 = 443;
		String requestFile0187 = "/ui/reportcenter/js/common/ReportCenterUserSearchInput_edd1d9d71b3d01980e66a239a06b8d44.js";
		String requestHeader0187 = "GET " + requestFile0187 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0187, requestHost0187, requestPort0187, requestHeader0187, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0187 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 753
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [187] <- Index 187
		if(replayMode)
		{
			long proxyDataRecordId =1612210806860L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [188] <- WEB ADMIN Index 188 ---
		String requestProt0188 = "https";
		String requestHost0188 = "performancemanager4.successfactors.com";
		int    requestPort0188 = 443;
		String requestFile0188 = "/ui/reportcenter/js/controller/rcLabelAs.controller_451edec16c7cccffaf5a413cec6a0411.js";
		String requestHeader0188 = "GET " + requestFile0188 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0188, requestHost0188, requestPort0188, requestHeader0188, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0188 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5826
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [188] <- Index 188
		if(replayMode)
		{
			long proxyDataRecordId =1612210806862L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [189] <- WEB ADMIN Index 189 ---
		String requestProt0189 = "https";
		String requestHost0189 = "performancemanager4.successfactors.com";
		int    requestPort0189 = 443;
		String requestFile0189 = "/ui/reportcenter/js/view/rcManageLabels.fragment_890e5c04e68854eccb3e1fb7a91435fb.js";
		String requestHeader0189 = "GET " + requestFile0189 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0189, requestHost0189, requestPort0189, requestHeader0189, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0189 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1515
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [189] <- Index 189
		if(replayMode)
		{
			long proxyDataRecordId =1612210806868L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [190] <- WEB ADMIN Index 190 ---
		String requestProt0190 = "https";
		String requestHost0190 = "performancemanager4.successfactors.com";
		int    requestPort0190 = 443;
		String requestFile0190 = "/ui/reportcenter/js/view/rcCreateEditLabel.fragment_20631d060c90c4e4d8cf19e4324122c5.js";
		String requestHeader0190 = "GET " + requestFile0190 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0190, requestHost0190, requestPort0190, requestHeader0190, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0190 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2107
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [190] <- Index 190
		if(replayMode)
		{
			long proxyDataRecordId =1612210806876L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [191] <- WEB ADMIN Index 191 ---
		String requestProt0191 = "https";
		String requestHost0191 = "performancemanager4.successfactors.com";
		int    requestPort0191 = 443;
		String requestFile0191 = "/ui/sapui5/main_1.78.6/sap/ui/comp/odata/type/FiscalDate.js";
		String requestHeader0191 = "GET " + requestFile0191 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001ef336256-d682-47c1-8d20-140727d12c2329820909-1501-babe-face-000000000003e46812ee-e352-4b58-a02c-4eb826cbef24HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0191, requestHost0191, requestPort0191, requestHeader0191, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0191 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 887
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [191] <- Index 191
		if(replayMode)
		{
			long proxyDataRecordId =1612210806897L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [192] <- WEB ADMIN Index 192 ---
		String requestProt0192 = "https";
		String requestHost0192 = "performancemanager4.successfactors.com";
		int    requestPort0192 = 443;
		String requestFile0192 = "/ui/sapui5/main_1.78.6/sap/ui/comp/themes/sap_belize/library.css";
		String requestHeader0192 = "GET " + requestFile0192 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0192, requestHost0192, requestPort0192, requestHeader0192, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0192 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 5516
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [192] <- Index 192
		if(replayMode)
		{
			long proxyDataRecordId =1612210806979L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [193] <- WEB ADMIN Index 193 ---
		String requestProt0193 = "https";
		String requestHost0193 = "performancemanager4.successfactors.com";
		int    requestPort0193 = 443;
		String requestFile0193 = "/ui/reportcenter/js/view/LabelLocalizationView.fragment_32dc05ce2d9b3466c395154ad3a979f4.js";
		String requestHeader0193 = "GET " + requestFile0193 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0193, requestHost0193, requestPort0193, requestHeader0193, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0193 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2295
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [193] <- Index 193
		if(replayMode)
		{
			long proxyDataRecordId =1612210806980L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [194] <- WEB ADMIN Index 194 ---
		String requestProt0194 = "https";
		String requestHost0194 = "performancemanager4.successfactors.com";
		int    requestPort0194 = 443;
		String requestFile0194 = "/ui/reportcenter/js/view/rcLabelAs.view_d4789d64ce832361aaec883367ae5e0c.js";
		String requestHeader0194 = "GET " + requestFile0194 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0194, requestHost0194, requestPort0194, requestHeader0194, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0194 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1375
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [194] <- Index 194
		if(replayMode)
		{
			long proxyDataRecordId =1612210806986L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [195] <- WEB ADMIN Index 195 ---
		String requestProt0195 = "https";
		String requestHost0195 = "performancemanager4.successfactors.com";
		int    requestPort0195 = 443;
		String requestFile0195 = "/ui/reportcenter/js/common/ReportCenterUserSearchMultiInput_0522fe76256b1406e206dc51f466a181.js";
		String requestHeader0195 = "GET " + requestFile0195 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0195, requestHost0195, requestPort0195, requestHeader0195, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0195 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 889
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [195] <- Index 195
		if(replayMode)
		{
			long proxyDataRecordId =1612210806990L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [196] <- WEB ADMIN Index 196 ---
		String requestProt0196 = "https";
		String requestHost0196 = "performancemanager4.successfactors.com";
		int    requestPort0196 = 443;
		String requestFile0196 = "/ui/sapui5/main_1.78.6/sap/ui/comp/smartfield/type/String.js";
		String requestHeader0196 = "GET " + requestFile0196 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001a5f68260-c6f2-4448-a42a-c36e2a09422c29820909-1501-babe-face-00000000000339a6928d-5942-419b-8729-56102ef4a32cHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0196, requestHost0196, requestPort0196, requestHeader0196, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0196 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 320
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [196] <- Index 196
		if(replayMode)
		{
			long proxyDataRecordId =1612210806995L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 4 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [197] <- WEB ADMIN Index 197 ---
		String requestProt0197 = "https";
		String requestHost0197 = "performancemanager4.successfactors.com";
		int    requestPort0197 = 443;
		String requestFile0197 = "/ui/reportcenter/js/controller/reportList.controller_f6ecb3d1727d6b47959b421b6d74eba4.js";
		String requestHeader0197 = "GET " + requestFile0197 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0197, requestHost0197, requestPort0197, requestHeader0197, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0197 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 17649
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [197] <- Index 197
		if(replayMode)
		{
			long proxyDataRecordId =1612210807036L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [198] <- WEB ADMIN Index 198 ---
		String requestProt0198 = "https";
		String requestHost0198 = "performancemanager4.successfactors.com";
		int    requestPort0198 = 443;
		String requestFile0198 = "/ui/sapui5/main_1.78.6/sap/ui/comp/odata/FiscalFormat.js";
		String requestHeader0198 = "GET " + requestFile0198 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001b25962f9-8a22-4560-b428-e14d21a5b52129820909-1501-babe-face-0000000000036fd26222-7512-4c33-a62a-1cf22281f62dHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0198, requestHost0198, requestPort0198, requestHeader0198, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0198 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1575
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [198] <- Index 198
		if(replayMode)
		{
			long proxyDataRecordId =1612210807042L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [199] <- WEB ADMIN Index 199 ---
		String requestProt0199 = "https";
		String requestHost0199 = "performancemanager4.successfactors.com";
		int    requestPort0199 = 443;
		String requestFile0199 = "/ui/reportcenter/js/view/reportList.view_75c33f209ca98998df6c057add3346f4.js";
		String requestHeader0199 = "GET " + requestFile0199 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0199, requestHost0199, requestPort0199, requestHeader0199, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0199 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3600
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [199] <- Index 199
		if(replayMode)
		{
			long proxyDataRecordId =1612210807044L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [200] <- WEB ADMIN Index 200 ---
		String requestProt0200 = "https";
		String requestHost0200 = "performancemanager4.successfactors.com";
		int    requestPort0200 = 443;
		String requestFile0200 = "/ui/reportcenter/js/view/reportListPage.view_52142335d22103d998019e2f81bef6b7.js";
		String requestHeader0200 = "GET " + requestFile0200 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0200, requestHost0200, requestPort0200, requestHeader0200, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0200 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1371
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [200] <- Index 200
		if(replayMode)
		{
			long proxyDataRecordId =1612210807052L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [201] <- WEB ADMIN Index 201 ---
		String requestProt0201 = "https";
		String requestHost0201 = "performancemanager4.successfactors.com";
		int    requestPort0201 = 443;
		String requestFile0201 = "/ui/juic/js/components/sfSpacingManager_3d18488b97beb2eca273c8ce5517f7df.js";
		String requestHeader0201 = "GET " + requestFile0201 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0201, requestHost0201, requestPort0201, requestHeader0201, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0201 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2387
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [201] <- Index 201
		if(replayMode)
		{
			long proxyDataRecordId =1612210807061L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [202] <- WEB ADMIN Index 202 ---
		String requestProt0202 = "https";
		String requestHost0202 = "performancemanager4.successfactors.com";
		int    requestPort0202 = 443;
		String requestFile0202 = "/ui/sfgrp/js/juicLayoutUtils_c5d2a3e384ce9c74cf8f7c8ce8be2d12.js";
		String requestHeader0202 = "GET " + requestFile0202 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0202, requestHost0202, requestPort0202, requestHeader0202, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0202 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 31864
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [202] <- Index 202
		if(replayMode)
		{
			long proxyDataRecordId =1612210807098L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [203] <- WEB ADMIN Index 203 ---
		String requestProt0203 = "https";
		String requestHost0203 = "performancemanager4.successfactors.com";
		int    requestPort0203 = 443;
		String requestFile0203 = "/ui/analyticspane/js/component/AnalyticsPaneLoad_e1e0ded9a823426996b2efbedfa4ba91.js";
		String requestHeader0203 = "GET " + requestFile0203 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0203, requestHost0203, requestPort0203, requestHeader0203, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0203 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 205
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [203] <- Index 203
		if(replayMode)
		{
			long proxyDataRecordId =1612210807114L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [204] <- WEB ADMIN Index 204 ---
		String requestProt0204 = "https";
		String requestHost0204 = "performancemanager4.successfactors.com";
		int    requestPort0204 = 443;
		String requestFile0204 = "/ui/sapui5/main_1.78.6/sap/ui/comp/odata/type/NumericText.js";
		String requestHeader0204 = "GET " + requestFile0204 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 010005000183ce72ec-bbf2-4146-8a20-bb032edd182f29820909-1501-babe-face-000000000003b0e25298-dd12-4628-842c-e4682d84b826HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0204, requestHost0204, requestPort0204, requestHeader0204, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0204 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 371
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [204] <- Index 204
		if(replayMode)
		{
			long proxyDataRecordId =1612210807150L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [205] <- WEB ADMIN Index 205 ---
		String requestProt0205 = "https";
		String requestHost0205 = "performancemanager4.successfactors.com";
		int    requestPort0205 = 443;
		String requestFile0205 = "/ui/sapui5/main_1.78.6/sap/ui/comp/odata/FiscalMetadata.js";
		String requestHeader0205 = "GET " + requestFile0205 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 010005000145b8b26a-9322-47d0-a021-1f792e68362629820909-1501-babe-face-000000000003f07e32fe-44e2-4c69-9423-f2322a09ae2aHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0205, requestHost0205, requestPort0205, requestHeader0205, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0205 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 474
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [205] <- Index 205
		if(replayMode)
		{
			long proxyDataRecordId =1612210807315L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [206] <- WEB ADMIN Index 206 ---
		String requestProt0206 = "https";
		String requestHost0206 = "performancemanager4.successfactors.com";
		int    requestPort0206 = 443;
		String requestFile0206 = "/ui/sapui5/main_1.78.6/sap/ui/model/odata/AnnotationHelper.js";
		String requestHeader0206 = "GET " + requestFile0206 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001a06012f4-98b2-442b-b527-0b3922a88d2e29820909-1501-babe-face-0000000000034fbf026a-b6b2-48b9-9425-a5c527f9cb20HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0206, requestHost0206, requestPort0206, requestHeader0206, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0206 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1169
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [206] <- Index 206
		if(replayMode)
		{
			long proxyDataRecordId =1612210807368L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [207] <- WEB ADMIN Index 207 ---
		String requestProt0207 = "https";
		String requestHost0207 = "performancemanager4.successfactors.com";
		int    requestPort0207 = 443;
		String requestFile0207 = "/ui/sapui5/main_1.78.6/sap/ui/comp/util/DateTimeUtil.js";
		String requestHeader0207 = "GET " + requestFile0207 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001915b825e-1542-410f-af2a-521f2cc0432829820909-1501-babe-face-000000000003f3186222-5c12-4f75-af25-d0b52c8c992bHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0207, requestHost0207, requestPort0207, requestHeader0207, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0207 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 521
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [207] <- Index 207
		if(replayMode)
		{
			long proxyDataRecordId =1612210807429L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [208] <- WEB ADMIN Index 208 ---
		String requestProt0208 = "https";
		String requestHost0208 = "performancemanager4.successfactors.com";
		int    requestPort0208 = 443;
		String requestFile0208 = "/ui/sapui5/main_1.78.6/sap/m/TimePicker.js";
		String requestHeader0208 = "GET " + requestFile0208 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001ffd55203-5692-4e88-b02d-90a129545f2c29820909-1501-babe-face-000000000003717522a3-0c92-4f42-8a27-e8bb2fcf762cHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0208, requestHost0208, requestPort0208, requestHeader0208, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0208 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5834
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [208] <- Index 208
		if(replayMode)
		{
			long proxyDataRecordId =1612210807504L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [209] <- WEB ADMIN Index 209 ---
		String requestProt0209 = "https";
		String requestHost0209 = "performancemanager4.successfactors.com";
		int    requestPort0209 = 443;
		String requestFile0209 = "/ui/sapui5/main_1.78.6/sap/m/MaskInputRule.js";
		String requestHeader0209 = "GET " + requestFile0209 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001eea72219-1662-48f3-ac2e-3d44243c792329820909-1501-babe-face-000000000003b6a25250-bcf2-4732-a22d-f0662fa5322bHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0209, requestHost0209, requestPort0209, requestHeader0209, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0209 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 528
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [209] <- Index 209
		if(replayMode)
		{
			long proxyDataRecordId =1612210807572L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [210] <- WEB ADMIN Index 210 ---
		String requestProt0210 = "https";
		String requestHost0210 = "performancemanager4.successfactors.com";
		int    requestPort0210 = 443;
		String requestFile0210 = "/ui/sapui5/main_1.78.6/sap/m/MaskEnabler.js";
		String requestHeader0210 = "GET " + requestFile0210 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001278d2214-0ca2-402c-bf2b-a97623957f2129820909-1501-babe-face-000000000003658792ce-5c32-4362-8821-4682297ae52fHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0210, requestHost0210, requestPort0210, requestHeader0210, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0210 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4871
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [210] <- Index 210
		if(replayMode)
		{
			long proxyDataRecordId =1612210807619L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [211] <- WEB ADMIN Index 211 ---
		String requestProt0211 = "https";
		String requestHost0211 = "performancemanager4.successfactors.com";
		int    requestPort0211 = 443;
		String requestFile0211 = "/ui/sapui5/main_1.78.6/sap/m/TimePickerRenderer.js";
		String requestHeader0211 = "GET " + requestFile0211 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001068dc215-7f52-4a25-b82b-d8b3204f862829820909-1501-babe-face-000000000003c4d1e25a-c8e2-4628-9d2f-811226d71e2cHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0211, requestHost0211, requestPort0211, requestHeader0211, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0211 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 691
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [211] <- Index 211
		if(replayMode)
		{
			long proxyDataRecordId =1612210807683L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [212] <- WEB ADMIN Index 212 ---
		String requestProt0212 = "https";
		String requestHost0212 = "performancemanager4.successfactors.com";
		int    requestPort0212 = 443;
		String requestFile0212 = "/ui/sapui5/main_1.78.6/sap/ui/layout/AlignedFlowLayout.js";
		String requestHeader0212 = "GET " + requestFile0212 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 010005000193e602fa-7672-4b80-b42c-6f812c6b2a2629820909-1501-babe-face-00000000000370dbb28a-87b2-4e3b-bc29-f6e22deb0921HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0212, requestHost0212, requestPort0212, requestHeader0212, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0212 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1919
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [212] <- Index 212
		if(replayMode)
		{
			long proxyDataRecordId =1612210807746L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [213] <- WEB ADMIN Index 213 ---
		String requestProt0213 = "https";
		String requestHost0213 = "performancemanager4.successfactors.com";
		int    requestPort0213 = 443;
		String requestFile0213 = "/ui/sapui5/main_1.78.6/sap/ui/layout/AlignedFlowLayoutRenderer.js";
		String requestHeader0213 = "GET " + requestFile0213 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001b2aa42da-70b2-463e-bb2d-f7ba2316b12a29820909-1501-babe-face-000000000003ff1642db-61d2-41c4-af21-e6f428c1102dHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0213, requestHost0213, requestPort0213, requestHeader0213, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0213 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 648
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [213] <- Index 213
		if(replayMode)
		{
			long proxyDataRecordId =1612210807800L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [214] <- WEB ADMIN Index 214 ---
		String requestProt0214 = "https";
		String requestHost0214 = "performancemanager4.successfactors.com";
		int    requestPort0214 = 443;
		String requestFile0214 = "/ui/sapui5/main_1.78.6/sap/m/MenuItem.js";
		String requestHeader0214 = "GET " + requestFile0214 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001c704924b-9922-4451-8728-d06d2b7deb2a29820909-1501-babe-face-000000000003279a1203-eef2-4ffd-ae21-c6d42e35972aHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0214, requestHost0214, requestPort0214, requestHeader0214, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0214 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1311
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [214] <- Index 214
		if(replayMode)
		{
			long proxyDataRecordId =1612210807957L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [215] <- WEB ADMIN Index 215 ---
		String requestProt0215 = "https";
		String requestHost0215 = "performancemanager4.successfactors.com";
		int    requestPort0215 = 443;
		String requestFile0215 = "/ui/sapui5/main_1.78.6/sap/m/Menu.js";
		String requestHeader0215 = "GET " + requestFile0215 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 010005000106602210-9b62-4dc8-a028-c55c239bb62a29820909-1501-babe-face-000000000003d8fbe2bb-38e2-4685-bc2b-994a27c0ae21HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0215, requestHost0215, requestPort0215, requestHeader0215, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0215 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3640
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [215] <- Index 215
		if(replayMode)
		{
			long proxyDataRecordId =1612210808020L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [216] <- WEB ADMIN Index 216 ---
		String requestProt0216 = "https";
		String requestHost0216 = "performancemanager4.successfactors.com";
		int    requestPort0216 = 443;
		String requestFile0216 = "/ui/sapui5/main_1.78.6/sap/m/MenuListItem.js";
		String requestHeader0216 = "GET " + requestFile0216 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 010005000161736216-9d22-4837-8424-35c92478c62a29820909-1501-babe-face-00000000000373dec2ee-2d62-4dfc-bd2a-03122a47222bHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0216, requestHost0216, requestPort0216, requestHeader0216, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0216 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 807
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [216] <- Index 216
		if(replayMode)
		{
			long proxyDataRecordId =1612210808064L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 5 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [217] <- WEB ADMIN Index 217 ---
		String requestProt0217 = "https";
		String requestHost0217 = "performancemanager4.successfactors.com";
		int    requestPort0217 = 443;
		String requestFile0217 = "/ui/sapui5/main_1.78.6/sap/m/MenuListItemRenderer.js";
		String requestHeader0217 = "GET " + requestFile0217 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 01000500019226d28e-5412-4238-8b27-36fc22dedb2c29820909-1501-babe-face-00000000000347a2a266-4c32-4bba-a024-04fb28ad322aHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0217, requestHost0217, requestPort0217, requestHeader0217, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0217 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 685
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [217] <- Index 217
		if(replayMode)
		{
			long proxyDataRecordId =1612210808130L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [218] <- WEB ADMIN Index 218 ---
		String requestProt0218 = "https";
		String requestHost0218 = "performancemanager4.successfactors.com";
		int    requestPort0218 = 443;
		String requestFile0218 = "/messagebundle/Teck/vmod_158c3be9-614fc7e3/common!/ui/sapui5/main/sap/ui/comp/messagebundle_en_US.properties";
		String requestHeader0218 = "GET " + requestFile0218 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 01000500018648a2ea-d712-4277-b32f-85da2b26622629820909-1501-babe-face-00000000000350356230-66a2-40aa-9e2e-8ebe24974728HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0218, requestHost0218, requestPort0218, requestHeader0218, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0218 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/X-JAVA-PROPERTIES", header text fragment = [verification disabled], recorded content size = 4950
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/X-JAVA-PROPERTIES", null, null);		// Test [218] <- Index 218
		if(replayMode)
		{
			long proxyDataRecordId =1612210808189L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [219] <- WEB ADMIN Index 219 ---
		String requestProt0219 = "https";
		String requestHost0219 = "performancemanager4.successfactors.com";
		int    requestPort0219 = 443;
		String requestFile0219 = "/ui/sapui5/main_1.78.6/sap/m/Tree.js";
		String requestHeader0219 = "GET " + requestFile0219 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 01000500011652f288-f382-4780-b725-342026a2d72329820909-1501-babe-face-000000000003a5546203-48d2-4a49-a02f-439322ea3f22HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0219, requestHost0219, requestPort0219, requestHeader0219, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0219 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1906
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [219] <- Index 219
		if(replayMode)
		{
			long proxyDataRecordId =1612210808369L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [220] <- WEB ADMIN Index 220 ---
		String requestProt0220 = "https";
		String requestHost0220 = "performancemanager4.successfactors.com";
		int    requestPort0220 = 443;
		String requestFile0220 = "/ui/sapui5/main_1.78.6/sap/ui/model/ClientTreeBindingAdapter.js";
		String requestHeader0220 = "GET " + requestFile0220 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001f2d7929e-d512-4c76-b029-7f052b52fb2c29820909-1501-babe-face-000000000003085bc275-5672-4715-b727-4a5e2ad8b423HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0220, requestHost0220, requestPort0220, requestHeader0220, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0220 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1133
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [220] <- Index 220
		if(replayMode)
		{
			long proxyDataRecordId =1612210808420L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [221] <- WEB ADMIN Index 221 ---
		String requestProt0221 = "https";
		String requestHost0221 = "performancemanager4.successfactors.com";
		int    requestPort0221 = 443;
		String requestFile0221 = "/ui/sapui5/main_1.78.6/sap/ui/model/TreeBindingAdapter.js";
		String requestHeader0221 = "GET " + requestFile0221 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001f43ef2ed-13b2-4c9a-be2b-e8ae2811092729820909-1501-babe-face-000000000003d2b5e2f1-84e2-4c36-b224-4068239c7c2eHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0221, requestHost0221, requestPort0221, requestHeader0221, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0221 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5066
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [221] <- Index 221
		if(replayMode)
		{
			long proxyDataRecordId =1612210808479L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [222] <- WEB ADMIN Index 222 ---
		String requestProt0222 = "https";
		String requestHost0222 = "performancemanager4.successfactors.com";
		int    requestPort0222 = 443;
		String requestFile0222 = "/ui/sapui5/main_1.78.6/sap/ui/model/TreeBindingCompatibilityAdapter.js";
		String requestHeader0222 = "GET " + requestFile0222 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 010005000148c852e2-d672-46eb-8f28-46c0270f432e29820909-1501-babe-face-00000000000363b57240-0262-4ef0-ac21-273326a1a423HTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0222, requestHost0222, requestPort0222, requestHeader0222, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0222 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1357
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [222] <- Index 222
		if(replayMode)
		{
			long proxyDataRecordId =1612210808535L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [223] <- WEB ADMIN Index 223 ---
		String requestProt0223 = "https";
		String requestHost0223 = "performancemanager4.successfactors.com";
		int    requestPort0223 = 443;
		String requestFile0223 = "/ui/sapui5/main_1.78.6/sap/m/TreeRenderer.js";
		String requestHeader0223 = "GET " + requestFile0223 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 01000500019606d2c5-9ef2-493b-ae2c-595721a25e2d29820909-1501-babe-face-0000000000034eb5e238-90c2-43ca-9320-1022264a482aHTTP    ;\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0223, requestHost0223, requestPort0223, requestHeader0223, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0223 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 267
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [223] <- Index 223
		if(replayMode)
		{
			long proxyDataRecordId =1612210808611L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [224] <- WEB ADMIN Index 224 ---
		String requestProt0224 = "https";
		String requestHost0224 = "performancemanager4.successfactors.com";
		int    requestPort0224 = 443;
		String requestFile0224 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/library-parameters.json";
		requestFile0224 = Lib.replaceTextPattern(requestFile0224, "3A202", C_UIRes, 0);		// search and replace request file fragment "3A202" with variable 'C_UIRes' on all occurrences
		requestFile0224 = Lib.replaceTextPattern(requestFile0224, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD2, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD2' on all occurrences
		requestFile0224 = Lib.replaceTextPattern(requestFile0224, "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11", C_3Mvalue, 0);		// search and replace request file fragment "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11" with variable 'C_3Mvalue' on all occurrences
		requestFile0224 = Lib.replaceTextPattern(requestFile0224, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD1, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD1' on all occurrences

		String requestHeader0224 = "GET " + requestFile0224 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 010005000169b7c2e0-9e22-4fcd-8f21-ec0129beff2629820909-1501-babe-face-000000000003460792cf-38a2-40da-ad21-4e09200e132bHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0224, requestHost0224, requestPort0224, requestHeader0224, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0224 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 14652
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{\"");		// Test [224] <- Index 224
		if(replayMode)
		{
			long proxyDataRecordId =1612210808776L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [225] <- WEB ADMIN Index 225 ---
		String requestProt0225 = "https";
		String requestHost0225 = "performancemanager4.successfactors.com";
		int    requestPort0225 = 443;
		String requestFile0225 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/m/themes/sap_belize/library-parameters.json";
		requestFile0225 = Lib.replaceTextPattern(requestFile0225, "3A202", C_UIRes, 0);		// search and replace request file fragment "3A202" with variable 'C_UIRes' on all occurrences
		requestFile0225 = Lib.replaceTextPattern(requestFile0225, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD2, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD2' on all occurrences
		requestFile0225 = Lib.replaceTextPattern(requestFile0225, "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11", C_3Mvalue, 0);		// search and replace request file fragment "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11" with variable 'C_3Mvalue' on all occurrences
		requestFile0225 = Lib.replaceTextPattern(requestFile0225, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD1, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD1' on all occurrences

		String requestHeader0225 = "GET " + requestFile0225 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 01000500019864524b-8ef2-4ec4-9629-cccc297aad2a29820909-1501-babe-face-000000000003e9b76240-e752-4f35-9028-e0b42c64092bHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0225, requestHost0225, requestPort0225, requestHeader0225, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0225 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 4232
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{");		// Test [225] <- Index 225
		if(replayMode)
		{
			long proxyDataRecordId =1612210808857L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [226] <- WEB ADMIN Index 226 ---
		String requestProt0226 = "https";
		String requestHost0226 = "performancemanager4.successfactors.com";
		int    requestPort0226 = 443;
		String requestFile0226 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/uxap/themes/sap_belize/library-parameters.json";
		requestFile0226 = Lib.replaceTextPattern(requestFile0226, "3A202", C_UIRes, 0);		// search and replace request file fragment "3A202" with variable 'C_UIRes' on all occurrences
		requestFile0226 = Lib.replaceTextPattern(requestFile0226, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD2, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD2' on all occurrences
		requestFile0226 = Lib.replaceTextPattern(requestFile0226, "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11", C_3Mvalue, 0);		// search and replace request file fragment "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11" with variable 'C_3Mvalue' on all occurrences
		requestFile0226 = Lib.replaceTextPattern(requestFile0226, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD1, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD1' on all occurrences

		String requestHeader0226 = "GET " + requestFile0226 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 010005000194f23201-5f22-4047-bc22-de2a2c888e2f29820909-1501-babe-face-000000000003a85832c2-6342-4c1c-8a25-7c0a2a766e2cHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0226, requestHost0226, requestPort0226, requestHeader0226, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0226 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 148
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{\"_");		// Test [226] <- Index 226
		if(replayMode)
		{
			long proxyDataRecordId =1612210808936L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [227] <- WEB ADMIN Index 227 ---
		String requestProt0227 = "https";
		String requestHost0227 = "performancemanager4.successfactors.com";
		int    requestPort0227 = 443;
		String requestFile0227 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/unified/themes/sap_belize/library-parameters.json";
		requestFile0227 = Lib.replaceTextPattern(requestFile0227, "3A202", C_UIRes, 0);		// search and replace request file fragment "3A202" with variable 'C_UIRes' on all occurrences
		requestFile0227 = Lib.replaceTextPattern(requestFile0227, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD2, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD2' on all occurrences
		requestFile0227 = Lib.replaceTextPattern(requestFile0227, "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11", C_3Mvalue, 0);		// search and replace request file fragment "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11" with variable 'C_3Mvalue' on all occurrences
		requestFile0227 = Lib.replaceTextPattern(requestFile0227, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD1, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD1' on all occurrences

		String requestHeader0227 = "GET " + requestFile0227 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001cf3b123e-4552-4a99-982c-dc4c27ef8c2f29820909-1501-babe-face-000000000003eebb1229-7312-4ee8-882f-933820ae5824HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0227, requestHost0227, requestPort0227, requestHeader0227, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0227 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1795
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{\"_sap_ui_unified_CalendarLegend");		// Test [227] <- Index 227
		if(replayMode)
		{
			long proxyDataRecordId =1612210809046L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [228] <- WEB ADMIN Index 228 ---
		String requestProt0228 = "https";
		String requestHost0228 = "performancemanager4.successfactors.com";
		int    requestPort0228 = 443;
		String requestFile0228 = "/ui/sapui5/main_1.78.6/sap/ui/comp/themes/sap_belize/library-parameters.json";
		String requestHeader0228 = "GET " + requestFile0228 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: application/json, text/javascript, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001f266420d-e562-4ad0-8c20-f8362c64322c29820909-1501-babe-face-000000000003796b9247-7062-432e-ad21-f1842faa322bHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0228, requestHost0228, requestPort0228, requestHeader0228, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0228 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 57
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "{\"default\":{},\"scopes\":{\"sapContrast\":{}}}");		// Test [228] <- Index 228
		if(replayMode)
		{
			long proxyDataRecordId =1612210809130L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [229] <- WEB ADMIN Index 229 ---
		String requestProt0229 = "https";
		String requestHost0229 = "performancemanager4.successfactors.com";
		int    requestPort0229 = 443;
		String requestFile0229 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getRCPageData.dwr";
		String requestContent0229 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42370" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=getRCPageData" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=0";
		String requestHeader0229 = "POST " + requestFile0229 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0229.length() + "\r\n" + 		// Content-Length: 303
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001ca9d9294-83c2-4a28-9024-0c662420c52829820909-1501-babe-face-000000000003043932d1-0502-47a2-9821-641123ba3f2dHTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0229, requestHost0229, requestPort0229, requestHeader0229, requestContent0229.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0229 = null;		// support garbage collector to reduce memory
		requestContent0229 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 864
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "\"REPORT_TABLE\"");		// Test [229] <- Index 229
		if(replayMode)
		{
			long proxyDataRecordId =1612210809338L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [230] <- WEB ADMIN Index 230 ---
		String requestProt0230 = "https";
		String requestHost0230 = "performancemanager4.successfactors.com";
		int    requestPort0230 = 443;
		String requestFile0230 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.performAction.dwr";
		String requestContent0230 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42370" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=performAction" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:LABELAS" + "\r\n" + 
				"c0-param1=string:ADHOC_SINGLE_CROSS_DOMAIN" + "\r\n" + 
				"c0-e1=string:GET_ALL_LABELS" + "\r\n" + 
				"c0-param2=Object_Object:{subAction:reference:c0-e1}" + "\r\n" + 
				"batchId=1";
		String requestHeader0230 = "POST " + requestFile0230 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0230.length() + "\r\n" + 		// Content-Length: 451
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 010005000130f1d214-c092-47ea-af2c-8f1d2f0e442629820909-1501-babe-face-0000000000034e6f923e-9d72-461c-b62b-70222e02d123HTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0230, requestHost0230, requestPort0230, requestHeader0230, requestContent0230.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0230 = null;		// support garbage collector to reduce memory
		requestContent0230 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1005
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "Employee Profile\"");		// Test [230] <- Index 230
		if(replayMode)
		{
			long proxyDataRecordId =1612210809340L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [231] <- WEB ADMIN Index 231 ---
		String requestProt0231 = "https";
		String requestHost0231 = "performancemanager4.successfactors.com";
		int    requestPort0231 = 443;
		String requestFile0231 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Regular.woff2";
		requestFile0231 = Lib.replaceTextPattern(requestFile0231, "3A202", C_UIRes, 0);		// search and replace request file fragment "3A202" with variable 'C_UIRes' on all occurrences
		requestFile0231 = Lib.replaceTextPattern(requestFile0231, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD2, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD2' on all occurrences
		requestFile0231 = Lib.replaceTextPattern(requestFile0231, "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11", C_3Mvalue, 0);		// search and replace request file fragment "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11" with variable 'C_3Mvalue' on all occurrences
		requestFile0231 = Lib.replaceTextPattern(requestFile0231, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD1, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD1' on all occurrences

		String requestHeader0231 = "GET " + requestFile0231 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0231, requestHost0231, requestPort0231, requestHeader0231, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("3A202", C_UIRes);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3D3a197762f867d55aceaee0bb261f6b2b", C_MoD2);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11", C_3Mvalue);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3D3a197762f867d55aceaee0bb261f6b2b", C_MoD1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0231 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 27844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [231] <- Index 231
		if(replayMode)
		{
			long proxyDataRecordId =1612210809343L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [232] <- WEB ADMIN Index 232 ---
		String requestProt0232 = "https";
		String requestHost0232 = "performancemanager4.successfactors.com";
		int    requestPort0232 = 443;
		String requestFile0232 = "/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/merge_D2FBCA9166B3AFEB7104A5B9A96FB672/ui/sapui5/theming_aux!/ui/sapui5/main/sap/ui/core/themes/sap_belize/fonts/72-Bold.woff2";
		requestFile0232 = Lib.replaceTextPattern(requestFile0232, "3A202", C_UIRes, 0);		// search and replace request file fragment "3A202" with variable 'C_UIRes' on all occurrences
		requestFile0232 = Lib.replaceTextPattern(requestFile0232, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD2, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD2' on all occurrences
		requestFile0232 = Lib.replaceTextPattern(requestFile0232, "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11", C_3Mvalue, 0);		// search and replace request file fragment "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11" with variable 'C_3Mvalue' on all occurrences
		requestFile0232 = Lib.replaceTextPattern(requestFile0232, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD1, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD1' on all occurrences

		String requestHeader0232 = "GET " + requestFile0232 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: font\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0232, requestHost0232, requestPort0232, requestHeader0232, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("3A202", C_UIRes);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3D3a197762f867d55aceaee0bb261f6b2b", C_MoD2);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11", C_3Mvalue);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("3D3a197762f867d55aceaee0bb261f6b2b", C_MoD1);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0232 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-FONT-WOFF2", header text fragment = [verification disabled], recorded content size = 26732
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-FONT-WOFF2", null, null);		// Test [232] <- Index 232
		if(replayMode)
		{
			long proxyDataRecordId =1612210809349L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [233] <- WEB ADMIN Index 233 ---
		String requestProt0233 = "https";
		String requestHost0233 = "performancemanager4.successfactors.com";
		int    requestPort0233 = 443;
		String requestFile0233 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSACAppURL.dwr";
		String requestContent0233 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42370" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=getSACAppURL" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=2";
		String requestHeader0233 = "POST " + requestFile0233 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0233.length() + "\r\n" + 		// Content-Length: 302
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 01000500016fc7927d-2e62-4d07-9f23-e50825b0952429820909-1501-babe-face-00000000000319b042d6-8822-49b4-8a23-b5b42cdb3a28HTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0233, requestHost0233, requestPort0233, requestHeader0233, requestContent0233.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0233 = null;		// support garbage collector to reduce memory
		requestContent0233 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 358
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "{payload:s0,statusCode:\"ok\"}");		// Test [233] <- Index 233
		if(replayMode)
		{
			long proxyDataRecordId =1612210809350L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [234] <- WEB ADMIN Index 234 ---
		String requestProt0234 = "https";
		String requestHost0234 = "performancemanager4.successfactors.com";
		int    requestPort0234 = 443;
		String requestFile0234 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getLMSDeepLinkUrl.dwr";
		String requestContent0234 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42370" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=getLMSDeepLinkUrl" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=Object_Object:{}" + "\r\n" + 
				"batchId=3";
		String requestHeader0234 = "POST " + requestFile0234 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0234.length() + "\r\n" + 		// Content-Length: 334
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 01000500011b9e72c6-3da2-4bb6-8429-ee9a20625e2429820909-1501-babe-face-000000000003392b92fa-2012-483f-9e2f-4f942ed6ce24HTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0234, requestHost0234, requestPort0234, requestHeader0234, requestContent0234.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0234 = null;		// support garbage collector to reduce memory
		requestContent0234 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 248
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "payload:s0,statusCode:\"error\"}");		// Test [234] <- Index 234
		if(replayMode)
		{
			long proxyDataRecordId =1612210809352L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [235] <- WEB ADMIN Index 235 ---
		String requestProt0235 = "https";
		String requestHost0235 = "performancemanager4.successfactors.com";
		int    requestPort0235 = 443;
		String requestFile0235 = "/xi/ajax/remoting/call/plaincall/showMeControllerProxy.signAPIUrl.dwr";
		String requestContent0235 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42370" + "\r\n" + 
				"c0-scriptName=showMeControllerProxy" + "\r\n" + 
				"c0-methodName=signAPIUrl" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:%2Fmedia%2Fshowme_ab3a783e_706e_40dd_a87a_a8283cabf42b%2FREPORT_CENTER%2Fstatus" + "\r\n" + 
				"c0-param1=string:REPORT_CENTER" + "\r\n" + 
				"c0-param2=string:b834e0f183d2c60df022354ec83fe656" + "\r\n" + 
				"batchId=4";
		String requestHeader0235 = "POST " + requestFile0235 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0235.length() + "\r\n" + 		// Content-Length: 472
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 010005000102fda245-e682-440f-932f-07ab226f1c2c29820909-1501-babe-face-00000000000380fd127a-a3d2-4a0c-9f2a-655b2a712d28HTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0235, requestHost0235, requestPort0235, requestHeader0235, requestContent0235.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0235 = null;		// support garbage collector to reduce memory
		requestContent0235 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 411
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [235] <- Index 235
		if(replayMode)
		{
			long proxyDataRecordId =1612210809486L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_StatusToken2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0235_1 = new BoundaryBasedExtractorItem( "status?token=" , "\");",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0235_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_StatusToken2'
			C_StatusToken2 = boundaryBasedContentExtractorItem0235_1.getResultText();
			log("<<< C_StatusToken2 = " + C_StatusToken2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_StatusToken2!= null && C_StatusToken2.trim().length() == 0)
			{
				C_StatusToken2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_StatusToken2' ends up with an empty string - a substitute value was set");
				log("<<< C_StatusToken2 = " + C_StatusToken2);
			}
		}
		catch (Exception e) { C_StatusToken2 = null; log(e); }
		if (C_StatusToken2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_StatusToken2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [236] <- WEB ADMIN Index 236 ---
		String requestProt0236 = "https";
		String requestHost0236 = "performancemanager4.successfactors.com";
		int    requestPort0236 = 443;
		String requestFile0236 = "/odata/v4/NotificationService.svc/GetNumberOfNewNotifications(userId='TestAutomation')";
		String requestHeader0236 = "GET " + requestFile0236 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/json\r\n" + 
				"Accept: */*\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 01000500014568825d-8062-4d06-ac25-617a23246a2629820909-1501-babe-face-0000000000032b467242-a332-4e59-bf2e-5c7e225f1420HTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0236, requestHost0236, requestPort0236, requestHeader0236, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0236 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 195
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [236] <- Index 236
		if(replayMode)
		{
			long proxyDataRecordId =1612210809513L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #5_5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_5_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #5 (fragment 6 of 6)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [237] <- WEB ADMIN Index 237 ---
		String requestProt0237 = "https";
		String requestHost0237 = "performancemanager4.successfactors.com";
		int    requestPort0237 = 443;
		String requestFile0237 = "/public/ui-resource/Teck/202;mod=3a197762f867d55aceaee0bb261f6b2b";
		String requestHeader0237 = "GET " + requestFile0237 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0237, requestHost0237, requestPort0237, requestHeader0237, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0237 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 2609
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [237] <- Index 237
		if(replayMode)
		{
			long proxyDataRecordId =1612210809516L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [238] <- WEB ADMIN Index 238 ---
		String requestProt0238 = "https";
		String requestHost0238 = "performancemanager4.successfactors.com";
		int    requestPort0238 = 443;
		String requestFile0238 = "/perfLogServlet" +
				"?callId=2885013688-X" +
				"&moduleId=REPORT" +
				"&pageId=REPORT_CENTER" +
				"&pageQualifier=REPORT_LISTING_PAGE" +
				"&TRS=2080" +
				"&TIP=3417" +
				"&ST=1612210805267" +
				"&ET=1612210809558" +
				"&TTB=588" +
				"&RSR=603" +
				"&DIA=2615" +
				"&DCP=4291";
		String requestHeader0238 = "GET " + requestFile0238 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: 1GYPGUQr9_I9IkYCBjQ8z_2EJk9WAgTDxCIj_wjDzQDExC52B-swEUol7F5U4RIb4ysfvE6rCjDYBgoAAzkm5SMx-z25DCkivEohEUUsGDo6ADIpE_wn7RAc6inuxOLjuPrjt4\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-20167c82e232a23113c8fd0f64c94699-122067bb7e3b1aec-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain; charset=UTF-8\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452-X\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0238, requestHost0238, requestPort0238, requestHeader0238, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0238 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [238] <- Index 238
		if(replayMode)
		{
			long proxyDataRecordId =1612210809572L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [239] <- WEB ADMIN Index 239 ---
		String requestProt0239 = "https";
		String requestHost0239 = "performancemanager4.successfactors.com";
		int    requestPort0239 = 443;
		String requestFile0239 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getAllReports.dwr";
		String requestContent0239 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42370" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=getAllReports" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=boolean:true" + "\r\n" + 
				"c0-e2=Object_Object:{}" + "\r\n" + 
				"c0-e3=string:LastModified" + "\r\n" + 
				"c0-e4=string:DESCENDING" + "\r\n" + 
				"c0-e5=boolean:true" + "\r\n" + 
				"c0-e6=number:50" + "\r\n" + 
				"c0-e7=string:MYREPORTS" + "\r\n" + 
				"c0-e8=string:FLAT" + "\r\n" + 
				"c0-e9=null:null" + "\r\n" + 
				"c0-e10=number:1" + "\r\n" + 
				"c0-param0=Object_Object:{firstLoad:reference:c0-e1, filterOptions:reference:c0-e2, sortColumnType:reference:c0-e3, sortDirection:reference:c0-e4, invalidatePermissionCache:reference:c0-e5, totalSize:reference:c0-e6, reportTabType:reference:c0-e7, reportCenterLayout:reference:c0-e8, currentFolder:reference:c0-e9, requestId:reference:c0-e10}" + "\r\n" + 
				"c0-param1=Array:[]" + "\r\n" + 
				"batchId=5";
		String requestHeader0239 = "POST " + requestFile0239 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0239.length() + "\r\n" + 		// Content-Length: 864
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-20167c82e232a23113c8fd0f64c94699-cd1685c690f36848-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 01000500016f73b2b8-73c2-453b-aa22-bdc22dafa92829820909-1501-babe-face-0000000000038eb9b224-e992-41e8-a624-7d1525551d29HTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0239, requestHost0239, requestPort0239, requestHeader0239, requestContent0239.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0239 = null;		// support garbage collector to reduce memory
		requestContent0239 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1888
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [239] <- Index 239
		if(replayMode)
		{
			long proxyDataRecordId =1612210809677L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Report'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0239_1 = new BoundaryBasedExtractorItem( ".reportId=\"" , "\";",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0239_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Report'
			C_Report = boundaryBasedContentExtractorItem0239_1.getResultText();
			log("<<< C_Report = " + C_Report);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Report!= null && C_Report.trim().length() == 0)
			{
				C_Report = "";
				log("runtime note: the extraction of a new value for the variable 'C_Report' ends up with an empty string - a substitute value was set");
				log("<<< C_Report = " + C_Report);
			}
		}
		catch (Exception e) { C_Report = null; log(e); }
		if (C_Report == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Report' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [240] <- WEB ADMIN Index 240 ---
		String requestProt0240 = "https";
		String requestHost0240 = "performancemanager4.successfactors.com";
		int    requestPort0240 = 443;
		String requestFile0240 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getAllAssociatedLabels.dwr";
		String requestContent0240 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42370" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=getAllAssociatedLabels" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:MYREPORTS" + "\r\n" + 
				"batchId=6";
		String requestHeader0240 = "POST " + requestFile0240 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0240.length() + "\r\n" + 		// Content-Length: 339
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-20167c82e232a23113c8fd0f64c94699-7d8b8798db1b522e-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"OPTR_CXT: 0100050001643e728f-f742-4f61-802f-ac322f1fa52229820909-1501-babe-face-000000000003046d92a3-8022-4fb9-8a23-ac9621aaff2dHTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0240, requestHost0240, requestPort0240, requestHeader0240, requestContent0240.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0240 = null;		// support garbage collector to reduce memory
		requestContent0240 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 169
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "payload:s0,statusCode:\"ok\"}");		// Test [240] <- Index 240
		if(replayMode)
		{
			long proxyDataRecordId =1612210809679L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [241] <- WEB ADMIN Index 241 ---
		String requestProt0241 = "https";
		String requestHost0241 = "azprod.ms.successfactors.com";
		int    requestPort0241 = 443;
		String requestFile0241 = "/mediaservice/api/v2/media/showme_ab3a783e_706e_40dd_a87a_a8283cabf42b/REPORT_CENTER/status" +
				"?token=" + C_StatusToken2 +		// recorded value = d39aa228e4053ad3922ec874a847555521f21771bb3691b788e37cc998e7337a8dcca638a911bc30318bdd1c245c2549bbcea9fa5fa0352f914d527b27e23208,-3649788792617074859,1612212609,1
				"&callback=sfDeferredUtilCallback0";
		requestFile0241 = Lib.replaceTextPattern(requestFile0241, "d39aa228e4053ad3922ec874a847555521f21771bb3691b788e37cc998e7337a8dcca638a911bc30318bdd1c245c2549bbcea9fa5fa0352f914d527b27e23208,-3649788792617074859,1612212609,1", C_StatusToken2, 0);		// search and replace request file fragment "d39aa228e4053ad3922ec874a847555521f21771bb3691b788e37cc998e7337a8dcca638a911bc30318bdd1c245c2549bbcea9fa5fa0352f914d527b27e23208,-3649788792617074859,1612212609,1" with variable 'C_StatusToken2' on all occurrences

		String requestHeader0241 = "GET " + requestFile0241 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: azprod.ms.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0241, requestHost0241, requestPort0241, requestHeader0241, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0241 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 133
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [241] <- Index 241
		if(replayMode)
		{
			long proxyDataRecordId =1612210809703L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [242] <- WEB ADMIN Index 242 ---
		String requestProt0242 = "https";
		String requestHost0242 = "performancemanager4.successfactors.com";
		int    requestPort0242 = 443;
		String requestFile0242 = "/perfLogServlet" +
				"?callId=2885013688-0" +
				"&moduleId=REPORT" +
				"&pageId=REPORT_CENTER" +
				"&pageQualifier=REPORT_LISTING_PAGE" +
				"&TRS=2080" +
				"&TIP=3417" +
				"&TML=5155" +
				"&TSL=5155" +
				"&ST=1612210805462" +
				"&STC=1612210805267" +
				"&ETC=1612210811105" +
				"&MEM=126375" +
				"&NRE=450" +
				"&NWR=315" +
				"&SCPU=100" +
				"&SQLC=273" +
				"&SQLT=425" +
				"&SVT=3125" +
				"&UCPU=610" +
				"&CPU=710" +
				"&FRE=34" +
				"&FWR=0" +
				"&CCON=8" +
				"&CSUP=59" +
				"&CLOC=2" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=76" +
				"&cssNum=18" +
				"&renderTime=5106" +
				"&TTB=588" +
				"&RSR=603" +
				"&DIA=2615" +
				"&DCP=4291";
		String requestContent0242 = 
				"OPTR_INFO=5db3c2ce-67b2-4ff7-b223-0da72975b127!1612210806333!1612210806339!0" +
				"&OPTR_INFO=8637429f-4e22-44d8-b524-b6e9293adc2d!1612210806359!1612210806369!0" +
				"&OPTR_INFO=1b5f02cf-0ff2-43dc-9c28-bd1d2d22e022!1612210806464!1612210806642!0" +
				"&OPTR_INFO=ddfb52b2-e7f2-4f5a-ae21-d43727ab3e23!1612210806689!1612210806697!0" +
				"&OPTR_INFO=9cfec2a6-3fd2-451e-8928-f336207b2724!1612210806881!1612210806885!0" +
				"&OPTR_INFO=ef336256-d682-47c1-8d20-140727d12c23!1612210806891!1612210806987!0" +
				"&OPTR_INFO=a5f68260-c6f2-4448-a42a-c36e2a09422c!1612210806988!1612210807031!0" +
				"&OPTR_INFO=b25962f9-8a22-4560-b428-e14d21a5b521!1612210807032!1612210807142!0" +
				"&OPTR_INFO=83ce72ec-bbf2-4146-8a20-bb032edd182f!1612210807143!1612210807307!0" +
				"&OPTR_INFO=45b8b26a-9322-47d0-a021-1f792e683626!1612210807308!1612210807355!0" +
				"&OPTR_INFO=a06012f4-98b2-442b-b527-0b3922a88d2e!1612210807355!1612210807410!0" +
				"&OPTR_INFO=d228a291-83d2-4690-b122-c6e42171ad21!1612210807413!1612210807417!0" +
				"&OPTR_INFO=915b825e-1542-410f-af2a-521f2cc04328!1612210807422!1612210807477!0" +
				"&OPTR_INFO=ffd55203-5692-4e88-b02d-90a129545f2c!1612210807497!1612210807565!0" +
				"&OPTR_INFO=eea72219-1662-48f3-ac2e-3d44243c7923!1612210807565!1612210807611!0" +
				"&OPTR_INFO=278d2214-0ca2-402c-bf2b-a97623957f21!1612210807612!1612210807675!0" +
				"&OPTR_INFO=068dc215-7f52-4a25-b82b-d8b3204f8628!1612210807676!1612210807724!0" +
				"&OPTR_INFO=93e602fa-7672-4b80-b42c-6f812c6b2a26!1612210807737!1612210807793!0" +
				"&OPTR_INFO=b2aa42da-70b2-463e-bb2d-f7ba2316b12a!1612210807794!1612210807844!0" +
				"&OPTR_INFO=df21610f-64ca-11eb-84bd-6149e6cf885e!1612210805264!1612210807881!1" +
				"&OPTR_INFO=0c3fc25e-1f32-4d89-a827-281527c73e27!1612210807887!1612210807891!0" +
				"&OPTR_INFO=2ecb7235-de12-4fbc-882b-265a21beee29!1612210807891!1612210807895!0" +
				"&OPTR_INFO=687132e1-3142-47b6-9926-2f0e26937121!1612210807895!1612210807898!0" +
				"&OPTR_INFO=12d3f280-7dc2-493e-b529-d7d42a550f28!1612210807899!1612210807902!0" +
				"&OPTR_INFO=9264c268-9b22-4f2f-9f20-74182dc2142b!1612210807903!1612210807906!0" +
				"&OPTR_INFO=2c8102da-c412-4ed9-af24-bf1d286a3b24!1612210807907!1612210807910!0" +
				"&OPTR_INFO=aaf57225-11d2-46b9-8e22-7d602e29d127!1612210807911!1612210807914!0" +
				"&OPTR_INFO=403172e5-ecb2-4603-9f20-27142ede0f2a!1612210807915!1612210807918!0" +
				"&OPTR_INFO=3fd8b252-a612-422c-8c2c-778127eeaa20!1612210807918!1612210807921!0" +
				"&OPTR_INFO=c704924b-9922-4451-8728-d06d2b7deb2a!1612210807951!1612210808012!0" +
				"&OPTR_INFO=06602210-9b62-4dc8-a028-c55c239bb62a!1612210808014!1612210808055!0" +
				"&OPTR_INFO=61736216-9d22-4837-8424-35c92478c62a!1612210808057!1612210808123!0" +
				"&OPTR_INFO=9226d28e-5412-4238-8b27-36fc22dedb2c!1612210808123!1612210808168!0" +
				"&OPTR_INFO=8648a2ea-d712-4277-b32f-85da2b266226!1612210808182!1612210808334!0" +
				"&OPTR_INFO=1652f288-f382-4780-b725-342026a2d723!1612210808363!1612210808413!0" +
				"&OPTR_INFO=f2d7929e-d512-4c76-b029-7f052b52fb2c!1612210808413!1612210808471!0" +
				"&OPTR_INFO=f43ef2ed-13b2-4c9a-be2b-e8ae28110927!1612210808471!1612210808527!0" +
				"&OPTR_INFO=48c852e2-d672-46eb-8f28-46c0270f432e!1612210808528!1612210808602!0" +
				"&OPTR_INFO=9606d2c5-9ef2-493b-ae2c-595721a25e2d!1612210808602!1612210808740!0" +
				"&OPTR_INFO=69b7c2e0-9e22-4fcd-8f21-ec0129beff26!1612210808769!1612210808848!0" +
				"&OPTR_INFO=9864524b-8ef2-4ec4-9629-cccc297aad2a!1612210808850!1612210808923!0" +
				"&OPTR_INFO=cf225223-2d12-483c-bf2f-b55426525423!1612210808924!1612210808928!0" +
				"&OPTR_INFO=94f23201-5f22-4047-bc22-de2a2c888e2f!1612210808930!1612210809030!0" +
				"&OPTR_INFO=3beb52e7-fd52-4a59-8f2f-c4c6254b322a!1612210809030!1612210809034!0" +
				"&OPTR_INFO=578d120c-4002-4eb2-b42e-27372264e028!1612210809034!1612210809038!0" +
				"&OPTR_INFO=cf3b123e-4552-4a99-982c-dc4c27ef8c2f!1612210809039!1612210809121!0" +
				"&OPTR_INFO=f266420d-e562-4ad0-8c20-f8362c64322c!1612210809122!1612210809165!0" +
				"&OPTR_INFO=ca9d9294-83c2-4a28-9024-0c662420c528!1612210809326!1612210809576!0" +
				"&OPTR_INFO=30f1d214-c092-47ea-af2c-8f1d2f0e4426!1612210809328!1612210809679!0" +
				"&OPTR_INFO=6fc7927d-2e62-4d07-9f23-e50825b09524!1612210809329!1612210809553!0" +
				"&OPTR_INFO=1b9e72c6-3da2-4bb6-8429-ee9a20625e24!1612210809332!1612210809507!0" +
				"&OPTR_INFO=e45632ec-66f2-4951-be2f-3dbf2d255325!1612210809368!1612210809372!0" +
				"&OPTR_INFO=234b721e-2502-4ebe-852c-d8fc2905832f!1612210809411!1612210809415!0" +
				"&OPTR_INFO=acd9a283-5a32-47c4-9527-422b2f670520!1612210809416!1612210809420!0" +
				"&OPTR_INFO=02cae277-4ea2-49cc-8f21-9d212f1f6c29!1612210809420!1612210809423!0" +
				"&OPTR_INFO=a4e9120d-2332-4613-8b20-41762a114e25!1612210809424!1612210809435!0" +
				"&OPTR_INFO=c31162f6-5d32-493f-9123-5f122b54d926!1612210809473!1612210809477!0" +
				"&OPTR_INFO=02fda245-e682-440f-932f-07ab226f1c2c!1612210809478!1612210809670!0" +
				"&OPTR_INFO=4568825d-8062-4d06-ac25-617a23246a26!1612210809504!1612210809680!0" +
				"&OPTR_INFO=6f73b2b8-73c2-453b-aa22-bdc22dafa928!1612210809668!1612210811004!0" +
				"&OPTR_INFO=643e728f-f742-4f61-802f-ac322f1fa522!1612210809669!1612210810893!0";
		String requestHeader0242 = "POST " + requestFile0242 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0242.length() + "\r\n" + 		// Content-Length: 4696
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: Tdy8dc0sc8KOlLi3f6u2WdS6pcVMgHhGLOzkbLqfPmFQM7mJ-sLfr4q2Yc9xmr40g5KHfAeVbKd4ZWJNlO4Dc3dYRmmvkbKeKK_QUsysqcWueoS-eNFJaX7ZXqGeNlAvSYNFQK\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-18dffc597ae5476176054aa17af98474-854d3b357ce3e6cf-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0242, requestHost0242, requestPort0242, requestHeader0242, requestContent0242.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0242 = null;		// support garbage collector to reduce memory
		requestContent0242 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [242] <- Index 242
		if(replayMode)
		{
			long proxyDataRecordId =1612210811113L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [243] <- WEB ADMIN Index 243 ---
		String requestProt0243 = "https";
		String requestHost0243 = "performancemanager4.successfactors.com";
		int    requestPort0243 = 443;
		String requestFile0243 = "/intake/v2/rum/events";
		String requestContent0243 = 
				requestFileCache.readFile(getSymmetricEncryptContext(), "LoginReport_Prod_SM_corr_RequestContent0243.txt").getFileDataAsString();		// note: consider duplicated definition of this file name near end of the load test program - used for ZIP-dialogue in Project Navigator
		requestContent0243 = Lib.replaceTextPattern(requestContent0243, "3A202", C_UIRes, 0);		// search and replace content fragment "3A202" with variable 'C_UIRes' on all occurrences
		requestContent0243 = Lib.replaceTextPattern(requestContent0243, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD2, 0);		// search and replace content fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD2' on all occurrences
		requestContent0243 = Lib.replaceTextPattern(requestContent0243, "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11", C_3Mvalue, 0);		// search and replace content fragment "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11" with variable 'C_3Mvalue' on all occurrences
		requestContent0243 = Lib.replaceTextPattern(requestContent0243, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD1, 0);		// search and replace content fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD1' on all occurrences
		requestContent0243 = Lib.replaceTextPattern(requestContent0243, "d39aa228e4053ad3922ec874a847555521f21771bb3691b788e37cc998e7337a8dcca638a911bc30318bdd1c245c2549bbcea9fa5fa0352f914d527b27e23208,-3649788792617074859,1612212609,1", C_StatusToken2, 0);		// search and replace content fragment "d39aa228e4053ad3922ec874a847555521f21771bb3691b788e37cc998e7337a8dcca638a911bc30318bdd1c245c2549bbcea9fa5fa0352f914d527b27e23208,-3649788792617074859,1612212609,1" with variable 'C_StatusToken2' on all occurrences

		String requestHeader0243 = "POST " + requestFile0243 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0243.length() + "\r\n" + 		// Content-Length: 142914
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Content-Encoding: gzip\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0243, requestHost0243, requestPort0243, requestHeader0243, requestContent0243.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0243 = null;		// support garbage collector to reduce memory
		requestContent0243 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [243] <- Index 243
		if(replayMode)
		{
			long proxyDataRecordId =1612210811534L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #5_5 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #6.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #6: SearchReporting
		// # ------------------------



		// --- HTTP REQUEST: Test [245] <- WEB ADMIN Index 245 ---
		String requestProt0245 = "https";
		String requestHost0245 = "performancemanager4.successfactors.com";
		int    requestPort0245 = 443;
		String requestFile0245 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr";
		String requestContent0245 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42370" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=getSearchHighlights" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:Log" + "\r\n" + 
				"c0-e2=string:MYREPORTS" + "\r\n" + 
				"c0-param0=Object_Object:{searchText:reference:c0-e1, reportTabType:reference:c0-e2}" + "\r\n" + 
				"c0-param1=number:5" + "\r\n" + 
				"batchId=7";
		String requestHeader0245 = "POST " + requestFile0245 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0245.length() + "\r\n" + 		// Content-Length: 452
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-b831dcad71d7f4bb7d2eec61b417c138-665e7463acb1f363-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452-1\r\n" + 
				"OPTR_CXT: 01000500017e2ff22b-a512-4f54-b527-1d6a257b352d29820909-1501-babe-face-000000000003f4fc62f5-2582-420c-a821-7a8923510b21HTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0245, requestHost0245, requestPort0245, requestHeader0245, requestContent0245.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0245 = null;		// support garbage collector to reduce memory
		requestContent0245 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 250
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "{payload:s0,statusCode:\"ok\"});");		// Test [245] <- Index 245
		if(replayMode)
		{
			long proxyDataRecordId =1612210830055L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [246] <- WEB ADMIN Index 246 ---
		String requestProt0246 = "https";
		String requestHost0246 = "performancemanager4.successfactors.com";
		int    requestPort0246 = 443;
		String requestFile0246 = "/perfLogServlet" +
				"?callId=2885013688-1" +
				"&moduleId=REPORT" +
				"&pageId=REPORT_CENTER" +
				"&pageQualifier=REPORT_LISTING_PAGE" +
				"&TRS=2080" +
				"&TIP=3417" +
				"&TML=5155" +
				"&TSL=5155" +
				"&ST=1612210830046" +
				"&ET=1612210830400" +
				"&MEM=12329" +
				"&NRE=37" +
				"&NWR=41" +
				"&SCPU=0" +
				"&SQLC=89" +
				"&SQLT=71" +
				"&SVT=158" +
				"&UCPU=80" +
				"&CPU=80" +
				"&FRE=2" +
				"&FWR=0" +
				"&CCON=0" +
				"&CSUP=3" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=76" +
				"&cssNum=18" +
				"&renderTime=252" +
				"&TTB=588" +
				"&RSR=603" +
				"&DIA=2615" +
				"&DCP=4291";
		String requestContent0246 = 
				"OPTR_INFO=7e2ff22b-a512-4f54-b527-1d6a257b352d!1612210830046!1612210830298!0";
		String requestHeader0246 = "POST " + requestFile0246 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0246.length() + "\r\n" + 		// Content-Length: 76
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: OP42zBvbePz9r6K7ZO1cYwT429e6patmSL0iRZpLS1dRN4ROsd0_crC-XLCncnOjbpZOJIK7nd3NZmJOZJp-KlEQImFuPlES3o31TGV_UHtGRZdKPnIjSYB-Q0kVEKqtWK_EJa\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-f34b6e89b225b68c734fe63594b8827b-a20407609ee12906-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452-1\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0246, requestHost0246, requestPort0246, requestHeader0246, requestContent0246.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0246 = null;		// support garbage collector to reduce memory
		requestContent0246 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [246] <- Index 246
		if(replayMode)
		{
			long proxyDataRecordId =1612210830410L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [247] <- WEB ADMIN Index 247 ---
		String requestProt0247 = "https";
		String requestHost0247 = "performancemanager4.successfactors.com";
		int    requestPort0247 = 443;
		String requestFile0247 = "/intake/v2/rum/events";
		String requestContent0247 = 
				"{\"metadata\":{\"service\":{\"name\":\"bizx-cf-web\",\"agent\":{\"name\":\"rum-js\",\"version\":\"5.5.0\"},\"language\":{\"name\":\"javascript\"},\"environment\":\"production\"}}}" + "\r\n" + 
				"{\"transaction\":{\"id\":\"257a003088384012\",\"trace_id\":\"b831dcad71d7f4bb7d2eec61b417c138\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"type\":\"http-request\",\"duration\":252,\"context\":{\"page\":{\"referer\":\"https://performancemanager4.successfactors.com/sf/start?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\",\"url\":\"https://performancemanager4.successfactors.com/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\"}},\"span_count\":{\"started\":1},\"sampled\":true}}" + "\r\n" + 
				"{\"span\":{\"id\":\"665e7463acb1f363\",\"transaction_id\":\"257a003088384012\",\"parent_id\":\"257a003088384012\",\"trace_id\":\"b831dcad71d7f4bb7d2eec61b417c138\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":0,\"duration\":252,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"type\":\"http-request\"},\"samples\":{\"transaction.duration.count\":{\"value\":1},\"transaction.duration.sum.us\":{\"value\":252},\"transaction.breakdown.count\":{\"value\":1}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"app\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":0.054999953135848045}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"external\",\"subtype\":\"http\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":252}}}}";
		String requestHeader0247 = "POST " + requestFile0247 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0247.length() + "\r\n" + 		// Content-Length: 2333
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Content-Encoding: gzip\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0247, requestHost0247, requestPort0247, requestHeader0247, requestContent0247.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0247 = null;		// support garbage collector to reduce memory
		requestContent0247 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [247] <- Index 247
		if(replayMode)
		{
			long proxyDataRecordId =1612210830814L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [248] <- WEB ADMIN Index 248 ---
		String requestProt0248 = "https";
		String requestHost0248 = "performancemanager4.successfactors.com";
		int    requestPort0248 = 443;
		String requestFile0248 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr";
		String requestContent0248 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42370" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=getSearchHighlights" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:Login%20Report" + "\r\n" + 
				"c0-e2=string:MYREPORTS" + "\r\n" + 
				"c0-param0=Object_Object:{searchText:reference:c0-e1, reportTabType:reference:c0-e2}" + "\r\n" + 
				"c0-param1=number:5" + "\r\n" + 
				"batchId=8";
		String requestHeader0248 = "POST " + requestFile0248 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0248.length() + "\r\n" + 		// Content-Length: 463
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-61690da60c3ede947649b5fd731c4ee7-b4e575968659f1d6-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452-2\r\n" + 
				"OPTR_CXT: 0100050001b0dd420f-a9c2-4585-a325-d7602041d62729820909-1501-babe-face-0000000000039979b237-a9e2-465b-8920-041428947f28HTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0248, requestHost0248, requestPort0248, requestHeader0248, requestContent0248.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0248 = null;		// support garbage collector to reduce memory
		requestContent0248 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 250
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "payload:s0,statusCode:\"ok\"}");		// Test [248] <- Index 248
		if(replayMode)
		{
			long proxyDataRecordId =1612210832713L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [249] <- WEB ADMIN Index 249 ---
		String requestProt0249 = "https";
		String requestHost0249 = "performancemanager4.successfactors.com";
		int    requestPort0249 = 443;
		String requestFile0249 = "/perfLogServlet" +
				"?callId=2885013688-2" +
				"&moduleId=REPORT" +
				"&pageId=REPORT_CENTER" +
				"&pageQualifier=REPORT_LISTING_PAGE" +
				"&TRS=2080" +
				"&TIP=3417" +
				"&TML=5155" +
				"&TSL=5155" +
				"&ST=1612210832703" +
				"&ET=1612210833125" +
				"&MEM=12306" +
				"&NRE=32" +
				"&NWR=37" +
				"&SCPU=10" +
				"&SQLC=89" +
				"&SQLT=69" +
				"&SVT=159" +
				"&UCPU=70" +
				"&CPU=80" +
				"&FRE=2" +
				"&FWR=0" +
				"&CCON=0" +
				"&CSUP=2" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=76" +
				"&cssNum=18" +
				"&renderTime=321" +
				"&TTB=588" +
				"&RSR=603" +
				"&DIA=2615" +
				"&DCP=4291";
		String requestContent0249 = 
				"OPTR_INFO=b0dd420f-a9c2-4585-a325-d7602041d627!1612210832703!1612210833024!0";
		String requestHeader0249 = "POST " + requestFile0249 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0249.length() + "\r\n" + 		// Content-Length: 76
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: Qv8Ikwvbot9a2dO9fKboaOH50A08p5ehKrika1hHWo7qRqebndG7kaqtVNZOcYZHaK4bLq39jde6dHtqb57_O03aAVFsQ0Rc6W3wUnF5XXVpR1ROU2wtLHFBO1ldH0akgnZLW4\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-2082e0d87a6f12e1a058a54bc977d04f-5f970e6515b9abf7-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452-2\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0249, requestHost0249, requestPort0249, requestHeader0249, requestContent0249.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0249 = null;		// support garbage collector to reduce memory
		requestContent0249 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [249] <- Index 249
		if(replayMode)
		{
			long proxyDataRecordId =1612210833135L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [250] <- WEB ADMIN Index 250 ---
		String requestProt0250 = "https";
		String requestHost0250 = "performancemanager4.successfactors.com";
		int    requestPort0250 = 443;
		String requestFile0250 = "/intake/v2/rum/events";
		String requestContent0250 = 
				"{\"metadata\":{\"service\":{\"name\":\"bizx-cf-web\",\"agent\":{\"name\":\"rum-js\",\"version\":\"5.5.0\"},\"language\":{\"name\":\"javascript\"},\"environment\":\"production\"}}}" + "\r\n" + 
				"{\"transaction\":{\"id\":\"821d62513ca7b673\",\"trace_id\":\"61690da60c3ede947649b5fd731c4ee7\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"type\":\"http-request\",\"duration\":321,\"context\":{\"page\":{\"referer\":\"https://performancemanager4.successfactors.com/sf/start?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\",\"url\":\"https://performancemanager4.successfactors.com/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\"}},\"span_count\":{\"started\":1},\"sampled\":true}}" + "\r\n" + 
				"{\"span\":{\"id\":\"b4e575968659f1d6\",\"transaction_id\":\"821d62513ca7b673\",\"parent_id\":\"821d62513ca7b673\",\"trace_id\":\"61690da60c3ede947649b5fd731c4ee7\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":0,\"duration\":321,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"type\":\"http-request\"},\"samples\":{\"transaction.duration.count\":{\"value\":1},\"transaction.duration.sum.us\":{\"value\":321},\"transaction.breakdown.count\":{\"value\":1}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"app\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":0.04499993519857526}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"external\",\"subtype\":\"http\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":321}}}}";
		String requestHeader0250 = "POST " + requestFile0250 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0250.length() + "\r\n" + 		// Content-Length: 2332
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Content-Encoding: gzip\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0250, requestHost0250, requestPort0250, requestHeader0250, requestContent0250.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0250 = null;		// support garbage collector to reduce memory
		requestContent0250 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [250] <- Index 250
		if(replayMode)
		{
			long proxyDataRecordId =1612210833538L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [251] <- WEB ADMIN Index 251 ---
		String requestProt0251 = "https";
		String requestHost0251 = "performancemanager4.successfactors.com";
		int    requestPort0251 = 443;
		String requestFile0251 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.searchReports.dwr";
		String requestContent0251 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42370" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=searchReports" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=Object_Object:{}" + "\r\n" + 
				"c0-e2=string:Login%20Report" + "\r\n" + 
				"c0-e3=number:50" + "\r\n" + 
				"c0-e4=number:1" + "\r\n" + 
				"c0-e5=string:MYREPORTS" + "\r\n" + 
				"c0-e6=string:FLAT" + "\r\n" + 
				"c0-param0=Object_Object:{filterOptions:reference:c0-e1, searchText:reference:c0-e2, totalSize:reference:c0-e3, requestId:reference:c0-e4, reportTabType:reference:c0-e5, reportCenterLayout:reference:c0-e6}" + "\r\n" + 
				"c0-param1=Array:[]" + "\r\n" + 
				"batchId=9";
		String requestHeader0251 = "POST " + requestFile0251 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0251.length() + "\r\n" + 		// Content-Length: 650
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-27ccf99403490ab864abcce24488616d-0070a9a554957920-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452-3\r\n" + 
				"OPTR_CXT: 010005000116cb42ff-2512-4085-862f-a5162ebf232829820909-1501-babe-face-00000000000351c2125f-3302-4291-922b-6d6021bc3a2aHTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0251, requestHost0251, requestPort0251, requestHeader0251, requestContent0251.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0251 = null;		// support garbage collector to reduce memory
		requestContent0251 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1874
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [251] <- Index 251
		if(replayMode)
		{
			long proxyDataRecordId =1612210837852L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [252] <- WEB ADMIN Index 252 ---
		String requestProt0252 = "https";
		String requestHost0252 = "performancemanager4.successfactors.com";
		int    requestPort0252 = 443;
		String requestFile0252 = "/perfLogServlet" +
				"?callId=2885013688-3" +
				"&moduleId=REPORT" +
				"&pageId=REPORT_CENTER" +
				"&pageQualifier=REPORT_LISTING_PAGE" +
				"&TRS=2080" +
				"&TIP=3417" +
				"&TML=5155" +
				"&TSL=5155" +
				"&ST=1612210837836" +
				"&ET=1612210838309" +
				"&MEM=20048" +
				"&NRE=43" +
				"&NWR=51" +
				"&SCPU=20" +
				"&SQLC=106" +
				"&SQLT=81" +
				"&SVT=235" +
				"&UCPU=110" +
				"&CPU=130" +
				"&FRE=2" +
				"&FWR=0" +
				"&CCON=2" +
				"&CSUP=12" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=76" +
				"&cssNum=18" +
				"&renderTime=372" +
				"&TTB=588" +
				"&RSR=603" +
				"&DIA=2615" +
				"&DCP=4291";
		String requestContent0252 = 
				"OPTR_INFO=16cb42ff-2512-4085-862f-a5162ebf2328!1612210837836!1612210838208!0";
		String requestHeader0252 = "POST " + requestFile0252 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0252.length() + "\r\n" + 		// Content-Length: 76
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: dRbH0dWfZreI3Bncve0sL6xQ4vWQubatSLHcnZZyOnliNtdYr7yodZ40UeK2gIpEQ37PR6Wqd3Z0aKSnfLhAYayqKVsLEGdyGZpoO_ReZ3FSRHpjJYQCYoJsJkNkPXZHSGg8Uq\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-3aed15e8947d689c2826fe3ae9c9dedf-920fca514884619f-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452-3\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0252, requestHost0252, requestPort0252, requestHeader0252, requestContent0252.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0252 = null;		// support garbage collector to reduce memory
		requestContent0252 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [252] <- Index 252
		if(replayMode)
		{
			long proxyDataRecordId =1612210838316L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [253] <- WEB ADMIN Index 253 ---
		String requestProt0253 = "https";
		String requestHost0253 = "performancemanager4.successfactors.com";
		int    requestPort0253 = 443;
		String requestFile0253 = "/intake/v2/rum/events";
		String requestContent0253 = 
				"{\"metadata\":{\"service\":{\"name\":\"bizx-cf-web\",\"agent\":{\"name\":\"rum-js\",\"version\":\"5.5.0\"},\"language\":{\"name\":\"javascript\"},\"environment\":\"production\"}}}" + "\r\n" + 
				"{\"transaction\":{\"id\":\"10f58663e6133c60\",\"trace_id\":\"27ccf99403490ab864abcce24488616d\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.searchReports.dwr\",\"type\":\"http-request\",\"duration\":372,\"context\":{\"page\":{\"referer\":\"https://performancemanager4.successfactors.com/sf/start?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\",\"url\":\"https://performancemanager4.successfactors.com/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\"}},\"span_count\":{\"started\":1},\"sampled\":true}}" + "\r\n" + 
				"{\"span\":{\"id\":\"0070a9a554957920\",\"transaction_id\":\"10f58663e6133c60\",\"parent_id\":\"10f58663e6133c60\",\"trace_id\":\"27ccf99403490ab864abcce24488616d\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.searchReports.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":0,\"duration\":372,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.searchReports.dwr\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.searchReports.dwr\",\"type\":\"http-request\"},\"samples\":{\"transaction.duration.count\":{\"value\":1},\"transaction.duration.sum.us\":{\"value\":372},\"transaction.breakdown.count\":{\"value\":1}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.searchReports.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"app\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":0.05999993300065398}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.searchReports.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"external\",\"subtype\":\"http\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":372}}}}";
		String requestHeader0253 = "POST " + requestFile0253 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0253.length() + "\r\n" + 		// Content-Length: 2296
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Content-Encoding: gzip\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0253, requestHost0253, requestPort0253, requestHeader0253, requestContent0253.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0253 = null;		// support garbage collector to reduce memory
		requestContent0253 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [253] <- Index 253
		if(replayMode)
		{
			long proxyDataRecordId =1612210838718L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [254] <- WEB ADMIN Index 254 ---
		String requestProt0254 = "https";
		String requestHost0254 = "performancemanager4.successfactors.com";
		int    requestPort0254 = 443;
		String requestFile0254 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr";
		String requestContent0254 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42370" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=getSearchHighlights" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:Login%20Report" + "\r\n" + 
				"c0-e2=string:MYREPORTS" + "\r\n" + 
				"c0-param0=Object_Object:{searchText:reference:c0-e1, reportTabType:reference:c0-e2}" + "\r\n" + 
				"c0-param1=number:5" + "\r\n" + 
				"batchId=10";
		String requestHeader0254 = "POST " + requestFile0254 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0254.length() + "\r\n" + 		// Content-Length: 464
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-6c640f3d725dbb3e6ca25beb1daa8715-8143d3ba1f04ea5e-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452-4\r\n" + 
				"OPTR_CXT: 0100050001d324e295-43b2-44fb-bb21-dab42f3aef2529820909-1501-babe-face-00000000000320c32237-0382-4271-9a24-87f52c85e728HTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0254, requestHost0254, requestPort0254, requestHeader0254, requestContent0254.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0254 = null;		// support garbage collector to reduce memory
		requestContent0254 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 251
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "payload:s0,statusCode:\"ok\"}");		// Test [254] <- Index 254
		if(replayMode)
		{
			long proxyDataRecordId =1612210838847L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [255] <- WEB ADMIN Index 255 ---
		String requestProt0255 = "https";
		String requestHost0255 = "performancemanager4.successfactors.com";
		int    requestPort0255 = 443;
		String requestFile0255 = "/perfLogServlet" +
				"?callId=2885013688-4" +
				"&moduleId=REPORT" +
				"&pageId=REPORT_CENTER" +
				"&pageQualifier=REPORT_LISTING_PAGE" +
				"&TRS=2080" +
				"&TIP=3417" +
				"&TML=5155" +
				"&TSL=5155" +
				"&ST=1612210838723" +
				"&ET=1612210839209" +
				"&MEM=12347" +
				"&NRE=32" +
				"&NWR=37" +
				"&SCPU=0" +
				"&SQLC=89" +
				"&SQLT=66" +
				"&SVT=161" +
				"&UCPU=80" +
				"&CPU=80" +
				"&FRE=2" +
				"&FWR=0" +
				"&CCON=0" +
				"&CSUP=3" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=76" +
				"&cssNum=18" +
				"&renderTime=384" +
				"&TTB=588" +
				"&RSR=603" +
				"&DIA=2615" +
				"&DCP=4291";
		String requestContent0255 = 
				"OPTR_INFO=d324e295-43b2-44fb-bb21-dab42f3aef25!1612210838723!1612210839107!0";
		String requestHeader0255 = "POST " + requestFile0255 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0255.length() + "\r\n" + 		// Content-Length: 76
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: OP42zBvbePz9r6K7ZO1cYwT429e6oKBmTbCkRZpMQHdRN5dOsd0_crC-XLCncnOjbpZOJIK7ndZUYG7OZJp-KlEQImFuPlES52x1VWV_UHtGRZdKPHAjSYB-Q0kQEKqtWK_DK4\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-034feecfa1aeeddfcc84a8996eb05764-5adae9426d51547b-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452-4\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0255, requestHost0255, requestPort0255, requestHeader0255, requestContent0255.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0255 = null;		// support garbage collector to reduce memory
		requestContent0255 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: check size +/- 5%, defined content size = 0
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, 0, 5);		// Test [255] <- Index 255
		if(replayMode)
		{
			long proxyDataRecordId =1612210839216L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [256] <- WEB ADMIN Index 256 ---
		String requestProt0256 = "https";
		String requestHost0256 = "performancemanager4.successfactors.com";
		int    requestPort0256 = 443;
		String requestFile0256 = "/intake/v2/rum/events";
		String requestContent0256 = 
				"{\"metadata\":{\"service\":{\"name\":\"bizx-cf-web\",\"agent\":{\"name\":\"rum-js\",\"version\":\"5.5.0\"},\"language\":{\"name\":\"javascript\"},\"environment\":\"production\"}}}" + "\r\n" + 
				"{\"transaction\":{\"id\":\"b3bc6bc93eef186b\",\"trace_id\":\"6c640f3d725dbb3e6ca25beb1daa8715\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"type\":\"http-request\",\"duration\":384,\"context\":{\"page\":{\"referer\":\"https://performancemanager4.successfactors.com/sf/start?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\",\"url\":\"https://performancemanager4.successfactors.com/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\"}},\"span_count\":{\"started\":1},\"sampled\":true}}" + "\r\n" + 
				"{\"span\":{\"id\":\"8143d3ba1f04ea5e\",\"transaction_id\":\"b3bc6bc93eef186b\",\"parent_id\":\"b3bc6bc93eef186b\",\"trace_id\":\"6c640f3d725dbb3e6ca25beb1daa8715\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":0,\"duration\":384,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"type\":\"http-request\"},\"samples\":{\"transaction.duration.count\":{\"value\":1},\"transaction.duration.sum.us\":{\"value\":384},\"transaction.breakdown.count\":{\"value\":1}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"app\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":0.06499997107312083}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"external\",\"subtype\":\"http\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":384}}}}";
		String requestHeader0256 = "POST " + requestFile0256 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0256.length() + "\r\n" + 		// Content-Length: 2332
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Content-Encoding: gzip\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0256, requestHost0256, requestPort0256, requestHeader0256, requestContent0256.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0256 = null;		// support garbage collector to reduce memory
		requestContent0256 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: check size +/- 5%, defined content size = 0
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, 0, 5);		// Test [256] <- Index 256
		if(replayMode)
		{
			long proxyDataRecordId =1612210839617L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #6 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #7: ClickLoginReport
		// # -------------------------



		// --- HTTP REQUEST: Test [258] <- WEB ADMIN Index 258 ---
		String requestProt0258 = "https";
		String requestHost0258 = "performancemanager4.successfactors.com";
		int    requestPort0258 = 443;
		String requestFile0258 = "/xi/ajax/remoting/call/plaincall/sessionTimeoutControllerProxy.keepAlive.dwr" +
				"?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d";
		String requestContent0258 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423273" + "\r\n" + 
				"c0-scriptName=sessionTimeoutControllerProxy" + "\r\n" + 
				"c0-methodName=keepAlive" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"batchId=0";
		String requestHeader0258 = "POST " + requestFile0258 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0258.length() + "\r\n" + 		// Content-Length: 301
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-9768352007c5ac08e6cc9f133dd5a332-66918b953c144bbb-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"Accept: text/plain, */*; q=0.01\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452-5\r\n" + 
				"OPTR_CXT: 01000500015d04e2d5-a2e2-4708-a02e-aed9257fce2329820909-1501-babe-face-000000000003a2c3a20b-5ee2-420d-8926-94932da5742fHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"viewid: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0258, requestHost0258, requestPort0258, requestHeader0258, requestContent0258.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0258 = null;		// support garbage collector to reduce memory
		requestContent0258 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 117
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [258] <- Index 258
		if(replayMode)
		{
			long proxyDataRecordId =1612210850045L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [259] <- WEB ADMIN Index 259 ---
		String requestProt0259 = "https";
		String requestHost0259 = "performancemanager4.successfactors.com";
		int    requestPort0259 = 443;
		String requestFile0259 = "/sf/inform" +
				"?reportId=" + C_Report +		// recorded value = cbdd22b1-9103-4101-a99a-80b889f1ceea
				"&action=RUN" +
				"&source=reportcenter" +
				"&_s.crb=" + vScrb;		// recorded value = Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d
		requestFile0259 = Lib.replaceTextPattern(requestFile0259, "cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report, 0);		// search and replace request file fragment "cbdd22b1-9103-4101-a99a-80b889f1ceea" with variable 'C_Report' on all occurrences

		String requestHeader0259 = "GET " + requestFile0259 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0259, requestHost0259, requestPort0259, requestHeader0259, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0259 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 61229
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors Business Execution Suite");		// Test [259] <- Index 259
		if(replayMode)
		{
			long proxyDataRecordId =1612210850053L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_EID1'
		ContentTokenExtractorItem contentTokenExtractorItem0259_1 = new ContentTokenExtractorItem("EID", "\t\n\r &(),={}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0259_1);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'C_EID1'
			C_EID1 = contentTokenExtractorItem0259_1.getResultToken();
			log("<<< C_EID1 = " + C_EID1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_EID1!= null && C_EID1.trim().length() == 0)
			{
				C_EID1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_EID1' ends up with an empty string - a substitute value was set");
				log("<<< C_EID1 = " + C_EID1);
			}
		}
		catch (Exception e) { C_EID1 = null; log(e); }
		if (C_EID1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_EID1' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [260] <- WEB ADMIN Index 260 ---
		String requestProt0260 = "https";
		String requestHost0260 = "performancemanager4.successfactors.com";
		int    requestPort0260 = 443;
		String requestFile0260 = "/perfLogServlet" +
				"?callId=2885013688-5" +
				"&moduleId=REPORT" +
				"&pageId=REPORT_CENTER" +
				"&pageQualifier=REPORT_LISTING_PAGE" +
				"&TRS=2080" +
				"&TIP=3417" +
				"&TML=5155" +
				"&TSL=5155" +
				"&ST=1612210850033" +
				"&ET=1612210850296" +
				"&MEM=264" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=2" +
				"&UCPU=0" +
				"&CPU=0" +
				"&FRE=0" +
				"&FWR=0" +
				"&CCON=0" +
				"&CSUP=0" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=76" +
				"&cssNum=18" +
				"&renderTime=162" +
				"&TTB=588" +
				"&RSR=603" +
				"&DIA=2615" +
				"&DCP=4291";
		String requestContent0260 = 
				"OPTR_INFO=5d04e2d5-a2e2-4708-a02e-aed9257fce23!1612210850033!1612210850195!0";
		String requestHeader0260 = "POST " + requestFile0260 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0260.length() + "\r\n" + 		// Content-Length: 76
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: ZeqlsQvqrwnupdTCu6yDQbBQyPmseHxhUZu8jpRvKYdKN4FMicW1iqZZIOeFm3dEQadUDIVwNlIWUGxiLXsMLH_3IlsJEGdmFJ_xN_h5dppQQmNdXtp1doYXFn_rfpNGLLNTQK\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-54b9f33be0b0455aed265f058ce21c49-6321536a2a286193-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452-5\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0260, requestHost0260, requestPort0260, requestHeader0260, requestContent0260.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0260 = null;		// support garbage collector to reduce memory
		requestContent0260 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [260] <- Index 260
		if(replayMode)
		{
			long proxyDataRecordId =1612210850306L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [261] <- WEB ADMIN Index 261 ---
		String requestProt0261 = "https";
		String requestHost0261 = "performancemanager4.successfactors.com";
		int    requestPort0261 = 443;
		String requestFile0261 = "/xi/ajax/remoting/call/plaincall/reportCenterControllerProxy.getSearchHighlights.dwr";
		String requestContent0261 = 
				"callCount=1" + "\r\n" + 
				"page=/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F42370" + "\r\n" + 
				"c0-scriptName=reportCenterControllerProxy" + "\r\n" + 
				"c0-methodName=getSearchHighlights" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:Login%20Report" + "\r\n" + 
				"c0-e2=string:MYREPORTS" + "\r\n" + 
				"c0-param0=Object_Object:{searchText:reference:c0-e1, reportTabType:reference:c0-e2}" + "\r\n" + 
				"c0-param1=number:5" + "\r\n" + 
				"batchId=11";
		String requestHeader0261 = "POST " + requestFile0261 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0261.length() + "\r\n" + 		// Content-Length: 464
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-54b9f33be0b0455aed265f058ce21c49-7cf2f36585b3e1ac-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452-6\r\n" + 
				"OPTR_CXT: 0100050001586e32cb-6af2-45fa-9a2a-eaf421b5842729820909-1501-babe-face-000000000003a6b302d9-1e82-4feb-8822-4eb52336e022HTTP    ;\r\n" + 
				"viewId: /ui/reportcenter/pages/reportCenter.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0261, requestHost0261, requestPort0261, requestHeader0261, requestContent0261.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0261 = null;		// support garbage collector to reduce memory
		requestContent0261 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 251
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [261] <- Index 261
		if(replayMode)
		{
			long proxyDataRecordId =1612210850449L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [262] <- WEB ADMIN Index 262 ---
		String requestProt0262 = "https";
		String requestHost0262 = "performancemanager4.successfactors.com";
		int    requestPort0262 = 443;
		String requestFile0262 = "/intake/v2/rum/events";
		String requestContent0262 = 
				"{\"metadata\":{\"service\":{\"name\":\"bizx-cf-web\",\"agent\":{\"name\":\"rum-js\",\"version\":\"5.5.0\"},\"language\":{\"name\":\"javascript\"},\"environment\":\"production\"}}}" + "\r\n" + 
				"{\"transaction\":{\"id\":\"bfd7f1a90ce0eb4c\",\"trace_id\":\"9768352007c5ac08e6cc9f133dd5a332\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/sessionTimeoutControllerProxy.keepAlive.dwr\",\"type\":\"http-request\",\"duration\":162,\"context\":{\"page\":{\"referer\":\"https://performancemanager4.successfactors.com/sf/start?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\",\"url\":\"https://performancemanager4.successfactors.com/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\"}},\"span_count\":{\"started\":1},\"sampled\":true}}" + "\r\n" + 
				"{\"span\":{\"id\":\"66918b953c144bbb\",\"transaction_id\":\"bfd7f1a90ce0eb4c\",\"parent_id\":\"bfd7f1a90ce0eb4c\",\"trace_id\":\"9768352007c5ac08e6cc9f133dd5a332\",\"name\":\"POST /xi/ajax/remoting/call/plaincall/sessionTimeoutControllerProxy.keepAlive.dwr\",\"type\":\"external\",\"subtype\":\"http\",\"start\":0,\"duration\":162,\"context\":{\"http\":{\"method\":\"POST\",\"url\":\"https://performancemanager4.successfactors.com/xi/ajax/remoting/call/plaincall/sessionTimeoutControllerProxy.keepAlive.dwr?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d\",\"status_code\":200},\"destination\":{\"service\":{\"name\":\"https://performancemanager4.successfactors.com\",\"resource\":\"performancemanager4.successfactors.com:443\",\"type\":\"external\"},\"address\":\"performancemanager4.successfactors.com\",\"port\":443}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/sessionTimeoutControllerProxy.keepAlive.dwr\",\"type\":\"http-request\"},\"samples\":{\"transaction.duration.count\":{\"value\":1},\"transaction.duration.sum.us\":{\"value\":162},\"transaction.breakdown.count\":{\"value\":1}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/sessionTimeoutControllerProxy.keepAlive.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"app\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":0.04499993519857526}}}}" + "\r\n" + 
				"{\"metricset\":{\"transaction\":{\"name\":\"POST /xi/ajax/remoting/call/plaincall/sessionTimeoutControllerProxy.keepAlive.dwr\",\"type\":\"http-request\"},\"span\":{\"type\":\"external\",\"subtype\":\"http\"},\"samples\":{\"span.self_time.count\":{\"value\":1},\"span.self_time.sum.us\":{\"value\":162}}}}";
		String requestHeader0262 = "POST " + requestFile0262 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0262.length() + "\r\n" + 		// Content-Length: 2344
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Content-Encoding: gzip\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0262, requestHost0262, requestPort0262, requestHeader0262, requestContent0262.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0262 = null;		// support garbage collector to reduce memory
		requestContent0262 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [262] <- Index 262
		if(replayMode)
		{
			long proxyDataRecordId =1612210850707L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [263] <- WEB ADMIN Index 263 ---
		String requestProt0263 = "https";
		String requestHost0263 = "performancemanager4.successfactors.com";
		int    requestPort0263 = 443;
		String requestFile0263 = "/perfLogServlet" +
				"?callId=2885013688-6" +
				"&moduleId=REPORT" +
				"&pageId=REPORT_CENTER" +
				"&pageQualifier=REPORT_LISTING_PAGE" +
				"&TRS=2080" +
				"&TIP=3417" +
				"&TML=5155" +
				"&TSL=5155" +
				"&ST=1612210850389" +
				"&ET=1612210850878" +
				"&MEM=12300" +
				"&NRE=32" +
				"&NWR=37" +
				"&SCPU=10" +
				"&SQLC=89" +
				"&SQLT=68" +
				"&SVT=170" +
				"&UCPU=80" +
				"&CPU=90" +
				"&FRE=2" +
				"&FWR=0" +
				"&CCON=0" +
				"&CSUP=3" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=76" +
				"&cssNum=18" +
				"&renderTime=387" +
				"&TTB=588" +
				"&RSR=603" +
				"&DIA=2615" +
				"&DCP=4291";
		String requestContent0263 = 
				"OPTR_INFO=586e32cb-6af2-45fa-9a2a-eaf421b58427!1612210850389!1612210850776!0";
		String requestHeader0263 = "POST " + requestFile0263 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0263.length() + "\r\n" + 		// Content-Length: 76
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: Qv8Ikwvbot9a2dO9fKboaOH50A08p5egKriqbXhHWHZqRqubndG8kaqtVNZOdoZHaK4bLq39j6W2fHFqb57_O03aAVFsQ0Re60V_UXF5XXVpR1ROU1YtLHFBO1ldH0akgnZLW4\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"traceparent: 00-b01b5a426be69e16ba79337f036887fc-1e7cec11b55ef6ed-01\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 1\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152005-2379452-6\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0263, requestHost0263, requestPort0263, requestHeader0263, requestContent0263.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0263 = null;		// support garbage collector to reduce memory
		requestContent0263 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [263] <- Index 263
		if(replayMode)
		{
			long proxyDataRecordId =1612210850887L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [264] <- WEB ADMIN Index 264 ---
		String requestProt0264 = "https";
		String requestHost0264 = "performancemanager4.successfactors.com";
		int    requestPort0264 = 443;
		String requestFile0264 = "/ui/uicore/css/xi_d41d8cd98f00b204e9800998ecf8427e.css";
		String requestHeader0264 = "GET " + requestFile0264 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0264, requestHost0264, requestPort0264, requestHeader0264, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0264 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [264] <- Index 264
		if(replayMode)
		{
			long proxyDataRecordId =1612210852132L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [265] <- WEB ADMIN Index 265 ---
		String requestProt0265 = "https";
		String requestHost0265 = "performancemanager4.successfactors.com";
		int    requestPort0265 = 443;
		String requestFile0265 = "/ui/uicore/css/xicommon_b2ba91d0973e2f2b556d59b67dfd2bc1.css";
		String requestHeader0265 = "GET " + requestFile0265 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0265, requestHost0265, requestPort0265, requestHeader0265, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0265 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 11785
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [265] <- Index 265
		if(replayMode)
		{
			long proxyDataRecordId =1612210852137L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [266] <- WEB ADMIN Index 266 ---
		String requestProt0266 = "https";
		String requestHost0266 = "performancemanager4.successfactors.com";
		int    requestPort0266 = 443;
		String requestFile0266 = "/ui/uicore/css/sysmsg_e5ae6c5bedbc0e4cac2f1ec64ce11153.css";
		String requestHeader0266 = "GET " + requestFile0266 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0266, requestHost0266, requestPort0266, requestHeader0266, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0266 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1136
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [266] <- Index 266
		if(replayMode)
		{
			long proxyDataRecordId =1612210852142L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [267] <- WEB ADMIN Index 267 ---
		String requestProt0267 = "https";
		String requestHost0267 = "performancemanager4.successfactors.com";
		int    requestPort0267 = 443;
		String requestFile0267 = "/ui/v4/js/ajaxservice/sessionTimeoutControllerASProxy_086032b66e6b4a2548ad82fd5d928d2b.js";
		String requestHeader0267 = "GET " + requestFile0267 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0267, requestHost0267, requestPort0267, requestHeader0267, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0267 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 346
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [267] <- Index 267
		if(replayMode)
		{
			long proxyDataRecordId =1612210852238L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [268] <- WEB ADMIN Index 268 ---
		String requestProt0268 = "https";
		String requestHost0268 = "performancemanager4.successfactors.com";
		int    requestPort0268 = 443;
		String requestFile0268 = "/ui/uicore/css/ext-custom_473ff6a53c9327806cfe3e6a15f6f177.css";
		String requestHeader0268 = "GET " + requestFile0268 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0268, requestHost0268, requestPort0268, requestHeader0268, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0268 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2075
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [268] <- Index 268
		if(replayMode)
		{
			long proxyDataRecordId =1612210852243L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [269] <- WEB ADMIN Index 270 ---
		String requestProt0269 = "https";
		String requestHost0269 = "performancemanager4.successfactors.com";
		int    requestPort0269 = 443;
		String requestFile0269 = "/ui/v4/js/ajaxservice/informControllerASProxy_2485a9124f7da2fa9197e741f26e21ba.js";
		String requestHeader0269 = "GET " + requestFile0269 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0269, requestHost0269, requestPort0269, requestHeader0269, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0269 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 288
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [269] <- Index 269
		if(replayMode)
		{
			long proxyDataRecordId =1612210852261L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [270] <- WEB ADMIN Index 271 ---
		String requestProt0270 = "https";
		String requestHost0270 = "performancemanager4.successfactors.com";
		int    requestPort0270 = 443;
		String requestFile0270 = "/ui/inform/css/inform_e10f5929112d6b753e5bafa9b14d2d91.css";
		String requestHeader0270 = "GET " + requestFile0270 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0270, requestHost0270, requestPort0270, requestHeader0270, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0270 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 161
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [270] <- Index 270
		if(replayMode)
		{
			long proxyDataRecordId =1612210852271L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [271] <- WEB ADMIN Index 272 ---
		String requestProt0271 = "https";
		String requestHost0271 = "performancemanager4.successfactors.com";
		int    requestPort0271 = 443;
		String requestFile0271 = "/ui/uicore/js/FontResize_327d59635bda272d4e4c4b089c836fea.js";
		String requestHeader0271 = "GET " + requestFile0271 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0271, requestHost0271, requestPort0271, requestHeader0271, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0271 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 801
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [271] <- Index 271
		if(replayMode)
		{
			long proxyDataRecordId =1612210852311L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [272] <- WEB ADMIN Index 273 ---
		String requestProt0272 = "https";
		String requestHost0272 = "performancemanager4.successfactors.com";
		int    requestPort0272 = 443;
		String requestFile0272 = "/ui/uicore/js/AboutBox_de0d59666a8d55e0997ef3871b761579.js";
		String requestHeader0272 = "GET " + requestFile0272 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0272, requestHost0272, requestPort0272, requestHeader0272, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0272 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 454
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [272] <- Index 272
		if(replayMode)
		{
			long proxyDataRecordId =1612210852312L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [273] <- WEB ADMIN Index 274 ---
		String requestProt0273 = "https";
		String requestHost0273 = "performancemanager4.successfactors.com";
		int    requestPort0273 = 443;
		String requestFile0273 = "/ui/notification/js/ajaxservice/globalNotificationControllerASProxy_a38ad21c3791f84b68198c84068e5ec3.js";
		String requestHeader0273 = "GET " + requestFile0273 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0273, requestHost0273, requestPort0273, requestHeader0273, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0273 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 428
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [273] <- Index 273
		if(replayMode)
		{
			long proxyDataRecordId =1612210852313L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [274] <- WEB ADMIN Index 275 ---
		String requestProt0274 = "https";
		String requestHost0274 = "performancemanager4.successfactors.com";
		int    requestPort0274 = 443;
		String requestFile0274 = "/ui/v4/js/ajaxservice/tutorialVideoControllerASProxy_bc8f4aae6a9b7b05938cf9cac58f7cb8.js";
		String requestHeader0274 = "GET " + requestFile0274 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0274, requestHost0274, requestPort0274, requestHeader0274, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0274 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 373
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [274] <- Index 274
		if(replayMode)
		{
			long proxyDataRecordId =1612210852348L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [275] <- WEB ADMIN Index 276 ---
		String requestProt0275 = "https";
		String requestHost0275 = "performancemanager4.successfactors.com";
		int    requestPort0275 = 443;
		String requestFile0275 = "/ui/inform/js/inform_cb47727daba1c65203f7b07df2d3d5b1.js";
		String requestHeader0275 = "GET " + requestFile0275 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0275, requestHost0275, requestPort0275, requestHeader0275, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0275 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1739
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [275] <- Index 275
		if(replayMode)
		{
			long proxyDataRecordId =1612210852349L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [276] <- WEB ADMIN Index 277 ---
		String requestProt0276 = "https";
		String requestHost0276 = "performancemanager4.successfactors.com";
		int    requestPort0276 = 443;
		String requestFile0276 = "/xi/ajax/remoting/call/plaincall/informControllerProxy.doInformSSO.dwr";
		String requestContent0276 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/inform?reportId=cbdd22b1-9103-4101-a99a-80b889f1ceea&action=RUN&source=reportcenter&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423344" + "\r\n" + 
				"c0-scriptName=informControllerProxy" + "\r\n" + 
				"c0-methodName=doInformSSO" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-e1=string:cbdd22b1-9103-4101-a99a-80b889f1ceea" + "\r\n" + 
				"c0-e2=string:RUN" + "\r\n" + 
				"c0-param0=Object_Object:{reportId:reference:c0-e1, action:reference:c0-e2}" + "\r\n" + 
				"batchId=0";
		requestContent0276 = Lib.replaceTextPattern(requestContent0276, "cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report, 0);		// search and replace content fragment "cbdd22b1-9103-4101-a99a-80b889f1ceea" with variable 'C_Report' on all occurrences

		String requestHeader0276 = "POST " + requestFile0276 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0276.length() + "\r\n" + 		// Content-Length: 462
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=WORKFORCE_ANALYTICS&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152050-2379648\r\n" + 
				"OPTR_CXT: 0100050001ed5fa20b-8b02-4a61-be2d-83f6216edd2c29820909-1501-babe-face-0000000000039fc6221e-8002-442d-ab2d-4cc728747a2cHTTP    ;\r\n" + 
				"viewId: /ui/inform/pages/analytics/inform.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0276, requestHost0276, requestPort0276, requestHeader0276, requestContent0276.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152050-2379648", C_EID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0276 = null;		// support garbage collector to reduce memory
		requestContent0276 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 861
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, ",webServiceSuccess:true});");		// Test [276] <- Index 276
		if(replayMode)
		{
			long proxyDataRecordId =1612210852527L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SFcontent'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0276_1 = new BoundaryBasedExtractorItem( "postContent:\"" , "\",reportId",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0276_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SFcontent'
			C_SFcontent = boundaryBasedContentExtractorItem0276_1.getResultText();
			log("<<< C_SFcontent = " + C_SFcontent);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SFcontent!= null && C_SFcontent.trim().length() == 0)
			{
				C_SFcontent = "";
				log("runtime note: the extraction of a new value for the variable 'C_SFcontent' ends up with an empty string - a substitute value was set");
				log("<<< C_SFcontent = " + C_SFcontent);
			}
		}
		catch (Exception e) { C_SFcontent = null; log(e); }
		if (C_SFcontent == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SFcontent' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [277] <- WEB ADMIN Index 278 ---
		String requestProt0277 = "https";
		String requestHost0277 = "performancemanager4.successfactors.com";
		int    requestPort0277 = 443;
		String requestFile0277 = "/perfLogServlet" +
				"?callId=9289555001-X" +
				"&moduleId=REPORT" +
				"&pageId=REPORT_CENTER" +
				"&pageQualifier=WORKFORCE_ANALYTICS" +
				"&ST=1612210850042" +
				"&ET=1612210852664" +
				"&TTB=2065" +
				"&RSR=2072" +
				"&DIA=2457" +
				"&DCP=2622";
		String requestHeader0277 = "GET " + requestFile0277 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: 2WATIUA39_EBCEoGBz2A0jozCzLTAgX31SLQzAHAyAj6xzb_BUw-EzkTB-zU5hwg5h6A20k2Azwa9Aow7Dgm5i6u2AIs9Twpwk-tAwvr1wfG-wzDzxiXvOXssOzpu8nfxOfoqq\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain; charset=UTF-8\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=WORKFORCE_ANALYTICS&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152050-2379648-X\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0277, requestHost0277, requestPort0277, requestHeader0277, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152050-2379648", C_EID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0277 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [277] <- Index 277
		if(replayMode)
		{
			long proxyDataRecordId =1612210852672L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #7 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #7 (fragment 2 of 7)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [278] <- WEB ADMIN Index 279 ---
		String requestProt0278 = "https";
		String requestHost0278 = "performancemanager4.successfactors.com";
		int    requestPort0278 = 443;
		String requestFile0278 = "/ui/showme/js/ajaxservice/showMeControllerASProxy_619594cf233e35820583fb250b9368c3.js";
		String requestHeader0278 = "GET " + requestFile0278 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0278, requestHost0278, requestPort0278, requestHeader0278, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0278 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 418
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JAVASCRIPT", null, null);		// Test [278] <- Index 278
		if(replayMode)
		{
			long proxyDataRecordId =1612210852771L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [279] <- WEB ADMIN Index 280 ---
		String requestProt0279 = "https";
		String requestHost0279 = "performancemanager4.successfactors.com";
		int    requestPort0279 = 443;
		String requestFile0279 = "/odata/v4/NotificationService.svc/GetNumberOfNewNotifications(userId='TestAutomation')";
		String requestHeader0279 = "GET " + requestFile0279 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/json\r\n" + 
				"Accept: */*\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152050-2379648\r\n" + 
				"OPTR_CXT: 0100050001f3429210-8fe2-4231-bd2d-31792f9bff2529820909-1501-babe-face-0000000000038313f2a0-e8d2-417a-9223-cabe21aea32fHTTP    ;\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=WORKFORCE_ANALYTICS&uiVersion=V12&userId=TestAutomation\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0279, requestHost0279, requestPort0279, requestHeader0279, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152050-2379648", C_EID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0279 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 195
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [279] <- Index 279
		if(replayMode)
		{
			long proxyDataRecordId =1612210852800L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [280] <- WEB ADMIN Index 281 ---
		String requestProt0280 = "https";
		String requestHost0280 = "performancemanager4.successfactors.com";
		int    requestPort0280 = 443;
		String requestFile0280 = "/xi/ajax/remoting/call/plaincall/showMeControllerProxy.signAPIUrl.dwr";
		String requestContent0280 = 
				"callCount=1" + "\r\n" + 
				"page=/sf/inform?reportId=cbdd22b1-9103-4101-a99a-80b889f1ceea&action=RUN&source=reportcenter&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" + "\r\n" + 
				"httpSessionId=" + "\r\n" + 
				"scriptSessionId=80A8BD291A8E635A37D57F13E5D1F423344" + "\r\n" + 
				"c0-scriptName=showMeControllerProxy" + "\r\n" + 
				"c0-methodName=signAPIUrl" + "\r\n" + 
				"c0-id=0" + "\r\n" + 
				"c0-param0=string:%2Fmedia%2Fshowme_ab3a783e_706e_40dd_a87a_a8283cabf42b%2FREPORT_CENTER%2Fstatus" + "\r\n" + 
				"c0-param1=string:REPORT_CENTER" + "\r\n" + 
				"c0-param2=string:b834e0f183d2c60df022354ec83fe656" + "\r\n" + 
				"batchId=1";
		requestContent0280 = Lib.replaceTextPattern(requestContent0280, "cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report, 0);		// search and replace content fragment "cbdd22b1-9103-4101-a99a-80b889f1ceea" with variable 'C_Report' on all occurrences

		String requestHeader0280 = "POST " + requestFile0280 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0280.length() + "\r\n" + 		// Content-Length: 497
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-skipSeamFilterJsfPhase: true\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=WORKFORCE_ANALYTICS&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152050-2379648\r\n" + 
				"OPTR_CXT: 0100050001cb0ca268-2a42-431a-8626-b7f422f45c2a29820909-1501-babe-face-00000000000354c4b287-48e2-4933-ac25-cdd62bd93222HTTP    ;\r\n" + 
				"viewId: /ui/inform/pages/analytics/inform.xhtml\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0280, requestHost0280, requestPort0280, requestHeader0280, requestContent0280.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152050-2379648", C_EID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0280 = null;		// support garbage collector to reduce memory
		requestContent0280 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 411
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [280] <- Index 280
		if(replayMode)
		{
			long proxyDataRecordId =1612210852836L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Token1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0280_1 = new BoundaryBasedExtractorItem( "token=" , "\");",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0280_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Token1'
			C_Token1 = boundaryBasedContentExtractorItem0280_1.getResultText();
			log("<<< C_Token1 = " + C_Token1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Token1!= null && C_Token1.trim().length() == 0)
			{
				C_Token1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Token1' ends up with an empty string - a substitute value was set");
				log("<<< C_Token1 = " + C_Token1);
			}
		}
		catch (Exception e) { C_Token1 = null; log(e); }
		if (C_Token1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Token1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [281] <- WEB ADMIN Index 282 ---
		String requestProt0281 = "https";
		String requestHost0281 = "azprod.ms.successfactors.com";
		int    requestPort0281 = 443;
		String requestFile0281 = "/mediaservice/api/v2/media/showme_ab3a783e_706e_40dd_a87a_a8283cabf42b/REPORT_CENTER/status" +
				"?token=" + C_Token1 +		// recorded value = 66da9f8e5f0059de3b84da78d6902785cf7d4b4ad8f4c75eab2d47ce7cc2dcd272d33a9b818bee9321c28285116a2c1b9b79395c23a127391e54bf6a05f056a9,-8876833412817594564,1612212652,1
				"&callback=sfDeferredUtilCallback0";
		requestFile0281 = Lib.replaceTextPattern(requestFile0281, "66da9f8e5f0059de3b84da78d6902785cf7d4b4ad8f4c75eab2d47ce7cc2dcd272d33a9b818bee9321c28285116a2c1b9b79395c23a127391e54bf6a05f056a9,-8876833412817594564,1612212652,1", C_Token1, 0);		// search and replace request file fragment "66da9f8e5f0059de3b84da78d6902785cf7d4b4ad8f4c75eab2d47ce7cc2dcd272d33a9b818bee9321c28285116a2c1b9b79395c23a127391e54bf6a05f056a9,-8876833412817594564,1612212652,1" with variable 'C_Token1' on all occurrences

		String requestHeader0281 = "GET " + requestFile0281 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: azprod.ms.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0281, requestHost0281, requestPort0281, requestHeader0281, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0281 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 133
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [281] <- Index 281
		if(replayMode)
		{
			long proxyDataRecordId =1612210853039L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [282] <- WEB ADMIN Index 283 ---
		String requestProt0282 = "https";
		String requestHost0282 = "performancemanager4.successfactors.com";
		int    requestPort0282 = 443;
		String requestFile0282 = "/perfLogServlet" +
				"?callId=9289555001-0" +
				"&moduleId=REPORT" +
				"&pageId=REPORT_CENTER" +
				"&pageQualifier=WORKFORCE_ANALYTICS" +
				"&ST=1612210850262" +
				"&STC=1612210850042" +
				"&ETC=1612210853924" +
				"&MEM=101135" +
				"&NRE=147" +
				"&NWR=104" +
				"&SCPU=20" +
				"&SQLC=50" +
				"&SQLT=79" +
				"&SVT=2938" +
				"&UCPU=570" +
				"&CPU=590" +
				"&FRE=179" +
				"&FWR=0" +
				"&CCON=7" +
				"&CSUP=13" +
				"&CLOC=2" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=47" +
				"&cssNum=16" +
				"&renderTime=1695" +
				"&TTB=2065" +
				"&RSR=2072" +
				"&DIA=2457" +
				"&DCP=2622";
		String requestContent0282 = 
				"OPTR_INFO=d1094279-8212-49e4-8f2a-20612550b52d!1612210852432!1612210852439!0" +
				"&OPTR_INFO=973fb215-bdb2-45a3-a52b-1a9a2055b921!1612210852458!1612210852464!0" +
				"&OPTR_INFO=f9d550eb-64ca-11eb-84bd-6149e6cf885e!0!1612210852498!1" +
				"&OPTR_INFO=ed5fa20b-8b02-4a61-be2d-83f6216edd2c!1612210852513!1612210853824!0" +
				"&OPTR_INFO=cdaad24b-d542-44a9-8b2e-1fec2362b32d!1612210852516!1612210852520!0" +
				"&OPTR_INFO=50a78285-15e2-4416-9027-6ede2053f02c!1612210852523!1612210852527!0" +
				"&OPTR_INFO=db501259-0472-4e33-b42b-dea8231d1426!1612210852527!1612210852531!0" +
				"&OPTR_INFO=123bd2ee-59d2-45dd-aa24-e35e2797e22e!1612210852532!1612210852535!0" +
				"&OPTR_INFO=2c0c22b3-66d2-47b4-8a23-2ab926b61c27!1612210852550!1612210852555!0" +
				"&OPTR_INFO=5531c2c1-fde2-4a62-9f2e-b4422a389322!1612210852557!1612210852560!0" +
				"&OPTR_INFO=a75b2225-1502-4c5c-ae2c-b54828fbb922!1612210852562!1612210852565!0" +
				"&OPTR_INFO=6a00c23b-cc22-4a00-9a28-1e332ae2192f!1612210852567!1612210852570!0" +
				"&OPTR_INFO=33dc22d2-9432-4125-aa2b-4037293aca2e!1612210852572!1612210852575!0" +
				"&OPTR_INFO=4e3ea200-7e72-4a78-8621-f7872d46b522!1612210852576!1612210852579!0" +
				"&OPTR_INFO=d5916280-1042-44a6-8d20-4edc2e495921!1612210852593!1612210852597!0" +
				"&OPTR_INFO=6355025f-60a2-4e62-a328-9d5c28eb1f2c!1612210852678!1612210852682!0" +
				"&OPTR_INFO=c1eff29a-50d2-46c4-bc2c-64b72344882b!1612210852717!1612210852722!0" +
				"&OPTR_INFO=38bbc2bb-eeb2-446a-912f-984022251123!1612210852723!1612210852727!0" +
				"&OPTR_INFO=a530c208-26c2-4405-ae22-e51820f57b2c!1612210852728!1612210852731!0" +
				"&OPTR_INFO=2a4532ed-92b2-408a-8723-61e92ba63e2e!1612210852732!1612210852736!0" +
				"&OPTR_INFO=2db9e2b8-5932-43f4-9d22-cf55285a9826!1612210852757!1612210852761!0" +
				"&OPTR_INFO=f3429210-8fe2-4231-bd2d-31792f9bff25!1612210852793!1612210853026!0" +
				"&OPTR_INFO=cb0ca268-2a42-431a-8626-b7f422f45c2a!1612210852826!1612210853028!0";
		String requestHeader0282 = "POST " + requestFile0282 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0282.length() + "\r\n" + 		// Content-Length: 1758
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: jwy0pNarwPLmpMTLrPrqbKBXdZGfaLmibpV9OGl7PKBNT1_aYbKyfbWfb6VycqipSZ7JU6a-ia3FJltlTYxzKl6PHWlqNk7sBJ77WoRfMXugd27BOH-jfaxKf3cYHEcYeKaeNa\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=WORKFORCE_ANALYTICS&uiVersion=V12&userId=TestAutomation\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152050-2379648\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0282, requestHost0282, requestPort0282, requestHeader0282, requestContent0282.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("EVENT-UNKNOWN-UNKNOWN-ob3abe270s-20210201152050-2379648", C_EID1);		// search within all request header fields a text pattern and replace it with a variable value
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0282 = null;		// support garbage collector to reduce memory
		requestContent0282 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [282] <- Index 282
		if(replayMode)
		{
			long proxyDataRecordId =1612210853931L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [283] <- WEB ADMIN Index 284 ---
		String requestProt0283 = "https";
		String requestHost0283 = "analytics4.successfactors.com";
		int    requestPort0283 = 443;
		String requestFile0283 = "/Production/Login.aspx" +
				"?ts=1612210853823";
		String requestContent0283 = 
				"SF_Token=" + java.net.URLEncoder.encode(C_SFcontent);		// recorded value = PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHRva2VuPgogPHVzZXI%2BCiAgPHNmQ29tcGFueUlkPlRlY2s8L3NmQ29tcGFueUlkPgo8c2ZVc2VySWQ%2BVGVzdEF1dG9tYXRpb248L3NmVXNlcklkPgo8c2ZMYW5nQ29kZT5lbl9VUzwvc2ZMYW5nQ29kZT4KPHNmTG9naW5Vc2VyPjwvc2ZMb2dpblVzZXI%2BCiA8L3VzZXI%2BCiA8bGFuZGluZ1BhZ2U%2BeyVQQlJVTlRJTUUoY2JkZDIyYjEtOTEwMy00MTAxLWE5OWEtODBiODg5ZjFjZWVhLCAxLCBSZXBvcnRDZW50ZXIpJX08L2xhbmRpbmdQYWdlPgogPHRyYWNlSW5mbz48L3RyYWNlSW5mbz4KPC90b2tlbj4%3D
		byte[][] searchPattern0283_0 = new byte[1][];
		searchPattern0283_0[0] = Base64Decoder.decodeToBytes("UEQ5NGJXd2dkbVZ5YzJsdmJqMGlNUzR3SWlCbGJtTnZaR2x1WnowaVZWUkdMVGdpUHo0S1BIUnZhMlZ1UGdvZ1BIVnpaWEklMkJDaUFnUEhObVEyOXRjR0Z1ZVVsa1BsUmxZMnM4TDNObVEyOXRjR0Z1ZVVsa1BnbzhjMlpWYzJWeVNXUSUyQlZHVnpkRUYxZEc5dFlYUnBiMjQ4TDNObVZYTmxja2xrUGdvOGMyWk1ZVzVuUTI5a1pUNWxibDlWVXp3dmMyWk1ZVzVuUTI5a1pUNEtQSE5tVEc5bmFXNVZjMlZ5UGp3dmMyWk1iMmRwYmxWelpYSSUyQkNpQThMM1Z6WlhJJTJCQ2lBOGJHRnVaR2x1WjFCaFoyVSUyQmV5VlFRbEpWVGxSSlRVVW9ZMkprWkRJeVlqRXRPVEV3TXkwME1UQXhMV0U1T1dFdE9EQmlPRGc1WmpGalpXVmhMQ0F4TENCU1pYQnZjblJEWlc1MFpYSXBKWDA4TDJ4aGJtUnBibWRRWVdkbFBnb2dQSFJ5WVdObFNXNW1iejQ4TDNSeVlXTmxTVzVtYno0S1BDOTBiMnRsYmo0JTNE");
		byte[] binarySearchPattern0283_0   = Lib.mergeByteArrays(searchPattern0283_0);		// note: the search pattern value is base 64 encoded. decoded value = PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHRva2VuPgogPHVzZXI%2BCiAgPHNmQ29tcGFueUlkPlRlY2s8L3NmQ29tcGFueUlkPgo8c2ZVc2VySWQ%2BVGVzdEF1dG9tYXRpb248L3NmVXNlcklkPgo8c2ZMYW5nQ29kZT5lbl9VUzwvc2ZMYW5nQ29kZT4KPHNmTG9naW5Vc2VyPjwvc2ZMb2dpblVzZXI%2BCiA8L3VzZXI%2BCiA8bGFuZGluZ1BhZ2U%2BeyVQQlJVTlRJTUUoY2JkZDIyYjEtOTEwMy00MTAxLWE5OWEtODBiODg5ZjFjZWVhLCAxLCBSZXBvcnRDZW50ZXIpJX08L2xhbmRpbmdQYWdlPgogPHRyYWNlSW5mbz48L3RyYWNlSW5mbz4KPC90b2tlbj4%3D
		requestContent0283 = new String(Lib.binaryReplace(requestContent0283.getBytes(), binarySearchPattern0283_0, java.net.URLEncoder.encode(C_SFcontent).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		String requestHeader0283 = "POST " + requestFile0283 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0283.length() + "\r\n" + 		// Content-Length: 453
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0283, requestHost0283, requestPort0283, requestHeader0283, requestContent0283.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0283 = null;		// support garbage collector to reduce memory
		requestContent0283 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1448
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Note:");		// Test [283] <- Index 283
		if(replayMode)
		{
			long proxyDataRecordId =1612210854618L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0283_1 = new BoundaryBasedExtractorItem( "SAMLRequest\" value=\"" , "\"/>",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0283_1);

		// setup var extractor for 'C_RelayState1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0283_2 = new BoundaryBasedExtractorItem( "name=\"RelayState\" value=\"" , "\"/>",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0283_2);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest'
			C_SAMLRequest = boundaryBasedContentExtractorItem0283_1.getResultText();
			log("<<< C_SAMLRequest = " + C_SAMLRequest);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest!= null && C_SAMLRequest.trim().length() == 0)
			{
				C_SAMLRequest = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest = " + C_SAMLRequest);
			}
		}
		catch (Exception e) { C_SAMLRequest = null; log(e); }
		if (C_SAMLRequest == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_RelayState1'
			C_RelayState1 = boundaryBasedContentExtractorItem0283_2.getResultText();
			log("<<< C_RelayState1 = " + C_RelayState1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_RelayState1!= null && C_RelayState1.trim().length() == 0)
			{
				C_RelayState1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_RelayState1' ends up with an empty string - a substitute value was set");
				log("<<< C_RelayState1 = " + C_RelayState1);
			}
		}
		catch (Exception e) { C_RelayState1 = null; log(e); }
		if (C_RelayState1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_RelayState1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [284] <- WEB ADMIN Index 285 ---
		String requestProt0284 = "https";
		String requestHost0284 = "performancemanager4.successfactors.com";
		int    requestPort0284 = 443;
		String requestFile0284 = "/sf/idp/SAML2/SSO/POST/company/Teck";
		String requestContent0284 = 
				"SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest) +		// recorded value = PHNhbWxwOkF1dGhuUmVxdWVzdCBJRD0iXzRhMThiMDBhLWI2ZmEtNGMzZS1hZmYwLWM5OWZkZDVjYWU4NSIgVmVyc2lvbj0iMi4wIiBJc3N1ZUluc3RhbnQ9IjIwMjEtMDItMDFUMjA6MjA6MjEuNTA4WiIgRGVzdGluYXRpb249Imh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2YvaWRwL1NBTUwyL1NTTy9QT1NUL2NvbXBhbnkvVGVjayIgRm9yY2VBdXRobj0iZmFsc2UiIElzUGFzc2l2ZT0iZmFsc2UiIFByb3RvY29sQmluZGluZz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmJpbmRpbmdzOkhUVFAtUE9TVCIgQXNzZXJ0aW9uQ29uc3VtZXJTZXJ2aWNlVVJMPSJodHRwczovL2FuYWx5dGljczQuc3VjY2Vzc2ZhY3RvcnMuY29tL1Byb2R1Y3Rpb24vTG9naW4uYXNweCIgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCI%2BPHNhbWw6SXNzdWVyIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHA6Ly9pbnQtYW5hbHl0aWNzNC5zdWNjZXNzZmFjdG9ycy5jb20vUHJvZHVjdGlvbi9Mb2dpbi5hc3B4P3RzPTE2MTIyMTA4NTM4MjM8L3NhbWw6SXNzdWVyPjwvc2FtbHA6QXV0aG5SZXF1ZXN0Pg%3D%3D
				"&RelayState=" + C_RelayState1;		// recorded value = 2312E111F35E524385B589C5BFC59255
		byte[][] searchPattern0284_0 = new byte[1][];
		searchPattern0284_0[0] = Base64Decoder.decodeToBytes("UEhOaGJXeHdPa0YxZEdodVVtVnhkV1Z6ZENCSlJEMGlYelJoTVRoaU1EQmhMV0kyWm1FdE5HTXpaUzFoWm1Zd0xXTTVPV1prWkRWallXVTROU0lnVm1WeWMybHZiajBpTWk0d0lpQkpjM04xWlVsdWMzUmhiblE5SWpJd01qRXRNREl0TURGVU1qQTZNakE2TWpFdU5UQTRXaUlnUkdWemRHbHVZWFJwYjI0OUltaDBkSEJ6T2k4dmNHVnlabTl5YldGdVkyVnRZVzVoWjJWeU5DNXpkV05qWlhOelptRmpkRzl5Y3k1amIyMHZjMll2YVdSd0wxTkJUVXd5TDFOVFR5OVFUMU5VTDJOdmJYQmhibmt2VkdWamF5SWdSbTl5WTJWQmRYUm9iajBpWm1Gc2MyVWlJRWx6VUdGemMybDJaVDBpWm1Gc2MyVWlJRkJ5YjNSdlkyOXNRbWx1WkdsdVp6MGlkWEp1T205aGMybHpPbTVoYldWek9uUmpPbE5CVFV3Nk1pNHdPbUpwYm1ScGJtZHpPa2hVVkZBdFVFOVRWQ0lnUVhOelpYSjBhVzl1UTI5dWMzVnRaWEpUWlhKMmFXTmxWVkpNUFNKb2RIUndjem92TDJGdVlXeDVkR2xqY3pRdWMzVmpZMlZ6YzJaaFkzUnZjbk11WTI5dEwxQnliMlIxWTNScGIyNHZURzluYVc0dVlYTndlQ0lnZUcxc2JuTTZjMkZ0YkhBOUluVnlianB2WVhOcGN6cHVZVzFsY3pwMFl6cFRRVTFNT2pJdU1EcHdjbTkwYjJOdmJDSSUyQlBITmhiV3c2U1hOemRXVnlJSGh0Ykc1ek9uTmhiV3c5SW5WeWJqcHZZWE5wY3pwdVlXMWxjenAwWXpwVFFVMU1Pakl1TURwaGMzTmxjblJwYjI0aVBtaDBkSEE2THk5cGJuUXRZVzVoYkhsMGFXTnpOQzV6ZFdOalpYTnpabUZqZEc5eWN5NWpiMjB2VUhKdlpIVmpkR2x2Ymk5TWIyZHBiaTVoYzNCNFAzUnpQVEUyTVRJeU1UQTROVE00TWpNOEwzTmhiV3c2U1hOemRXVnlQand2YzJGdGJIQTZRWFYwYUc1U1pYRjFaWE4wUGclM0QlM0Q=");
		byte[] binarySearchPattern0284_0   = Lib.mergeByteArrays(searchPattern0284_0);		// note: the search pattern value is base 64 encoded. decoded value = PHNhbWxwOkF1dGhuUmVxdWVzdCBJRD0iXzRhMThiMDBhLWI2ZmEtNGMzZS1hZmYwLWM5OWZkZDVjYWU4NSIgVmVyc2lvbj0iMi4wIiBJc3N1ZUluc3RhbnQ9IjIwMjEtMDItMDFUMjA6MjA6MjEuNTA4WiIgRGVzdGluYXRpb249Imh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2YvaWRwL1NBTUwyL1NTTy9QT1NUL2NvbXBhbnkvVGVjayIgRm9yY2VBdXRobj0iZmFsc2UiIElzUGFzc2l2ZT0iZmFsc2UiIFByb3RvY29sQmluZGluZz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmJpbmRpbmdzOkhUVFAtUE9TVCIgQXNzZXJ0aW9uQ29uc3VtZXJTZXJ2aWNlVVJMPSJodHRwczovL2FuYWx5dGljczQuc3VjY2Vzc2ZhY3RvcnMuY29tL1Byb2R1Y3Rpb24vTG9naW4uYXNweCIgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCI%2BPHNhbWw6SXNzdWVyIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHA6Ly9pbnQtYW5hbHl0aWNzNC5zdWNjZXNzZmFjdG9ycy5jb20vUHJvZHVjdGlvbi9Mb2dpbi5hc3B4P3RzPTE2MTIyMTA4NTM4MjM8L3NhbWw6SXNzdWVyPjwvc2FtbHA6QXV0aG5SZXF1ZXN0Pg%3D%3D
		requestContent0284 = new String(Lib.binaryReplace(requestContent0284.getBytes(), binarySearchPattern0284_0, java.net.URLEncoder.encode(C_SAMLRequest).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0284 = Lib.replaceTextPattern(requestContent0284, "2312E111F35E524385B589C5BFC59255", C_RelayState1, 0);		// search and replace content fragment "2312E111F35E524385B589C5BFC59255" with variable 'C_RelayState1' on all occurrences

		String requestHeader0284 = "POST " + requestFile0284 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0284.length() + "\r\n" + 		// Content-Length: 910
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0284, requestHost0284, requestPort0284, requestHeader0284, requestContent0284.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0284 = null;		// support garbage collector to reduce memory
		requestContent0284 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 18138
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Click this link");		// Test [284] <- Index 284
		if(replayMode)
		{
			long proxyDataRecordId =1612210854728L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLResponseContent'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0284_1 = new BoundaryBasedExtractorItem( "SAMLResponse\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0284_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLResponseContent'
			C_SAMLResponseContent = boundaryBasedContentExtractorItem0284_1.getResultText();
			log("<<< C_SAMLResponseContent = " + C_SAMLResponseContent);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLResponseContent!= null && C_SAMLResponseContent.trim().length() == 0)
			{
				C_SAMLResponseContent = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLResponseContent' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLResponseContent = " + C_SAMLResponseContent);
			}
		}
		catch (Exception e) { C_SAMLResponseContent = null; log(e); }
		if (C_SAMLResponseContent == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLResponseContent' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [285] <- WEB ADMIN Index 286 ---
		log();
		log("# title: Object moved");
		String requestProt0285 = "https";
		String requestHost0285 = "analytics4.successfactors.com";
		int    requestPort0285 = 443;
		String requestFile0285 = "/Production/Login.aspx";
		String requestContent0285 = 
				"SAMLResponse=" + java.net.URLEncoder.encode(C_SAMLResponseContent) +		// recorded value = PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9hbmFseXRpY3M0LnN1Y2Nlc3NmYWN0b3JzLmNvbS9Qcm9kdWN0aW9uL0xvZ2luLmFzcHgiIElEPSJfODJkOWQwMjItODZiYy00MDk2LThlMTYtYmJhNTNmZmQ3N2M4IiBJblJlc3BvbnNlVG89Il80YTE4YjAwYS1iNmZhLTRjM2UtYWZmMC1jOTlmZGQ1Y2FlODUiIElzc3VlSW5zdGFudD0iMjAyMS0wMi0wMVQyMDoyMDo1NC45OThaIiBWZXJzaW9uPSIyLjAiPjxzYW1sMjpJc3N1ZXIgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2YvaWRwL1NBTUwyL2NvbXBhbnkvVGVjazwvc2FtbDI6SXNzdWVyPjxzYW1sMnA6U3RhdHVzPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8%2BPC9zYW1sMnA6U3RhdHVzPjxzYW1sMjpBc3NlcnRpb24geG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIElEPSJTRl9TQU1MMi4wX2Y5MzRlM2IzLWMyOWQtNGFkMC05M2M0LTRhZjg4ZjZmZGI5YSIgSXNzdWVJbnN0YW50PSIyMDIxLTAyLTAxVDIwOjIwOjU0Ljk5N1oiIFZlcnNpb249IjIuMCIgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIj48c2FtbDI6SXNzdWVyPmh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2YvaWRwL1NBTUwyL2NvbXBhbnkvVGVjazwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbyB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BCjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIvPgo8ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIvPgo8ZHM6UmVmZXJlbmNlIFVSST0iI1NGX1NBTUwyLjBfZjkzNGUzYjMtYzI5ZC00YWQwLTkzYzQtNGFmODhmNmZkYjlhIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BCjxkczpUcmFuc2Zvcm1zIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIvPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPGVjOkluY2x1c2l2ZU5hbWVzcGFjZXMgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgUHJlZml4TGlzdD0ieHMiLz48L2RzOlRyYW5zZm9ybT4KPC9kczpUcmFuc2Zvcm1zPgo8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIi8%2BCjxkczpEaWdlc3RWYWx1ZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BQ01GVVpXOFlweHhNblRjcWFOUUwxQmh4eS9RPTwvZHM6RGlnZXN0VmFsdWU%2BCjwvZHM6UmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8%2BCjxkczpTaWduYXR1cmVWYWx1ZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BCkozS3NTSkZKTkhLbEVNRXVkOGo2L05GbnVZN0pVeHpGUkNHQzZMSlR0bDFidVVtWGRmTXRHZkZCQkNMYlE4alFtL1o5QytLbG9NcFcKdGhlNXpUR29jWnl0YVdMb2pQTkUxQUlyQVZIdE9GNmZwbXkzNnBSTlkrcFRTODBPU211RDhRMGFOODRxckZoamora0k1a1ZwWlBrZwo3UVIyYzN2RTBxMW5WWXFOVWhRPQo8L2RzOlNpZ25hdHVyZVZhbHVlPgo8ZHM6S2V5SW5mbz48ZHM6WDUwOURhdGE%2BPGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlDRFRDQ0FYYWdBd0lCQWdJRVRKajlMakFOQmdrcWhraUc5dzBCQVFVRkFEQkxNUXN3Q1FZRFZRUUdFd0pWVXpFYk1Ca0dBMVVFCkNoTVNVM1ZqWTJWemMyWmhZM1J2Y25NdVkyOXRNUXd3Q2dZRFZRUUxFd05QY0hNeEVUQVBCZ05WQkFNVENGTkdJRUZrYldsdU1CNFgKRFRFd01Ea3lNVEU0TkRVd01sb1hEVEkxTURreE9URTRORFV3TWxvd1N6RUxNQWtHQTFVRUJoTUNWVk14R3pBWkJnTlZCQW9URWxOMQpZMk5sYzNObVlXTjBiM0p6TG1OdmJURU1NQW9HQTFVRUN4TURUM0J6TVJFd0R3WURWUVFERXdoVFJpQkJaRzFwYmpDQm56QU5CZ2txCmhraUc5dzBCQVFFRkFBT0JqUUF3Z1lrQ2dZRUFyQTlSTE5uTDlQdDZ4eW5GZllmYThWWEFYRkRHOVk4eGtnczNsaElPbHNqcUVZd2IKU29naGlxSklKdmZZTTQ1a3gzYUI3WnJOOTZ0QVI1dVV1cEVzdS9HY1M2QUN4aGZydVcrQlk2dXc4djYvdzJ2WGhCZGZGakJvTytLZQpMeDRrM2xsbGVWZ0tzbU5sZjgxb2tPWHYxcmVlOHdFcmZaM3Nzbk54a3VRZ0dCMENBd0VBQVRBTkJna3Foa2lHOXcwQkFRVUZBQU9CCmdRQmVCQ1NNRm5ZOFRCNmp0V29TUC9sb3JCdWRocHRndk83LzNyK2wvUUswaGRrNkNWditWUW1TaWxOUGdXVmdVOWt0WkdiTmtaaHcKSWd3bnFJUUhBaTY2MzF1ZmtZUUpCKzQ4WVVlMXEvcHY2RVdhZUl3R3ZjR1lTWFpwL0UvYUdaUHRjZVRJWEZQZnFPeUhRb0Z0YjBucQpNTUZXb0RocFhVSG1scm95VGM5c0pnPT08L2RzOlg1MDlDZXJ0aWZpY2F0ZT48L2RzOlg1MDlEYXRhPjwvZHM6S2V5SW5mbz48L2RzOlNpZ25hdHVyZT48c2FtbDI6U3ViamVjdD48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPlRlc3RBdXRvbWF0aW9uPC9zYW1sMjpOYW1lSUQ%2BPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJfNGExOGIwMGEtYjZmYS00YzNlLWFmZjAtYzk5ZmRkNWNhZTg1IiBOb3RPbk9yQWZ0ZXI9IjIwMjEtMDItMDFUMjA6MzA6NTQuOTk3WiIgUmVjaXBpZW50PSJodHRwczovL2FuYWx5dGljczQuc3VjY2Vzc2ZhY3RvcnMuY29tL1Byb2R1Y3Rpb24vTG9naW4uYXNweCIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q%2BPHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDIxLTAyLTAxVDIwOjEwOjU0Ljk5N1oiIE5vdE9uT3JBZnRlcj0iMjAyMS0wMi0wMVQyMDozMDo1NC45OTdaIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U%2BaHR0cDovL2ludC1hbmFseXRpY3M0LnN1Y2Nlc3NmYWN0b3JzLmNvbS9Qcm9kdWN0aW9uL0xvZ2luLmFzcHg%2FdHM9MTYxMjIxMDg1MzgyMzwvc2FtbDI6QXVkaWVuY2U%2BPC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjwvc2FtbDI6Q29uZGl0aW9ucz48c2FtbDI6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDIxLTAyLTAxVDIwOjIwOjU0Ljk5N1oiIFNlc3Npb25JbmRleD0idjM0bFV6aFkzY1dlazJxeDhPWmtHVWsrL1hvZ0RVY0VnK1AwTFk0V3k2N0QrbC9jTHowTkZ6ZHI1bExaQkptME1HN012TnIrMS9SOE9xUlpGa1dmT3c9PSI%2BPHNhbWwyOkF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BdXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmRQcm90ZWN0ZWRUcmFuc3BvcnQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDI6QXV0aG5Db250ZXh0Pjwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ%2BPHNhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImNvbXBhbnlpZCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciPlRlY2s8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0ibG9jYWxlIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BZW5fVVM8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0iY29tcGFueXV1aWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIj5hYjNhNzgzZV83MDZlXzQwZGRfYTg3YV9hODI4M2NhYmY0MmI8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0ibG9nZ2VkaW51c2VyaWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIj5UZXN0QXV0b21hdGlvbjwvc2FtbDI6QXR0cmlidXRlVmFsdWU%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJsb2dnZWRpbnBlcnNvbmd1aWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIi8%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJlbmFibGVnYWNlIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BZmFsc2U8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0icGVyc29uZ3VpZCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9InRlbmFudHVybCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9InNlY29uZGFyeUxvZ2luUHJvdmlzaW9uZXJJZCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9InNlY29uZGFyeUxvZ2luUHJvdmlzaW9uZXJFbWFpbCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImV4dF91c2VyaWRfc2YiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIj5UZXN0QXV0b21hdGlvbjwvc2FtbDI6QXR0cmlidXRlVmFsdWU%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJ6b25lc2Vzc2lvbmlkIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BY2QzN2E5ZjAtNjc2OC00ZTc4LWE3NjItYjkxMWQ1NjcxMGIzPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwyOkFzc2VydGlvbj48L3NhbWwycDpSZXNwb25zZT4%3D
				"&RelayState=" + C_RelayState1 +		// recorded value = 2312E111F35E524385B589C5BFC59255
				"&TARGET=" + C_RelayState1 +		// recorded value = 2312E111F35E524385B589C5BFC59255
				"&bizxHomeURL=https%3A%2F%2Fperformancemanager4.successfactors.com%2Fsf%2Fhome";
		byte[][] searchPattern0285_0 = new byte[1][];
		searchPattern0285_0[0] = Base64Decoder.decodeToBytes("");
		byte[] binarySearchPattern0285_0   = Lib.mergeByteArrays(searchPattern0285_0);		// note: the search pattern value is base 64 encoded. decoded value = PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9hbmFseXRpY3M0LnN1Y2Nlc3NmYWN0b3JzLmNvbS9Qcm9kdWN0aW9uL0xvZ2luLmFzcHgiIElEPSJfODJkOWQwMjItODZiYy00MDk2LThlMTYtYmJhNTNmZmQ3N2M4IiBJblJlc3BvbnNlVG89Il80YTE4YjAwYS1iNmZhLTRjM2UtYWZmMC1jOTlmZGQ1Y2FlODUiIElzc3VlSW5zdGFudD0iMjAyMS0wMi0wMVQyMDoyMDo1NC45OThaIiBWZXJzaW9uPSIyLjAiPjxzYW1sMjpJc3N1ZXIgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2YvaWRwL1NBTUwyL2NvbXBhbnkvVGVjazwvc2FtbDI6SXNzdWVyPjxzYW1sMnA6U3RhdHVzPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8%2BPC9zYW1sMnA6U3RhdHVzPjxzYW1sMjpBc3NlcnRpb24geG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIElEPSJTRl9TQU1MMi4wX2Y5MzRlM2IzLWMyOWQtNGFkMC05M2M0LTRhZjg4ZjZmZGI5YSIgSXNzdWVJbnN0YW50PSIyMDIxLTAyLTAxVDIwOjIwOjU0Ljk5N1oiIFZlcnNpb249IjIuMCIgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIj48c2FtbDI6SXNzdWVyPmh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2YvaWRwL1NBTUwyL2NvbXBhbnkvVGVjazwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbyB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BCjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIvPgo8ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIvPgo8ZHM6UmVmZXJlbmNlIFVSST0iI1NGX1NBTUwyLjBfZjkzNGUzYjMtYzI5ZC00YWQwLTkzYzQtNGFmODhmNmZkYjlhIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BCjxkczpUcmFuc2Zvcm1zIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIvPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPGVjOkluY2x1c2l2ZU5hbWVzcGFjZXMgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgUHJlZml4TGlzdD0ieHMiLz48L2RzOlRyYW5zZm9ybT4KPC9kczpUcmFuc2Zvcm1zPgo8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIi8%2BCjxkczpEaWdlc3RWYWx1ZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BQ01GVVpXOFlweHhNblRjcWFOUUwxQmh4eS9RPTwvZHM6RGlnZXN0VmFsdWU%2BCjwvZHM6UmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8%2BCjxkczpTaWduYXR1cmVWYWx1ZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BCkozS3NTSkZKTkhLbEVNRXVkOGo2L05GbnVZN0pVeHpGUkNHQzZMSlR0bDFidVVtWGRmTXRHZkZCQkNMYlE4alFtL1o5QytLbG9NcFcKdGhlNXpUR29jWnl0YVdMb2pQTkUxQUlyQVZIdE9GNmZwbXkzNnBSTlkrcFRTODBPU211RDhRMGFOODRxckZoamora0k1a1ZwWlBrZwo3UVIyYzN2RTBxMW5WWXFOVWhRPQo8L2RzOlNpZ25hdHVyZVZhbHVlPgo8ZHM6S2V5SW5mbz48ZHM6WDUwOURhdGE%2BPGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlDRFRDQ0FYYWdBd0lCQWdJRVRKajlMakFOQmdrcWhraUc5dzBCQVFVRkFEQkxNUXN3Q1FZRFZRUUdFd0pWVXpFYk1Ca0dBMVVFCkNoTVNVM1ZqWTJWemMyWmhZM1J2Y25NdVkyOXRNUXd3Q2dZRFZRUUxFd05QY0hNeEVUQVBCZ05WQkFNVENGTkdJRUZrYldsdU1CNFgKRFRFd01Ea3lNVEU0TkRVd01sb1hEVEkxTURreE9URTRORFV3TWxvd1N6RUxNQWtHQTFVRUJoTUNWVk14R3pBWkJnTlZCQW9URWxOMQpZMk5sYzNObVlXTjBiM0p6TG1OdmJURU1NQW9HQTFVRUN4TURUM0J6TVJFd0R3WURWUVFERXdoVFJpQkJaRzFwYmpDQm56QU5CZ2txCmhraUc5dzBCQVFFRkFBT0JqUUF3Z1lrQ2dZRUFyQTlSTE5uTDlQdDZ4eW5GZllmYThWWEFYRkRHOVk4eGtnczNsaElPbHNqcUVZd2IKU29naGlxSklKdmZZTTQ1a3gzYUI3WnJOOTZ0QVI1dVV1cEVzdS9HY1M2QUN4aGZydVcrQlk2dXc4djYvdzJ2WGhCZGZGakJvTytLZQpMeDRrM2xsbGVWZ0tzbU5sZjgxb2tPWHYxcmVlOHdFcmZaM3Nzbk54a3VRZ0dCMENBd0VBQVRBTkJna3Foa2lHOXcwQkFRVUZBQU9CCmdRQmVCQ1NNRm5ZOFRCNmp0V29TUC9sb3JCdWRocHRndk83LzNyK2wvUUswaGRrNkNWditWUW1TaWxOUGdXVmdVOWt0WkdiTmtaaHcKSWd3bnFJUUhBaTY2MzF1ZmtZUUpCKzQ4WVVlMXEvcHY2RVdhZUl3R3ZjR1lTWFpwL0UvYUdaUHRjZVRJWEZQZnFPeUhRb0Z0YjBucQpNTUZXb0RocFhVSG1scm95VGM5c0pnPT08L2RzOlg1MDlDZXJ0aWZpY2F0ZT48L2RzOlg1MDlEYXRhPjwvZHM6S2V5SW5mbz48L2RzOlNpZ25hdHVyZT48c2FtbDI6U3ViamVjdD48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPlRlc3RBdXRvbWF0aW9uPC9zYW1sMjpOYW1lSUQ%2BPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJfNGExOGIwMGEtYjZmYS00YzNlLWFmZjAtYzk5ZmRkNWNhZTg1IiBOb3RPbk9yQWZ0ZXI9IjIwMjEtMDItMDFUMjA6MzA6NTQuOTk3WiIgUmVjaXBpZW50PSJodHRwczovL2FuYWx5dGljczQuc3VjY2Vzc2ZhY3RvcnMuY29tL1Byb2R1Y3Rpb24vTG9naW4uYXNweCIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q%2BPHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDIxLTAyLTAxVDIwOjEwOjU0Ljk5N1oiIE5vdE9uT3JBZnRlcj0iMjAyMS0wMi0wMVQyMDozMDo1NC45OTdaIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U%2BaHR0cDovL2ludC1hbmFseXRpY3M0LnN1Y2Nlc3NmYWN0b3JzLmNvbS9Qcm9kdWN0aW9uL0xvZ2luLmFzcHg%2FdHM9MTYxMjIxMDg1MzgyMzwvc2FtbDI6QXVkaWVuY2U%2BPC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjwvc2FtbDI6Q29uZGl0aW9ucz48c2FtbDI6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDIxLTAyLTAxVDIwOjIwOjU0Ljk5N1oiIFNlc3Npb25JbmRleD0idjM0bFV6aFkzY1dlazJxeDhPWmtHVWsrL1hvZ0RVY0VnK1AwTFk0V3k2N0QrbC9jTHowTkZ6ZHI1bExaQkptME1HN012TnIrMS9SOE9xUlpGa1dmT3c9PSI%2BPHNhbWwyOkF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BdXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmRQcm90ZWN0ZWRUcmFuc3BvcnQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDI6QXV0aG5Db250ZXh0Pjwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ%2BPHNhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImNvbXBhbnlpZCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciPlRlY2s8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0ibG9jYWxlIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BZW5fVVM8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0iY29tcGFueXV1aWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIj5hYjNhNzgzZV83MDZlXzQwZGRfYTg3YV9hODI4M2NhYmY0MmI8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0ibG9nZ2VkaW51c2VyaWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIj5UZXN0QXV0b21hdGlvbjwvc2FtbDI6QXR0cmlidXRlVmFsdWU%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJsb2dnZWRpbnBlcnNvbmd1aWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIi8%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJlbmFibGVnYWNlIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BZmFsc2U8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0icGVyc29uZ3VpZCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9InRlbmFudHVybCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9InNlY29uZGFyeUxvZ2luUHJvdmlzaW9uZXJJZCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9InNlY29uZGFyeUxvZ2luUHJvdmlzaW9uZXJFbWFpbCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciLz48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImV4dF91c2VyaWRfc2YiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIj5UZXN0QXV0b21hdGlvbjwvc2FtbDI6QXR0cmlidXRlVmFsdWU%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJ6b25lc2Vzc2lvbmlkIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyI%2BY2QzN2E5ZjAtNjc2OC00ZTc4LWE3NjItYjkxMWQ1NjcxMGIzPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwyOkFzc2VydGlvbj48L3NhbWwycDpSZXNwb25zZT4%3D
		requestContent0285 = new String(Lib.binaryReplace(requestContent0285.getBytes(), binarySearchPattern0285_0, java.net.URLEncoder.encode(C_SAMLResponseContent).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0285 = Lib.replaceTextPattern(requestContent0285, "2312E111F35E524385B589C5BFC59255", C_RelayState1, 0);		// search and replace content fragment "2312E111F35E524385B589C5BFC59255" with variable 'C_RelayState1' on all occurrences

		String requestHeader0285 = "POST " + requestFile0285 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0285.length() + "\r\n" + 		// Content-Length: 8056
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0285, requestHost0285, requestPort0285, requestHeader0285, requestContent0285.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0285 = null;		// support garbage collector to reduce memory
		requestContent0285 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 271
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [285] <- Index 285
		if(replayMode)
		{
			long proxyDataRecordId =1612210855247L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [286] <- WEB ADMIN Index 287 ---
		log();
		log("# title: i3 Start Page");
		String requestProt0286 = "https";
		String requestHost0286 = "analytics4.successfactors.com";
		int    requestPort0286 = 443;
		String requestFile0286 = "/Production/default.aspx" +
				"?landingPage=%7B%25PBRUNTIME(cbdd22b1-9103-4101-a99a-80b889f1ceea,%201,%20ReportCenter)%25%7D";
		requestFile0286 = Lib.replaceTextPattern(requestFile0286, "cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report, 0);		// search and replace request file fragment "cbdd22b1-9103-4101-a99a-80b889f1ceea" with variable 'C_Report' on all occurrences

		String requestHeader0286 = "GET " + requestFile0286 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0286, requestHost0286, requestPort0286, requestHeader0286, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0286 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 6752
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Start Page");		// Test [286] <- Index 286
		if(replayMode)
		{
			long proxyDataRecordId =1612210855796L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_EventVal1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0286_1 = new BoundaryBasedExtractorItem( "id=\"__EVENTVALIDATION\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0286_1);

		// setup var extractor for 'C_VSGEN1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0286_2 = new BoundaryBasedExtractorItem( "id=\"__VIEWSTATEGENERATOR\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0286_2);

		// setup var extractor for 'C_ViewState1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0286_3 = new BoundaryBasedExtractorItem( "id=\"__VIEWSTATE\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0286_3);

		// setup var extractor for 'C_JSVersion3'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0286_4 = new BoundaryBasedExtractorItem( ";version=" , "\">",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0286_4);

		// setup var extractor for 'C_RPCSecret3'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0286_5 = new BoundaryBasedExtractorItem( "rpcSecret='" , "';",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0286_5);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_EventVal1'
			C_EventVal1 = boundaryBasedContentExtractorItem0286_1.getResultText();
			log("<<< C_EventVal1 = " + C_EventVal1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_EventVal1!= null && C_EventVal1.trim().length() == 0)
			{
				C_EventVal1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_EventVal1' ends up with an empty string - a substitute value was set");
				log("<<< C_EventVal1 = " + C_EventVal1);
			}
		}
		catch (Exception e) { C_EventVal1 = null; log(e); }
		if (C_EventVal1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_EventVal1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_VSGEN1'
			C_VSGEN1 = boundaryBasedContentExtractorItem0286_2.getResultText();
			log("<<< C_VSGEN1 = " + C_VSGEN1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_VSGEN1!= null && C_VSGEN1.trim().length() == 0)
			{
				C_VSGEN1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_VSGEN1' ends up with an empty string - a substitute value was set");
				log("<<< C_VSGEN1 = " + C_VSGEN1);
			}
		}
		catch (Exception e) { C_VSGEN1 = null; log(e); }
		if (C_VSGEN1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_VSGEN1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_ViewState1'
			C_ViewState1 = boundaryBasedContentExtractorItem0286_3.getResultText();
			log("<<< C_ViewState1 = " + C_ViewState1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_ViewState1!= null && C_ViewState1.trim().length() == 0)
			{
				C_ViewState1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_ViewState1' ends up with an empty string - a substitute value was set");
				log("<<< C_ViewState1 = " + C_ViewState1);
			}
		}
		catch (Exception e) { C_ViewState1 = null; log(e); }
		if (C_ViewState1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_ViewState1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_JSVersion3'
			C_JSVersion3 = boundaryBasedContentExtractorItem0286_4.getResultText();
			log("<<< C_JSVersion3 = " + C_JSVersion3);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_JSVersion3!= null && C_JSVersion3.trim().length() == 0)
			{
				C_JSVersion3 = "";
				log("runtime note: the extraction of a new value for the variable 'C_JSVersion3' ends up with an empty string - a substitute value was set");
				log("<<< C_JSVersion3 = " + C_JSVersion3);
			}
		}
		catch (Exception e) { C_JSVersion3 = null; log(e); }
		if (C_JSVersion3 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_JSVersion3' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_RPCSecret3'
			C_RPCSecret3 = boundaryBasedContentExtractorItem0286_5.getResultText();
			log("<<< C_RPCSecret3 = " + C_RPCSecret3);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_RPCSecret3!= null && C_RPCSecret3.trim().length() == 0)
			{
				C_RPCSecret3 = "";
				log("runtime note: the extraction of a new value for the variable 'C_RPCSecret3' ends up with an empty string - a substitute value was set");
				log("<<< C_RPCSecret3 = " + C_RPCSecret3);
			}
		}
		catch (Exception e) { C_RPCSecret3 = null; log(e); }
		if (C_RPCSecret3 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_RPCSecret3' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [287] <- WEB ADMIN Index 288 ---
		String requestProt0287 = "https";
		String requestHost0287 = "analytics4.successfactors.com";
		int    requestPort0287 = 443;
		String requestFile0287 = "/Production/Resources/DojoToolkit/dijit/themes/dijit.css";
		String requestHeader0287 = "GET " + requestFile0287 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0287, requestHost0287, requestPort0287, requestHeader0287, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0287 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 31904
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [287] <- Index 287
		if(replayMode)
		{
			long proxyDataRecordId =1612210856558L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [288] <- WEB ADMIN Index 290 ---
		String requestProt0288 = "https";
		String requestHost0288 = "analytics4.successfactors.com";
		int    requestPort0288 = 443;
		String requestFile0288 = "/Production/GetDojoFile.aspx" +
				"?dojoFile=dijit.js" +
				"&version=" + C_JSVersion3;		// recorded value = 20210116
		requestFile0288 = Lib.replaceTextPattern(requestFile0288, "20210116", C_JSVersion3, 0);		// search and replace request file fragment "20210116" with variable 'C_JSVersion3' on all occurrences

		String requestHeader0288 = "GET " + requestFile0288 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0288, requestHost0288, requestPort0288, requestHeader0288, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0288 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 155927
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, "The SuccessFactors custom additions are limited to use in the SuccessFactors web applications.");		// Test [288] <- Index 288
		if(replayMode)
		{
			long proxyDataRecordId =1612210856857L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [289] <- WEB ADMIN Index 291 ---
		String requestProt0289 = "https";
		String requestHost0289 = "analytics4.successfactors.com";
		int    requestPort0289 = 443;
		String requestFile0289 = "/Production/Resources/DojoToolkit/infohrm/css/SAPUI.css";
		String requestHeader0289 = "GET " + requestFile0289 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0289, requestHost0289, requestPort0289, requestHeader0289, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0289 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 49022
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [289] <- Index 289
		if(replayMode)
		{
			long proxyDataRecordId =1612210856900L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [290] <- WEB ADMIN Index 292 ---
		String requestProt0290 = "https";
		String requestHost0290 = "analytics4.successfactors.com";
		int    requestPort0290 = 443;
		String requestFile0290 = "/Production/Resources/DojoToolkit/infohrm/css/inform.css";
		String requestHeader0290 = "GET " + requestFile0290 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0290, requestHost0290, requestPort0290, requestHeader0290, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0290 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 33335
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [290] <- Index 290
		if(replayMode)
		{
			long proxyDataRecordId =1612210856905L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [291] <- WEB ADMIN Index 293 ---
		String requestProt0291 = "https";
		String requestHost0291 = "analytics4.successfactors.com";
		int    requestPort0291 = 443;
		String requestFile0291 = "/Production/GetDojoFile.aspx" +
				"?dojoFile=dojo.js" +
				"&version=" + C_JSVersion3;		// recorded value = 20210116
		requestFile0291 = Lib.replaceTextPattern(requestFile0291, "20210116", C_JSVersion3, 0);		// search and replace request file fragment "20210116" with variable 'C_JSVersion3' on all occurrences

		String requestHeader0291 = "GET " + requestFile0291 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0291, requestHost0291, requestPort0291, requestHeader0291, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0291 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 146624
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [291] <- Index 291
		if(replayMode)
		{
			long proxyDataRecordId =1612210856909L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [292] <- WEB ADMIN Index 294 ---
		String requestProt0292 = "https";
		String requestHost0292 = "analytics4.successfactors.com";
		int    requestPort0292 = 443;
		String requestFile0292 = "/Production/Resources/Stylesheets/ruiNamed.css";
		String requestHeader0292 = "GET " + requestFile0292 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0292, requestHost0292, requestPort0292, requestHeader0292, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0292 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 3995
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [292] <- Index 292
		if(replayMode)
		{
			long proxyDataRecordId =1612210856914L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [293] <- WEB ADMIN Index 295 ---
		String requestProt0293 = "https";
		String requestHost0293 = "analytics4.successfactors.com";
		int    requestPort0293 = 443;
		String requestFile0293 = "/Production/Resources/DojoToolkit/infohrm/css/ruiBase.css";
		String requestHeader0293 = "GET " + requestFile0293 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0293, requestHost0293, requestPort0293, requestHeader0293, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0293 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1371
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [293] <- Index 293
		if(replayMode)
		{
			long proxyDataRecordId =1612210856918L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [294] <- WEB ADMIN Index 296 ---
		String requestProt0294 = "https";
		String requestHost0294 = "analytics4.successfactors.com";
		int    requestPort0294 = 443;
		String requestFile0294 = "/Production/GetDojoFile.aspx" +
				"?dojoFile=infohrm.js" +
				"&version=" + C_JSVersion3;		// recorded value = 20210116
		requestFile0294 = Lib.replaceTextPattern(requestFile0294, "20210116", C_JSVersion3, 0);		// search and replace request file fragment "20210116" with variable 'C_JSVersion3' on all occurrences

		String requestHeader0294 = "GET " + requestFile0294 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0294, requestHost0294, requestPort0294, requestHeader0294, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0294 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 492497
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [294] <- Index 294
		if(replayMode)
		{
			long proxyDataRecordId =1612210856990L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [295] <- WEB ADMIN Index 297 ---
		String requestProt0295 = "https";
		String requestHost0295 = "analytics4.successfactors.com";
		int    requestPort0295 = 443;
		String requestFile0295 = "/Production/Resources/DojoToolkit/dijit/main.js";
		String requestHeader0295 = "GET " + requestFile0295 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0295, requestHost0295, requestPort0295, requestHeader0295, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0295 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 392
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [295] <- Index 295
		if(replayMode)
		{
			long proxyDataRecordId =1612210857579L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [296] <- WEB ADMIN Index 298 ---
		String requestProt0296 = "https";
		String requestHost0296 = "analytics4.successfactors.com";
		int    requestPort0296 = 443;
		String requestFile0296 = "/Production/Resources/DojoToolkit/dijit/nls/dijit_ROOT.js";
		String requestHeader0296 = "GET " + requestFile0296 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0296, requestHost0296, requestPort0296, requestHeader0296, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0296 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1046
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [296] <- Index 296
		if(replayMode)
		{
			long proxyDataRecordId =1612210857651L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [297] <- WEB ADMIN Index 299 ---
		String requestProt0297 = "https";
		String requestHost0297 = "analytics4.successfactors.com";
		int    requestPort0297 = 443;
		String requestFile0297 = "/Production/Resources/DojoToolkit/dojo/require.js";
		String requestHeader0297 = "GET " + requestFile0297 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0297, requestHost0297, requestPort0297, requestHeader0297, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0297 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 494
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [297] <- Index 297
		if(replayMode)
		{
			long proxyDataRecordId =1612210858017L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #7_1 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7_2.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #7 (fragment 3 of 7)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [298] <- WEB ADMIN Index 300 ---
		String requestProt0298 = "https";
		String requestHost0298 = "analytics4.successfactors.com";
		int    requestPort0298 = 443;
		String requestFile0298 = "/Production/Resources/DojoToolkit/infohrm/nls/infohrm_ROOT.js";
		String requestHeader0298 = "GET " + requestFile0298 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0298, requestHost0298, requestPort0298, requestHeader0298, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0298 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4061
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [298] <- Index 298
		if(replayMode)
		{
			long proxyDataRecordId =1612210858091L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [299] <- WEB ADMIN Index 301 ---
		String requestProt0299 = "https";
		String requestHost0299 = "analytics4.successfactors.com";
		int    requestPort0299 = 443;
		String requestFile0299 = "/Production/Resources/DojoToolkit/dojo/cldr/nls/en-ca/gregorian.js";
		String requestHeader0299 = "GET " + requestFile0299 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0299, requestHost0299, requestPort0299, requestHeader0299, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0299 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 539
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [299] <- Index 299
		if(replayMode)
		{
			long proxyDataRecordId =1612210858159L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [300] <- WEB ADMIN Index 302 ---
		String requestProt0300 = "https";
		String requestHost0300 = "analytics4.successfactors.com";
		int    requestPort0300 = 443;
		String requestFile0300 = "/Production/Resources/DojoToolkit/dojo/cldr/nls/en/gregorian.js";
		String requestHeader0300 = "GET " + requestFile0300 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0300, requestHost0300, requestPort0300, requestHeader0300, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0300 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3966
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [300] <- Index 300
		if(replayMode)
		{
			long proxyDataRecordId =1612210858251L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [301] <- WEB ADMIN Index 303 ---
		String requestProt0301 = "https";
		String requestHost0301 = "analytics4.successfactors.com";
		int    requestPort0301 = 443;
		String requestFile0301 = "/Production/RPC/SfUserInfo.aspx" +
				"?action=setEnvInfo" +
				"&rpcSecret=" + C_RPCSecret3 +		// recorded value = 727561EB9232744C422BF1EBE1EF781DCB556BC82741E900963E7A5203C07644000C91E9635AB303B3122F00FA7A353E
				"&reqId=1612210858381";
		requestFile0301 = Lib.replaceTextPattern(requestFile0301, "727561EB9232744C422BF1EBE1EF781DCB556BC82741E900963E7A5203C07644000C91E9635AB303B3122F00FA7A353E", C_RPCSecret3, 0);		// search and replace request file fragment "727561EB9232744C422BF1EBE1EF781DCB556BC82741E900963E7A5203C07644000C91E9635AB303B3122F00FA7A353E" with variable 'C_RPCSecret3' on all occurrences

		String requestContent0301 = 
				"data=%257B%2522isInIframe%2522%253A%2522Y%2522%252C%2522utcOffset%2522%253A480%252C%2522screenSize%2522%253A%25221920x1080%2522%257D" +
				"&dojo.preventCache=1612210858381";
		String requestHeader0301 = "POST " + requestFile0301 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0301.length() + "\r\n" + 		// Content-Length: 164
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0301, requestHost0301, requestPort0301, requestHeader0301, requestContent0301.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0301 = null;		// support garbage collector to reduce memory
		requestContent0301 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 69
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [301] <- Index 301
		if(replayMode)
		{
			long proxyDataRecordId =1612210858395L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [302] <- WEB ADMIN Index 304 ---
		log();
		log("# title: Object moved");
		String requestProt0302 = "https";
		String requestHost0302 = "analytics4.successfactors.com";
		int    requestPort0302 = 443;
		String requestFile0302 = "/Production/default.aspx" +
				"?landingPage=%7b%25PBRUNTIME(cbdd22b1-9103-4101-a99a-80b889f1ceea%2c+1%2c+ReportCenter)%25%7d";
		requestFile0302 = Lib.replaceTextPattern(requestFile0302, "cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report, 0);		// search and replace request file fragment "cbdd22b1-9103-4101-a99a-80b889f1ceea" with variable 'C_Report' on all occurrences

		String requestContent0302 = 
				"__VIEWSTATE=" + java.net.URLEncoder.encode(C_ViewState1) +		// recorded value = 6ym6NDhanJt2wo2TwQcLPjyQHPM9i1sVTBmE8Rg6DGfANXFh8CLzc%2FN56sfiH76y%2Fxazl8MzLyybghqovDImxjLIgZOOUtIhQtgFsIjNavc4JwE%2F6pujtBTPmDQlcApg5EahPw%3D%3D
				"&__VIEWSTATEGENERATOR=" + C_VSGEN1 +		// recorded value = 2485EDD4
				"&__EVENTVALIDATION=" + java.net.URLEncoder.encode(C_EventVal1);		// recorded value = e%2B3t6%2FgQhi2pxzQ1b8gm%2B64XD7%2FiaHQBTrGiyuQ9%2FmZId%2FupZdlnj4HAX34obKOd0PwAtNKEqVsXDekrHUZPxaTGKdlQW4SyoY6vLc0fZZ4UOz9m
		byte[][] searchPattern0302_0 = new byte[1][];
		searchPattern0302_0[0] = Base64Decoder.decodeToBytes("ZSUyQjN0NiUyRmdRaGkycHh6UTFiOGdtJTJCNjRYRDclMkZpYUhRQlRyR2l5dVE5JTJGbVpJZCUyRnVwWmRsbmo0SEFYMzRvYktPZDBQd0F0TktFcVZzWERla3JIVVpQeGFUR0tkbFFXNFN5b1k2dkxjMGZaWjRVT3o5bQ==");
		byte[] binarySearchPattern0302_0   = Lib.mergeByteArrays(searchPattern0302_0);		// note: the search pattern value is base 64 encoded. decoded value = e%2B3t6%2FgQhi2pxzQ1b8gm%2B64XD7%2FiaHQBTrGiyuQ9%2FmZId%2FupZdlnj4HAX34obKOd0PwAtNKEqVsXDekrHUZPxaTGKdlQW4SyoY6vLc0fZZ4UOz9m
		requestContent0302 = new String(Lib.binaryReplace(requestContent0302.getBytes(), binarySearchPattern0302_0, java.net.URLEncoder.encode(C_EventVal1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0302_1 = new byte[1][];
		searchPattern0302_1[0] = Base64Decoder.decodeToBytes("NnltNk5EaGFuSnQyd28yVHdRY0xQanlRSFBNOWkxc1ZUQm1FOFJnNkRHZkFOWEZoOENMemMlMkZONTZzZmlINzZ5JTJGeGF6bDhNekx5eWJnaHFvdkRJbXhqTElnWk9PVXRJaFF0Z0ZzSWpOYXZjNEp3RSUyRjZwdWp0QlRQbURRbGNBcGc1RWFoUHclM0QlM0Q=");
		byte[] binarySearchPattern0302_1   = Lib.mergeByteArrays(searchPattern0302_1);		// note: the search pattern value is base 64 encoded. decoded value = 6ym6NDhanJt2wo2TwQcLPjyQHPM9i1sVTBmE8Rg6DGfANXFh8CLzc%2FN56sfiH76y%2Fxazl8MzLyybghqovDImxjLIgZOOUtIhQtgFsIjNavc4JwE%2F6pujtBTPmDQlcApg5EahPw%3D%3D
		requestContent0302 = new String(Lib.binaryReplace(requestContent0302.getBytes(), binarySearchPattern0302_1, java.net.URLEncoder.encode(C_ViewState1).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0302 = Lib.replaceTextPattern(requestContent0302, "2485EDD4", C_VSGEN1, 0);		// search and replace content fragment "2485EDD4" with variable 'C_VSGEN1' on all occurrences

		String requestHeader0302 = "POST " + requestFile0302 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0302.length() + "\r\n" + 		// Content-Length: 331
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0302, requestHost0302, requestPort0302, requestHeader0302, requestContent0302.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0302 = null;		// support garbage collector to reduce memory
		requestContent0302 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 255
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [302] <- Index 302
		if(replayMode)
		{
			long proxyDataRecordId =1612210858407L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [303] <- WEB ADMIN Index 305 ---
		log();
		log("# title: Employee Login Details");
		String requestProt0303 = "https";
		String requestHost0303 = "analytics4.successfactors.com";
		int    requestPort0303 = 443;
		String requestFile0303 = "/Production/PageBuilder/Runtime/SfWfaRuntime.aspx" +
				"?bookId=" + C_Report +		// recorded value = cbdd22b1-9103-4101-a99a-80b889f1ceea
				"&pageNumber=1" +
				"&bizXSource=ReportCenter";
		requestFile0303 = Lib.replaceTextPattern(requestFile0303, "cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report, 0);		// search and replace request file fragment "cbdd22b1-9103-4101-a99a-80b889f1ceea" with variable 'C_Report' on all occurrences

		String requestHeader0303 = "GET " + requestFile0303 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0303, requestHost0303, requestPort0303, requestHeader0303, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0303 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 23703
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Employee Login Details");		// Test [303] <- Index 303
		if(replayMode)
		{
			long proxyDataRecordId =1612210858509L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_RPCSecret4'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0303_1 = new BoundaryBasedExtractorItem( ".rpcSecret='" , "';",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0303_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_RPCSecret4'
			C_RPCSecret4 = boundaryBasedContentExtractorItem0303_1.getResultText();
			log("<<< C_RPCSecret4 = " + C_RPCSecret4);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_RPCSecret4!= null && C_RPCSecret4.trim().length() == 0)
			{
				C_RPCSecret4 = "";
				log("runtime note: the extraction of a new value for the variable 'C_RPCSecret4' ends up with an empty string - a substitute value was set");
				log("<<< C_RPCSecret4 = " + C_RPCSecret4);
			}
		}
		catch (Exception e) { C_RPCSecret4 = null; log(e); }
		if (C_RPCSecret4 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_RPCSecret4' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [304] <- WEB ADMIN Index 306 ---
		String requestProt0304 = "https";
		String requestHost0304 = "analytics4.successfactors.com";
		int    requestPort0304 = 443;
		String requestFile0304 = "/Production/Resources/DojoToolkit/infohrm/scripts/SfWfaRuntime.js";
		String requestHeader0304 = "GET " + requestFile0304 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0304, requestHost0304, requestPort0304, requestHeader0304, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0304 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 23369
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [304] <- Index 304
		if(replayMode)
		{
			long proxyDataRecordId =1612210861947L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [305] <- WEB ADMIN Index 307 ---
		String requestProt0305 = "https";
		String requestHost0305 = "analytics4.successfactors.com";
		int    requestPort0305 = 443;
		String requestFile0305 = "/Production/Resources/QuickCard/js/jquery.js";
		String requestHeader0305 = "GET " + requestFile0305 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0305, requestHost0305, requestPort0305, requestHeader0305, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0305 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 89478
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [305] <- Index 305
		if(replayMode)
		{
			long proxyDataRecordId =1612210861955L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [306] <- WEB ADMIN Index 308 ---
		String requestProt0306 = "https";
		String requestHost0306 = "analytics4.successfactors.com";
		int    requestPort0306 = 443;
		String requestFile0306 = "/Production/Resources/Stylesheets/SfWfaRuntime.css";
		String requestHeader0306 = "GET " + requestFile0306 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0306, requestHost0306, requestPort0306, requestHeader0306, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0306 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2911
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [306] <- Index 306
		if(replayMode)
		{
			long proxyDataRecordId =1612210861960L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [307] <- WEB ADMIN Index 309 ---
		String requestProt0307 = "https";
		String requestHost0307 = "analytics4.successfactors.com";
		int    requestPort0307 = 443;
		String requestFile0307 = "/Production/Resources/QuickCard/css/external-quickcard.css";
		String requestHeader0307 = "GET " + requestFile0307 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0307, requestHost0307, requestPort0307, requestHeader0307, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0307 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1633
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [307] <- Index 307
		if(replayMode)
		{
			long proxyDataRecordId =1612210861964L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [308] <- WEB ADMIN Index 310 ---
		String requestProt0308 = "https";
		String requestHost0308 = "analytics4.successfactors.com";
		int    requestPort0308 = 443;
		String requestFile0308 = "/Production/Resources/QuickCard/css/sfOverlayMgr.css";
		String requestHeader0308 = "GET " + requestFile0308 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0308, requestHost0308, requestPort0308, requestHeader0308, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0308 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 1359
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [308] <- Index 308
		if(replayMode)
		{
			long proxyDataRecordId =1612210861965L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [309] <- WEB ADMIN Index 311 ---
		String requestProt0309 = "https";
		String requestHost0309 = "analytics4.successfactors.com";
		int    requestPort0309 = 443;
		String requestFile0309 = "/Production/Resources/Highcharts/js/highcharts.js";
		String requestHeader0309 = "GET " + requestFile0309 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0309, requestHost0309, requestPort0309, requestHeader0309, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0309 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 172111
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [309] <- Index 309
		if(replayMode)
		{
			long proxyDataRecordId =1612210861966L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [310] <- WEB ADMIN Index 313 ---
		String requestProt0310 = "https";
		String requestHost0310 = "analytics4.successfactors.com";
		int    requestPort0310 = 443;
		String requestFile0310 = "/Production/Resources/Highcharts/js/highcharts-more.js";
		String requestHeader0310 = "GET " + requestFile0310 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0310, requestHost0310, requestPort0310, requestHeader0310, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0310 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 25175
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [310] <- Index 310
		if(replayMode)
		{
			long proxyDataRecordId =1612210862034L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [311] <- WEB ADMIN Index 314 ---
		String requestProt0311 = "https";
		String requestHost0311 = "analytics4.successfactors.com";
		int    requestPort0311 = 443;
		String requestFile0311 = "/Production/Resources/Highcharts/js/exporting.js";
		String requestHeader0311 = "GET " + requestFile0311 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0311, requestHost0311, requestPort0311, requestHeader0311, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0311 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8717
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [311] <- Index 311
		if(replayMode)
		{
			long proxyDataRecordId =1612210862037L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [312] <- WEB ADMIN Index 315 ---
		String requestProt0312 = "https";
		String requestHost0312 = "analytics4.successfactors.com";
		int    requestPort0312 = 443;
		String requestFile0312 = "/Production/Resources/QuickCard/js/juic/Util.js";
		String requestHeader0312 = "GET " + requestFile0312 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0312, requestHost0312, requestPort0312, requestHeader0312, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0312 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 62887
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [312] <- Index 312
		if(replayMode)
		{
			long proxyDataRecordId =1612210862070L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [313] <- WEB ADMIN Index 316 ---
		String requestProt0313 = "https";
		String requestHost0313 = "analytics4.successfactors.com";
		int    requestPort0313 = 443;
		String requestFile0313 = "/Production/Resources/QuickCard/js/juic/component.js";
		String requestHeader0313 = "GET " + requestFile0313 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0313, requestHost0313, requestPort0313, requestHeader0313, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0313 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 70374
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [313] <- Index 313
		if(replayMode)
		{
			long proxyDataRecordId =1612210862123L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [314] <- WEB ADMIN Index 317 ---
		String requestProt0314 = "https";
		String requestHost0314 = "analytics4.successfactors.com";
		int    requestPort0314 = 443;
		String requestFile0314 = "/Production/Resources/QuickCard/js/juic/componentLegacy.js";
		String requestHeader0314 = "GET " + requestFile0314 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0314, requestHost0314, requestPort0314, requestHeader0314, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0314 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3858
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [314] <- Index 314
		if(replayMode)
		{
			long proxyDataRecordId =1612210862209L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [315] <- WEB ADMIN Index 318 ---
		String requestProt0315 = "https";
		String requestHost0315 = "analytics4.successfactors.com";
		int    requestPort0315 = 443;
		String requestFile0315 = "/Production/Resources/QuickCard/js/juic/SFResizer.js";
		String requestHeader0315 = "GET " + requestFile0315 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0315, requestHost0315, requestPort0315, requestHeader0315, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0315 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4109
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [315] <- Index 315
		if(replayMode)
		{
			long proxyDataRecordId =1612210862279L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [316] <- WEB ADMIN Index 319 ---
		String requestProt0316 = "https";
		String requestHost0316 = "analytics4.successfactors.com";
		int    requestPort0316 = 443;
		String requestFile0316 = "/Production/Resources/QuickCard/js/juic/sfDOMEvent.js";
		String requestHeader0316 = "GET " + requestFile0316 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0316, requestHost0316, requestPort0316, requestHeader0316, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0316 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 31488
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [316] <- Index 316
		if(replayMode)
		{
			long proxyDataRecordId =1612210862280L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [317] <- WEB ADMIN Index 320 ---
		String requestProt0317 = "https";
		String requestHost0317 = "analytics4.successfactors.com";
		int    requestPort0317 = 443;
		String requestFile0317 = "/Production/Resources/QuickCard/js/juic/sfRegion.js";
		String requestHeader0317 = "GET " + requestFile0317 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0317, requestHost0317, requestPort0317, requestHeader0317, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0317 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2917
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [317] <- Index 317
		if(replayMode)
		{
			long proxyDataRecordId =1612210862282L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #7_2 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7_3.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #7 (fragment 4 of 7)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [318] <- WEB ADMIN Index 321 ---
		String requestProt0318 = "https";
		String requestHost0318 = "analytics4.successfactors.com";
		int    requestPort0318 = 443;
		String requestFile0318 = "/Production/Resources/QuickCard/js/juic/sfDom.js";
		String requestHeader0318 = "GET " + requestFile0318 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0318, requestHost0318, requestPort0318, requestHeader0318, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0318 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 88179
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [318] <- Index 318
		if(replayMode)
		{
			long proxyDataRecordId =1612210862283L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [319] <- WEB ADMIN Index 322 ---
		String requestProt0319 = "https";
		String requestHost0319 = "analytics4.successfactors.com";
		int    requestPort0319 = 443;
		String requestFile0319 = "/Production/Resources/DojoToolkit/infohrm/widget/OdsReportRuntime.js";
		String requestHeader0319 = "GET " + requestFile0319 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0319, requestHost0319, requestPort0319, requestHeader0319, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0319 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6017
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [319] <- Index 319
		if(replayMode)
		{
			long proxyDataRecordId =1612210862299L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [320] <- WEB ADMIN Index 323 ---
		String requestProt0320 = "https";
		String requestHost0320 = "analytics4.successfactors.com";
		int    requestPort0320 = 443;
		String requestFile0320 = "/Production/Resources/QuickCard/js/juic/sfDefaultListModel.js";
		String requestHeader0320 = "GET " + requestFile0320 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0320, requestHost0320, requestPort0320, requestHeader0320, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0320 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 18061
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [320] <- Index 320
		if(replayMode)
		{
			long proxyDataRecordId =1612210862348L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [321] <- WEB ADMIN Index 324 ---
		String requestProt0321 = "https";
		String requestHost0321 = "analytics4.successfactors.com";
		int    requestPort0321 = 443;
		String requestFile0321 = "/Production/Resources/QuickCard/js/juic/sfContainer.js";
		String requestHeader0321 = "GET " + requestFile0321 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0321, requestHost0321, requestPort0321, requestHeader0321, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0321 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 19651
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [321] <- Index 321
		if(replayMode)
		{
			long proxyDataRecordId =1612210862404L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [322] <- WEB ADMIN Index 325 ---
		String requestProt0322 = "https";
		String requestHost0322 = "analytics4.successfactors.com";
		int    requestPort0322 = 443;
		String requestFile0322 = "/Production/Resources/QuickCard/js/juic/sfListContainer.js";
		String requestHeader0322 = "GET " + requestFile0322 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0322, requestHost0322, requestPort0322, requestHeader0322, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0322 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6447
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [322] <- Index 322
		if(replayMode)
		{
			long proxyDataRecordId =1612210862405L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [323] <- WEB ADMIN Index 326 ---
		String requestProt0323 = "https";
		String requestHost0323 = "analytics4.successfactors.com";
		int    requestPort0323 = 443;
		String requestFile0323 = "/Production/Resources/QuickCard/js/juic/sfOverlayMgr.js";
		String requestHeader0323 = "GET " + requestFile0323 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0323, requestHost0323, requestPort0323, requestHeader0323, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0323 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 34802
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [323] <- Index 323
		if(replayMode)
		{
			long proxyDataRecordId =1612210862453L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [324] <- WEB ADMIN Index 327 ---
		String requestProt0324 = "https";
		String requestHost0324 = "analytics4.successfactors.com";
		int    requestPort0324 = 443;
		String requestFile0324 = "/Production/Resources/QuickCard/js/external-quickcard.js";
		String requestHeader0324 = "GET " + requestFile0324 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0324, requestHost0324, requestPort0324, requestHeader0324, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0324 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 7227
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [324] <- Index 324
		if(replayMode)
		{
			long proxyDataRecordId =1612210862460L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [325] <- WEB ADMIN Index 328 ---
		String requestProt0325 = "https";
		String requestHost0325 = "analytics4.successfactors.com";
		int    requestPort0325 = 443;
		String requestFile0325 = "/Production/Resources/DojoToolkit/infohrm/widget/InteractiveToolbar.js";
		String requestHeader0325 = "GET " + requestFile0325 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0325, requestHost0325, requestPort0325, requestHeader0325, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0325 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 65029
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [325] <- Index 325
		if(replayMode)
		{
			long proxyDataRecordId =1612210862468L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [326] <- WEB ADMIN Index 329 ---
		String requestProt0326 = "https";
		String requestHost0326 = "analytics4.successfactors.com";
		int    requestPort0326 = 443;
		String requestFile0326 = "/Production/Resources/QuickCard/js/juic/sfPositionManager.js";
		String requestHeader0326 = "GET " + requestFile0326 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0326, requestHost0326, requestPort0326, requestHeader0326, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0326 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 17103
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [326] <- Index 326
		if(replayMode)
		{
			long proxyDataRecordId =1612210862470L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [327] <- WEB ADMIN Index 330 ---
		String requestProt0327 = "https";
		String requestHost0327 = "analytics4.successfactors.com";
		int    requestPort0327 = 443;
		String requestFile0327 = "/Production/Resources/DojoToolkit/infohrm/SfWidgetEnum.js";
		String requestHeader0327 = "GET " + requestFile0327 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0327, requestHost0327, requestPort0327, requestHeader0327, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0327 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 925
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [327] <- Index 327
		if(replayMode)
		{
			long proxyDataRecordId =1612210862676L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [328] <- WEB ADMIN Index 331 ---
		String requestProt0328 = "https";
		String requestHost0328 = "analytics4.successfactors.com";
		int    requestPort0328 = 443;
		String requestFile0328 = "/Production/Resources/DojoToolkit/infohrm/widget/FontSelector.js";
		String requestHeader0328 = "GET " + requestFile0328 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0328, requestHost0328, requestPort0328, requestHeader0328, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0328 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 7862
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [328] <- Index 328
		if(replayMode)
		{
			long proxyDataRecordId =1612210862797L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [329] <- WEB ADMIN Index 332 ---
		String requestProt0329 = "https";
		String requestHost0329 = "analytics4.successfactors.com";
		int    requestPort0329 = 443;
		String requestFile0329 = "/Production/Resources/DojoToolkit/infohrm/widget/PagingControl.js";
		String requestHeader0329 = "GET " + requestFile0329 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0329, requestHost0329, requestPort0329, requestHeader0329, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0329 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 7481
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [329] <- Index 329
		if(replayMode)
		{
			long proxyDataRecordId =1612210863010L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [330] <- WEB ADMIN Index 333 ---
		String requestProt0330 = "https";
		String requestHost0330 = "analytics4.successfactors.com";
		int    requestPort0330 = 443;
		String requestFile0330 = "/Production/Resources/DojoToolkit/infohrm/widget/MeasuresMenuSearch.js";
		String requestHeader0330 = "GET " + requestFile0330 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0330, requestHost0330, requestPort0330, requestHeader0330, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0330 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4768
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [330] <- Index 330
		if(replayMode)
		{
			long proxyDataRecordId =1612210863217L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [331] <- WEB ADMIN Index 334 ---
		String requestProt0331 = "https";
		String requestHost0331 = "analytics4.successfactors.com";
		int    requestPort0331 = 443;
		String requestFile0331 = "/Production/Resources/DojoToolkit/infohrm/widget/ReportCenterUniversalNotification.js";
		String requestHeader0331 = "GET " + requestFile0331 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0331, requestHost0331, requestPort0331, requestHeader0331, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0331 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3057
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [331] <- Index 331
		if(replayMode)
		{
			long proxyDataRecordId =1612210863295L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [332] <- WEB ADMIN Index 335 ---
		String requestProt0332 = "https";
		String requestHost0332 = "analytics4.successfactors.com";
		int    requestPort0332 = 443;
		String requestFile0332 = "/Production/Resources/Images/PbRt/dialani.gif";
		String requestHeader0332 = "GET " + requestFile0332 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0332, requestHost0332, requestPort0332, requestHeader0332, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0332 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 4232
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [332] <- Index 332
		if(replayMode)
		{
			long proxyDataRecordId =1612210863481L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [333] <- WEB ADMIN Index 336 ---
		String requestProt0333 = "https";
		String requestHost0333 = "analytics4.successfactors.com";
		int    requestPort0333 = 443;
		String requestFile0333 = "/Production/RPC/SfWidgetRuiLeftMenu.aspx" +
				"?action=getIsLeftMenuPinned" +
				"&rpcSecret=" + C_RPCSecret4 +		// recorded value = 7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9
				"&reqId=1612210863567";
		requestFile0333 = Lib.replaceTextPattern(requestFile0333, "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9", C_RPCSecret4, 0);		// search and replace request file fragment "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9" with variable 'C_RPCSecret4' on all occurrences

		String requestContent0333 = 
				"data=null" +
				"&dojo.preventCache=1612210863567";
		String requestHeader0333 = "POST " + requestFile0333 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0333.length() + "\r\n" + 		// Content-Length: 41
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0333, requestHost0333, requestPort0333, requestHeader0333, requestContent0333.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0333 = null;		// support garbage collector to reduce memory
		requestContent0333 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 92
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [333] <- Index 333
		if(replayMode)
		{
			long proxyDataRecordId =1612210863575L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [334] <- WEB ADMIN Index 337 ---
		String requestProt0334 = "https";
		String requestHost0334 = "analytics4.successfactors.com";
		int    requestPort0334 = 443;
		String requestFile0334 = "/Production/RPC/SfWidgetRuiMenuBar.aspx" +
				"?action=getHomeLinkParameters" +
				"&rpcSecret=" + C_RPCSecret4 +		// recorded value = 7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9
				"&reqId=1612210863580";
		requestFile0334 = Lib.replaceTextPattern(requestFile0334, "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9", C_RPCSecret4, 0);		// search and replace request file fragment "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9" with variable 'C_RPCSecret4' on all occurrences

		String requestContent0334 = 
				"data=null" +
				"&dojo.preventCache=1612210863580";
		String requestHeader0334 = "POST " + requestFile0334 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0334.length() + "\r\n" + 		// Content-Length: 41
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0334, requestHost0334, requestPort0334, requestHeader0334, requestContent0334.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0334 = null;		// support garbage collector to reduce memory
		requestContent0334 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 109
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [334] <- Index 334
		if(replayMode)
		{
			long proxyDataRecordId =1612210863585L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [335] <- WEB ADMIN Index 338 ---
		String requestProt0335 = "https";
		String requestHost0335 = "analytics4.successfactors.com";
		int    requestPort0335 = 443;
		String requestFile0335 = "/Production/RPC/SfWidgetRuiMenuBar.aspx" +
				"?action=getRuiPageNavigator" +
				"&rpcSecret=" + C_RPCSecret4 +		// recorded value = 7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9
				"&reqId=1612210863578";
		requestFile0335 = Lib.replaceTextPattern(requestFile0335, "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9", C_RPCSecret4, 0);		// search and replace request file fragment "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9" with variable 'C_RPCSecret4' on all occurrences

		String requestContent0335 = 
				"data=null" +
				"&dojo.preventCache=1612210863578";
		String requestHeader0335 = "POST " + requestFile0335 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0335.length() + "\r\n" + 		// Content-Length: 41
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0335, requestHost0335, requestPort0335, requestHeader0335, requestContent0335.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0335 = null;		// support garbage collector to reduce memory
		requestContent0335 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 225
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, " region=\\\"center\\\" label=\\\"Employee Login Details");		// Test [335] <- Index 335
		if(replayMode)
		{
			long proxyDataRecordId =1612210863588L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [336] <- WEB ADMIN Index 339 ---
		String requestProt0336 = "https";
		String requestHost0336 = "analytics4.successfactors.com";
		int    requestPort0336 = 443;
		String requestFile0336 = "/Production/RPC/SfWidgetRuiMenuBar.aspx" +
				"?action=getRtNavMenus" +
				"&rpcSecret=" + C_RPCSecret4 +		// recorded value = 7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9
				"&reqId=1612210863726";
		requestFile0336 = Lib.replaceTextPattern(requestFile0336, "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9", C_RPCSecret4, 0);		// search and replace request file fragment "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9" with variable 'C_RPCSecret4' on all occurrences

		String requestContent0336 = 
				"data=null" +
				"&dojo.preventCache=1612210863726";
		String requestHeader0336 = "POST " + requestFile0336 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0336.length() + "\r\n" + 		// Content-Length: 41
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0336, requestHost0336, requestPort0336, requestHeader0336, requestContent0336.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0336 = null;		// support garbage collector to reduce memory
		requestContent0336 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 87
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [336] <- Index 336
		if(replayMode)
		{
			long proxyDataRecordId =1612210863742L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [337] <- WEB ADMIN Index 340 ---
		String requestProt0337 = "https";
		String requestHost0337 = "analytics4.successfactors.com";
		int    requestPort0337 = 443;
		String requestFile0337 = "/Production/PageBuilder/Runtime/SfWfaRuntime.aspx" +
				"?action=showMandatoryPrompt" +
				"&rpcSecret=" + C_RPCSecret4 +		// recorded value = 7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9
				"&reqId=1612210863753";
		requestFile0337 = Lib.replaceTextPattern(requestFile0337, "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9", C_RPCSecret4, 0);		// search and replace request file fragment "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9" with variable 'C_RPCSecret4' on all occurrences

		String requestContent0337 = 
				"data=%257B%2522forceShow%2522%253Afalse%252C%2522refreshPage%2522%253Atrue%257D" +
				"&dojo.preventCache=1612210863754";
		String requestHeader0337 = "POST " + requestFile0337 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0337.length() + "\r\n" + 		// Content-Length: 111
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0337, requestHost0337, requestPort0337, requestHeader0337, requestContent0337.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0337 = null;		// support garbage collector to reduce memory
		requestContent0337 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 172
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [337] <- Index 337
		if(replayMode)
		{
			long proxyDataRecordId =1612210863764L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #7_3 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7_4.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #7 (fragment 5 of 7)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [338] <- WEB ADMIN Index 341 ---
		String requestProt0338 = "https";
		String requestHost0338 = "analytics4.successfactors.com";
		int    requestPort0338 = 443;
		String requestFile0338 = "/Production/PageBuilder/Runtime/SfWfaRuntime.aspx" +
				"?action=initOptions" +
				"&rpcSecret=" + C_RPCSecret4 +		// recorded value = 7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9
				"&reqId=1612210863755";
		requestFile0338 = Lib.replaceTextPattern(requestFile0338, "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9", C_RPCSecret4, 0);		// search and replace request file fragment "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9" with variable 'C_RPCSecret4' on all occurrences

		String requestContent0338 = 
				"data=null" +
				"&dojo.preventCache=1612210863755";
		String requestHeader0338 = "POST " + requestFile0338 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0338.length() + "\r\n" + 		// Content-Length: 41
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0338, requestHost0338, requestPort0338, requestHeader0338, requestContent0338.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0338 = null;		// support garbage collector to reduce memory
		requestContent0338 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1275
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "Save Profile");		// Test [338] <- Index 338
		if(replayMode)
		{
			long proxyDataRecordId =1612210863768L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [339] <- WEB ADMIN Index 342 ---
		String requestProt0339 = "https";
		String requestHost0339 = "analytics4.successfactors.com";
		int    requestPort0339 = 443;
		String requestFile0339 = "/Production/Resources/DojoToolkit/infohrm/images/menuUpArrow.gif";
		String requestHeader0339 = "GET " + requestFile0339 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0339, requestHost0339, requestPort0339, requestHeader0339, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0339 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 844
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [339] <- Index 339
		if(replayMode)
		{
			long proxyDataRecordId =1612210863771L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [340] <- WEB ADMIN Index 343 ---
		String requestProt0340 = "https";
		String requestHost0340 = "analytics4.successfactors.com";
		int    requestPort0340 = 443;
		String requestFile0340 = "/Production/Resources/DojoToolkit/infohrm/images/menuDownArrow.gif";
		String requestHeader0340 = "GET " + requestFile0340 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0340, requestHost0340, requestPort0340, requestHeader0340, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0340 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 843
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [340] <- Index 340
		if(replayMode)
		{
			long proxyDataRecordId =1612210863774L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [341] <- WEB ADMIN Index 344 ---
		String requestProt0341 = "https";
		String requestHost0341 = "analytics4.successfactors.com";
		int    requestPort0341 = 443;
		String requestFile0341 = "/Production/Resources/Revolution/Images/close_panel_icon.gif";
		String requestHeader0341 = "GET " + requestFile0341 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0341, requestHost0341, requestPort0341, requestHeader0341, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0341 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 276
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [341] <- Index 341
		if(replayMode)
		{
			long proxyDataRecordId =1612210863775L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [342] <- WEB ADMIN Index 345 ---
		String requestProt0342 = "https";
		String requestHost0342 = "analytics4.successfactors.com";
		int    requestPort0342 = 443;
		String requestFile0342 = "/Production/PageBuilder/Runtime/SfMandatoryPromptEditor.aspx";
		String requestHeader0342 = "GET " + requestFile0342 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0342, requestHost0342, requestPort0342, requestHeader0342, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0342 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 29039
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Select values to filter");		// Test [342] <- Index 342
		if(replayMode)
		{
			long proxyDataRecordId =1612210863856L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_RPCSecret1'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0342_1 = new BoundaryBasedExtractorItem( "rpcSecret='" , "';",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0342_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_RPCSecret1'
			C_RPCSecret1 = boundaryBasedContentExtractorItem0342_1.getResultText();
			log("<<< C_RPCSecret1 = " + C_RPCSecret1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_RPCSecret1!= null && C_RPCSecret1.trim().length() == 0)
			{
				C_RPCSecret1 = "";
				log("runtime note: the extraction of a new value for the variable 'C_RPCSecret1' ends up with an empty string - a substitute value was set");
				log("<<< C_RPCSecret1 = " + C_RPCSecret1);
			}
		}
		catch (Exception e) { C_RPCSecret1 = null; log(e); }
		if (C_RPCSecret1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_RPCSecret1' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [343] <- WEB ADMIN Index 346 ---
		String requestProt0343 = "https";
		String requestHost0343 = "analytics4.successfactors.com";
		int    requestPort0343 = 443;
		String requestFile0343 = "/Production/RPC/SfWidgetRui.aspx" +
				"?action=hasUserAccessibility" +
				"&rpcSecret=" + C_RPCSecret4 +		// recorded value = 7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9
				"&reqId=1612210863847";
		requestFile0343 = Lib.replaceTextPattern(requestFile0343, "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9", C_RPCSecret4, 0);		// search and replace request file fragment "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9" with variable 'C_RPCSecret4' on all occurrences

		String requestContent0343 = 
				"data=null" +
				"&dojo.preventCache=1612210863848";
		String requestHeader0343 = "POST " + requestFile0343 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0343.length() + "\r\n" + 		// Content-Length: 41
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0343, requestHost0343, requestPort0343, requestHeader0343, requestContent0343.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0343 = null;		// support garbage collector to reduce memory
		requestContent0343 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 97
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [343] <- Index 343
		if(replayMode)
		{
			long proxyDataRecordId =1612210863858L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [344] <- WEB ADMIN Index 347 ---
		log();
		log("# title: Bad Request");
		String requestProt0344 = "https";
		String requestHost0344 = "analytics4.successfactors.com";
		int    requestPort0344 = 443;
		String requestFile0344 = "/Production/PageBuilder/Runtime/%22https://performancemanager4.successfactors.com/public/ui-dcss/Teck/_/3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11uires=3A202=3Fmod=3D3a197762f867d55aceaee0bb261f6b2b=26name=3DC=253a=255cUsers=255cochow=255cDesktop=255cTeck=255frev=255fCMYK=252dresize.png!0-1!PL3i!1X_jV1A!SL072N!!1OKjXDrr7-1!Drr7-1!1!!1-1!-1!-1!11YLbOcPcP-1!W=zEVvbVVvbVW=zEZ_vTTKHN8y8y7az!!1-1!cPcP72N!f3MY72N!=vDV-1!f3MY72N!tnlRViAF4Cg!YaI08EX!1l9rd-1!goH7enOS-1!enOSFIvz-1!Ds7w0+0+1px+0!1d667-1!bPN8-1!gDOIVvbV__X=BHDmcPcP1-1!SL1f3MY7qE!-1!f3MY-1!7qE!lBpm7qE!!cPcP=vDV7qE!ViAF-1!ViAFSDSDSLSLf3MYVunBVvbVSD1WF!DERNPCPT!1aAZD-1!OKjXSL1x8=klBpmnbHCHZp5ZoNbzdf_gDOI_XAk1rj_S8Kb8sj4VnLflBpmHXP2-1!oqpmQO0Mz8Oc1-1!0!8Xc!!!!1pCpC01Z_vTd667GWKHW=LHd667GWKH=vDVCH33QZfj0+0+1px+0!1belizePlusLanding!11!THRBPLPT!NO0!SD1BUT1uires=3A146=3Fmod=3D82137484cd2fcde38d057a0be1a23986=26name=3DTeck=252dtransparent=252dmax.png!TH0SL!1cPcPpCpC-1!0!a!AXvmx8=kQO0MUnIA9Tw!1DE!BUuires=3A242=3Fmod=3D598758c08d82beb795c1663b536ed101=26name=3Dteck=252dfavicon=252d32x32.png!1!3vtUOu!/.dcss";
		requestFile0344 = Lib.replaceTextPattern(requestFile0344, "3A202", C_UIRes, 0);		// search and replace request file fragment "3A202" with variable 'C_UIRes' on all occurrences
		requestFile0344 = Lib.replaceTextPattern(requestFile0344, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD2, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD2' on all occurrences
		requestFile0344 = Lib.replaceTextPattern(requestFile0344, "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11", C_3Mvalue, 0);		// search and replace request file fragment "3m!3782cu7pgp!!n356zdb!011Ds3uTBNOBTRXPLPT!11" with variable 'C_3Mvalue' on all occurrences
		requestFile0344 = Lib.replaceTextPattern(requestFile0344, "3D3a197762f867d55aceaee0bb261f6b2b", C_MoD1, 0);		// search and replace request file fragment "3D3a197762f867d55aceaee0bb261f6b2b" with variable 'C_MoD1' on all occurrences

		String requestHeader0344 = "GET " + requestFile0344 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0344, requestHost0344, requestPort0344, requestHeader0344, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0344 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 400, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 324
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {400}, null, null, null);		// Test [344] <- Index 344
		if(replayMode)
		{
			long proxyDataRecordId =1612210864005L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [345] <- WEB ADMIN Index 348 ---
		String requestProt0345 = "https";
		String requestHost0345 = "analytics4.successfactors.com";
		int    requestPort0345 = 443;
		String requestFile0345 = "/Production/Resources/DojoToolkit/infohrm/scripts/SfMandatoryPromptEditor.js";
		String requestHeader0345 = "GET " + requestFile0345 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0345, requestHost0345, requestPort0345, requestHeader0345, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0345 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 30451
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [345] <- Index 345
		if(replayMode)
		{
			long proxyDataRecordId =1612210864006L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [346] <- WEB ADMIN Index 349 ---
		String requestProt0346 = "https";
		String requestHost0346 = "analytics4.successfactors.com";
		int    requestPort0346 = 443;
		String requestFile0346 = "/Production/Resources/DojoToolkit/infohrm/BasePage.js";
		String requestHeader0346 = "GET " + requestFile0346 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0346, requestHost0346, requestPort0346, requestHeader0346, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0346 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1501
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [346] <- Index 346
		if(replayMode)
		{
			long proxyDataRecordId =1612210864264L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [347] <- WEB ADMIN Index 350 ---
		String requestProt0347 = "https";
		String requestHost0347 = "analytics4.successfactors.com";
		int    requestPort0347 = 443;
		String requestFile0347 = "/Production/Resources/DojoToolkit/infohrm/widget/BaseFilterEditor.js";
		String requestHeader0347 = "GET " + requestFile0347 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0347, requestHost0347, requestPort0347, requestHeader0347, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0347 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 66745
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [347] <- Index 347
		if(replayMode)
		{
			long proxyDataRecordId =1612210864395L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [348] <- WEB ADMIN Index 351 ---
		String requestProt0348 = "https";
		String requestHost0348 = "analytics4.successfactors.com";
		int    requestPort0348 = 443;
		String requestFile0348 = "/Production/Resources/DojoToolkit/infohrm/OdsEnums.js";
		String requestHeader0348 = "GET " + requestFile0348 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0348, requestHost0348, requestPort0348, requestHeader0348, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0348 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1054
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [348] <- Index 348
		if(replayMode)
		{
			long proxyDataRecordId =1612210864585L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [349] <- WEB ADMIN Index 352 ---
		String requestProt0349 = "https";
		String requestHost0349 = "analytics4.successfactors.com";
		int    requestPort0349 = 443;
		String requestFile0349 = "/Production/Resources/DojoToolkit/infohrm/widget/RuiComboBox.js";
		String requestHeader0349 = "GET " + requestFile0349 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0349, requestHost0349, requestPort0349, requestHeader0349, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0349 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 8930
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [349] <- Index 349
		if(replayMode)
		{
			long proxyDataRecordId =1612210864793L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [350] <- WEB ADMIN Index 353 ---
		String requestProt0350 = "https";
		String requestHost0350 = "analytics4.successfactors.com";
		int    requestPort0350 = 443;
		String requestFile0350 = "/Production/Resources/DojoToolkit/infohrm/widget/Spinner.js";
		String requestHeader0350 = "GET " + requestFile0350 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0350, requestHost0350, requestPort0350, requestHeader0350, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0350 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 6878
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [350] <- Index 350
		if(replayMode)
		{
			long proxyDataRecordId =1612210864860L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [351] <- WEB ADMIN Index 354 ---
		String requestProt0351 = "https";
		String requestHost0351 = "analytics4.successfactors.com";
		int    requestPort0351 = 443;
		String requestFile0351 = "/Production/Resources/DojoToolkit/infohrm/widget/DateTextBox.js";
		String requestHeader0351 = "GET " + requestFile0351 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0351, requestHost0351, requestPort0351, requestHeader0351, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0351 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1604
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [351] <- Index 351
		if(replayMode)
		{
			long proxyDataRecordId =1612210864928L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [352] <- WEB ADMIN Index 355 ---
		String requestProt0352 = "https";
		String requestHost0352 = "analytics4.successfactors.com";
		int    requestPort0352 = 443;
		String requestFile0352 = "/Production/Resources/DojoToolkit/dijit/form/DateTextBox.js";
		String requestHeader0352 = "GET " + requestFile0352 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0352, requestHost0352, requestPort0352, requestHeader0352, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0352 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 577
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [352] <- Index 352
		if(replayMode)
		{
			long proxyDataRecordId =1612210865056L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [353] <- WEB ADMIN Index 356 ---
		String requestProt0353 = "https";
		String requestHost0353 = "analytics4.successfactors.com";
		int    requestPort0353 = 443;
		String requestFile0353 = "/Production/Resources/DojoToolkit/dijit/Calendar.js";
		String requestHeader0353 = "GET " + requestFile0353 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0353, requestHost0353, requestPort0353, requestHeader0353, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0353 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4889
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [353] <- Index 353
		if(replayMode)
		{
			long proxyDataRecordId =1612210865121L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [354] <- WEB ADMIN Index 357 ---
		String requestProt0354 = "https";
		String requestHost0354 = "analytics4.successfactors.com";
		int    requestPort0354 = 443;
		String requestFile0354 = "/Production/Resources/DojoToolkit/dijit/CalendarLite.js";
		String requestHeader0354 = "GET " + requestFile0354 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0354, requestHost0354, requestPort0354, requestHeader0354, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0354 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 9548
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [354] <- Index 354
		if(replayMode)
		{
			long proxyDataRecordId =1612210865321L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [355] <- WEB ADMIN Index 358 ---
		String requestProt0355 = "https";
		String requestHost0355 = "analytics4.successfactors.com";
		int    requestPort0355 = 443;
		String requestFile0355 = "/Production/Resources/DojoToolkit/dijit/form/_DateTimeTextBox.js";
		String requestHeader0355 = "GET " + requestFile0355 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0355, requestHost0355, requestPort0355, requestHeader0355, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0355 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4871
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [355] <- Index 355
		if(replayMode)
		{
			long proxyDataRecordId =1612210865388L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [356] <- WEB ADMIN Index 359 ---
		String requestProt0356 = "https";
		String requestHost0356 = "analytics4.successfactors.com";
		int    requestPort0356 = 443;
		String requestFile0356 = "/Production/Resources/DojoToolkit/dijit/form/RangeBoundTextBox.js";
		String requestHeader0356 = "GET " + requestFile0356 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0356, requestHost0356, requestPort0356, requestHeader0356, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0356 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1713
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [356] <- Index 356
		if(replayMode)
		{
			long proxyDataRecordId =1612210865455L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [357] <- WEB ADMIN Index 360 ---
		String requestProt0357 = "https";
		String requestHost0357 = "analytics4.successfactors.com";
		int    requestPort0357 = 443;
		String requestFile0357 = "/Production/Resources/DojoToolkit/dijit/form/MappedTextBox.js";
		String requestHeader0357 = "GET " + requestFile0357 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0357, requestHost0357, requestPort0357, requestHeader0357, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0357 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1138
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [357] <- Index 357
		if(replayMode)
		{
			long proxyDataRecordId =1612210865694L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #7_4 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7_5.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #7 (fragment 6 of 7)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [358] <- WEB ADMIN Index 361 ---
		String requestProt0358 = "https";
		String requestHost0358 = "analytics4.successfactors.com";
		int    requestPort0358 = 443;
		String requestFile0358 = "/Production/Resources/DojoToolkit/dijit/form/ValidationTextBox.js";
		String requestHeader0358 = "GET " + requestFile0358 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0358, requestHost0358, requestPort0358, requestHeader0358, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0358 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5336
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [358] <- Index 358
		if(replayMode)
		{
			long proxyDataRecordId =1612210865903L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [359] <- WEB ADMIN Index 362 ---
		String requestProt0359 = "https";
		String requestHost0359 = "analytics4.successfactors.com";
		int    requestPort0359 = 443;
		String requestFile0359 = "/Production/Resources/DojoToolkit/dijit/form/TextBox.js";
		String requestHeader0359 = "GET " + requestFile0359 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0359, requestHost0359, requestPort0359, requestHeader0359, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0359 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3697
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [359] <- Index 359
		if(replayMode)
		{
			long proxyDataRecordId =1612210865971L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [360] <- WEB ADMIN Index 363 ---
		String requestProt0360 = "https";
		String requestHost0360 = "analytics4.successfactors.com";
		int    requestPort0360 = 443;
		String requestFile0360 = "/Production/Resources/DojoToolkit/dijit/form/_TextBoxMixin.js";
		String requestHeader0360 = "GET " + requestFile0360 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0360, requestHost0360, requestPort0360, requestHeader0360, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0360 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5689
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [360] <- Index 360
		if(replayMode)
		{
			long proxyDataRecordId =1612210866116L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [361] <- WEB ADMIN Index 364 ---
		String requestProt0361 = "https";
		String requestHost0361 = "analytics4.successfactors.com";
		int    requestPort0361 = 443;
		String requestFile0361 = "/Production/Resources/DojoToolkit/dijit/form/nls/validate.js";
		String requestHeader0361 = "GET " + requestFile0361 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0361, requestHost0361, requestPort0361, requestHeader0361, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0361 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 832
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [361] <- Index 361
		if(replayMode)
		{
			long proxyDataRecordId =1612210866238L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [362] <- WEB ADMIN Index 365 ---
		String requestProt0362 = "https";
		String requestHost0362 = "analytics4.successfactors.com";
		int    requestPort0362 = 443;
		String requestFile0362 = "/Production/Resources/DojoToolkit/infohrm/widget/TabbedContainer.js";
		String requestHeader0362 = "GET " + requestFile0362 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0362, requestHost0362, requestPort0362, requestHeader0362, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0362 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 7608
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [362] <- Index 362
		if(replayMode)
		{
			long proxyDataRecordId =1612210866436L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [363] <- WEB ADMIN Index 366 ---
		String requestProt0363 = "https";
		String requestHost0363 = "analytics4.successfactors.com";
		int    requestPort0363 = 443;
		String requestFile0363 = "/Production/Resources/DojoToolkit/infohrm/widget/OdsDateSelector.js";
		String requestHeader0363 = "GET " + requestFile0363 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0363, requestHost0363, requestPort0363, requestHeader0363, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0363 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 17005
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [363] <- Index 363
		if(replayMode)
		{
			long proxyDataRecordId =1612210866503L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [364] <- WEB ADMIN Index 367 ---
		String requestProt0364 = "https";
		String requestHost0364 = "analytics4.successfactors.com";
		int    requestPort0364 = 443;
		String requestFile0364 = "/Production/Resources/DojoToolkit/dijit/layout/TabContainer.js";
		String requestHeader0364 = "GET " + requestFile0364 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0364, requestHost0364, requestPort0364, requestHeader0364, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0364 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1316
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [364] <- Index 364
		if(replayMode)
		{
			long proxyDataRecordId =1612210866647L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [365] <- WEB ADMIN Index 368 ---
		String requestProt0365 = "https";
		String requestHost0365 = "analytics4.successfactors.com";
		int    requestPort0365 = 443;
		String requestFile0365 = "/Production/Resources/DojoToolkit/dijit/layout/_TabContainerBase.js";
		String requestHeader0365 = "GET " + requestFile0365 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0365, requestHost0365, requestPort0365, requestHeader0365, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0365 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 2808
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [365] <- Index 365
		if(replayMode)
		{
			long proxyDataRecordId =1612210866769L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [366] <- WEB ADMIN Index 369 ---
		String requestProt0366 = "https";
		String requestHost0366 = "analytics4.successfactors.com";
		int    requestPort0366 = 443;
		String requestFile0366 = "/Production/Resources/DojoToolkit/dijit/layout/StackContainer.js";
		String requestHeader0366 = "GET " + requestFile0366 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0366, requestHost0366, requestPort0366, requestHeader0366, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0366 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4273
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [366] <- Index 366
		if(replayMode)
		{
			long proxyDataRecordId =1612210866843L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [367] <- WEB ADMIN Index 370 ---
		String requestProt0367 = "https";
		String requestHost0367 = "analytics4.successfactors.com";
		int    requestPort0367 = 443;
		String requestFile0367 = "/Production/Resources/DojoToolkit/dijit/layout/TabController.js";
		String requestHeader0367 = "GET " + requestFile0367 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0367, requestHost0367, requestPort0367, requestHeader0367, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0367 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3173
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [367] <- Index 367
		if(replayMode)
		{
			long proxyDataRecordId =1612210866911L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [368] <- WEB ADMIN Index 371 ---
		String requestProt0368 = "https";
		String requestHost0368 = "analytics4.successfactors.com";
		int    requestPort0368 = 443;
		String requestFile0368 = "/Production/Resources/DojoToolkit/dijit/layout/StackController.js";
		String requestHeader0368 = "GET " + requestFile0368 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0368, requestHost0368, requestPort0368, requestHeader0368, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0368 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5627
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [368] <- Index 368
		if(replayMode)
		{
			long proxyDataRecordId =1612210866979L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [369] <- WEB ADMIN Index 372 ---
		String requestProt0369 = "https";
		String requestHost0369 = "analytics4.successfactors.com";
		int    requestPort0369 = 443;
		String requestFile0369 = "/Production/Resources/DojoToolkit/dijit/Menu.js";
		String requestHeader0369 = "GET " + requestFile0369 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0369, requestHost0369, requestPort0369, requestHeader0369, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0369 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 4565
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [369] <- Index 369
		if(replayMode)
		{
			long proxyDataRecordId =1612210867048L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [370] <- WEB ADMIN Index 373 ---
		String requestProt0370 = "https";
		String requestHost0370 = "analytics4.successfactors.com";
		int    requestPort0370 = 443;
		String requestFile0370 = "/Production/Resources/DojoToolkit/dijit/DropDownMenu.js";
		String requestHeader0370 = "GET " + requestFile0370 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0370, requestHost0370, requestPort0370, requestHeader0370, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0370 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1469
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [370] <- Index 370
		if(replayMode)
		{
			long proxyDataRecordId =1612210867120L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [371] <- WEB ADMIN Index 374 ---
		String requestProt0371 = "https";
		String requestHost0371 = "analytics4.successfactors.com";
		int    requestPort0371 = 443;
		String requestFile0371 = "/Production/Resources/DojoToolkit/dijit/_MenuBase.js";
		String requestHeader0371 = "GET " + requestFile0371 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0371, requestHost0371, requestPort0371, requestHeader0371, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0371 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 5189
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [371] <- Index 371
		if(replayMode)
		{
			long proxyDataRecordId =1612210867240L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [372] <- WEB ADMIN Index 375 ---
		String requestProt0372 = "https";
		String requestHost0372 = "analytics4.successfactors.com";
		int    requestPort0372 = 443;
		String requestFile0372 = "/Production/Resources/DojoToolkit/dijit/_KeyNavContainer.js";
		String requestHeader0372 = "GET " + requestFile0372 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0372, requestHost0372, requestPort0372, requestHeader0372, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0372 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3023
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [372] <- Index 372
		if(replayMode)
		{
			long proxyDataRecordId =1612210867308L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [373] <- WEB ADMIN Index 376 ---
		String requestProt0373 = "https";
		String requestHost0373 = "analytics4.successfactors.com";
		int    requestPort0373 = 443;
		String requestFile0373 = "/Production/Resources/DojoToolkit/dijit/MenuItem.js";
		String requestHeader0373 = "GET " + requestFile0373 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0373, requestHost0373, requestPort0373, requestHeader0373, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0373 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 3287
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [373] <- Index 373
		if(replayMode)
		{
			long proxyDataRecordId =1612210867428L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [374] <- WEB ADMIN Index 377 ---
		String requestProt0374 = "https";
		String requestHost0374 = "analytics4.successfactors.com";
		int    requestPort0374 = 443;
		String requestFile0374 = "/Production/Resources/DojoToolkit/dijit/layout/ScrollingTabController.js";
		String requestHeader0374 = "GET " + requestFile0374 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0374, requestHost0374, requestPort0374, requestHeader0374, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0374 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 9290
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [374] <- Index 374
		if(replayMode)
		{
			long proxyDataRecordId =1612210867499L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [375] <- WEB ADMIN Index 378 ---
		String requestProt0375 = "https";
		String requestHost0375 = "analytics4.successfactors.com";
		int    requestPort0375 = 443;
		String requestFile0375 = "/Production/Resources/DojoToolkit/infohrm/widget/InputTextArea.js";
		String requestHeader0375 = "GET " + requestFile0375 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0375, requestHost0375, requestPort0375, requestHeader0375, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0375 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 613
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [375] <- Index 375
		if(replayMode)
		{
			long proxyDataRecordId =1612210867567L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [376] <- WEB ADMIN Index 379 ---
		String requestProt0376 = "https";
		String requestHost0376 = "analytics4.successfactors.com";
		int    requestPort0376 = 443;
		String requestFile0376 = "/Production/Resources/DojoToolkit/infohrm/widget/Table.js";
		String requestHeader0376 = "GET " + requestFile0376 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0376, requestHost0376, requestPort0376, requestHeader0376, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0376 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 23534
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [376] <- Index 376
		if(replayMode)
		{
			long proxyDataRecordId =1612210867631L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [377] <- WEB ADMIN Index 380 ---
		String requestProt0377 = "https";
		String requestHost0377 = "analytics4.successfactors.com";
		int    requestPort0377 = 443;
		String requestFile0377 = "/Production/Resources/DojoToolkit/infohrm/css/calendar.css";
		String requestHeader0377 = "GET " + requestFile0377 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0377, requestHost0377, requestPort0377, requestHeader0377, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0377 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 2267
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [377] <- Index 377
		if(replayMode)
		{
			long proxyDataRecordId =1612210867724L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #7_5 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #7_6.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_7_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #7 (fragment 7 of 7)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [378] <- WEB ADMIN Index 382 ---
		String requestProt0378 = "https";
		String requestHost0378 = "analytics4.successfactors.com";
		int    requestPort0378 = 443;
		String requestFile0378 = "/Production/Resources/DojoToolkit/dijit/PopupMenuItem.js";
		String requestHeader0378 = "GET " + requestFile0378 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0378, requestHost0378, requestPort0378, requestHeader0378, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0378 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1205
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [378] <- Index 378
		if(replayMode)
		{
			long proxyDataRecordId =1612210867728L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [379] <- WEB ADMIN Index 383 ---
		String requestProt0379 = "https";
		String requestHost0379 = "analytics4.successfactors.com";
		int    requestPort0379 = 443;
		String requestFile0379 = "/Production/Resources/DojoToolkit/dijit/CheckedMenuItem.js";
		String requestHeader0379 = "GET " + requestFile0379 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0379, requestHost0379, requestPort0379, requestHeader0379, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0379 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1702
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [379] <- Index 379
		if(replayMode)
		{
			long proxyDataRecordId =1612210867854L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [380] <- WEB ADMIN Index 384 ---
		String requestProt0380 = "https";
		String requestHost0380 = "analytics4.successfactors.com";
		int    requestPort0380 = 443;
		String requestFile0380 = "/Production/Resources/DojoToolkit/dijit/MenuSeparator.js";
		String requestHeader0380 = "GET " + requestFile0380 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0380, requestHost0380, requestPort0380, requestHeader0380, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0380 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/X-JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 1170
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/X-JAVASCRIPT", null, null);		// Test [380] <- Index 380
		if(replayMode)
		{
			long proxyDataRecordId =1612210867983L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [381] <- WEB ADMIN Index 385 ---
		String requestProt0381 = "https";
		String requestHost0381 = "analytics4.successfactors.com";
		int    requestPort0381 = 443;
		String requestFile0381 = "/Production/Resources/Revolution/Images/button_gradient.png";
		String requestHeader0381 = "GET " + requestFile0381 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0381, requestHost0381, requestPort0381, requestHeader0381, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0381 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 3002
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [381] <- Index 381
		if(replayMode)
		{
			long proxyDataRecordId =1612210868103L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [382] <- WEB ADMIN Index 386 ---
		String requestProt0382 = "https";
		String requestHost0382 = "analytics4.successfactors.com";
		int    requestPort0382 = 443;
		String requestFile0382 = "/Production/Resources/Images/SAPUI_Images/thin_arrow_down.svg";
		String requestHeader0382 = "GET " + requestFile0382 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0382, requestHost0382, requestPort0382, requestHeader0382, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0382 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/SVG+XML", header text fragment = [verification disabled], recorded content size = 503
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/SVG+XML", null, null);		// Test [382] <- Index 382
		if(replayMode)
		{
			long proxyDataRecordId =1612210868106L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [383] <- WEB ADMIN Index 387 ---
		String requestProt0383 = "https";
		String requestHost0383 = "analytics4.successfactors.com";
		int    requestPort0383 = 443;
		String requestFile0383 = "/Production/PageBuilder/Runtime/SfMandatoryPromptEditor.aspx" +
				"?action=init" +
				"&rpcSecret=" + C_RPCSecret1 +		// recorded value = D079765B1EEC546890777154DCACD4809F0C69454B1F6FC9C1E67A7E140CA9549D45D24DA0BD63E9366700022ADFE78F
				"&reqId=1612210868097";
		requestFile0383 = Lib.replaceTextPattern(requestFile0383, "D079765B1EEC546890777154DCACD4809F0C69454B1F6FC9C1E67A7E140CA9549D45D24DA0BD63E9366700022ADFE78F", C_RPCSecret1, 0);		// search and replace request file fragment "D079765B1EEC546890777154DCACD4809F0C69454B1F6FC9C1E67A7E140CA9549D45D24DA0BD63E9366700022ADFE78F" with variable 'C_RPCSecret1' on all occurrences

		String requestContent0383 = 
				"data=null" +
				"&dojo.preventCache=1612210868097";
		String requestHeader0383 = "POST " + requestFile0383 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0383.length() + "\r\n" + 		// Content-Length: 41
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0383, requestHost0383, requestPort0383, requestHeader0383, requestContent0383.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0383 = null;		// support garbage collector to reduce memory
		requestContent0383 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 12258
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [383] <- Index 383
		if(replayMode)
		{
			long proxyDataRecordId =1612210868107L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [384] <- WEB ADMIN Index 388 ---
		String requestProt0384 = "https";
		String requestHost0384 = "analytics4.successfactors.com";
		int    requestPort0384 = 443;
		String requestFile0384 = "/Production/Resources/Images/SAPUI_Images/people.svg";
		String requestHeader0384 = "GET " + requestFile0384 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0384, requestHost0384, requestPort0384, requestHeader0384, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0384 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/SVG+XML", header text fragment = [verification disabled], recorded content size = 1792
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/SVG+XML", null, null);		// Test [384] <- Index 384
		if(replayMode)
		{
			long proxyDataRecordId =1612210868125L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [385] <- WEB ADMIN Index 389 ---
		String requestProt0385 = "https";
		String requestHost0385 = "analytics4.successfactors.com";
		int    requestPort0385 = 443;
		String requestFile0385 = "/Production/Resources/Images/SAPUI_Images/filter.svg";
		String requestHeader0385 = "GET " + requestFile0385 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0385, requestHost0385, requestPort0385, requestHeader0385, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0385 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/SVG+XML", header text fragment = [verification disabled], recorded content size = 941
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/SVG+XML", null, null);		// Test [385] <- Index 385
		if(replayMode)
		{
			long proxyDataRecordId =1612210868127L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [386] <- WEB ADMIN Index 390 ---
		String requestProt0386 = "https";
		String requestHost0386 = "analytics4.successfactors.com";
		int    requestPort0386 = 443;
		String requestFile0386 = "/Production/RPC/SfWidgetRui.aspx" +
				"?action=getReportCenterUniversalNotificationStatus" +
				"&rpcSecret=" + C_RPCSecret4 +		// recorded value = 7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9
				"&reqId=1612210868124";
		requestFile0386 = Lib.replaceTextPattern(requestFile0386, "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9", C_RPCSecret4, 0);		// search and replace request file fragment "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9" with variable 'C_RPCSecret4' on all occurrences

		String requestContent0386 = 
				"data=null" +
				"&dojo.preventCache=1612210868124";
		String requestHeader0386 = "POST " + requestFile0386 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0386.length() + "\r\n" + 		// Content-Length: 41
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0386, requestHost0386, requestPort0386, requestHeader0386, requestContent0386.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0386 = null;		// support garbage collector to reduce memory
		requestContent0386 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 86
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [386] <- Index 386
		if(replayMode)
		{
			long proxyDataRecordId =1612210868133L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #7_6 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #8.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_8(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #8: ApplyDefaultFilter
		// # ---------------------------



		// --- HTTP REQUEST: Test [388] <- WEB ADMIN Index 392 ---
		String requestProt0388 = "https";
		String requestHost0388 = "analytics4.successfactors.com";
		int    requestPort0388 = 443;
		String requestFile0388 = "/Production/PageBuilder/Runtime/SfMandatoryPromptEditor.aspx" +
				"?action=updateMandatoryFilterOptions" +
				"&rpcSecret=" + C_RPCSecret1 +		// recorded value = D079765B1EEC546890777154DCACD4809F0C69454B1F6FC9C1E67A7E140CA9549D45D24DA0BD63E9366700022ADFE78F
				"&reqId=1612210889806";
		requestFile0388 = Lib.replaceTextPattern(requestFile0388, "D079765B1EEC546890777154DCACD4809F0C69454B1F6FC9C1E67A7E140CA9549D45D24DA0BD63E9366700022ADFE78F", C_RPCSecret1, 0);		// search and replace request file fragment "D079765B1EEC546890777154DCACD4809F0C69454B1F6FC9C1E67A7E140CA9549D45D24DA0BD63E9366700022ADFE78F" with variable 'C_RPCSecret1' on all occurrences

		String requestContent0388 = 
				"data=%257B%2522ignoreMandatoryPrompt%2522%253Afalse%252C%2522runOffline%2522%253Afalse%252C%2522runOfflineFormat%2522%253A%2522CSV%2522%257D" +
				"&dojo.preventCache=1612210889806";
		String requestHeader0388 = "POST " + requestFile0388 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0388.length() + "\r\n" + 		// Content-Length: 172
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0388, requestHost0388, requestPort0388, requestHeader0388, requestContent0388.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0388 = null;		// support garbage collector to reduce memory
		requestContent0388 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 300
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "\"}],\"updatestatus\":\"OK\"}JSON");		// Test [388] <- Index 388
		if(replayMode)
		{
			long proxyDataRecordId =1612210889813L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_RenderHandler'
		ContentTokenExtractorItem contentTokenExtractorItem0388_1 = new ContentTokenExtractorItem("renderHandler", "\t\n\r \"(),=\\{}", 1);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0388_1);

		contentTokenExtractor.extractTokens();
		try
		{
			// extract var 'C_RenderHandler'
			C_RenderHandler = contentTokenExtractorItem0388_1.getResultToken();
			log("<<< C_RenderHandler = " + C_RenderHandler);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_RenderHandler!= null && C_RenderHandler.trim().length() == 0)
			{
				C_RenderHandler = "";
				log("runtime note: the extraction of a new value for the variable 'C_RenderHandler' ends up with an empty string - a substitute value was set");
				log("<<< C_RenderHandler = " + C_RenderHandler);
			}
		}
		catch (Exception e) { C_RenderHandler = null; log(e); }
		if (C_RenderHandler == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_RenderHandler' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [389] <- WEB ADMIN Index 393 ---
		String requestProt0389 = "https";
		String requestHost0389 = "analytics4.successfactors.com";
		int    requestPort0389 = 443;
		String requestFile0389 = "/Production/PageBuilder/Runtime/SfWfaRuntime.aspx" +
				"?action=setScrollBar" +
				"&rpcSecret=" + C_RPCSecret4 +		// recorded value = 7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9
				"&reqId=1612210889893";
		requestFile0389 = Lib.replaceTextPattern(requestFile0389, "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9", C_RPCSecret4, 0);		// search and replace request file fragment "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9" with variable 'C_RPCSecret4' on all occurrences

		String requestContent0389 = 
				"data=%257B%2522scrollBar%2522%253A17%257D" +
				"&dojo.preventCache=1612210889894";
		String requestHeader0389 = "POST " + requestFile0389 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0389.length() + "\r\n" + 		// Content-Length: 73
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0389, requestHost0389, requestPort0389, requestHeader0389, requestContent0389.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0389 = null;		// support garbage collector to reduce memory
		requestContent0389 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 86
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [389] <- Index 389
		if(replayMode)
		{
			long proxyDataRecordId =1612210889902L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [390] <- WEB ADMIN Index 394 ---
		String requestProt0390 = "https";
		String requestHost0390 = "analytics4.successfactors.com";
		int    requestPort0390 = 443;
		String requestFile0390 = "/Production/PageBuilder/Runtime/SfWfaRuntime.aspx" +
				"?action=initOptions" +
				"&rpcSecret=" + C_RPCSecret4 +		// recorded value = 7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9
				"&reqId=1612210889897";
		requestFile0390 = Lib.replaceTextPattern(requestFile0390, "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9", C_RPCSecret4, 0);		// search and replace request file fragment "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9" with variable 'C_RPCSecret4' on all occurrences

		String requestContent0390 = 
				"data=null" +
				"&dojo.preventCache=1612210889897";
		String requestHeader0390 = "POST " + requestFile0390 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0390.length() + "\r\n" + 		// Content-Length: 41
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0390, requestHost0390, requestPort0390, requestHeader0390, requestContent0390.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0390 = null;		// support garbage collector to reduce memory
		requestContent0390 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 1275
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "Current Selections");		// Test [390] <- Index 390
		if(replayMode)
		{
			long proxyDataRecordId =1612210889905L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [391] <- WEB ADMIN Index 395 ---
		String requestProt0391 = "https";
		String requestHost0391 = "analytics4.successfactors.com";
		int    requestPort0391 = 443;
		String requestFile0391 = "/Production/Resources/Images/PbRt/dialsmall.gif";
		String requestHeader0391 = "GET " + requestFile0391 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0391, requestHost0391, requestPort0391, requestHeader0391, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0391 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 1801
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [391] <- Index 391
		if(replayMode)
		{
			long proxyDataRecordId =1612210889909L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [392] <- WEB ADMIN Index 396 ---
		String requestProt0392 = "https";
		String requestHost0392 = "analytics4.successfactors.com";
		int    requestPort0392 = 443;
		String requestFile0392 = "/Production/PageBuilder/Runtime/SfWfaRuntime.aspx" +
				"?action=updateRendering" +
				"&rpcSecret=" + C_RPCSecret4 +		// recorded value = 7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9
				"&reqId=1612210892898";
		requestFile0392 = Lib.replaceTextPattern(requestFile0392, "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9", C_RPCSecret4, 0);		// search and replace request file fragment "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9" with variable 'C_RPCSecret4' on all occurrences

		String requestContent0392 = 
				"data=%257B%2522renderHandler%2522%253A%252269233db5-b8f2-45b4-abb0-fec283d8e70d%2522%257D" +
				"&dojo.preventCache=1612210892898";
		requestContent0392 = Lib.replaceTextPattern(requestContent0392, "69233db5-b8f2-45b4-abb0-fec283d8e70d", C_RenderHandler, 0);		// search and replace content fragment "69233db5-b8f2-45b4-abb0-fec283d8e70d" with variable 'C_RenderHandler' on all occurrences

		String requestHeader0392 = "POST " + requestFile0392 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0392.length() + "\r\n" + 		// Content-Length: 121
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0392, requestHost0392, requestPort0392, requestHeader0392, requestContent0392.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0392 = null;		// support garbage collector to reduce memory
		requestContent0392 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 122008
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, "location.href='../../Resources/Documents/");		// Test [392] <- Index 392
		if(replayMode)
		{
			long proxyDataRecordId =1612210892904L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [393] <- WEB ADMIN Index 397 ---
		String requestProt0393 = "https";
		String requestHost0393 = "analytics4.successfactors.com";
		int    requestPort0393 = 443;
		String requestFile0393 = "/Production/PageBuilder/Runtime/HrmlPbRuntime.aspx" +
				"?action=getExcelUrl" +
				"&rpcSecret=" + C_RPCSecret4 +		// recorded value = 7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9
				"&reqId=1612210893160";
		requestFile0393 = Lib.replaceTextPattern(requestFile0393, "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9", C_RPCSecret4, 0);		// search and replace request file fragment "7DA878B165F5113FDDBDBD9B80FFD246ECE144868E08A78F1C0BD773E5422F633E3AA12853AF5CDB2808BE9E363308D9" with variable 'C_RPCSecret4' on all occurrences

		String requestContent0393 = 
				"data=%257B%2522compId%2522%253A%25221%2522%257D" +
				"&dojo.preventCache=1612210893160";
		String requestHeader0393 = "POST " + requestFile0393 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0393.length() + "\r\n" + 		// Content-Length: 79
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://analytics4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0393, requestHost0393, requestPort0393, requestHeader0393, requestContent0393.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0393 = null;		// support garbage collector to reduce memory
		requestContent0393 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "APPLICATION/JSON", header text fragment = [verification disabled], recorded content size = 172
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "APPLICATION/JSON", null, null);		// Test [393] <- Index 393
		if(replayMode)
		{
			long proxyDataRecordId =1612210893168L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [394] <- WEB ADMIN Index 398 ---
		String requestProt0394 = "https";
		String requestHost0394 = "analytics4.successfactors.com";
		int    requestPort0394 = 443;
		String requestFile0394 = "/Production/Resources/Images/contacts-cards-2_on.png";
		String requestHeader0394 = "GET " + requestFile0394 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0394, requestHost0394, requestPort0394, requestHeader0394, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0394 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/PNG", header text fragment = [verification disabled], recorded content size = 992
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/PNG", null, null);		// Test [394] <- Index 394
		if(replayMode)
		{
			long proxyDataRecordId =1612210893173L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [395] <- WEB ADMIN Index 399 ---
		String requestProt0395 = "https";
		String requestHost0395 = "analytics4.successfactors.com";
		int    requestPort0395 = 443;
		String requestFile0395 = "/Production/Resources/DojoToolkit/infohrm/images/comboButton.gif";
		String requestHeader0395 = "GET " + requestFile0395 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: image\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0395, requestHost0395, requestPort0395, requestHeader0395, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("cbdd22b1-9103-4101-a99a-80b889f1ceea", C_Report);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0395 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "IMAGE/GIF", header text fragment = [verification disabled], recorded content size = 404
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "IMAGE/GIF", null, null);		// Test [395] <- Index 395
		if(replayMode)
		{
			long proxyDataRecordId =1612210893175L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #8 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #9.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_9(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// # Page #9: LogOut
		// # ---------------



		// --- HTTP REQUEST: Test [397] <- WEB ADMIN Index 401 ---
		String requestProt0397 = "https";
		String requestHost0397 = "performancemanager4.successfactors.com";
		int    requestPort0397 = 443;
		String requestFile0397 = "/sf/idp/SAML2/slo" +
				"?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d";
		String requestContent0397 = 
				"LogoutUrl=https%3A%2F%2Fokkrtwkpyfmrqckrenxirty.us2.sac.successfactors.com%2Fapplication%2Flogout" +
				"&company=Teck";
		String requestHeader0397 = "POST " + requestFile0397 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0397.length() + "\r\n" + 		// Content-Length: 110
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0397, requestHost0397, requestPort0397, requestHeader0397, requestContent0397.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0397 = null;		// support garbage collector to reduce memory
		requestContent0397 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2000
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "function redirectToSPLogout() {");		// Test [397] <- Index 397
		if(replayMode)
		{
			long proxyDataRecordId =1612210909069L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest11'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0397_1 = new BoundaryBasedExtractorItem( "name=\"SAMLRequest\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0397_1);

		// setup var extractor for 'C_SAMLRequest5'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0397_2 = new BoundaryBasedExtractorItem( "SAMLRequest\" value=" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0397_2);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest11'
			C_SAMLRequest11 = boundaryBasedContentExtractorItem0397_1.getResultText();
			log("<<< C_SAMLRequest11 = " + C_SAMLRequest11);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest11!= null && C_SAMLRequest11.trim().length() == 0)
			{
				C_SAMLRequest11 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest11' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest11 = " + C_SAMLRequest11);
			}
		}
		catch (Exception e) { C_SAMLRequest11 = null; log(e); }
		if (C_SAMLRequest11 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest11' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_SAMLRequest5'
			C_SAMLRequest5 = boundaryBasedContentExtractorItem0397_2.getResultText();
			log("<<< C_SAMLRequest5 = " + C_SAMLRequest5);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest5!= null && C_SAMLRequest5.trim().length() == 0)
			{
				C_SAMLRequest5 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest5' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest5 = " + C_SAMLRequest5);
			}
		}
		catch (Exception e) { C_SAMLRequest5 = null; log(e); }
		if (C_SAMLRequest5 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest5' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [398] <- WEB ADMIN Index 402 ---
		String requestProt0398 = "https";
		String requestHost0398 = "performancemanager4.successfactors.com";
		int    requestPort0398 = 443;
		String requestFile0398 = "/sf/idp/SAML2/slo" +
				"?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d";
		String requestContent0398 = 
				"LogoutUrl=https%3A%2F%2Fteck.wfsaas.ca%2Fworkforce%2FSSO.do%3Faction%3DssoLogOff" +
				"&company=Teck";
		String requestHeader0398 = "POST " + requestFile0398 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0398.length() + "\r\n" + 		// Content-Length: 93
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0398, requestHost0398, requestPort0398, requestHeader0398, requestContent0398.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0398 = null;		// support garbage collector to reduce memory
		requestContent0398 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1995
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "function redirectToSPLogout() {");		// Test [398] <- Index 398
		if(replayMode)
		{
			long proxyDataRecordId =1612210909071L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest7'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0398_1 = new BoundaryBasedExtractorItem( "name=\"SAMLRequest\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0398_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest7'
			C_SAMLRequest7 = boundaryBasedContentExtractorItem0398_1.getResultText();
			log("<<< C_SAMLRequest7 = " + C_SAMLRequest7);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest7!= null && C_SAMLRequest7.trim().length() == 0)
			{
				C_SAMLRequest7 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest7' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest7 = " + C_SAMLRequest7);
			}
		}
		catch (Exception e) { C_SAMLRequest7 = null; log(e); }
		if (C_SAMLRequest7 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest7' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [399] <- WEB ADMIN Index 403 ---
		String requestProt0399 = "https";
		String requestHost0399 = "performancemanager4.successfactors.com";
		int    requestPort0399 = 443;
		String requestFile0399 = "/sf/idp/SAML2/slo" +
				"?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d";
		String requestContent0399 = 
				"LogoutUrl=https%3A%2F%2Fmy030334.payroll.ondemand.com%2Fsap%2Fsaml2%2Fsp%2Fslo%2F100" +
				"&company=Teck";
		String requestHeader0399 = "POST " + requestFile0399 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0399.length() + "\r\n" + 		// Content-Length: 97
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0399, requestHost0399, requestPort0399, requestHeader0399, requestContent0399.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0399 = null;		// support garbage collector to reduce memory
		requestContent0399 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1991
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "function redirectToSPLogout() {");		// Test [399] <- Index 399
		if(replayMode)
		{
			long proxyDataRecordId =1612210909072L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest13'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0399_1 = new BoundaryBasedExtractorItem( "name=\"SAMLRequest\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0399_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest13'
			C_SAMLRequest13 = boundaryBasedContentExtractorItem0399_1.getResultText();
			log("<<< C_SAMLRequest13 = " + C_SAMLRequest13);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest13!= null && C_SAMLRequest13.trim().length() == 0)
			{
				C_SAMLRequest13 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest13' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest13 = " + C_SAMLRequest13);
			}
		}
		catch (Exception e) { C_SAMLRequest13 = null; log(e); }
		if (C_SAMLRequest13 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest13' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [400] <- WEB ADMIN Index 404 ---
		String requestProt0400 = "https";
		String requestHost0400 = "performancemanager4.successfactors.com";
		int    requestPort0400 = 443;
		String requestFile0400 = "/sf/idp/SAML2/slo" +
				"?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d";
		String requestContent0400 = 
				"LogoutUrl=https%3A%2F%2Fteck.plateau.com%2Flearning%2Fsaml%2FSSO" +
				"&company=Teck";
		String requestHeader0400 = "POST " + requestFile0400 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0400.length() + "\r\n" + 		// Content-Length: 77
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0400, requestHost0400, requestPort0400, requestHeader0400, requestContent0400.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0400 = null;		// support garbage collector to reduce memory
		requestContent0400 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1970
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "function redirectToSPLogout() {");		// Test [400] <- Index 400
		if(replayMode)
		{
			long proxyDataRecordId =1612210909073L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest10'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0400_1 = new BoundaryBasedExtractorItem( "name=\"SAMLRequest\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0400_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest10'
			C_SAMLRequest10 = boundaryBasedContentExtractorItem0400_1.getResultText();
			log("<<< C_SAMLRequest10 = " + C_SAMLRequest10);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest10!= null && C_SAMLRequest10.trim().length() == 0)
			{
				C_SAMLRequest10 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest10' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest10 = " + C_SAMLRequest10);
			}
		}
		catch (Exception e) { C_SAMLRequest10 = null; log(e); }
		if (C_SAMLRequest10 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest10' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [401] <- WEB ADMIN Index 405 ---
		String requestProt0401 = "https";
		String requestHost0401 = "performancemanager4.successfactors.com";
		int    requestPort0401 = 443;
		String requestFile0401 = "/sf/idp/SAML2/slo" +
				"?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d";
		String requestContent0401 = 
				"LogoutUrl=https%3A%2F%2Fjob-v3.multiposting.fr%2Fsaml2%2F" +
				"&company=Teck";
		String requestHeader0401 = "POST " + requestFile0401 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0401.length() + "\r\n" + 		// Content-Length: 70
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0401, requestHost0401, requestPort0401, requestHeader0401, requestContent0401.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0401 = null;		// support garbage collector to reduce memory
		requestContent0401 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1968
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "function redirectToSPLogout() {");		// Test [401] <- Index 401
		if(replayMode)
		{
			long proxyDataRecordId =1612210909074L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest12'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0401_1 = new BoundaryBasedExtractorItem( "name=\"SAMLRequest\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0401_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest12'
			C_SAMLRequest12 = boundaryBasedContentExtractorItem0401_1.getResultText();
			log("<<< C_SAMLRequest12 = " + C_SAMLRequest12);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest12!= null && C_SAMLRequest12.trim().length() == 0)
			{
				C_SAMLRequest12 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest12' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest12 = " + C_SAMLRequest12);
			}
		}
		catch (Exception e) { C_SAMLRequest12 = null; log(e); }
		if (C_SAMLRequest12 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest12' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [402] <- WEB ADMIN Index 406 ---
		String requestProt0402 = "https";
		String requestHost0402 = "performancemanager4.successfactors.com";
		int    requestPort0402 = 443;
		String requestFile0402 = "/sf/idp/SAML2/slo" +
				"?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d";
		String requestContent0402 = 
				"LogoutUrl=https%3A%2F%2Fonboarding4.successfactors.com%2FONB%2FSSO%2FSAML20%2FSingleLogoutService.aspx" +
				"&company=Teck";
		String requestHeader0402 = "POST " + requestFile0402 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0402.length() + "\r\n" + 		// Content-Length: 115
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0402, requestHost0402, requestPort0402, requestHeader0402, requestContent0402.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0402 = null;		// support garbage collector to reduce memory
		requestContent0402 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2000
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "function redirectToSPLogout() {");		// Test [402] <- Index 402
		if(replayMode)
		{
			long proxyDataRecordId =1612210909202L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest9'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0402_1 = new BoundaryBasedExtractorItem( "name=\"SAMLRequest\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0402_1);

		// setup var extractor for 'C_SAMLRequest8'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0402_2 = new BoundaryBasedExtractorItem( "name=\"SAMLRequest\" value=" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0402_2);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest9'
			C_SAMLRequest9 = boundaryBasedContentExtractorItem0402_1.getResultText();
			log("<<< C_SAMLRequest9 = " + C_SAMLRequest9);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest9!= null && C_SAMLRequest9.trim().length() == 0)
			{
				C_SAMLRequest9 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest9' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest9 = " + C_SAMLRequest9);
			}
		}
		catch (Exception e) { C_SAMLRequest9 = null; log(e); }
		if (C_SAMLRequest9 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest9' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_SAMLRequest8'
			C_SAMLRequest8 = boundaryBasedContentExtractorItem0402_2.getResultText();
			log("<<< C_SAMLRequest8 = " + C_SAMLRequest8);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest8!= null && C_SAMLRequest8.trim().length() == 0)
			{
				C_SAMLRequest8 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest8' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest8 = " + C_SAMLRequest8);
			}
		}
		catch (Exception e) { C_SAMLRequest8 = null; log(e); }
		if (C_SAMLRequest8 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest8' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [403] <- WEB ADMIN Index 407 ---
		String requestProt0403 = "https";
		String requestHost0403 = "performancemanager4.successfactors.com";
		int    requestPort0403 = 443;
		String requestFile0403 = "/sf/idp/SAML2/slo" +
				"?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d";
		String requestContent0403 = 
				"LogoutUrl=https%3A%2F%2Fanalytics4.successfactors.com%2FProduction%2FHrmlLogout.aspx" +
				"&company=Teck";
		String requestHeader0403 = "POST " + requestFile0403 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0403.length() + "\r\n" + 		// Content-Length: 97
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-User: ?1\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0403, requestHost0403, requestPort0403, requestHeader0403, requestContent0403.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0403 = null;		// support garbage collector to reduce memory
		requestContent0403 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1975
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "function redirectToSPLogout() {");		// Test [403] <- Index 403
		if(replayMode)
		{
			long proxyDataRecordId =1612210909286L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest6'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0403_1 = new BoundaryBasedExtractorItem( "SAMLRequest\" value=\"" , "\" />",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0403_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest6'
			C_SAMLRequest6 = boundaryBasedContentExtractorItem0403_1.getResultText();
			log("<<< C_SAMLRequest6 = " + C_SAMLRequest6);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest6!= null && C_SAMLRequest6.trim().length() == 0)
			{
				C_SAMLRequest6 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest6' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest6 = " + C_SAMLRequest6);
			}
		}
		catch (Exception e) { C_SAMLRequest6 = null; log(e); }
		if (C_SAMLRequest6 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest6' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [404] <- WEB ADMIN Index 408 ---
		String requestProt0404 = "https";
		String requestHost0404 = "analytics4.successfactors.com";
		int    requestPort0404 = 443;
		String requestFile0404 = "/Production/HrmlLogout.aspx" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest6) +		// recorded value = nZJdb9owFIb%2FSuRblNhJQ0ktkqoTo2Pio6IwVm4m4zg0IrGDj8OAXz8TStVWWy9244vz9T7nPe7e7svC2QkNuZIx8j2CHCG5SnO5jtF81ncjdJt0gZVFUNGhWqvaTMW2FmAc2ymBnlMxqrWkikEOVLJSADWcPt6NhjTwCK20MoqrAjk925hLZhq1Z2MqoBgzyYqDyTmEHtScC4CMcaM0eFyV%2BEGrtOanDvxNl8WZwWNQ7ZEz6MXoF0lJthLhtdsJfOKGrO27keC%2Bm64ykpEoWrVTYUsBajGQYJg0MQpI4LskcIk%2FCwgNfBreeO3wZomcqWBwgvtsn6JhoDUIjZwfF%2FNsBr1YRRs1%2FdaizycysLNOO6Lk4koldKZ0ySQX9mFrof9qD2Q4Tyt8mhRgG6iYPOCZ4JsufotyARtb6UHvf8Cc%2FonG%2FLvc9%2FwmkqduA24NklAJnme5SFEys6e%2Fq40qm%2Btf6M48rz%2Fs0W5nswOZin2yuwqL%2BfH56YovxCbY7qPJcnM%2F37TwT7XuzfnXdeuBDJ%2FCxeG602sVmA%2BPZNw%2FprpdDJdfvpdkdN8Z7ca65eNpNNlOl%2F3NIpv8juMX7Q9qr9F3vzz5Aw%3D%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=q4%2FnAaEI%2F2ksP%2F4WHIglSPgN%2F6yEUetgyctMrutVL%2BJWxCTZreuOkF98%2F7W1LSI5CSP1Ol7E3JJnd0xhEZppQGhbn241OclcyLMMi9ND4kzadqKm3g2KG4zrVrwmUDdhrp3%2BZZie3VhvDkFiq1amYG8raYuFxMrp853rGjN5tnI%3D";
		requestFile0404 = Lib.replaceTextPattern(requestFile0404, "nZJdb9owFIb%2FSuRblNhJQ0ktkqoTo2Pio6IwVm4m4zg0IrGDj8OAXz8TStVWWy9244vz9T7nPe7e7svC2QkNuZIx8j2CHCG5SnO5jtF81ncjdJt0gZVFUNGhWqvaTMW2FmAc2ymBnlMxqrWkikEOVLJSADWcPt6NhjTwCK20MoqrAjk925hLZhq1Z2MqoBgzyYqDyTmEHtScC4CMcaM0eFyV%2BEGrtOanDvxNl8WZwWNQ7ZEz6MXoF0lJthLhtdsJfOKGrO27keC%2Bm64ykpEoWrVTYUsBajGQYJg0MQpI4LskcIk%2FCwgNfBreeO3wZomcqWBwgvtsn6JhoDUIjZwfF%2FNsBr1YRRs1%2FdaizycysLNOO6Lk4koldKZ0ySQX9mFrof9qD2Q4Tyt8mhRgG6iYPOCZ4JsufotyARtb6UHvf8Cc%2FonG%2FLvc9%2FwmkqduA24NklAJnme5SFEys6e%2Fq40qm%2Btf6M48rz%2Fs0W5nswOZin2yuwqL%2BfH56YovxCbY7qPJcnM%2F37TwT7XuzfnXdeuBDJ%2FCxeG602sVmA%2BPZNw%2FprpdDJdfvpdkdN8Z7ca65eNpNNlOl%2F3NIpv8juMX7Q9qr9F3vzz5Aw%3D%3D", java.net.URLEncoder.encode(C_SAMLRequest6), 0);		// search and replace request file fragment "nZJdb9owFIb%2FSuRblNhJQ0ktkqoTo2Pio6IwVm4m4zg0IrGDj8OAXz8TStVWWy9244vz9T7nPe7e7svC2QkNuZIx8j2CHCG5SnO5jtF81ncjdJt0gZVFUNGhWqvaTMW2FmAc2ymBnlMxqrWkikEOVLJSADWcPt6NhjTwCK20MoqrAjk925hLZhq1Z2MqoBgzyYqDyTmEHtScC4CMcaM0eFyV%2BEGrtOanDvxNl8WZwWNQ7ZEz6MXoF0lJthLhtdsJfOKGrO27keC%2Bm64ykpEoWrVTYUsBajGQYJg0MQpI4LskcIk%2FCwgNfBreeO3wZomcqWBwgvtsn6JhoDUIjZwfF%2FNsBr1YRRs1%2FdaizycysLNOO6Lk4koldKZ0ySQX9mFrof9qD2Q4Tyt8mhRgG6iYPOCZ4JsufotyARtb6UHvf8Cc%2FonG%2FLvc9%2FwmkqduA24NklAJnme5SFEys6e%2Fq40qm%2Btf6M48rz%2Fs0W5nswOZin2yuwqL%2BfH56YovxCbY7qPJcnM%2F37TwT7XuzfnXdeuBDJ%2FCxeG602sVmA%2BPZNw%2FprpdDJdfvpdkdN8Z7ca65eNpNNlOl%2F3NIpv8juMX7Q9qr9F3vzz5Aw%3D%3D" with variable 'C_SAMLRequest6' on all occurrences

		String requestHeader0404 = "GET " + requestFile0404 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0404, requestHost0404, requestPort0404, requestHeader0404, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0404 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 362
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "location.href = 'Resources/Documents/Saml2SingleLogout.htm';");		// Test [404] <- Index 404
		if(replayMode)
		{
			long proxyDataRecordId =1612210910613L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [405] <- WEB ADMIN Index 409 ---
		String requestProt0405 = "https";
		String requestHost0405 = "teck.wfsaas.ca";
		int    requestPort0405 = 443;
		String requestFile0405 = "/workforce/SSO.do" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest7) +		// recorded value = nZJdb9owFIb%2FSuRblDgxKR8WAXViVExAJj7Gys3kOg6NktjBxwHKr59JS9VNWi9244tzjs%2F7vK89GJ3LwjkKDZmSEQo8HzlCcpVkch%2BhzXri9tBoOABWFqSiM7VXtVmKQy3AOPamBPrailCtJVUMMqCSlQKo4XR1P59R4vm00soorgrkjO3FTDLTqD0bUwHF2Aiee6cUGAOPM3xSOk%2BV5gKvVrGXqBHjzTyAsgBxmiJnOo7QL9HvhEmn33FD9sTcMOmmbp93ucu6fniXpk%2BJHxI7ClCLqQTDpIkQ8Ung%2BsT1gzXxKQlo2PdIm%2ByQsxQMrlCf%2BSga%2F7QGoZHz4xaa7aC3iGijpj9G8%2FlGBnbX1R0a3tKohLbuSya5sAfbCx16UHMuAFKbhNI2JFViSHGWVPi6iWBbqJh8wWub5AB%2FRLmBLaz0dPw%2FYM7kSmP%2BPR54QVPJErcBtwFJqATP0kwkaLi2T35fG1U2r36je%2BV5%2F1kr6852pzIR5%2BGxHRaby%2FNjm29FTg7nXrzLHzZ5C%2F9U%2B%2FGGf923vvuzx3D70umOWwXms4u%2FmFwSfVfMdl%2B%2Blf78oTs%2FLnQrwMtefFjuJvk2jU9R9Kb9l9p79Y%2FfPfwN
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=fiAkb%2Bah50m0NsTrajErksvINDhTeDLsJzNrb1m9rRGFByAyVqKE7xCGqRez1Gw3ae3QiWVktcHeWtX%2By%2BdKNpg0bquwoHKIMx4Ri0e7Zq9LKv5ojpxF2ZQepA0VB4tUL9wyEa5V4z5emURne3tL98uHG4l5wRTLuWrx38fKT3s%3D";
		requestFile0405 = Lib.replaceTextPattern(requestFile0405, "nZJdb9owFIb%2FSuRblDgxKR8WAXViVExAJj7Gys3kOg6NktjBxwHKr59JS9VNWi9244tzjs%2F7vK89GJ3LwjkKDZmSEQo8HzlCcpVkch%2BhzXri9tBoOABWFqSiM7VXtVmKQy3AOPamBPrailCtJVUMMqCSlQKo4XR1P59R4vm00soorgrkjO3FTDLTqD0bUwHF2Aiee6cUGAOPM3xSOk%2BV5gKvVrGXqBHjzTyAsgBxmiJnOo7QL9HvhEmn33FD9sTcMOmmbp93ucu6fniXpk%2BJHxI7ClCLqQTDpIkQ8Ung%2BsT1gzXxKQlo2PdIm%2ByQsxQMrlCf%2BSga%2F7QGoZHz4xaa7aC3iGijpj9G8%2FlGBnbX1R0a3tKohLbuSya5sAfbCx16UHMuAFKbhNI2JFViSHGWVPi6iWBbqJh8wWub5AB%2FRLmBLaz0dPw%2FYM7kSmP%2BPR54QVPJErcBtwFJqATP0kwkaLi2T35fG1U2r36je%2BV5%2F1kr6852pzIR5%2BGxHRaby%2FNjm29FTg7nXrzLHzZ5C%2F9U%2B%2FGGf923vvuzx3D70umOWwXms4u%2FmFwSfVfMdl%2B%2Blf78oTs%2FLnQrwMtefFjuJvk2jU9R9Kb9l9p79Y%2FfPfwN", java.net.URLEncoder.encode(C_SAMLRequest7), 0);		// search and replace request file fragment "nZJdb9owFIb%2FSuRblDgxKR8WAXViVExAJj7Gys3kOg6NktjBxwHKr59JS9VNWi9244tzjs%2F7vK89GJ3LwjkKDZmSEQo8HzlCcpVkch%2BhzXri9tBoOABWFqSiM7VXtVmKQy3AOPamBPrailCtJVUMMqCSlQKo4XR1P59R4vm00soorgrkjO3FTDLTqD0bUwHF2Aiee6cUGAOPM3xSOk%2BV5gKvVrGXqBHjzTyAsgBxmiJnOo7QL9HvhEmn33FD9sTcMOmmbp93ucu6fniXpk%2BJHxI7ClCLqQTDpIkQ8Ung%2BsT1gzXxKQlo2PdIm%2ByQsxQMrlCf%2BSga%2F7QGoZHz4xaa7aC3iGijpj9G8%2FlGBnbX1R0a3tKohLbuSya5sAfbCx16UHMuAFKbhNI2JFViSHGWVPi6iWBbqJh8wWub5AB%2FRLmBLaz0dPw%2FYM7kSmP%2BPR54QVPJErcBtwFJqATP0kwkaLi2T35fG1U2r36je%2BV5%2F1kr6852pzIR5%2BGxHRaby%2FNjm29FTg7nXrzLHzZ5C%2F9U%2B%2FGGf923vvuzx3D70umOWwXms4u%2FmFwSfVfMdl%2B%2Blf78oTs%2FLnQrwMtefFjuJvk2jU9R9Kb9l9p79Y%2FfPfwN" with variable 'C_SAMLRequest7' on all occurrences

		String requestHeader0405 = "GET " + requestFile0405 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.wfsaas.ca\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0405, requestHost0405, requestPort0405, requestHeader0405, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0405 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 834
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "you must press the Continue button once to proceed.");		// Test [405] <- Index 405
		if(replayMode)
		{
			long proxyDataRecordId =1612210910773L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [406] <- WEB ADMIN Index 410 ---
		log();
		log("# title: Onboarding");
		String requestProt0406 = "https";
		String requestHost0406 = "onboarding4.successfactors.com";
		int    requestPort0406 = 443;
		String requestFile0406 = "/ONB/SSO/SAML20/SingleLogoutService.aspx" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest9) +		// recorded value = nZJRb9owFIX%2FSuRXlNhxQgkWoWrFqJiATATGysvkOg6NSOxgO5Ty62dCqbpp68Ne%2FHDv9T3fPTqD22NVOgeudCFFDHwPAYcLJrNCbGOwWo7dCNwOB5pWJa7JVG5lYxZ833BtHPtTaHJpxaBRgkiqC00ErbgmhpH0bjYl2EOkVtJIJkvgjOzHQlDTqj0bU2sCoRRPkqqzZOjphjGudU6ZkUp7TFYwmd%2FDNE3geR1GMLVzJb%2BgpFwdCsY9qusjcCajGPwMopw%2BdXPshj2cuWGUBW4%2F9DM3CsIb3Ec0QEFmR7Vu%2BERoQ4WJAUbYdxF2kb%2FEiGCfhH0v6HY3wFlwqs%2Bon11Xtiik0VwB5%2FvVStsBb8aRVk19NOzzjVTbXWePwPDqUc1VLlVFBeP2oVuu%2FuqVzmGR1ReroC3UVLzCJWe7AfyIcgWbW%2BnJ6H%2FAnPGZxvx73Pf8tlJkbgtuDRK65qzIC56B4dIG4a4xsmqzcKW78LznLbXX2e5EZPw4PARhuTo9PwZszXd4f4ySze5htevAH3I7WrEv2843NH0M1683vVGnhGx6QvPxKVPdcrq5%2F1qh2UNvdpirjg8XUbJfbMa7dZ68xPGb9h9q79XfMj%2F8BQ%3D%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=GO5MFxF9EgLyped7KVIC9CWwW94mBsZ45NtuD29zu9Vb3ZOpRF9nbdvK5z4pZDAwmSRKcbySetqzBDxrGTYOJPtJ8r2L3q2DnG7jjge6tNksLy%2FDxJPtXse2pjFYVd9sW5Ie147U9Q9J4isbqt9HT5Yymb3iz1RB9gbmHep5t0s%3D";
		requestFile0406 = Lib.replaceTextPattern(requestFile0406, "nZJRb9owFIX%2FSuRXlNhxQgkWoWrFqJiATATGysvkOg6NSOxgO5Ty62dCqbpp68Ne%2FHDv9T3fPTqD22NVOgeudCFFDHwPAYcLJrNCbGOwWo7dCNwOB5pWJa7JVG5lYxZ833BtHPtTaHJpxaBRgkiqC00ErbgmhpH0bjYl2EOkVtJIJkvgjOzHQlDTqj0bU2sCoRRPkqqzZOjphjGudU6ZkUp7TFYwmd%2FDNE3geR1GMLVzJb%2BgpFwdCsY9qusjcCajGPwMopw%2BdXPshj2cuWGUBW4%2F9DM3CsIb3Ec0QEFmR7Vu%2BERoQ4WJAUbYdxF2kb%2FEiGCfhH0v6HY3wFlwqs%2Bon11Xtiik0VwB5%2FvVStsBb8aRVk19NOzzjVTbXWePwPDqUc1VLlVFBeP2oVuu%2FuqVzmGR1ReroC3UVLzCJWe7AfyIcgWbW%2BnJ6H%2FAnPGZxvx73Pf8tlJkbgtuDRK65qzIC56B4dIG4a4xsmqzcKW78LznLbXX2e5EZPw4PARhuTo9PwZszXd4f4ySze5htevAH3I7WrEv2843NH0M1683vVGnhGx6QvPxKVPdcrq5%2F1qh2UNvdpirjg8XUbJfbMa7dZ68xPGb9h9q79XfMj%2F8BQ%3D%3D", java.net.URLEncoder.encode(C_SAMLRequest9), 0);		// search and replace request file fragment "nZJRb9owFIX%2FSuRXlNhxQgkWoWrFqJiATATGysvkOg6NSOxgO5Ty62dCqbpp68Ne%2FHDv9T3fPTqD22NVOgeudCFFDHwPAYcLJrNCbGOwWo7dCNwOB5pWJa7JVG5lYxZ833BtHPtTaHJpxaBRgkiqC00ErbgmhpH0bjYl2EOkVtJIJkvgjOzHQlDTqj0bU2sCoRRPkqqzZOjphjGudU6ZkUp7TFYwmd%2FDNE3geR1GMLVzJb%2BgpFwdCsY9qusjcCajGPwMopw%2BdXPshj2cuWGUBW4%2F9DM3CsIb3Ec0QEFmR7Vu%2BERoQ4WJAUbYdxF2kb%2FEiGCfhH0v6HY3wFlwqs%2Bon11Xtiik0VwB5%2FvVStsBb8aRVk19NOzzjVTbXWePwPDqUc1VLlVFBeP2oVuu%2FuqVzmGR1ReroC3UVLzCJWe7AfyIcgWbW%2BnJ6H%2FAnPGZxvx73Pf8tlJkbgtuDRK65qzIC56B4dIG4a4xsmqzcKW78LznLbXX2e5EZPw4PARhuTo9PwZszXd4f4ySze5htevAH3I7WrEv2843NH0M1683vVGnhGx6QvPxKVPdcrq5%2F1qh2UNvdpirjg8XUbJfbMa7dZ68xPGb9h9q79XfMj%2F8BQ%3D%3D" with variable 'C_SAMLRequest9' on all occurrences

		String requestHeader0406 = "GET " + requestFile0406 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0406, requestHost0406, requestPort0406, requestHeader0406, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0406 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1175
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "var topMostFrame = getTopmostFrame();");		// Test [406] <- Index 406
		if(replayMode)
		{
			long proxyDataRecordId =1612210911283L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_VValue'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0406_1 = new BoundaryBasedExtractorItem( "scripts.ashx?v=" , "\">",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0406_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_VValue'
			C_VValue = boundaryBasedContentExtractorItem0406_1.getResultText();
			log("<<< C_VValue = " + C_VValue);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_VValue!= null && C_VValue.trim().length() == 0)
			{
				C_VValue = "";
				log("runtime note: the extraction of a new value for the variable 'C_VValue' ends up with an empty string - a substitute value was set");
				log("<<< C_VValue = " + C_VValue);
			}
		}
		catch (Exception e) { C_VValue = null; log(e); }
		if (C_VValue == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_VValue' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [407] <- WEB ADMIN Index 411 ---
		log();
		log("# title: Login");
		String requestProt0407 = "https";
		String requestHost0407 = "teck.plateau.com";
		int    requestPort0407 = 443;
		String requestFile0407 = "/learning/saml/SSO" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest10) +		// recorded value = nZJdb9owFIb%2FSuRblDgJKQSLUHXKqJj4mPgoKzeTZ5%2FQiMQOtsMov35OWqqu0nqxG1%2Bcr%2Fc57%2FHw9lwWzgmUzqVIUOD5yAHBJM%2FFPkGb9diN0e1oqGlZhBWZyr2szRKONWjj2E6hyUsqQbUSRFKdayJoCZoYRlZ3sykJPZ9UShrJZIGc1DbmgppW7cmYShOMDbCDVxXUAK09JktcAFXCEuBmOF6tFsiZpAn6OehmrM9j7v7q9QZuBBzcGFjsQhwzSmPeB8ZtqdY1TIQ2VJgEhX4YuH7o%2BsE69EkYkGjghfHNDjlLoLrB%2BIy8aDcmtQaFnIerTTaDXk0hrZp6b8bnE6m2s5r90ei6fwUqk6qkgoF96B5U5OmaMdA6o8xIpVtXdIZzXuFmUohtoKLiGa%2Btd0P8HuUKNrfSk%2FR%2FwJxxQ2P%2BXR54QRvJuduCW4OEroDlWQ4cjdb2yHe1kWV75yvdC8%2FbX1rZ7Wx2IjicR6duVGwuT49dtoVDeDzHi93hfnPo4B9yn27Y133nuz99jLbPvX7aKTCbXvz5%2BMLVTTHdfflW%2BrP7%2Fuw0V50AL%2BPFcbkbH7bZ4neSvGp%2FUHuL%2FvWfR38A
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=OwOZ6t5mhkkmE1G7K%2BT76ei%2F3%2FLzyvMw7A9t3BwZLvQjiDjOZ4UQ%2FtiJY8hIFcciIS533MmPQLQxNo0zrtrsJ9RDFS5xWp0cFQJjQMCwwFPMT7VhBwBRJPPgC4l0mzspe7W5uX2BeMYnhfriQQ28aAh4R58mJpTtneliG8JlUts%3D";
		requestFile0407 = Lib.replaceTextPattern(requestFile0407, "nZJdb9owFIb%2FSuRblDgJKQSLUHXKqJj4mPgoKzeTZ5%2FQiMQOtsMov35OWqqu0nqxG1%2Bcr%2Fc57%2FHw9lwWzgmUzqVIUOD5yAHBJM%2FFPkGb9diN0e1oqGlZhBWZyr2szRKONWjj2E6hyUsqQbUSRFKdayJoCZoYRlZ3sykJPZ9UShrJZIGc1DbmgppW7cmYShOMDbCDVxXUAK09JktcAFXCEuBmOF6tFsiZpAn6OehmrM9j7v7q9QZuBBzcGFjsQhwzSmPeB8ZtqdY1TIQ2VJgEhX4YuH7o%2BsE69EkYkGjghfHNDjlLoLrB%2BIy8aDcmtQaFnIerTTaDXk0hrZp6b8bnE6m2s5r90ei6fwUqk6qkgoF96B5U5OmaMdA6o8xIpVtXdIZzXuFmUohtoKLiGa%2Btd0P8HuUKNrfSk%2FR%2FwJxxQ2P%2BXR54QRvJuduCW4OEroDlWQ4cjdb2yHe1kWV75yvdC8%2FbX1rZ7Wx2IjicR6duVGwuT49dtoVDeDzHi93hfnPo4B9yn27Y133nuz99jLbPvX7aKTCbXvz5%2BMLVTTHdfflW%2BrP7%2Fuw0V50AL%2BPFcbkbH7bZ4neSvGp%2FUHuL%2FvWfR38A", java.net.URLEncoder.encode(C_SAMLRequest10), 0);		// search and replace request file fragment "nZJdb9owFIb%2FSuRblDgJKQSLUHXKqJj4mPgoKzeTZ5%2FQiMQOtsMov35OWqqu0nqxG1%2Bcr%2Fc57%2FHw9lwWzgmUzqVIUOD5yAHBJM%2FFPkGb9diN0e1oqGlZhBWZyr2szRKONWjj2E6hyUsqQbUSRFKdayJoCZoYRlZ3sykJPZ9UShrJZIGc1DbmgppW7cmYShOMDbCDVxXUAK09JktcAFXCEuBmOF6tFsiZpAn6OehmrM9j7v7q9QZuBBzcGFjsQhwzSmPeB8ZtqdY1TIQ2VJgEhX4YuH7o%2BsE69EkYkGjghfHNDjlLoLrB%2BIy8aDcmtQaFnIerTTaDXk0hrZp6b8bnE6m2s5r90ei6fwUqk6qkgoF96B5U5OmaMdA6o8xIpVtXdIZzXuFmUohtoKLiGa%2Btd0P8HuUKNrfSk%2FR%2FwJxxQ2P%2BXR54QRvJuduCW4OEroDlWQ4cjdb2yHe1kWV75yvdC8%2FbX1rZ7Wx2IjicR6duVGwuT49dtoVDeDzHi93hfnPo4B9yn27Y133nuz99jLbPvX7aKTCbXvz5%2BMLVTTHdfflW%2BrP7%2Fuw0V50AL%2BPFcbkbH7bZ4neSvGp%2FUHuL%2FvWfR38A" with variable 'C_SAMLRequest10' on all occurrences

		String requestHeader0407 = "GET " + requestFile0407 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.plateau.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0407, requestHost0407, requestPort0407, requestHeader0407, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0407 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 523
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "You must correct the following error(s) before proceeding:");		// Test [407] <- Index 407
		if(replayMode)
		{
			long proxyDataRecordId =1612210912158L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_MOD3'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0407_1 = new BoundaryBasedExtractorItem( "<link rel=\"stylesheet\" href=\"/learning/user/css/styles.css;mod=" , "\" type=\"text/css\">",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0407_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_MOD3'
			C_MOD3 = boundaryBasedContentExtractorItem0407_1.getResultText();
			log("<<< C_MOD3 = " + C_MOD3);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_MOD3!= null && C_MOD3.trim().length() == 0)
			{
				C_MOD3 = "";
				log("runtime note: the extraction of a new value for the variable 'C_MOD3' ends up with an empty string - a substitute value was set");
				log("<<< C_MOD3 = " + C_MOD3);
			}
		}
		catch (Exception e) { C_MOD3 = null; log(e); }
		if (C_MOD3 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_MOD3' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [408] <- WEB ADMIN Index 412 ---
		String requestProt0408 = "https";
		String requestHost0408 = "okkrtwkpyfmrqckrenxirty.us2.sac.successfactors.com";
		int    requestPort0408 = 443;
		String requestFile0408 = "/application/logout" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest11) +		// recorded value = nZJdb9owFIb%2FSuRblNgxgQSLUHViVEx8VBTGys1kHIdGSexgOxT49TOhVN209WI3vjhf73Nen%2F7dsSycA1c6kyIGvoeAwwWTSSZ2MVgtR24E7gZ9TcsCV2Qid7I2C76vuTaO7RSaXFMxqJUgkupME0FLrolh5Ol%2BOiHYQ6RS0kgmC%2BAMbWMmqGnUXoypNIFQ5rkyr3l1Sku1Z7ni4pgpc%2FJqjT1NmadrxrjWKWVGKu0xWUJaVUXGmjmwaKiAMx7G4Genu00iHnbcIAlDN2AocrccY5eF3V4UoE5722a2VOuaj4U2VJgYYIR9F2EX%2BUuMCPZJ0PPaqLcBzoJTfSH9bLmrPKk1V8D5fnPSZsCbb6RRUx%2F9%2Bnwi1XbWZTUwuFlUcZVKVVLBuH3ojqvgb7boFGZJBS%2BTMLSBiooTXHKW9%2BFHlBvYzEqPh%2F8D5owuNObf5b7nN5EscRtwa5DQFWdZmvEEDJb2Du5rI8vmC290V573c3uy29nsWCT8ODi0g2J1fnluszXP8f4YzTf5wypvwR9yN1yxr7vWI5o8B%2BtTNxy2CsgmZzQbnRPVKSabL99KNH0Ip4eZavlwEc33i80oX6fz1zh%2B0%2F5D7T3628kPfgE%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=OIK6ER0%2BsPEu2pPCQKHQrZTv1AjHnq3azmjoaxSuZrfWXOvwapTkMaO%2BDUSbjfQpLVGJBfAiPIffbbiNc9YASi8Y76hGt%2FuVWQs%2FY0bzpnfbIwWdmAOkU9nirRQ%2FZjYdXrSIth635P5B8CvPd4VjRR9foa4ajqdAcjqV1mcBaCM%3D";
		requestFile0408 = Lib.replaceTextPattern(requestFile0408, "nZJdb9owFIb%2FSuRblNgxgQSLUHViVEx8VBTGys1kHIdGSexgOxT49TOhVN209WI3vjhf73Nen%2F7dsSycA1c6kyIGvoeAwwWTSSZ2MVgtR24E7gZ9TcsCV2Qid7I2C76vuTaO7RSaXFMxqJUgkupME0FLrolh5Ol%2BOiHYQ6RS0kgmC%2BAMbWMmqGnUXoypNIFQ5rkyr3l1Sku1Z7ni4pgpc%2FJqjT1NmadrxrjWKWVGKu0xWUJaVUXGmjmwaKiAMx7G4Genu00iHnbcIAlDN2AocrccY5eF3V4UoE5722a2VOuaj4U2VJgYYIR9F2EX%2BUuMCPZJ0PPaqLcBzoJTfSH9bLmrPKk1V8D5fnPSZsCbb6RRUx%2F9%2Bnwi1XbWZTUwuFlUcZVKVVLBuH3ojqvgb7boFGZJBS%2BTMLSBiooTXHKW9%2BFHlBvYzEqPh%2F8D5owuNObf5b7nN5EscRtwa5DQFWdZmvEEDJb2Du5rI8vmC290V573c3uy29nsWCT8ODi0g2J1fnluszXP8f4YzTf5wypvwR9yN1yxr7vWI5o8B%2BtTNxy2CsgmZzQbnRPVKSabL99KNH0Ip4eZavlwEc33i80oX6fz1zh%2B0%2F5D7T3628kPfgE%3D", java.net.URLEncoder.encode(C_SAMLRequest11), 0);		// search and replace request file fragment "nZJdb9owFIb%2FSuRblNgxgQSLUHViVEx8VBTGys1kHIdGSexgOxT49TOhVN209WI3vjhf73Nen%2F7dsSycA1c6kyIGvoeAwwWTSSZ2MVgtR24E7gZ9TcsCV2Qid7I2C76vuTaO7RSaXFMxqJUgkupME0FLrolh5Ol%2BOiHYQ6RS0kgmC%2BAMbWMmqGnUXoypNIFQ5rkyr3l1Sku1Z7ni4pgpc%2FJqjT1NmadrxrjWKWVGKu0xWUJaVUXGmjmwaKiAMx7G4Genu00iHnbcIAlDN2AocrccY5eF3V4UoE5722a2VOuaj4U2VJgYYIR9F2EX%2BUuMCPZJ0PPaqLcBzoJTfSH9bLmrPKk1V8D5fnPSZsCbb6RRUx%2F9%2Bnwi1XbWZTUwuFlUcZVKVVLBuH3ojqvgb7boFGZJBS%2BTMLSBiooTXHKW9%2BFHlBvYzEqPh%2F8D5owuNObf5b7nN5EscRtwa5DQFWdZmvEEDJb2Du5rI8vmC290V573c3uy29nsWCT8ODi0g2J1fnluszXP8f4YzTf5wypvwR9yN1yxr7vWI5o8B%2BtTNxy2CsgmZzQbnRPVKSabL99KNH0Ip4eZavlwEc33i80oX6fz1zh%2B0%2F5D7T3628kPfgE%3D" with variable 'C_SAMLRequest11' on all occurrences

		String requestHeader0408 = "GET " + requestFile0408 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: okkrtwkpyfmrqckrenxirty.us2.sac.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0408, requestHost0408, requestPort0408, requestHeader0408, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0408 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2982
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Note: Your browser does not support JavaScript or it is turned off. Press the button to proceed.");		// Test [408] <- Index 408
		if(replayMode)
		{
			long proxyDataRecordId =1612210912221L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		contentTokenExtractor = new ContentTokenExtractor(testURL.getContentString());

		// setup var extractor for 'C_TenantID'
		ContentTokenExtractorItem contentTokenExtractorItem0408_1 = new ContentTokenExtractorItem("tenantId", "\t\n\r \"(),={}", 2);
		contentTokenExtractor.addTokenExtractorItem(contentTokenExtractorItem0408_1);

		contentTokenExtractor.extractTokens();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_IDPName'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0408_1 = new BoundaryBasedExtractorItem( "hidden\" name=\"idpName\" value=\"" , "\"/>",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0408_1);

		// setup var extractor for 'C_Signature4'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0408_2 = new BoundaryBasedExtractorItem( "<input type=\"hidden\" name=\"signature\" value=\"" , "\"/>",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0408_2);

		// setup var extractor for 'C_SAMLRequest3'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0408_3 = new BoundaryBasedExtractorItem( "name=\"requestId\" value=\"" , "\"/>",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0408_3);

		// setup var extractor for 'C_RequestURI'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0408_4 = new BoundaryBasedExtractorItem( "name=\"requestUrl\" value=\"" , "\"/>",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0408_4);

		// setup var extractor for 'C_RelayState2'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0408_5 = new BoundaryBasedExtractorItem( "<input type=\"hidden\" name=\"relayState\" value=\"" , "\"/>",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0408_5);

		// setup var extractor for 'C_SAMLRequestID'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0408_6 = new BoundaryBasedExtractorItem( "<input type=\"hidden\" name=\"requestId\" value=\"" , "\"/>",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0408_6);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_IDPName'
			C_IDPName = boundaryBasedContentExtractorItem0408_1.getResultText();
			log("<<< C_IDPName = " + C_IDPName);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_IDPName!= null && C_IDPName.trim().length() == 0)
			{
				C_IDPName = "";
				log("runtime note: the extraction of a new value for the variable 'C_IDPName' ends up with an empty string - a substitute value was set");
				log("<<< C_IDPName = " + C_IDPName);
			}
		}
		catch (Exception e) { C_IDPName = null; log(e); }
		if (C_IDPName == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_IDPName' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_Signature4'
			C_Signature4 = boundaryBasedContentExtractorItem0408_2.getResultText();
			log("<<< C_Signature4 = " + C_Signature4);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Signature4!= null && C_Signature4.trim().length() == 0)
			{
				C_Signature4 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Signature4' ends up with an empty string - a substitute value was set");
				log("<<< C_Signature4 = " + C_Signature4);
			}
		}
		catch (Exception e) { C_Signature4 = null; log(e); }
		if (C_Signature4 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Signature4' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_TenantID'
			C_TenantID = contentTokenExtractorItem0408_1.getResultToken();
			log("<<< C_TenantID = " + C_TenantID);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_TenantID!= null && C_TenantID.trim().length() == 0)
			{
				C_TenantID = "";
				log("runtime note: the extraction of a new value for the variable 'C_TenantID' ends up with an empty string - a substitute value was set");
				log("<<< C_TenantID = " + C_TenantID);
			}
		}
		catch (Exception e) { C_TenantID = null; log(e); }
		if (C_TenantID == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_TenantID' from content token pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_SAMLRequest3'
			C_SAMLRequest3 = boundaryBasedContentExtractorItem0408_3.getResultText();
			log("<<< C_SAMLRequest3 = " + C_SAMLRequest3);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest3!= null && C_SAMLRequest3.trim().length() == 0)
			{
				C_SAMLRequest3 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest3' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest3 = " + C_SAMLRequest3);
			}
		}
		catch (Exception e) { C_SAMLRequest3 = null; log(e); }
		if (C_SAMLRequest3 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest3' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_RequestURI'
			C_RequestURI = boundaryBasedContentExtractorItem0408_4.getResultText();
			log("<<< C_RequestURI = " + C_RequestURI);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_RequestURI!= null && C_RequestURI.trim().length() == 0)
			{
				C_RequestURI = "";
				log("runtime note: the extraction of a new value for the variable 'C_RequestURI' ends up with an empty string - a substitute value was set");
				log("<<< C_RequestURI = " + C_RequestURI);
			}
		}
		catch (Exception e) { C_RequestURI = null; log(e); }
		if (C_RequestURI == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_RequestURI' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_RelayState2'
			C_RelayState2 = boundaryBasedContentExtractorItem0408_5.getResultText();
			log("<<< C_RelayState2 = " + C_RelayState2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_RelayState2!= null && C_RelayState2.trim().length() == 0)
			{
				C_RelayState2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_RelayState2' ends up with an empty string - a substitute value was set");
				log("<<< C_RelayState2 = " + C_RelayState2);
			}
		}
		catch (Exception e) { C_RelayState2 = null; log(e); }
		if (C_RelayState2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_RelayState2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_SAMLRequestID'
			C_SAMLRequestID = boundaryBasedContentExtractorItem0408_6.getResultText();
			log("<<< C_SAMLRequestID = " + C_SAMLRequestID);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequestID!= null && C_SAMLRequestID.trim().length() == 0)
			{
				C_SAMLRequestID = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequestID' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequestID = " + C_SAMLRequestID);
			}
		}
		catch (Exception e) { C_SAMLRequestID = null; log(e); }
		if (C_SAMLRequestID == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequestID' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [409] <- WEB ADMIN Index 413 ---
		log();
		log("# title: Page not found");
		String requestProt0409 = "https";
		String requestHost0409 = "job-v3.multiposting.fr";
		int    requestPort0409 = 443;
		String requestFile0409 = "/saml2/" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest12) +		// recorded value = nZJdb9owFIb%2FSuRblNhxwggWoerEqJgCTBTGys3kOk6akdjBdijl189JS9VVai92Y8nn633Ox%2BjqVJXOkStdSBED30PA4YLJtBB5DDbrqRuBq%2FFI06rENUlkLhuz4oeGa%2BPYTKHJsysGjRJEUl1oImjFNTGM3F7PE4I9RGoljWSyBM7EJhaCmk7twZhaEwj%2FyHv3GHhVU5qilm1A7mUKdpUhcGaTGPwesH6Q3vcHru8PAjdkKHSHfRbZL2c8YthHaWZDtW74TGhDhYkBRth3EXaRv8aIYJ%2BEQy9Awx1wVpzqluAz6LJrljSaK%2BD8vEzIesDLPEinpt7O4fOKVNtabetgfGm95iqTqqKCcfvQnKvQ0w1jXOuMMiOV9pisoM5gkdawrYShNdRUPME1Z%2FsRfItyAVtY6dnkf8CcaUtjPg73Pb%2BzFKnbgdsBCV1zVmQFT8F4bfd73RhZdSu%2B0D3zvJ7Rre3Oemci5afxMQjLzfnhLmBbvseHU7Tc7W82%2Bx78JfPJhn3Lez9Qchdun74MJr0SsuSMFtNzqvplsvv6vULzm8H8uFA9H66i5WG1m%2B632fIxjl%2B036m9Wv855fFf
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=JUp1lRc4Nlt%2Fse%2BBNWxURxPE%2FuFjA8w6H697wKZ5bzFNpiwFSVEHrMlFBPIHU1XPT1voZojGIU0RWAPxqx8%2BM0VIRtIoBIM6lUsIcPmHcxFOFVy4E82r1OLPZgLt3QXbuQ9ROyrWZY4Ub7R4N3OFCnyn9VO40WJcTKSAkgDmQxc%3D";
		requestFile0409 = Lib.replaceTextPattern(requestFile0409, "nZJdb9owFIb%2FSuRblNhxwggWoerEqJgCTBTGys3kOk6akdjBdijl189JS9VVai92Y8nn633Ox%2BjqVJXOkStdSBED30PA4YLJtBB5DDbrqRuBq%2FFI06rENUlkLhuz4oeGa%2BPYTKHJsysGjRJEUl1oImjFNTGM3F7PE4I9RGoljWSyBM7EJhaCmk7twZhaEwj%2FyHv3GHhVU5qilm1A7mUKdpUhcGaTGPwesH6Q3vcHru8PAjdkKHSHfRbZL2c8YthHaWZDtW74TGhDhYkBRth3EXaRv8aIYJ%2BEQy9Awx1wVpzqluAz6LJrljSaK%2BD8vEzIesDLPEinpt7O4fOKVNtabetgfGm95iqTqqKCcfvQnKvQ0w1jXOuMMiOV9pisoM5gkdawrYShNdRUPME1Z%2FsRfItyAVtY6dnkf8CcaUtjPg73Pb%2BzFKnbgdsBCV1zVmQFT8F4bfd73RhZdSu%2B0D3zvJ7Rre3Oemci5afxMQjLzfnhLmBbvseHU7Tc7W82%2Bx78JfPJhn3Lez9Qchdun74MJr0SsuSMFtNzqvplsvv6vULzm8H8uFA9H66i5WG1m%2B632fIxjl%2B036m9Wv855fFf", java.net.URLEncoder.encode(C_SAMLRequest12), 0);		// search and replace request file fragment "nZJdb9owFIb%2FSuRblNhxwggWoerEqJgCTBTGys3kOk6akdjBdijl189JS9VVai92Y8nn633Ox%2BjqVJXOkStdSBED30PA4YLJtBB5DDbrqRuBq%2FFI06rENUlkLhuz4oeGa%2BPYTKHJsysGjRJEUl1oImjFNTGM3F7PE4I9RGoljWSyBM7EJhaCmk7twZhaEwj%2FyHv3GHhVU5qilm1A7mUKdpUhcGaTGPwesH6Q3vcHru8PAjdkKHSHfRbZL2c8YthHaWZDtW74TGhDhYkBRth3EXaRv8aIYJ%2BEQy9Awx1wVpzqluAz6LJrljSaK%2BD8vEzIesDLPEinpt7O4fOKVNtabetgfGm95iqTqqKCcfvQnKvQ0w1jXOuMMiOV9pisoM5gkdawrYShNdRUPME1Z%2FsRfItyAVtY6dnkf8CcaUtjPg73Pb%2BzFKnbgdsBCV1zVmQFT8F4bfd73RhZdSu%2B0D3zvJ7Rre3Oemci5afxMQjLzfnhLmBbvseHU7Tc7W82%2Bx78JfPJhn3Lez9Qchdun74MJr0SsuSMFtNzqvplsvv6vULzm8H8uFA9H66i5WG1m%2B632fIxjl%2B036m9Wv855fFf" with variable 'C_SAMLRequest12' on all occurrences

		String requestHeader0409 = "GET " + requestFile0409 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: job-v3.multiposting.fr\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0409, requestHost0409, requestPort0409, requestHeader0409, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0409 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 404, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 6341
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {404}, null, null, null);		// Test [409] <- Index 409
		if(replayMode)
		{
			long proxyDataRecordId =1612210912394L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [410] <- WEB ADMIN Index 414 ---
		String requestProt0410 = "https";
		String requestHost0410 = "performancemanager4.successfactors.com";
		int    requestPort0410 = 443;
		String requestFile0410 = "/sf/logout" +
				"?bplte_company=Teck" +
				"&_s.crb=" + vScrb;		// recorded value = Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d
		String requestHeader0410 = "GET " + requestFile0410 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0410, requestHost0410, requestPort0410, requestHeader0410, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0410 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [410] <- Index 410
		if(replayMode)
		{
			long proxyDataRecordId =1612210914351L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		htmlContentParser = new HtmlContentParser(testURL, this);
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'C_SAMLRequest2'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0410_1 = new BoundaryBasedExtractorItem( "SAMLRequest=" , "&",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0410_1);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'vSignature'
			vSignature = testURL.getRedirectLocation().getParameter("Signature");		// recorded value = FpKuAQ97Uzk2T5aeNB1PnIDO4aKnZxIk72n%2FMrCq%2FKPVHTD2%2BeoY02L1VVdBZcGO%2BoJ0E2oYCL3AtT%2BBcQJOwxscfC7tvmV48YDEYQJ4%2BzrWinwc%2FBVL2NF5PJJM2%2BSXROGpBgzF7KynQK%2BbdzYkJlcoy8VYT4nLPKOkhWA0XCo%3D
			log("<<< vSignature = " + vSignature);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && vSignature!= null && vSignature.trim().length() == 0)
			{
				vSignature = "";
				log("runtime note: the extraction of a new value for the variable 'vSignature' ends up with an empty string - a substitute value was set");
				log("<<< vSignature = " + vSignature);
			}
		}
		catch (Exception e) { vSignature = null; log(e); }
		if (vSignature == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'vSignature' from http redirection";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_SAMLRequest2'
			C_SAMLRequest2 = boundaryBasedHeaderExtractorItem0410_1.getResultText();
			log("<<< C_SAMLRequest2 = " + C_SAMLRequest2);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest2!= null && C_SAMLRequest2.trim().length() == 0)
			{
				C_SAMLRequest2 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest2' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest2 = " + C_SAMLRequest2);
			}
		}
		catch (Exception e) { C_SAMLRequest2 = null; log(e); }
		if (C_SAMLRequest2 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest2' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'vSignature_1'
			vSignature_1 = testURL.getRedirectLocation().getParameter("Signature");		// recorded value = FpKuAQ97Uzk2T5aeNB1PnIDO4aKnZxIk72n%2FMrCq%2FKPVHTD2%2BeoY02L1VVdBZcGO%2BoJ0E2oYCL3AtT%2BBcQJOwxscfC7tvmV48YDEYQJ4%2BzrWinwc%2FBVL2NF5PJJM2%2BSXROGpBgzF7KynQK%2BbdzYkJlcoy8VYT4nLPKOkhWA0XCo%3D
			log("<<< vSignature_1 = " + vSignature_1);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && vSignature_1!= null && vSignature_1.trim().length() == 0)
			{
				vSignature_1 = "";
				log("runtime note: the extraction of a new value for the variable 'vSignature_1' ends up with an empty string - a substitute value was set");
				log("<<< vSignature_1 = " + vSignature_1);
			}
		}
		catch (Exception e) { vSignature_1 = null; log(e); }
		if (vSignature_1 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'vSignature_1' from http redirection";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [411] <- WEB ADMIN Index 415 ---
		String requestProt0411 = "https";
		String requestHost0411 = "performancemanager4.successfactors.com";
		int    requestPort0411 = 443;
		String requestFile0411 = "/intake/v2/rum/events";
		String requestContent0411 = 
				"{\"metadata\":{\"service\":{\"name\":\"bizx-cf-web\",\"agent\":{\"name\":\"rum-js\",\"version\":\"5.5.0\"},\"language\":{\"name\":\"javascript\"},\"environment\":\"production\"}}}" + "\r\n" + 
				"{\"error\":{\"id\":\"5bc5963e387366a52b5b63b73e2392f2\",\"culprit\":\"ui/surj/resources_0D669CF44A13E0E9F573CB4E8C114330/sap/sf/surj/shell/library-preload.js?eval\",\"exception\":{\"message\":\"Uncaught TypeError: this._iframeWindow.onbeforeunload is not a function\",\"stacktrace\":[{\"abs_path\":\"https://performancemanager4.successfactors.com/ui/reportcenter/js/view/reportActionView.fragment_43d2c47ebfb46aedc8930741c46c0f55.js\",\"filename\":\"ui/reportcenter/js/view/reportActionView.fragment_43d2c47ebfb46aedc8930741c46c0f55.js\",\"function\":\"<anonymous>\",\"lineno\":4,\"colno\":194},{\"abs_path\":\"https://performancemanager4.successfactors.com/ui/sfgrp/js/SURJUtil_305d4ce02664e4587a9021eb38d00f50.js\",\"filename\":\"ui/sfgrp/js/SURJUtil_305d4ce02664e4587a9021eb38d00f50.js\",\"function\":\"gotoURL\",\"lineno\":6,\"colno\":55},{\"abs_path\":\"https://performancemanager4.successfactors.com/ui/juic/js/Util_ada164a354d018de59a64749919a0f42.js\",\"filename\":\"ui/juic/js/Util_ada164a354d018de59a64749919a0f42.js\",\"function\":\"gotoURL\",\"lineno\":1,\"colno\":145},{\"abs_path\":\"https://performancemanager4.successfactors.com/ui/surj/resources_0D669CF44A13E0E9F573CB4E8C114330/sap/sf/surj/shell/library-preload.js?eval\",\"filename\":\"ui/surj/resources_0D669CF44A13E0E9F573CB4E8C114330/sap/sf/surj/shell/library-preload.js?eval\",\"function\":\"gotoURL\",\"lineno\":294,\"colno\":592},{\"abs_path\":\"https://performancemanager4.successfactors.com/ui/surj/resources_0D669CF44A13E0E9F573CB4E8C114330/sap/sf/surj/shell/library-preload.js?eval\",\"filename\":\"ui/surj/resources_0D669CF44A13E0E9F573CB4E8C114330/sap/sf/surj/shell/library-preload.js?eval\",\"function\":\"logoutCore\",\"lineno\":303,\"colno\":1169},{\"abs_path\":\"https://performancemanager4.successfactors.com/ui/surj/resources_0D669CF44A13E0E9F573CB4E8C114330/sap/sf/surj/shell/library-preload.js?eval\",\"filename\":\"ui/surj/resources_0D669CF44A13E0E9F573CB4E8C114330/sap/sf/surj/shell/library-preload.js?eval\",\"function\":\"eval\",\"lineno\":297,\"colno\":376}],\"type\":\"TypeError\"},\"context\":{\"page\":{\"referer\":\"https://performancemanager4.successfactors.com/sf/start?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\",\"url\":\"https://performancemanager4.successfactors.com/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\"}}}}";
		String requestHeader0411 = "POST " + requestFile0411 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0411.length() + "\r\n" + 		// Content-Length: 2456
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Content-Encoding: gzip\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0411, requestHost0411, requestPort0411, requestHeader0411, requestContent0411.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0411 = null;		// support garbage collector to reduce memory
		requestContent0411 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [411] <- Index 411
		if(replayMode)
		{
			long proxyDataRecordId =1612210914504L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [412] <- WEB ADMIN Index 416 ---
		String requestProt0412 = "https";
		String requestHost0412 = "my030334.payroll.ondemand.com";
		int    requestPort0412 = 443;
		String requestFile0412 = "/sap/saml2/sp/slo/100" +
				"?SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest13) +		// recorded value = nZJdb9owFIb%2FSuRblNhxMj4sQtWJUTHxMVEoKzeTcQyNSOzg4zDg18%2BEUnWV1ovdWefrfc9z3L07Frl3kAYyrRIUBgR5UgmdZmqboMV84LfRXa8LvMhpyUZ6qys7k%2FtKgvVcpwJ2TSWoMoppDhkwxQsJzAr2eD8eMRoQVhpttdA58vquMVPc1mov1pbAMC5OJCJRFAclPxmd54FWqSy4SgOhCwy8xLUIBvfINQ6JMznsJ%2BhXR4pmm6xjv9UiHT92Q3zeXFNf0na8jqKwyWXTlQJUcqjAcmUTRAkNfUJ9Es4pYTRkcSegrWiFvJnkcLH12SZ5TYBVIA3ynm7YXAa9QmK1mnkP5%2FOJHNysCw%2FUu%2FEopdlo4wCICwW%2BlSYOoBJCAmy4sNrAFcwGZ2mJL5ModoGSqxOeS7Hr4vdWbsYmTnrY%2Fx9j3uDixv67PAzCOpKlfm3cAVJQSpFtMpmi3twd%2Fb6yuqjvfnN39fP2tx7ddi47dKc%2F9g5RnC%2FOL8%2BRWMod3R%2Fb09XuYbFr4J9621%2BIb9vGDzJ6jpenZqvfyLEYnclkcE7Nl3y0%2Bvq9IOOH1vgwMY0Qz9rT%2FWw12C03099J8qr9Qe0t%2Btf%2F7v0B
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=JnPmgdBufguD4caukDGV7ReQuciYlYXt09rpi%2BKGrwm2nFQkgkcsPfnEQ%2BxX%2BIAeDuOa99AHl2jIhwFNfIuuuYqUFJH%2FLD%2BcM7TyDXFL%2BZNDMOw88BNrIhMJ0wU%2BqZxL0uzW73pmAF49gRIxTKzFoXDdGH%2BOiLFmUrYhZ%2BblmWw%3D";
		requestFile0412 = Lib.replaceTextPattern(requestFile0412, "nZJdb9owFIb%2FSuRblNhxMj4sQtWJUTHxMVEoKzeTcQyNSOzg4zDg18%2BEUnWV1ovdWefrfc9z3L07Frl3kAYyrRIUBgR5UgmdZmqboMV84LfRXa8LvMhpyUZ6qys7k%2FtKgvVcpwJ2TSWoMoppDhkwxQsJzAr2eD8eMRoQVhpttdA58vquMVPc1mov1pbAMC5OJCJRFAclPxmd54FWqSy4SgOhCwy8xLUIBvfINQ6JMznsJ%2BhXR4pmm6xjv9UiHT92Q3zeXFNf0na8jqKwyWXTlQJUcqjAcmUTRAkNfUJ9Es4pYTRkcSegrWiFvJnkcLH12SZ5TYBVIA3ynm7YXAa9QmK1mnkP5%2FOJHNysCw%2FUu%2FEopdlo4wCICwW%2BlSYOoBJCAmy4sNrAFcwGZ2mJL5ModoGSqxOeS7Hr4vdWbsYmTnrY%2Fx9j3uDixv67PAzCOpKlfm3cAVJQSpFtMpmi3twd%2Fb6yuqjvfnN39fP2tx7ddi47dKc%2F9g5RnC%2FOL8%2BRWMod3R%2Fb09XuYbFr4J9621%2BIb9vGDzJ6jpenZqvfyLEYnclkcE7Nl3y0%2Bvq9IOOH1vgwMY0Qz9rT%2FWw12C03099J8qr9Qe0t%2Btf%2F7v0B", java.net.URLEncoder.encode(C_SAMLRequest13), 0);		// search and replace request file fragment "nZJdb9owFIb%2FSuRblNhxMj4sQtWJUTHxMVEoKzeTcQyNSOzg4zDg18%2BEUnWV1ovdWefrfc9z3L07Frl3kAYyrRIUBgR5UgmdZmqboMV84LfRXa8LvMhpyUZ6qys7k%2FtKgvVcpwJ2TSWoMoppDhkwxQsJzAr2eD8eMRoQVhpttdA58vquMVPc1mov1pbAMC5OJCJRFAclPxmd54FWqSy4SgOhCwy8xLUIBvfINQ6JMznsJ%2BhXR4pmm6xjv9UiHT92Q3zeXFNf0na8jqKwyWXTlQJUcqjAcmUTRAkNfUJ9Es4pYTRkcSegrWiFvJnkcLH12SZ5TYBVIA3ynm7YXAa9QmK1mnkP5%2FOJHNysCw%2FUu%2FEopdlo4wCICwW%2BlSYOoBJCAmy4sNrAFcwGZ2mJL5ModoGSqxOeS7Hr4vdWbsYmTnrY%2Fx9j3uDixv67PAzCOpKlfm3cAVJQSpFtMpmi3twd%2Fb6yuqjvfnN39fP2tx7ddi47dKc%2F9g5RnC%2FOL8%2BRWMod3R%2Fb09XuYbFr4J9621%2BIb9vGDzJ6jpenZqvfyLEYnclkcE7Nl3y0%2Bvq9IOOH1vgwMY0Qz9rT%2FWw12C03099J8qr9Qe0t%2Btf%2F7v0B" with variable 'C_SAMLRequest13' on all occurrences

		String requestHeader0412 = "GET " + requestFile0412 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: my030334.payroll.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0412, requestHost0412, requestPort0412, requestHeader0412, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0412 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 2758
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Since your browser does notsupport JavaScript, you must press the Continuebutton once to");		// Test [412] <- Index 412
		if(replayMode)
		{
			long proxyDataRecordId =1612210915153L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLResponse3'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0412_1 = new BoundaryBasedExtractorItem( "name=\"SAMLResponse\" value=" , ";\">",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0412_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLResponse3'
			C_SAMLResponse3 = boundaryBasedContentExtractorItem0412_1.getResultText();
			log("<<< C_SAMLResponse3 = " + C_SAMLResponse3);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLResponse3!= null && C_SAMLResponse3.trim().length() == 0)
			{
				C_SAMLResponse3 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLResponse3' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLResponse3 = " + C_SAMLResponse3);
			}
		}
		catch (Exception e) { C_SAMLResponse3 = null; log(e); }
		if (C_SAMLResponse3 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLResponse3' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [413] <- WEB ADMIN Index 417 ---
		String requestProt0413 = "https";
		String requestHost0413 = "teck.plateau.com";
		int    requestPort0413 = 443;
		String requestFile0413 = "/learning/user/css/styles.css;mod=7dffb5a2";
		requestFile0413 = Lib.replaceTextPattern(requestFile0413, "7dffb5a2", C_MOD3, 0);		// search and replace request file fragment "7dffb5a2" with variable 'C_MOD3' on all occurrences

		String requestHeader0413 = "GET " + requestFile0413 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.plateau.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0413, requestHost0413, requestPort0413, requestHeader0413, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0413 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 29702
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [413] <- Index 413
		if(replayMode)
		{
			long proxyDataRecordId =1612210916918L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [414] <- WEB ADMIN Index 418 ---
		log();
		log("# title: Logout Processed");
		String requestProt0414 = "https";
		String requestHost0414 = "analytics4.successfactors.com";
		int    requestPort0414 = 443;
		String requestFile0414 = "/Production/Resources/Documents/Saml2SingleLogout.htm";
		String requestHeader0414 = "GET " + requestFile0414 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: analytics4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0414, requestHost0414, requestPort0414, requestHeader0414, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0414 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 173
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Saml Logout Processed.");		// Test [414] <- Index 414
		if(replayMode)
		{
			long proxyDataRecordId =1612210916922L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [415] <- WEB ADMIN Index 419 ---
		String requestProt0415 = "https";
		String requestHost0415 = "performancemanager4.successfactors.com";
		int    requestPort0415 = 443;
		String requestFile0415 = "/sf/idp/SAML2/slo/POST";
		String requestContent0415 = 
				"SAMLResponse=PHNhbWxwOkxvZ291dFJlc3BvbnNlIElEPSJTMDAxNjNlYjMtYjdhYS0xZWRiLTk5OTktNjQxMDQyNTI4MGQzIiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAyMS0wMi0wMVQyMDoyMTo1NVoiIEluUmVzcG9uc2VUbz0iXzllYzY4MGI0LTc3MDktNDMwMy1hNmIyLWUyODRiMzMxNmFlNiIgRGVzdGluYXRpb249Imh0dHBzOi8vcGVyZm9ybWFuY2VtYW5hZ2VyNC5zdWNjZXNzZmFjdG9ycy5jb20vc2YvaWRwL1NBTUwyL3Nsby9QT1NUIiB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48c2FtbDpJc3N1ZXIgeG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2BWE9FQ0wxMDA8L3NhbWw6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkczpTaWduZWRJbmZvPjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8%2BPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPjxkczpSZWZlcmVuY2UgVVJJPSIjUzAwMTYzZWIzLWI3YWEtMWVkYi05OTk5LTY0MTA0MjUyODBkMyI%2BPGRzOlRyYW5zZm9ybXM%2BPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8%2BPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3Jtcz48ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48ZHM6RGlnZXN0VmFsdWU%2BRytKQ2RpaUZEUE9mY2UrV1lVaVZEWlBYTzAwPTwvZHM6RGlnZXN0VmFsdWU%2BPC9kczpSZWZlcmVuY2U%2BPC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5XNlRqMm53UG55T2g2bmZWcVQvTncxTjdHdnFGL2NXTWV6aEorY3NQU0laZHVzaGlqbFpxOTdWWUNEUjZmRUJ6bytSM2VrcS95MXFLClIwMHVzU2YyUjR2L1JCTnA0N2toODZoMXFQeGlablRqNWxyYVBOZXhzcTh5eWNUWFRYOEtScUNFeUdKYitydXVBZ3R5eENiMnFIWUsKVWZ6R2hPWTF2ZFRRMGNiajY3U2NHWlJ3NGx0TDhUV3JxNytRcWlLdTZoWlRuTGMyWEV3MXpiL2hDbmRIOTY4MCtrdnQ2YkdVVUIzYgo2OEo0SEFXYUkycDMwQm95QzNSbjFCZmtYL01PejR0eDlLZlhTWWwyMHNiUHNIQWtTcUlORE4zSjVET0JlS1NKWDUrVVIzYVp2clp6ClFnemMwc1ZaNzRySE04ODljc1Vwd05VYmRIZGUvcElrMjF0NXl3PT08L2RzOlNpZ25hdHVyZVZhbHVlPjwvZHM6U2lnbmF0dXJlPjxzYW1scDpTdGF0dXM%2BPHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6UmVzcG9uZGVyIi8%2BPHNhbWxwOlN0YXR1c01lc3NhZ2U%2BQW4gZXhjZXB0aW9uIHdhcyByYWlzZWQ8L3NhbWxwOlN0YXR1c01lc3NhZ2U%2BPC9zYW1scDpTdGF0dXM%2BPC9zYW1scDpMb2dvdXRSZXNwb25zZT4%3D";
		String requestHeader0415 = "POST " + requestFile0415 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0415.length() + "\r\n" + 		// Content-Length: 2189
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://my030334.payroll.ondemand.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0415, requestHost0415, requestPort0415, requestHeader0415, requestContent0415.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0415 = null;		// support garbage collector to reduce memory
		requestContent0415 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [415] <- Index 415
		if(replayMode)
		{
			long proxyDataRecordId =1612210916923L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [416] <- WEB ADMIN Index 420 ---
		String requestProt0416 = "https";
		String requestHost0416 = "onboarding4.successfactors.com";
		int    requestPort0416 = 443;
		String requestFile0416 = "/ONB/bundles/scripts.ashx" +
				"?v=" + C_VValue;		// recorded value = W_I4YGvd9aXh6QqZymHPRcYdEF3WezRDFWPh79gvbhw1
		requestFile0416 = Lib.replaceTextPattern(requestFile0416, "W_I4YGvd9aXh6QqZymHPRcYdEF3WezRDFWPh79gvbhw1", C_VValue, 0);		// search and replace request file fragment "W_I4YGvd9aXh6QqZymHPRcYdEF3WezRDFWPh79gvbhw1" with variable 'C_VValue' on all occurrences

		String requestHeader0416 = "GET " + requestFile0416 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: script\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0416, requestHost0416, requestPort0416, requestHeader0416, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0416 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/JAVASCRIPT", header text fragment = [verification disabled], recorded content size = 159672
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/JAVASCRIPT", null, null);		// Test [416] <- Index 416
		if(replayMode)
		{
			long proxyDataRecordId =1612210916924L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #9 successful done
		return true;
	}


	/**
	 * Recorded http requests of page #9_1.
	 *
	 * @return  true:  method successful completed.
	 *          false: method/loop failed.
	 */
	boolean executePage_9_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext,int innerLoopCounter, int totalInnerLoopCount, Object httpLogVectorObject) throws Exception
	{
		// ... continuing page #9 (fragment 2 of 2)
		// ----------------------------------------



		// --- HTTP REQUEST: Test [417] <- WEB ADMIN Index 421 ---
		String requestProt0417 = "https";
		String requestHost0417 = "onboarding4.successfactors.com";
		int    requestPort0417 = 443;
		String requestFile0417 = "/ONB/App_Themes/XpressHR/Theme.ashx" +
				"?v=A_33xzIDrOdjjrPvPpyr3cjL2_BEC7C5LcLAJ0qEOIY1";
		String requestHeader0417 = "GET " + requestFile0417 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: onboarding4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/css,*/*;q=0.1\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: no-cors\r\n" + 
				"Sec-Fetch-Dest: style\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0417, requestHost0417, requestPort0417, requestHeader0417, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		testURL.setFailureActionType(HttpTestURL.FAILURE_ACTION_IGNORE_ERROR);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0417 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/CSS", header text fragment = [verification disabled], recorded content size = 25411
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/CSS", null, null);		// Test [417] <- Index 417
		if(replayMode)
		{
			long proxyDataRecordId =1612210917135L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure but continue current loop: mark pending transactions as defective and dump URL content to thread log
			transactionHandler.setPendingTransactionsAsDefective();
			log(testURL);
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [418] <- WEB ADMIN Index 422 ---
		String requestProt0418 = "https";
		String requestHost0418 = "teck.accounts.ondemand.com";
		int    requestPort0418 = 443;
		String requestFile0418 = "/saml2/idp/slo/teck.accounts.ondemand.com" +
				"?SAMLRequest=" + C_SAMLRequest2 +		// recorded value = fZJRT4MwFIX%2FCul7gXawQTMwJssSkmnMNn3wxdS2KBFa5LZuP98Ot8WZuNfee865%2Fe6d3%2By7NvhSAzRGF4iEMQqUFkY2%2Bq1Aj9slztBNOQfetbRnK%2FNmnF2rT6fABl6pgf2UCuQGzQyHBpjmnQJmBdvc3q0YDWPWD8YaYVoULLyw0dyOae%2FW9sCiyCrxEXIhjNMWQqOl6riWoTBdNLpHjewjaM2VRhRUiwK9xGkm6%2Fx1hmkyneIkEwJniZxhIvlE%2BspMkYlvBXCq0mC5tgWiMSU4pjgmWxozSliahDMSP6NgrTgc5rz2tXZEwhyoAQVPJ470wPEXn%2BseHLz6gAQdSbNxwqE8AdrtdiE4IRRAzYU1A4xwth7HPLpQHPX3PqNaBEszdNz%2BH05CMr40EtdjK3MaeiWaulESlVu%2FrFtnTTfu65T0432%2BiY0fylcrv4x9ucGbB5zWVOZJVuPsVWQ44TTFuZrkeJoQUtdZPk1kejT7Iz%2B%2FXhxa%2BQ0%3D
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=" + vSignature;		// recorded value = FpKuAQ97Uzk2T5aeNB1PnIDO4aKnZxIk72n%2FMrCq%2FKPVHTD2%2BeoY02L1VVdBZcGO%2BoJ0E2oYCL3AtT%2BBcQJOwxscfC7tvmV48YDEYQJ4%2BzrWinwc%2FBVL2NF5PJJM2%2BSXROGpBgzF7KynQK%2BbdzYkJlcoy8VYT4nLPKOkhWA0XCo%3D
		requestFile0418 = Lib.replaceTextPattern(requestFile0418, "fZJRT4MwFIX%2FCul7gXawQTMwJssSkmnMNn3wxdS2KBFa5LZuP98Ot8WZuNfee865%2Fe6d3%2By7NvhSAzRGF4iEMQqUFkY2%2Bq1Aj9slztBNOQfetbRnK%2FNmnF2rT6fABl6pgf2UCuQGzQyHBpjmnQJmBdvc3q0YDWPWD8YaYVoULLyw0dyOae%2FW9sCiyCrxEXIhjNMWQqOl6riWoTBdNLpHjewjaM2VRhRUiwK9xGkm6%2Fx1hmkyneIkEwJniZxhIvlE%2BspMkYlvBXCq0mC5tgWiMSU4pjgmWxozSliahDMSP6NgrTgc5rz2tXZEwhyoAQVPJ470wPEXn%2BseHLz6gAQdSbNxwqE8AdrtdiE4IRRAzYU1A4xwth7HPLpQHPX3PqNaBEszdNz%2BH05CMr40EtdjK3MaeiWaulESlVu%2FrFtnTTfu65T0432%2BiY0fylcrv4x9ucGbB5zWVOZJVuPsVWQ44TTFuZrkeJoQUtdZPk1kejT7Iz%2B%2FXhxa%2BQ0%3D", C_SAMLRequest2, 0);		// search and replace request file fragment "fZJRT4MwFIX%2FCul7gXawQTMwJssSkmnMNn3wxdS2KBFa5LZuP98Ot8WZuNfee865%2Fe6d3%2By7NvhSAzRGF4iEMQqUFkY2%2Bq1Aj9slztBNOQfetbRnK%2FNmnF2rT6fABl6pgf2UCuQGzQyHBpjmnQJmBdvc3q0YDWPWD8YaYVoULLyw0dyOae%2FW9sCiyCrxEXIhjNMWQqOl6riWoTBdNLpHjewjaM2VRhRUiwK9xGkm6%2Fx1hmkyneIkEwJniZxhIvlE%2BspMkYlvBXCq0mC5tgWiMSU4pjgmWxozSliahDMSP6NgrTgc5rz2tXZEwhyoAQVPJ470wPEXn%2BseHLz6gAQdSbNxwqE8AdrtdiE4IRRAzYU1A4xwth7HPLpQHPX3PqNaBEszdNz%2BH05CMr40EtdjK3MaeiWaulESlVu%2FrFtnTTfu65T0432%2BiY0fylcrv4x9ucGbB5zWVOZJVuPsVWQ44TTFuZrkeJoQUtdZPk1kejT7Iz%2B%2FXhxa%2BQ0%3D" with variable 'C_SAMLRequest2' on all occurrences
		requestFile0418 = Lib.replaceTextPattern(requestFile0418, "FpKuAQ97Uzk2T5aeNB1PnIDO4aKnZxIk72n%2FMrCq%2FKPVHTD2%2BeoY02L1VVdBZcGO%2BoJ0E2oYCL3AtT%2BBcQJOwxscfC7tvmV48YDEYQJ4%2BzrWinwc%2FBVL2NF5PJJM2%2BSXROGpBgzF7KynQK%2BbdzYkJlcoy8VYT4nLPKOkhWA0XCo%3D", vSignature_1, 0);		// search and replace request file fragment "FpKuAQ97Uzk2T5aeNB1PnIDO4aKnZxIk72n%2FMrCq%2FKPVHTD2%2BeoY02L1VVdBZcGO%2BoJ0E2oYCL3AtT%2BBcQJOwxscfC7tvmV48YDEYQJ4%2BzrWinwc%2FBVL2NF5PJJM2%2BSXROGpBgzF7KynQK%2BbdzYkJlcoy8VYT4nLPKOkhWA0XCo%3D" with variable 'vSignature_1' on all occurrences

		String requestHeader0418 = "GET " + requestFile0418 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0418, requestHost0418, requestPort0418, requestHeader0418, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0418 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [418] <- Index 418
		if(replayMode)
		{
			long proxyDataRecordId =1612210917225L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [419] <- WEB ADMIN Index 423 ---
		String requestProt0419 = "https";
		String requestHost0419 = "performancemanager4.successfactors.com";
		int    requestPort0419 = 443;
		String requestFile0419 = "/login" +
				"?_s.crb=" + vScrb;		// recorded value = Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d
		String requestHeader0419 = "GET " + requestFile0419 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0419, requestHost0419, requestPort0419, requestHeader0419, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0419 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 18260
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors Business Execution Suite");		// Test [419] <- Index 419
		if(replayMode)
		{
			long proxyDataRecordId =1612210917253L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [420] <- WEB ADMIN Index 424 ---
		String requestProt0420 = "https";
		String requestHost0420 = "authn.us2.hana.ondemand.com";
		int    requestPort0420 = 443;
		String requestFile0420 = "/saml2/sp/mds";
		String requestContent0420 = 
				"tenantId=" + C_TenantID +		// recorded value = NGFhMGZjNzYtMmUyYy00YWI5LWFlNmUtMGY0YjRhYWYxYzNh
				"&idpName=" + java.net.URLEncoder.encode(C_IDPName) +		// recorded value = aHR0cHM6Ly90ZWNrLmFjY291bnRzLm9uZGVtYW5kLmNvbQ%3D%3D
				"&requestUrl=" + java.net.URLEncoder.encode(C_RequestURI) +		// recorded value = aHR0cHM6Ly9va2tydHdrcHlmbXJxY2tyZW54aXJ0eS51czIuc2FjLnN1Y2Nlc3NmYWN0b3JzLmNvbS9hcHBsaWNhdGlvbi9sb2dvdXQ%2FU0FNTFJlcXVlc3Q9blpKZGI5b3dGSWIlMkZTdVJibE5neGdRU0xVSFZpVkV4OFZCVEd5czFrSElkR1NleGdPeFQ0OVRPaFZOMjA5V0kzdmpoZjczTmVuJTJGN2RzU3ljQTFjNmt5SUd2b2VBd3dXVFNTWjJNVmd0UjI0RTdnWjlUY3NDVjJRaWQ3STJDNzZ2dVRhTzdSU2FYRk14cUpVZ2t1cE1FMEZMcm9saDVPbCUyQk9pSFlRNlJTMGtnbUMlMkJBTWJXTW1xR25VWG95cE5JRlE1cmt5cjNsMVNrdTFaN25pNHBncGMlMkZKcWpUMU5tYWRyeHJqV0tXVkdLdTB4V1VKYVZVWEdtam13YUtpQU14N0c0R2VudTAwaUhuYmNJQWxETjJBb2NyY2NZNWVGM1Y0VW9FNTcyMmEyVk91YWo0VTJWSmdZWUlSOUYyRVglMkJVdU1DUFpKMFBQYXFMY0J6b0pUZlNIOWJMbXJQS2sxVjhENWZuUFNac0NiYjZSUlV4JTJGOSUyQm53aTFYYldaVFV3dUZsVWNaVktWVkxCdUgzb2pxdmdiN2JvRkdaSkJTJTJCVE1MU0Jpb29UWEhLVzklMkJGSGxCdll6RXFQaCUyRjhENW93dU5PYmY1YjduTjVFc2NSdHdhNURRRldkWm12RUVESmIyRHU1ckk4dm1DMjkwVjU3M2MzdXkyOW5zV0NUOE9EaTBnMkoxZm5sdXN6WFA4ZjRZelRmNXd5cHZ3Ujl5TjF5eHI3dldJNW84QiUyQnRUTnh5MkNzZ21aelFiblJQVktTYWJMOTlLTkgwSXA0ZVphdmx3RWMzM2k4MG9YNmZ6MXpoJTJCMCUyRjVEN1QzNjI4a1BmZ0UlM0QmU2lnQWxnPWh0dHAlM0ElMkYlMkZ3d3cudzMub3JnJTJGMjAwMCUyRjA5JTJGeG1sZHNpZyUyM3JzYS1zaGExJlNpZ25hdHVyZT1PSUs2RVIwJTJCc1BFdTJwUENRS0hRclpUdjFBakhucTNhem1qb2F4U3VacmZXWE92d2FwVGtNYU8lMkJEVVNiamZRcExWR0pCZkFpUElmZmJiaU5jOVlBU2k4WTc2aEd0JTJGdVZXUXMlMkZZMGJ6cG5mYkl3V2RtQU9rVTluaXJSUSUyRlpqWWRYclNJdGg2MzVQNUI4Q3ZQZDRWalJSOWZvYTRhanFkQWNqcVYxbWNCYUNNJTNE
				"&requestId=" + C_SAMLRequest3 +		// recorded value = Uzk3N2NjYzc4LTQ3NmEtNGE2OC1hN2Y1LWRmMGZiYzE4MmNmOC00SURjOHVtRm9aSzJvTWxhZmFvMjI4UXRrZkptOWxvQmE5eWJqVHQ1M1dN
				"&relayState=" + java.net.URLEncoder.encode(C_RelayState2) +		// recorded value = b3VjcnN1b3h1a2xzdW1veHhhZ3hmdWptZA%3D%3D
				"&action=sso" +
				"&signature=" + java.net.URLEncoder.encode(C_Signature4);		// recorded value = gmROe8ENnRE9jnOXX6gEYK4B9zPKN28mZsPRmrgAlxMRnIsPj2EXWsSjO3V%2F9Imbk16qTn7Y0Mx3kmeNjVKY3IOD6HpQbn5vBlEZAgfdW9dbNI4KsPQyqkSFyvhT9IoWh4dj8LU4Jz5sX31nIaGpFNaIJ1CyqndRuy8fwZalA0nvCN3ntaHVTCZJr%2F1krrQWmeGy0pJDFt%2FRpm0fMyOrVGJc7jsrtpQ0lHwJFVfZYC8io8%2FXMfv9l9VCsmVAkTJ7wB5uCYXEjhejRPx4v2bYN%2FQoUNreLBy3MhTSEOItU83YgMwya2wIPjVE0di4VWHLUUoXuzo%2BXK0vQALV8VqVcw%3D%3D
		byte[][] searchPattern0420_0 = new byte[1][];
		searchPattern0420_0[0] = Base64Decoder.decodeToBytes("YUhSMGNITTZMeTkwWldOckxtRmpZMjkxYm5SekxtOXVaR1Z0WVc1a0xtTnZiUSUzRCUzRA==");
		byte[] binarySearchPattern0420_0   = Lib.mergeByteArrays(searchPattern0420_0);		// note: the search pattern value is base 64 encoded. decoded value = aHR0cHM6Ly90ZWNrLmFjY291bnRzLm9uZGVtYW5kLmNvbQ%3D%3D
		requestContent0420 = new String(Lib.binaryReplace(requestContent0420.getBytes(), binarySearchPattern0420_0, java.net.URLEncoder.encode(C_IDPName).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0420_1 = new byte[1][];
		searchPattern0420_1[0] = Base64Decoder.decodeToBytes("Z21ST2U4RU5uUkU5am5PWFg2Z0VZSzRCOXpQS04yOG1ac1BSbXJnQWx4TVJuSXNQajJFWFdzU2pPM1YlMkY5SW1iazE2cVRuN1kwTXgza21lTmpWS1kzSU9ENkhwUWJuNXZCbEVaQWdmZFc5ZGJOSTRLc1BReXFrU0Z5dmhUOUlvV2g0ZGo4TFU0Sno1c1gzMW5JYUdwRk5hSUoxQ3lxbmRSdXk4ZndaYWxBMG52Q04zbnRhSFZUQ1pKciUyRjFrcnJRV21lR3kwcEpERnQlMkZScG0wZk15T3JWR0pjN2pzcnRwUTBsSHdKRlZmWllDOGlvOCUyRlhNZnY5bDlWQ3NtVkFrVEo3d0I1dUNZWEVqaGVqUlB4NHYyYllOJTJGUW9VTnJlTEJ5M01oVFNFT0l0VTgzWWdNd3lhMndJUGpWRTBkaTRWV0hMVVVvWHV6byUyQlhLMHZRQUxWOFZxVmN3JTNEJTNE");
		byte[] binarySearchPattern0420_1   = Lib.mergeByteArrays(searchPattern0420_1);		// note: the search pattern value is base 64 encoded. decoded value = gmROe8ENnRE9jnOXX6gEYK4B9zPKN28mZsPRmrgAlxMRnIsPj2EXWsSjO3V%2F9Imbk16qTn7Y0Mx3kmeNjVKY3IOD6HpQbn5vBlEZAgfdW9dbNI4KsPQyqkSFyvhT9IoWh4dj8LU4Jz5sX31nIaGpFNaIJ1CyqndRuy8fwZalA0nvCN3ntaHVTCZJr%2F1krrQWmeGy0pJDFt%2FRpm0fMyOrVGJc7jsrtpQ0lHwJFVfZYC8io8%2FXMfv9l9VCsmVAkTJ7wB5uCYXEjhejRPx4v2bYN%2FQoUNreLBy3MhTSEOItU83YgMwya2wIPjVE0di4VWHLUUoXuzo%2BXK0vQALV8VqVcw%3D%3D
		requestContent0420 = new String(Lib.binaryReplace(requestContent0420.getBytes(), binarySearchPattern0420_1, java.net.URLEncoder.encode(C_Signature4).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0420_2 = new byte[1][];
		searchPattern0420_2[0] = Base64Decoder.decodeToBytes("YUhSMGNITTZMeTl2YTJ0eWRIZHJjSGxtYlhKeFkydHlaVzU0YVhKMGVTNTFjekl1YzJGakxuTjFZMk5sYzNObVlXTjBiM0p6TG1OdmJTOWhjSEJzYVdOaGRHbHZiaTlzYjJkdmRYUSUyRlUwRk5URkpsY1hWbGMzUTlibHBLWkdJNWIzZEdTV0lsTWtaVGRWSmliRTVuZUdkUlUweFZTRlpwVmtWNE9GWkNWRWQ1Y3pGclNFbGtSMU5sZUdkUGVGUTBPVlJQYUZaT01qQTVWMGt6ZG1wb1pqY3pUbVZ1SlRKR04yUnpVM2xqUVRGak5tdDVTVWQyYjJWQmQzZFhWRk5UV2pKTlZtZDBVakkwUlRkbldqbFVZM05EVmpKUmFXUTNTVEpETnpaMmRWUmhUemRTVTJGWVJrMTRjVXBWWjJ0MWNFMUZNRVpNY205c2FEVlBiQ1V5UWs5cFNGbFJObEpUTUd0bmJVTWxNa0pCVFdKWFRXMXhSMjVWV0c5NWNFNUpSbEUxY210NWNqTnNNVk5yZFRGYU4yNXBOSEJuY0dNbE1rWktjV3BVTVU1dFlXUnllSEpxVjB0WFZrZExkVEI0VjFWS1lWWlZXRWR0YW0xM1lVdHBRVTE0TjBjMFIyVnVkVEF3YVVodVltTkpRV3hFVGpKQmIyTnlZMk5aTldWR00xWTBWVzlGTlRjeU1tRXlWazkxWVdvMFZUSldTbWRaV1VsU09VWXlSVmdsTWtKVmRVMURVRnBLTUZCUVlYRk1ZMEo2YjBwVVpsTklPV0pNYlhKUVMyc3hWamhFTldadVVGTmFjME5pWWpaU1VsVjRKVEpHT1NVeVFtNTNhVEZZWWxkYVZGVjNkVVpzVldOYVZrdFdWa3hDZFVnemIycHhkbWRpTjJKdlJrZGFTa0pUSlRKQ1ZFMU1VMEpwYjI5VVdFaExWemtsTWtKR1NHeENkbGw2UlhGUWFDVXlSamhFTlc5M2RVNVBZbVkxWWpkdVRqVkZjMk5TZEhkaE5VUlJSbGRrV20xMlJVVkVTbUl5UkhVMWNrazRkbTFETWprd1ZqVTNNMk16ZFhreU9XNXpWME5VT0U5RWFUQm5Na294Wm01c2RYTjZXRkE0WmpSWmVsUm1OWGQ1Y0haM1VqbDVUakY1ZUhJM2RsZEpOVzg0UWlVeVFuUlVUbmg1TWtOeloyMWFlbEZpYmxKUVZrdFRZV0pNT1RsTFRrZ3dTWEEwWlZwaGRteDNSV016TTJrNE1HOVlObVo2TVhwb0pUSkNNQ1V5UmpWRU4xUXpOakk0YTFCbVowVWxNMFFtVTJsblFXeG5QV2gwZEhBbE0wRWxNa1lsTWtaM2QzY3Vkek11YjNKbkpUSkdNakF3TUNVeVJqQTVKVEpHZUcxc1pITnBaeVV5TTNKellTMXphR0V4SmxOcFoyNWhkSFZ5WlQxUFNVczJSVkl3SlRKQ2MxQkZkVEp3VUVOUlMwaFJjbHBVZGpGQmFraHVjVE5oZW0xcWIyRjRVM1ZhY21aWFdFOTJkMkZ3Vkd0TllVOGxNa0pFVlZOaWFtWlJjRXhXUjBwQ1prRnBVRWxtWm1KaWFVNWpPVmxCVTJrNFdUYzJhRWQwSlRKR2RWWlhVWE1sTWtaWk1HSjZjRzVtWWtsM1YyUnRRVTlyVlRsdWFYSlNVU1V5UmxwcVdXUlljbE5KZEdnMk16VlFOVUk0UTNaUVpEUldhbEpTT1dadllUUmhhbkZrUVdOcWNWWXhiV05DWVVOTkpUTkU=");
		byte[] binarySearchPattern0420_2   = Lib.mergeByteArrays(searchPattern0420_2);		// note: the search pattern value is base 64 encoded. decoded value = aHR0cHM6Ly9va2tydHdrcHlmbXJxY2tyZW54aXJ0eS51czIuc2FjLnN1Y2Nlc3NmYWN0b3JzLmNvbS9hcHBsaWNhdGlvbi9sb2dvdXQ%2FU0FNTFJlcXVlc3Q9blpKZGI5b3dGSWIlMkZTdVJibE5neGdRU0xVSFZpVkV4OFZCVEd5czFrSElkR1NleGdPeFQ0OVRPaFZOMjA5V0kzdmpoZjczTmVuJTJGN2RzU3ljQTFjNmt5SUd2b2VBd3dXVFNTWjJNVmd0UjI0RTdnWjlUY3NDVjJRaWQ3STJDNzZ2dVRhTzdSU2FYRk14cUpVZ2t1cE1FMEZMcm9saDVPbCUyQk9pSFlRNlJTMGtnbUMlMkJBTWJXTW1xR25VWG95cE5JRlE1cmt5cjNsMVNrdTFaN25pNHBncGMlMkZKcWpUMU5tYWRyeHJqV0tXVkdLdTB4V1VKYVZVWEdtam13YUtpQU14N0c0R2VudTAwaUhuYmNJQWxETjJBb2NyY2NZNWVGM1Y0VW9FNTcyMmEyVk91YWo0VTJWSmdZWUlSOUYyRVglMkJVdU1DUFpKMFBQYXFMY0J6b0pUZlNIOWJMbXJQS2sxVjhENWZuUFNac0NiYjZSUlV4JTJGOSUyQm53aTFYYldaVFV3dUZsVWNaVktWVkxCdUgzb2pxdmdiN2JvRkdaSkJTJTJCVE1MU0Jpb29UWEhLVzklMkJGSGxCdll6RXFQaCUyRjhENW93dU5PYmY1YjduTjVFc2NSdHdhNURRRldkWm12RUVESmIyRHU1ckk4dm1DMjkwVjU3M2MzdXkyOW5zV0NUOE9EaTBnMkoxZm5sdXN6WFA4ZjRZelRmNXd5cHZ3Ujl5TjF5eHI3dldJNW84QiUyQnRUTnh5MkNzZ21aelFiblJQVktTYWJMOTlLTkgwSXA0ZVphdmx3RWMzM2k4MG9YNmZ6MXpoJTJCMCUyRjVEN1QzNjI4a1BmZ0UlM0QmU2lnQWxnPWh0dHAlM0ElMkYlMkZ3d3cudzMub3JnJTJGMjAwMCUyRjA5JTJGeG1sZHNpZyUyM3JzYS1zaGExJlNpZ25hdHVyZT1PSUs2RVIwJTJCc1BFdTJwUENRS0hRclpUdjFBakhucTNhem1qb2F4U3VacmZXWE92d2FwVGtNYU8lMkJEVVNiamZRcExWR0pCZkFpUElmZmJiaU5jOVlBU2k4WTc2aEd0JTJGdVZXUXMlMkZZMGJ6cG5mYkl3V2RtQU9rVTluaXJSUSUyRlpqWWRYclNJdGg2MzVQNUI4Q3ZQZDRWalJSOWZvYTRhanFkQWNqcVYxbWNCYUNNJTNE
		requestContent0420 = new String(Lib.binaryReplace(requestContent0420.getBytes(), binarySearchPattern0420_2, java.net.URLEncoder.encode(C_RequestURI).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		byte[][] searchPattern0420_3 = new byte[1][];
		searchPattern0420_3[0] = Base64Decoder.decodeToBytes("YjNWamNuTjFiM2gxYTJ4emRXMXZlSGhoWjNobWRXcHRaQSUzRCUzRA==");
		byte[] binarySearchPattern0420_3   = Lib.mergeByteArrays(searchPattern0420_3);		// note: the search pattern value is base 64 encoded. decoded value = b3VjcnN1b3h1a2xzdW1veHhhZ3hmdWptZA%3D%3D
		requestContent0420 = new String(Lib.binaryReplace(requestContent0420.getBytes(), binarySearchPattern0420_3, java.net.URLEncoder.encode(C_RelayState2).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0420 = Lib.replaceTextPattern(requestContent0420, "NGFhMGZjNzYtMmUyYy00YWI5LWFlNmUtMGY0YjRhYWYxYzNh", C_TenantID, 0);		// search and replace content fragment "NGFhMGZjNzYtMmUyYy00YWI5LWFlNmUtMGY0YjRhYWYxYzNh" with variable 'C_TenantID' on all occurrences
		requestContent0420 = Lib.replaceTextPattern(requestContent0420, "Uzk3N2NjYzc4LTQ3NmEtNGE2OC1hN2Y1LWRmMGZiYzE4MmNmOC00SURjOHVtRm9aSzJvTWxhZmFvMjI4UXRrZkptOWxvQmE5eWJqVHQ1M1dN", C_SAMLRequest3, 0);		// search and replace content fragment "Uzk3N2NjYzc4LTQ3NmEtNGE2OC1hN2Y1LWRmMGZiYzE4MmNmOC00SURjOHVtRm9aSzJvTWxhZmFvMjI4UXRrZkptOWxvQmE5eWJqVHQ1M1dN" with variable 'C_SAMLRequest3' on all occurrences
		requestContent0420 = Lib.replaceTextPattern(requestContent0420, "Uzk3N2NjYzc4LTQ3NmEtNGE2OC1hN2Y1LWRmMGZiYzE4MmNmOC00SURjOHVtRm9aSzJvTWxhZmFvMjI4UXRrZkptOWxvQmE5eWJqVHQ1M1dN", C_SAMLRequestID, 0);		// search and replace content fragment "Uzk3N2NjYzc4LTQ3NmEtNGE2OC1hN2Y1LWRmMGZiYzE4MmNmOC00SURjOHVtRm9aSzJvTWxhZmFvMjI4UXRrZkptOWxvQmE5eWJqVHQ1M1dN" with variable 'C_SAMLRequestID' on all occurrences

		String requestHeader0420 = "POST " + requestFile0420 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: authn.us2.hana.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0420.length() + "\r\n" + 		// Content-Length: 2017
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://okkrtwkpyfmrqckrenxirty.us2.sac.successfactors.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0420, requestHost0420, requestPort0420, requestHeader0420, requestContent0420.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0420 = null;		// support garbage collector to reduce memory
		requestContent0420 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3306
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "Note: Your browser does not support JavaScript or it is turned off. Press the button to proceed.");		// Test [420] <- Index 420
		if(replayMode)
		{
			long proxyDataRecordId =1612210917381L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_SAMLRequest4'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0420_1 = new BoundaryBasedExtractorItem( "SAMLRequest\" value=\"" , "\"/>",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0420_1);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest4'
			C_SAMLRequest4 = boundaryBasedContentExtractorItem0420_1.getResultText();
			log("<<< C_SAMLRequest4 = " + C_SAMLRequest4);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest4!= null && C_SAMLRequest4.trim().length() == 0)
			{
				C_SAMLRequest4 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest4' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest4 = " + C_SAMLRequest4);
			}
		}
		catch (Exception e) { C_SAMLRequest4 = null; log(e); }
		if (C_SAMLRequest4 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest4' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [421] <- WEB ADMIN Index 425 ---
		String requestProt0421 = "https";
		String requestHost0421 = "performancemanager4.successfactors.com";
		int    requestPort0421 = 443;
		String requestFile0421 = "/login" +
				"?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d";
		String requestContent0421 = 
				"company=Teck" +
				"&loginMethod=PWD" +
				"&bplte_userid=" +
				"&ajax=1";
		byte[] requestContentBinary0421 = requestContent0421.getBytes("UTF-8");
		String requestHeader0421 = "POST " + requestFile0421 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContentBinary0421.length + "\r\n" + 		// Content-Length: 49
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n" + 
				"Accept: */*\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-PLT-LOGINPAGE-ob3abe270s-20210201152157-2379973\r\n" + 
				"OPTR_CXT: 0100050001a7ad02f9-8982-4b24-8b23-1e6e2ed9ac2b29820909-1501-babe-face-0000000000039f7a52b9-f202-41d3-9b2d-9f1a26614f29HTTP    ;\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0421, requestHost0421, requestPort0421, requestHeader0421, requestContentBinary0421, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0421 = null;		// support garbage collector to reduce memory
		requestContent0421 = null;		// support garbage collector to reduce memory
		requestContentBinary0421 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [421] <- Index 421
		if(replayMode)
		{
			long proxyDataRecordId =1612210917760L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [422] <- WEB ADMIN Index 426 ---
		String requestProt0422 = "https";
		String requestHost0422 = "teck.accounts.ondemand.com";
		int    requestPort0422 = 443;
		String requestFile0422 = "/saml2/idp/sso/teck.accounts.ondemand.com";
		String requestContent0422 = 
				"SAMLRequest=" + java.net.URLEncoder.encode(C_SAMLRequest4) +		// recorded value = PEF1dGhuUmVxdWVzdCB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiB4bWxuczpuczI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIHhtbG5zOm5zMz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIgeG1sbnM6bnM0PSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyMiIERlc3RpbmF0aW9uPSJodHRwczovL3RlY2suYWNjb3VudHMub25kZW1hbmQuY29tL3NhbWwyL2lkcC9zc28vdGVjay5hY2NvdW50cy5vbmRlbWFuZC5jb20iIEZvcmNlQXV0aG49ImZhbHNlIiBJRD0iUzk3N2NjYzc4LTQ3NmEtNGE2OC1hN2Y1LWRmMGZiYzE4MmNmOC00SURjOHVtRm9aSzJvTWxhZmFvMjI4UXRrZkptOWxvQmE5eWJqVHQ1M1dNIiBJc3N1ZUluc3RhbnQ9IjIwMjEtMDItMDFUMjA6MjE6NTcuODkwWiIgVmVyc2lvbj0iMi4wIj48bnMyOklzc3Vlcj5va2tydHdrcHlmbXJxY2tyZW54aXJ0eS51czIuc2FjLnN1Y2Nlc3NmYWN0b3JzLmNvbTwvbnMyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI1M5NzdjY2M3OC00NzZhLTRhNjgtYTdmNS1kZjBmYmMxODJjZjgtNElEYzh1bUZvWksyb01sYWZhbzIyOFF0a2ZKbTlsb0JhOXlialR0NTNXTSI%2BPGRzOlRyYW5zZm9ybXM%2BPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8%2BPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3Jtcz48ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48ZHM6RGlnZXN0VmFsdWU%2BU2VPOHhFdldnWkxXQ284SzIrejJnVC9iSjk4PTwvZHM6RGlnZXN0VmFsdWU%2BPC9kczpSZWZlcmVuY2U%2BPC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5GaG92NG1HWDRMazl2dUhMakFiRHUrRHNxZUR5SE9aSmduTWxvZHV5aUxlMnZvajdzMk53SkE3Rng1dGE5TWdUL0VQbXRsY1RXR3cwTDB0U1gvODF6SS9vVmtIVHF4TVZoZEtVem1SVU9paE44b0RKOWJvTHJCanEya2VZZWxYNGhFTWlBUjFZUVVIb1E2Y1JRUmsvYThGU3BjU0dPYjA0VFdoZTZjVUJsSFJFVWVYcTE1OHEzRldFOGhyemM2NHhHYThOb0o1WmExRFI3RytMZHMxMjI2NGdTeExhWjVjVlluczNTSDl1YVZmQ2g2eG52cjNRZEtlTnMwbEJPWXJWeUIrQVErSWtCdFQvN0I5M0N6V0NKU0F0Ri9FbitSNVIrZGYwV0ljem9uYk5JT0Y0aVhSQVIrZW9jUktGNC95UzArMXJHa21rTU1QWFBjNUdvdFlhQkE9PTwvZHM6U2lnbmF0dXJlVmFsdWU%2BPC9kczpTaWduYXR1cmU%2BPC9BdXRoblJlcXVlc3Q%2B
				"&RelayState=oucrsuoxuklsumoxxagxfujmd";
		byte[][] searchPattern0422_0 = new byte[1][];
		searchPattern0422_0[0] = Base64Decoder.decodeToBytes("UEVGMWRHaHVVbVZ4ZFdWemRDQjRiV3h1Y3owaWRYSnVPbTloYzJsek9tNWhiV1Z6T25Sak9sTkJUVXc2TWk0d09uQnliM1J2WTI5c0lpQjRiV3h1Y3pwdWN6STlJblZ5YmpwdllYTnBjenB1WVcxbGN6cDBZenBUUVUxTU9qSXVNRHBoYzNObGNuUnBiMjRpSUhodGJHNXpPbTV6TXowaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzh3T1M5NGJXeGtjMmxuSXlJZ2VHMXNibk02Ym5NMFBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF4THpBMEwzaHRiR1Z1WXlNaUlFUmxjM1JwYm1GMGFXOXVQU0pvZEhSd2N6b3ZMM1JsWTJzdVlXTmpiM1Z1ZEhNdWIyNWtaVzFoYm1RdVkyOXRMM05oYld3eUwybGtjQzl6YzI4dmRHVmpheTVoWTJOdmRXNTBjeTV2Ym1SbGJXRnVaQzVqYjIwaUlFWnZjbU5sUVhWMGFHNDlJbVpoYkhObElpQkpSRDBpVXprM04yTmpZemM0TFRRM05tRXROR0UyT0MxaE4yWTFMV1JtTUdaaVl6RTRNbU5tT0MwMFNVUmpPSFZ0Um05YVN6SnZUV3hoWm1Gdk1qSTRVWFJyWmtwdE9XeHZRbUU1ZVdKcVZIUTFNMWROSWlCSmMzTjFaVWx1YzNSaGJuUTlJakl3TWpFdE1ESXRNREZVTWpBNk1qRTZOVGN1T0Rrd1dpSWdWbVZ5YzJsdmJqMGlNaTR3SWo0OGJuTXlPa2x6YzNWbGNqNXZhMnR5ZEhkcmNIbG1iWEp4WTJ0eVpXNTRhWEowZVM1MWN6SXVjMkZqTG5OMVkyTmxjM05tWVdOMGIzSnpMbU52YlR3dmJuTXlPa2x6YzNWbGNqNDhaSE02VTJsbmJtRjBkWEpsSUhodGJHNXpPbVJ6UFNKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eU1EQXdMekE1TDNodGJHUnphV2NqSWo0OFpITTZVMmxuYm1Wa1NXNW1iejQ4WkhNNlEyRnViMjVwWTJGc2FYcGhkR2x2YmsxbGRHaHZaQ0JCYkdkdmNtbDBhRzA5SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01ERXZNVEF2ZUcxc0xXVjRZeTFqTVRSdUl5SXZQanhrY3pwVGFXZHVZWFIxY21WTlpYUm9iMlFnUVd4bmIzSnBkR2h0UFNKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eU1EQXdMekE1TDNodGJHUnphV2NqY25OaExYTm9ZVEVpTHo0OFpITTZVbVZtWlhKbGJtTmxJRlZTU1QwaUkxTTVOemRqWTJNM09DMDBOelpoTFRSaE5qZ3RZVGRtTlMxa1pqQm1ZbU14T0RKalpqZ3RORWxFWXpoMWJVWnZXa3N5YjAxc1lXWmhiekl5T0ZGMGEyWktiVGxzYjBKaE9YbGlhbFIwTlROWFRTSSUyQlBHUnpPbFJ5WVc1elptOXliWE0lMkJQR1J6T2xSeVlXNXpabTl5YlNCQmJHZHZjbWwwYUcwOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2TURrdmVHMXNaSE5wWnlObGJuWmxiRzl3WldRdGMybG5ibUYwZFhKbElpOCUyQlBHUnpPbFJ5WVc1elptOXliU0JCYkdkdmNtbDBhRzA5SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01ERXZNVEF2ZUcxc0xXVjRZeTFqTVRSdUl5SXZQand2WkhNNlZISmhibk5tYjNKdGN6NDhaSE02UkdsblpYTjBUV1YwYUc5a0lFRnNaMjl5YVhSb2JUMGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM4d09TOTRiV3hrYzJsbkkzTm9ZVEVpTHo0OFpITTZSR2xuWlhOMFZtRnNkV1UlMkJVMlZQT0hoRmRsZG5Xa3hYUTI4NFN6SXJlakpuVkM5aVNqazRQVHd2WkhNNlJHbG5aWE4wVm1Gc2RXVSUyQlBDOWtjenBTWldabGNtVnVZMlUlMkJQQzlrY3pwVGFXZHVaV1JKYm1adlBqeGtjenBUYVdkdVlYUjFjbVZXWVd4MVpUNUdhRzkyTkcxSFdEUk1hemwyZFVoTWFrRmlSSFVyUkhOeFpVUjVTRTlhU21kdVRXeHZaSFY1YVV4bE1uWnZhamR6TWs1M1NrRTNSbmcxZEdFNVRXZFVMMFZRYlhSc1kxUlhSM2N3VERCMFUxZ3ZPREY2U1M5dlZtdElWSEY0VFZab1pFdFZlbTFTVlU5cGFFNDRiMFJLT1dKdlRISkNhbkV5YTJWWlpXeFlOR2hGVFdsQlVqRlpVVlZJYjFFMlkxSlJVbXN2WVRoR1UzQmpVMGRQWWpBMFZGZG9aVFpqVlVKc1NGSkZWV1ZZY1RFMU9IRXpSbGRGT0doeWVtTTJOSGhIWVRoT2IwbzFXbUV4UkZJM1J5dE1aSE14TWpJMk5HZFRlRXhoV2pWalZsbHVjek5UU0RsMVlWWm1RMmcyZUc1MmNqTlJaRXRsVG5Nd2JFSlBXWEpXZVVJclFWRXJTV3RDZEZRdk4wSTVNME42VjBOS1UwRjBSaTlGYml0U05WSXJaR1l3VjBsamVtOXVZazVKVDBZMGFWaFNRVklyWlc5alVrdEdOQzk1VXpBck1YSkhhMjFyVFUxUVdGQmpOVWR2ZEZsaFFrRTlQVHd2WkhNNlUybG5ibUYwZFhKbFZtRnNkV1UlMkJQQzlrY3pwVGFXZHVZWFIxY21VJTJCUEM5QmRYUm9ibEpsY1hWbGMzUSUyQg==");
		byte[] binarySearchPattern0422_0   = Lib.mergeByteArrays(searchPattern0422_0);		// note: the search pattern value is base 64 encoded. decoded value = PEF1dGhuUmVxdWVzdCB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiB4bWxuczpuczI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIHhtbG5zOm5zMz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIgeG1sbnM6bnM0PSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyMiIERlc3RpbmF0aW9uPSJodHRwczovL3RlY2suYWNjb3VudHMub25kZW1hbmQuY29tL3NhbWwyL2lkcC9zc28vdGVjay5hY2NvdW50cy5vbmRlbWFuZC5jb20iIEZvcmNlQXV0aG49ImZhbHNlIiBJRD0iUzk3N2NjYzc4LTQ3NmEtNGE2OC1hN2Y1LWRmMGZiYzE4MmNmOC00SURjOHVtRm9aSzJvTWxhZmFvMjI4UXRrZkptOWxvQmE5eWJqVHQ1M1dNIiBJc3N1ZUluc3RhbnQ9IjIwMjEtMDItMDFUMjA6MjE6NTcuODkwWiIgVmVyc2lvbj0iMi4wIj48bnMyOklzc3Vlcj5va2tydHdrcHlmbXJxY2tyZW54aXJ0eS51czIuc2FjLnN1Y2Nlc3NmYWN0b3JzLmNvbTwvbnMyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI1M5NzdjY2M3OC00NzZhLTRhNjgtYTdmNS1kZjBmYmMxODJjZjgtNElEYzh1bUZvWksyb01sYWZhbzIyOFF0a2ZKbTlsb0JhOXlialR0NTNXTSI%2BPGRzOlRyYW5zZm9ybXM%2BPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8%2BPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3Jtcz48ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48ZHM6RGlnZXN0VmFsdWU%2BU2VPOHhFdldnWkxXQ284SzIrejJnVC9iSjk4PTwvZHM6RGlnZXN0VmFsdWU%2BPC9kczpSZWZlcmVuY2U%2BPC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5GaG92NG1HWDRMazl2dUhMakFiRHUrRHNxZUR5SE9aSmduTWxvZHV5aUxlMnZvajdzMk53SkE3Rng1dGE5TWdUL0VQbXRsY1RXR3cwTDB0U1gvODF6SS9vVmtIVHF4TVZoZEtVem1SVU9paE44b0RKOWJvTHJCanEya2VZZWxYNGhFTWlBUjFZUVVIb1E2Y1JRUmsvYThGU3BjU0dPYjA0VFdoZTZjVUJsSFJFVWVYcTE1OHEzRldFOGhyemM2NHhHYThOb0o1WmExRFI3RytMZHMxMjI2NGdTeExhWjVjVlluczNTSDl1YVZmQ2g2eG52cjNRZEtlTnMwbEJPWXJWeUIrQVErSWtCdFQvN0I5M0N6V0NKU0F0Ri9FbitSNVIrZGYwV0ljem9uYk5JT0Y0aVhSQVIrZW9jUktGNC95UzArMXJHa21rTU1QWFBjNUdvdFlhQkE9PTwvZHM6U2lnbmF0dXJlVmFsdWU%2BPC9kczpTaWduYXR1cmU%2BPC9BdXRoblJlcXVlc3Q%2B
		requestContent0422 = new String(Lib.binaryReplace(requestContent0422.getBytes(), binarySearchPattern0422_0, java.net.URLEncoder.encode(C_SAMLRequest4).getBytes(), 0));		// search within the request content for a binary pattern and replace it with a variable value
		requestContent0422 = Lib.replaceTextPattern(requestContent0422, "Uzk3N2NjYzc4LTQ3NmEtNGE2OC1hN2Y1LWRmMGZiYzE4MmNmOC00SURjOHVtRm9aSzJvTWxhZmFvMjI4UXRrZkptOWxvQmE5eWJqVHQ1M1dN", C_SAMLRequest3, 0);		// search and replace content fragment "Uzk3N2NjYzc4LTQ3NmEtNGE2OC1hN2Y1LWRmMGZiYzE4MmNmOC00SURjOHVtRm9aSzJvTWxhZmFvMjI4UXRrZkptOWxvQmE5eWJqVHQ1M1dN" with variable 'C_SAMLRequest3' on all occurrences
		requestContent0422 = Lib.replaceTextPattern(requestContent0422, "Uzk3N2NjYzc4LTQ3NmEtNGE2OC1hN2Y1LWRmMGZiYzE4MmNmOC00SURjOHVtRm9aSzJvTWxhZmFvMjI4UXRrZkptOWxvQmE5eWJqVHQ1M1dN", C_SAMLRequestID, 0);		// search and replace content fragment "Uzk3N2NjYzc4LTQ3NmEtNGE2OC1hN2Y1LWRmMGZiYzE4MmNmOC00SURjOHVtRm9aSzJvTWxhZmFvMjI4UXRrZkptOWxvQmE5eWJqVHQ1M1dN" with variable 'C_SAMLRequestID' on all occurrences

		String requestHeader0422 = "POST " + requestFile0422 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0422.length() + "\r\n" + 		// Content-Length: 2219
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"Origin: https://authn.us2.hana.ondemand.com\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0422, requestHost0422, requestPort0422, requestHeader0422, requestContent0422.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0422 = null;		// support garbage collector to reduce memory
		requestContent0422 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [422] <- Index 422
		if(replayMode)
		{
			long proxyDataRecordId =1612210917859L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		// setup var extractor for 'C_SAMLRequest14'
		BoundaryBasedExtractorItem boundaryBasedHeaderExtractorItem0422_1 = new BoundaryBasedExtractorItem( "SAMLRequest=" , "&RelayState",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedHeaderExtractorItem0422_1);

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_SAMLRequest14'
			C_SAMLRequest14 = boundaryBasedHeaderExtractorItem0422_1.getResultText();
			log("<<< C_SAMLRequest14 = " + C_SAMLRequest14);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest14!= null && C_SAMLRequest14.trim().length() == 0)
			{
				C_SAMLRequest14 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest14' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest14 = " + C_SAMLRequest14);
			}
		}
		catch (Exception e) { C_SAMLRequest14 = null; log(e); }
		if (C_SAMLRequest14 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest14' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [423] <- WEB ADMIN Index 427 ---
		String requestProt0423 = "https";
		String requestHost0423 = "performancemanager4.successfactors.com";
		int    requestPort0423 = 443;
		String requestFile0423 = "/perfLogServlet" +
				"?callId=8010675447-X" +
				"&moduleId=LOGIN" +
				"&pageId=LOGIN" +
				"&pageQualifier=BIZX_LOGIN" +
				"&ST=1612210915305" +
				"&ET=1612210917885" +
				"&RED=1" +
				"&TTB=205" +
				"&RSR=2152" +
				"&DIA=2289" +
				"&DCP=2580";
		String requestHeader0423 = "GET " + requestFile0423 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: ykwyCDHMHlIq9E6BBD29_TMsCUsbAwok1xvHzPQj6hzOxS5_8WgRLUAx2D9J0Doq6CHyCDA46SQB7yAb3ifYjBb5zQvr1wfG-wzDzxiXq89-wfXmtO1jt6ztvdOLn7eMm7eKoq\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain; charset=UTF-8\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-PLT-LOGINPAGE-ob3abe270s-20210201152157-2379973-X\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0423, requestHost0423, requestPort0423, requestHeader0423, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0423 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [423] <- Index 423
		if(replayMode)
		{
			long proxyDataRecordId =1612210917890L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [424] <- WEB ADMIN Index 428 ---
		String requestProt0424 = "https";
		String requestHost0424 = "performancemanager4.successfactors.com";
		int    requestPort0424 = 443;
		String requestFile0424 = "/intake/v2/rum/events";
		String requestContent0424 = 
				"{\"metadata\":{\"service\":{\"name\":\"bizx-cf-web\",\"agent\":{\"name\":\"rum-js\",\"version\":\"5.5.0\"},\"language\":{\"name\":\"javascript\"},\"environment\":\"production\"}}}" + "\r\n" + 
				"{\"error\":{\"id\":\"e47570ad09dc493386f8bb2f5edde240\",\"culprit\":\"login?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\",\"exception\":{\"message\":\"Uncaught TypeError: this._iframeWindow.onbeforeunload is not a function\",\"stacktrace\":[{\"abs_path\":\"https://performancemanager4.successfactors.com/ui/reportcenter/js/view/reportActionView.fragment_43d2c47ebfb46aedc8930741c46c0f55.js\",\"filename\":\"ui/reportcenter/js/view/reportActionView.fragment_43d2c47ebfb46aedc8930741c46c0f55.js\",\"function\":\"<anonymous>\",\"lineno\":4,\"colno\":194},{\"abs_path\":\"https://performancemanager4.successfactors.com/login?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\",\"filename\":\"login?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\",\"function\":\"<anonymous>\",\"lineno\":89,\"colno\":56}],\"type\":\"TypeError\"},\"context\":{\"page\":{\"referer\":\"https://performancemanager4.successfactors.com/sf/start?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\",\"url\":\"https://performancemanager4.successfactors.com/xi/ui/reportcenter/pages/reportCenter.xhtml?bplte_company=Teck&_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d\"}}}}";
		String requestHeader0424 = "POST " + requestFile0424 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0424.length() + "\r\n" + 		// Content-Length: 1331
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"Content-Encoding: gzip\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"X-SAP-Page-Info: companyId=Teck&moduleId=REPORT&pageId=REPORT_CENTER&pageQualifier=REPORT_LISTING_PAGE&uiVersion=V12&userId=TestAutomation\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-ndjson\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0424, requestHost0424, requestPort0424, requestHeader0424, requestContent0424.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0424 = null;		// support garbage collector to reduce memory
		requestContent0424 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 202, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {202}, null, null, null);		// Test [424] <- Index 424
		if(replayMode)
		{
			long proxyDataRecordId =1612210917980L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [425] <- WEB ADMIN Index 429 ---
		String requestProt0425 = "https";
		String requestHost0425 = "performancemanager4.successfactors.com";
		int    requestPort0425 = 443;
		String requestFile0425 = "/login" +
				"?_s.crb=" + vScrb;		// recorded value = Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d
		String requestHeader0425 = "GET " + requestFile0425 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0425, requestHost0425, requestPort0425, requestHeader0425, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0425 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 5705
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "SuccessFactors Business Execution Suite");		// Test [425] <- Index 425
		if(replayMode)
		{
			long proxyDataRecordId =1612210917995L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [426] <- WEB ADMIN Index 430 ---
		log();
		log("# title: Redirecting");
		String requestProt0426 = "https";
		String requestHost0426 = "login.microsoftonline.com";
		int    requestPort0426 = 443;
		String requestFile0426 = "/ce6ec000-1cfa-49c2-a24f-7db63c8a9a52/saml2" +
				"?SAMLRequest=" + C_SAMLRequest14 +		// recorded value = hZJNb%2BowEEX%2FSuSuHX8kQLAAibaLVmr1UKFddGecgVpNxtTjPPrzXwpUdPPo%2Flzp3DszmXfpDZ%2FgowNK2ZwIYvIBbwJS10JcQvzrHTw%2FPUzZW0o7MkIkcO%2B5dS50mCgPWENrsc5daAXZttHC1zthHV0AWbaIIQUXmmuPtcftlHURTbDkyaBtgUxyZjl%2FfDA6l2Z9hMjcrVYLvvizXLHstvf1aL9kz2pN2HrMW%2B9ioLBJARuPcDBzMAQnpeTKbSwvx05zq8sNH9XrYeEqO7YDfdRn2f3tlC1HUKpKDTZ8qN2Il7YoeCW141ZZsEVZyUKte5Sog3ukZDFNmZZacam5VCstjVZmUOVSD19Z9gKRDqZ9HZZ9tg3S5cq70z4n2CDpywH7fbpzojwO0%2B%2By3%2B%2FzfZGHuBVaSiVkKXoI0F2d6eI%2FtBRy%2FEXX5LdXbDbpTcyhdpz9%2FhET8QOfiJ%2FPNvsH
				"&RelayState=arc5b631c" +
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2001%2F04%2Fxmldsig-more%23rsa-sha256" +
				"&Signature=W1w7KepSS5Uficfn7tUzWiEkwMiwZeH1dOlnV2uT%2BM1Vj04g7iJG%2FcCR0h%2B9e1sI14LVe02CcEF9goGfoilx7kUo6rWlnGwicgIXeOvAgsGEFyBqQau%2BQs%2Bcy8zRjytrcoCqw4d6o06zzh3EAcnyevy6BI8RL56OIATH12NWDJOJMyaz%2FCOFOd22yh%2BXQmBIr1%2Fa1BnwjJ6%2BJZJvDXrmOIxxiSHftP0Tg5dJsqL8dpQslj4uYXYbKsr4qrBLV2OfJNNRrHtRkAKAY54HowrphhJMPi6G3U%2FbHC8qUq%2FqvN1gwigiFQWd%2BWuMT3beWAuNP7KBzJlTRdzGmzIIxKkaqA%3D%3D" +
				"&login_hint=balash.akbari%40teck.com";
		requestFile0426 = Lib.replaceTextPattern(requestFile0426, "hZJNb%2BowEEX%2FSuSuHX8kQLAAibaLVmr1UKFddGecgVpNxtTjPPrzXwpUdPPo%2Flzp3DszmXfpDZ%2FgowNK2ZwIYvIBbwJS10JcQvzrHTw%2FPUzZW0o7MkIkcO%2B5dS50mCgPWENrsc5daAXZttHC1zthHV0AWbaIIQUXmmuPtcftlHURTbDkyaBtgUxyZjl%2FfDA6l2Z9hMjcrVYLvvizXLHstvf1aL9kz2pN2HrMW%2B9ioLBJARuPcDBzMAQnpeTKbSwvx05zq8sNH9XrYeEqO7YDfdRn2f3tlC1HUKpKDTZ8qN2Il7YoeCW141ZZsEVZyUKte5Sog3ukZDFNmZZacam5VCstjVZmUOVSD19Z9gKRDqZ9HZZ9tg3S5cq70z4n2CDpywH7fbpzojwO0%2B%2By3%2B%2FzfZGHuBVaSiVkKXoI0F2d6eI%2FtBRy%2FEXX5LdXbDbpTcyhdpz9%2FhET8QOfiJ%2FPNvsH", C_SAMLRequest14, 0);		// search and replace request file fragment "hZJNb%2BowEEX%2FSuSuHX8kQLAAibaLVmr1UKFddGecgVpNxtTjPPrzXwpUdPPo%2Flzp3DszmXfpDZ%2FgowNK2ZwIYvIBbwJS10JcQvzrHTw%2FPUzZW0o7MkIkcO%2B5dS50mCgPWENrsc5daAXZttHC1zthHV0AWbaIIQUXmmuPtcftlHURTbDkyaBtgUxyZjl%2FfDA6l2Z9hMjcrVYLvvizXLHstvf1aL9kz2pN2HrMW%2B9ioLBJARuPcDBzMAQnpeTKbSwvx05zq8sNH9XrYeEqO7YDfdRn2f3tlC1HUKpKDTZ8qN2Il7YoeCW141ZZsEVZyUKte5Sog3ukZDFNmZZacam5VCstjVZmUOVSD19Z9gKRDqZ9HZZ9tg3S5cq70z4n2CDpywH7fbpzojwO0%2B%2By3%2B%2FzfZGHuBVaSiVkKXoI0F2d6eI%2FtBRy%2FEXX5LdXbDbpTcyhdpz9%2FhET8QOfiJ%2FPNvsH" with variable 'C_SAMLRequest14' on all occurrences

		String requestHeader0426 = "GET " + requestFile0426 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.microsoftonline.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0426, requestHost0426, requestPort0426, requestHeader0426, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0426 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 51674
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "* Provided for Informational Purposes Only");		// Test [426] <- Index 426
		if(replayMode)
		{
			long proxyDataRecordId =1612210918345L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [427] <- WEB ADMIN Index 431 ---
		log();
		log("# title: Sign in to your account");
		String requestProt0427 = "https";
		String requestHost0427 = "login.microsoftonline.com";
		int    requestPort0427 = 443;
		String requestFile0427 = "/ce6ec000-1cfa-49c2-a24f-7db63c8a9a52/saml2" +
				"?SAMLRequest=" + C_SAMLRequest14 +		// recorded value = hZJNb%2BowEEX%2FSuSuHX8kQLAAibaLVmr1UKFddGecgVpNxtTjPPrzXwpUdPPo%2Flzp3DszmXfpDZ%2FgowNK2ZwIYvIBbwJS10JcQvzrHTw%2FPUzZW0o7MkIkcO%2B5dS50mCgPWENrsc5daAXZttHC1zthHV0AWbaIIQUXmmuPtcftlHURTbDkyaBtgUxyZjl%2FfDA6l2Z9hMjcrVYLvvizXLHstvf1aL9kz2pN2HrMW%2B9ioLBJARuPcDBzMAQnpeTKbSwvx05zq8sNH9XrYeEqO7YDfdRn2f3tlC1HUKpKDTZ8qN2Il7YoeCW141ZZsEVZyUKte5Sog3ukZDFNmZZacam5VCstjVZmUOVSD19Z9gKRDqZ9HZZ9tg3S5cq70z4n2CDpywH7fbpzojwO0%2B%2By3%2B%2FzfZGHuBVaSiVkKXoI0F2d6eI%2FtBRy%2FEXX5LdXbDbpTcyhdpz9%2FhET8QOfiJ%2FPNvsH
				"&RelayState=arc5b631c" +
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2001%2F04%2Fxmldsig-more%23rsa-sha256" +
				"&Signature=W1w7KepSS5Uficfn7tUzWiEkwMiwZeH1dOlnV2uT%2BM1Vj04g7iJG%2FcCR0h%2B9e1sI14LVe02CcEF9goGfoilx7kUo6rWlnGwicgIXeOvAgsGEFyBqQau%2BQs%2Bcy8zRjytrcoCqw4d6o06zzh3EAcnyevy6BI8RL56OIATH12NWDJOJMyaz%2FCOFOd22yh%2BXQmBIr1%2Fa1BnwjJ6%2BJZJvDXrmOIxxiSHftP0Tg5dJsqL8dpQslj4uYXYbKsr4qrBLV2OfJNNRrHtRkAKAY54HowrphhJMPi6G3U%2FbHC8qUq%2FqvN1gwigiFQWd%2BWuMT3beWAuNP7KBzJlTRdzGmzIIxKkaqA%3D%3D" +
				"&login_hint=balash.akbari%40teck.com" +
				"&sso_reload=true";
		requestFile0427 = Lib.replaceTextPattern(requestFile0427, "hZJNb%2BowEEX%2FSuSuHX8kQLAAibaLVmr1UKFddGecgVpNxtTjPPrzXwpUdPPo%2Flzp3DszmXfpDZ%2FgowNK2ZwIYvIBbwJS10JcQvzrHTw%2FPUzZW0o7MkIkcO%2B5dS50mCgPWENrsc5daAXZttHC1zthHV0AWbaIIQUXmmuPtcftlHURTbDkyaBtgUxyZjl%2FfDA6l2Z9hMjcrVYLvvizXLHstvf1aL9kz2pN2HrMW%2B9ioLBJARuPcDBzMAQnpeTKbSwvx05zq8sNH9XrYeEqO7YDfdRn2f3tlC1HUKpKDTZ8qN2Il7YoeCW141ZZsEVZyUKte5Sog3ukZDFNmZZacam5VCstjVZmUOVSD19Z9gKRDqZ9HZZ9tg3S5cq70z4n2CDpywH7fbpzojwO0%2B%2By3%2B%2FzfZGHuBVaSiVkKXoI0F2d6eI%2FtBRy%2FEXX5LdXbDbpTcyhdpz9%2FhET8QOfiJ%2FPNvsH", C_SAMLRequest14, 0);		// search and replace request file fragment "hZJNb%2BowEEX%2FSuSuHX8kQLAAibaLVmr1UKFddGecgVpNxtTjPPrzXwpUdPPo%2Flzp3DszmXfpDZ%2FgowNK2ZwIYvIBbwJS10JcQvzrHTw%2FPUzZW0o7MkIkcO%2B5dS50mCgPWENrsc5daAXZttHC1zthHV0AWbaIIQUXmmuPtcftlHURTbDkyaBtgUxyZjl%2FfDA6l2Z9hMjcrVYLvvizXLHstvf1aL9kz2pN2HrMW%2B9ioLBJARuPcDBzMAQnpeTKbSwvx05zq8sNH9XrYeEqO7YDfdRn2f3tlC1HUKpKDTZ8qN2Il7YoeCW141ZZsEVZyUKte5Sog3ukZDFNmZZacam5VCstjVZmUOVSD19Z9gKRDqZ9HZZ9tg3S5cq70z4n2CDpywH7fbpzojwO0%2B%2By3%2B%2FzfZGHuBVaSiVkKXoI0F2d6eI%2FtBRy%2FEXX5LdXbDbpTcyhdpz9%2FhET8QOfiJ%2FPNvsH" with variable 'C_SAMLRequest14' on all occurrences

		String requestHeader0427 = "GET " + requestFile0427 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: login.microsoftonline.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: iframe\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0427, requestHost0427, requestPort0427, requestHeader0427, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("hZJNb%2BowEEX%2FSuSuHX8kQLAAibaLVmr1UKFddGecgVpNxtTjPPrzXwpUdPPo%2Flzp3DszmXfpDZ%2FgowNK2ZwIYvIBbwJS10JcQvzrHTw%2FPUzZW0o7MkIkcO%2B5dS50mCgPWENrsc5daAXZttHC1zthHV0AWbaIIQUXmmuPtcftlHURTbDkyaBtgUxyZjl%2FfDA6l2Z9hMjcrVYLvvizXLHstvf1aL9kz2pN2HrMW%2B9ioLBJARuPcDBzMAQnpeTKbSwvx05zq8sNH9XrYeEqO7YDfdRn2f3tlC1HUKpKDTZ8qN2Il7YoeCW141ZZsEVZyUKte5Sog3ukZDFNmZZacam5VCstjVZmUOVSD19Z9gKRDqZ9HZZ9tg3S5cq70z4n2CDpywH7fbpzojwO0%2B%2By3%2B%2FzfZGHuBVaSiVkKXoI0F2d6eI%2FtBRy%2FEXX5LdXbDbpTcyhdpz9%2FhET8QOfiJ%2FPNvsH", C_SAMLRequest14);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0427 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 47505
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN");		// Test [427] <- Index 427
		if(replayMode)
		{
			long proxyDataRecordId =1612210918824L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [428] <- WEB ADMIN Index 432 ---
		String requestProt0428 = "https";
		String requestHost0428 = "performancemanager4.successfactors.com";
		int    requestPort0428 = 443;
		String requestFile0428 = "/login" +
				"?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d";
		String requestContent0428 = 
				"company=Teck" +
				"&loginMethod=PWD" +
				"&bplte_userid=" +
				"&ajax=1";
		byte[] requestContentBinary0428 = requestContent0428.getBytes("UTF-8");
		String requestHeader0428 = "POST " + requestFile0428 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContentBinary0428.length + "\r\n" + 		// Content-Length: 49
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n" + 
				"Accept: */*\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-PLT-LOGINPAGE-ob3abe270s-20210201152201-2379976\r\n" + 
				"OPTR_CXT: 0100050001df074205-47c2-4914-8f2e-4ffe2e5ded2329820909-1501-babe-face-000000000003d98f3203-d902-49b9-a12a-5c58298d1b2fHTTP    ;\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0428, requestHost0428, requestPort0428, requestHeader0428, requestContentBinary0428, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0428 = null;		// support garbage collector to reduce memory
		requestContent0428 = null;		// support garbage collector to reduce memory
		requestContentBinary0428 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 302, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {302}, null, null, null);		// Test [428] <- Index 428
		if(replayMode)
		{
			long proxyDataRecordId =1612210921457L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [429] <- WEB ADMIN Index 433 ---
		String requestProt0429 = "https";
		String requestHost0429 = "performancemanager4.successfactors.com";
		int    requestPort0429 = 443;
		String requestFile0429 = "/perfLogServlet" +
				"?callId=4549104842-X" +
				"&moduleId=LOGIN" +
				"&pageId=LOGIN" +
				"&pageQualifier=BIZX_LOGIN" +
				"&ST=1612210917476" +
				"&ET=1612210921539" +
				"&TTB=3713" +
				"&RSR=3734" +
				"&DIA=3853" +
				"&DCP=4063";
		String requestHeader0429 = "GET " + requestFile0429 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: yk2zEzLMHlIq9E6BBD29_TMtB-fWBwoi6xzQzg19-PEe4kD7Ck-xEzkD8EvU3S1W3hrEGVg8AxA-0eLprO9ojBb5zQvr1wfG-wzDzxiXq89-wfXmtO1jt6ztvdOLn7eMm7eKoq\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: text/plain; charset=UTF-8\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-PLT-LOGINPAGE-ob3abe270s-20210201152201-2379976-X\r\n" + 
				"Accept: */*\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0429, requestHost0429, requestPort0429, requestHeader0429, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0429 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [429] <- Index 429
		if(replayMode)
		{
			long proxyDataRecordId =1612210921564L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [430] <- WEB ADMIN Index 434 ---
		String requestProt0430 = "https";
		String requestHost0430 = "performancemanager4.successfactors.com";
		int    requestPort0430 = 443;
		String requestFile0430 = "/saml2/Login" +
				"?company=Teck" +
				"&RelayState=/login?_s.crb=Ua69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d";
		String requestHeader0430 = "GET " + requestFile0430 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: */*\r\n" + 
				"X-Requested-With: XMLHttpRequest\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-PLT-LOGINPAGE-ob3abe270s-20210201152201-2379976\r\n" + 
				"OPTR_CXT: 0100050001df074205-47c2-4914-8f2e-4ffe2e5ded2329820909-1501-babe-face-000000000003d98f3203-d902-49b9-a12a-5c58298d1b2fHTTP    ;\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0430, requestHost0430, requestPort0430, requestHeader0430, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0430 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 1112
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "try {PerfLog.addOnloadHook();} catch(err) {}");		// Test [430] <- Index 430
		if(replayMode)
		{
			long proxyDataRecordId =1612210921606L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// extract variable(s) from response
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getContentString());

		// setup var extractor for 'C_Signature5'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0430_1 = new BoundaryBasedExtractorItem( "Signature=" , "\">",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0430_1);

		// setup var extractor for 'C_SAMLRequest15'
		BoundaryBasedExtractorItem boundaryBasedContentExtractorItem0430_2 = new BoundaryBasedExtractorItem( "SAMLRequest=" , "&RelayState",1,false,false,0,false);
		boundaryBasedExtractor.addBoundaryBasedExtractorItem(boundaryBasedContentExtractorItem0430_2);

		boundaryBasedExtractor.extractText();
		boundaryBasedExtractor = new BoundaryBasedExtractor(testURL.getHeaderString());

		boundaryBasedExtractor.extractText();
		try
		{
			// extract var 'C_Signature5'
			C_Signature5 = boundaryBasedContentExtractorItem0430_1.getResultText();
			log("<<< C_Signature5 = " + C_Signature5);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_Signature5!= null && C_Signature5.trim().length() == 0)
			{
				C_Signature5 = "";
				log("runtime note: the extraction of a new value for the variable 'C_Signature5' ends up with an empty string - a substitute value was set");
				log("<<< C_Signature5 = " + C_Signature5);
			}
		}
		catch (Exception e) { C_Signature5 = null; log(e); }
		if (C_Signature5 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_Signature5' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		try
		{
			// extract var 'C_SAMLRequest15'
			C_SAMLRequest15 = boundaryBasedContentExtractorItem0430_2.getResultText();
			log("<<< C_SAMLRequest15 = " + C_SAMLRequest15);
			// Replace the value of a variable with a user given value in case of a blank text extracted during the load test
			if (false && C_SAMLRequest15!= null && C_SAMLRequest15.trim().length() == 0)
			{
				C_SAMLRequest15 = "";
				log("runtime note: the extraction of a new value for the variable 'C_SAMLRequest15' ends up with an empty string - a substitute value was set");
				log("<<< C_SAMLRequest15 = " + C_SAMLRequest15);
			}
		}
		catch (Exception e) { C_SAMLRequest15 = null; log(e); }
		if (C_SAMLRequest15 == null)
		{
			// failure - dump wrong response content and abort current outer loop - after that start next loop
			String errorText = "*** error: unable to extract var 'C_SAMLRequest15' from boundary based pattern";
			log(errorText);
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			threadStep = performanceData.setFailed(threadStep, HttpTestURL.STATUS_TYPE_USER_SPECIFIC_TEST_FAILED, errorText, testURL, this);
		
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [431] <- WEB ADMIN Index 435 ---
		String requestProt0431 = "https";
		String requestHost0431 = "performancemanager4.successfactors.com";
		int    requestPort0431 = 443;
		String requestFile0431 = "/perfLogServlet" +
				"?callId=4549104842-0" +
				"&moduleId=LOGIN" +
				"&pageId=LOGIN" +
				"&pageQualifier=BIZX_LOGIN" +
				"&ST=1612210921201" +
				"&STC=1612210917476" +
				"&ETC=1612210921856" +
				"&MEM=10654" +
				"&NRE=0" +
				"&NWR=0" +
				"&SCPU=0" +
				"&SQLC=0" +
				"&SQLT=0" +
				"&SVT=59" +
				"&UCPU=30" +
				"&CPU=30" +
				"&FRE=0" +
				"&FWR=0" +
				"&CCON=0" +
				"&CSUP=2" +
				"&CLOC=0" +
				"&CEXT=0" +
				"&CREM=0" +
				"&jsNum=2" +
				"&cssNum=0" +
				"&renderTime=506" +
				"&TTB=3713" +
				"&RSR=3734" +
				"&DIA=3853" +
				"&DCP=4063";
		String requestContent0431 = 
				"OPTR_INFO=9ca372d7-1a82-4c18-a226-28ed29ecbd28!1612210921291!1612210921298!0" +
				"&OPTR_INFO=4ac7e2eb-4dc2-4e66-902f-39982878b32a!1612210921310!1612210921316!0" +
				"&OPTR_INFO=241d4a2d-64cb-11eb-84bd-6149e6cf885e!0!1612210921328!1" +
				"&OPTR_INFO=501232f9-9312-46f5-9924-7c3f247c3729!1612210921330!1612210921334!0" +
				"&OPTR_INFO=f3634267-ed62-47d2-8328-a1592f15a62f!1612210921335!1612210921338!0" +
				"&OPTR_INFO=ba926297-1ed2-498e-8d21-55cc2d48a929!1612210921338!1612210921342!0" +
				"&OPTR_INFO=2b15f2b3-6862-4c6d-b72d-12532815f32d!1612210921343!1612210921346!0" +
				"&OPTR_INFO=c3ade20c-6db2-43da-a02a-a48527c1962c!1612210921354!1612210921358!0" +
				"&OPTR_INFO=0e8612b0-fbd2-432f-b32b-43c12d29da22!1612210921360!1612210921363!0" +
				"&OPTR_INFO=e06562cf-e802-4399-b825-23ec26eb0820!1612210921364!1612210921368!0" +
				"&OPTR_INFO=0bf2029f-ad62-4c4c-812d-34f628bcc828!1612210921368!1612210921372!0" +
				"&OPTR_INFO=05b82291-3d22-4de6-882d-25a424c54524!1612210921380!1612210921384!0" +
				"&OPTR_INFO=8373a255-ade2-4235-b724-f0802e890421!1612210921390!1612210921401!0" +
				"&OPTR_INFO=df074205-47c2-4914-8f2e-4ffe2e5ded23!0!1612210921754!1";
		String requestHeader0431 = "POST " + requestFile0431 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: performancemanager4.successfactors.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"Content-Length: " + requestContent0431.length() + "\r\n" + 		// Content-Length: 1053
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"X-Req-Hash: QMq4bqVFktS_hLupUsfae4RYWLNNUGgxEEUZK_-UDD6kC-MISHRmOoxqVJRhI--UO06BOXZ3fpB6Qa37MUN5JN_Mlc3lP-OLhMaqbLsRZ40lU1gGEWdNXExfKjERFk3zKF-184\r\n" + 
				"X-Ajax-Token: " + vscrbdec + "\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Content-Type: application/x-www-form-urlencoded\r\n" + 
				"X-SAP-Page-Info: moduleId=LOGIN&pageId=LOGIN&pageQualifier=BIZX_LOGIN\r\n" + 
				"X-Subaction: 0\r\n" + 
				"X-Event-ID: EVENT-PLT-LOGINPAGE-ob3abe270s-20210201152201-2379976\r\n" + 
				"Accept: */*\r\n" + 
				"Origin: https://performancemanager4.successfactors.com\r\n" + 
				"Sec-Fetch-Site: same-origin\r\n" + 
				"Sec-Fetch-Mode: cors\r\n" + 
				"Sec-Fetch-Dest: empty\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0431, requestHost0431, requestPort0431, requestHeader0431, requestContent0431.getBytes(), requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		testURL.replaceRequestHeaderFieldTextPattern("Ua69uhiQ3lroMGe0kDG5rJz%2b%2fdTJkOBqDSCgTE%2fgopo%3d", vscrbdec);		// search within all request header fields a text pattern and replace it with a variable value
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");
		if (debugLoops)
		{
			if (Lib.isAsciiContent(testURL.getRequestContent(), 256))
				log(">>> " + new String(testURL.getRequestContent()));
			else
				log(">>> [binary data]");
		}

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0431 = null;		// support garbage collector to reduce memory
		requestContent0431 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = [verification disabled], header text fragment = [verification disabled], recorded content size = 0
		// content test algorithm: none - no content check
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, null, null, null);		// Test [431] <- Index 431
		if(replayMode)
		{
			long proxyDataRecordId =1612210921870L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated






		// --- HTTP REQUEST: Test [432] <- WEB ADMIN Index 436 ---
		log();
		log("# title: SuccessFactors - Teck: Log On");
		String requestProt0432 = "https";
		String requestHost0432 = "teck.accounts.ondemand.com";
		int    requestPort0432 = 443;
		String requestFile0432 = "/saml2/idp/sso/" +
				"?SAMLRequest=" + C_SAMLRequest15 +		// recorded value = fZLLTsMwEEV%2FxZp9Hk4KQVZTVKgQlXhUNLBgg1x7AhaJHTwOhb8npAXBApa278y9c8bT47e2Ya%2FoyThbAo9TYGiV08Y%2BlnBbnUVHcDybkmybrBPzPjzZG3zpkQIbCi2J3UsJvbfCSTIkrGyRRFBiPb%2B8EFmcis674JRrgC2GQmNlGM2eQuhIJElA9RxLpVxvA8XOamyl1bFybTJ2T4zuEiKXADtzXuGYooRaNoTAlosSHrTWOfK6iA5RFdEk13kksciHI9ebSZoreTAMtiTqcWkpSBtKyNKMR2kWpbzKUpFlIuVxUfB7YKt93hNjdxz%2BG26zE5E4r6pVtLpeV8DuvngOAtjTE6O7%2F4nt%2F8aSCP0nKZh9kdputzH1SiFRLVVwnkZK1QBwmvx0%2Bd7Y1dB2uVi5xqh3Nm8atz31KAOWEHyPI9BWhr%2BD8JiPN0ZH9SgVvaUOlakNakhme9vfX2P2AQ%3D%3D
				"&RelayState=%2Flogin%3F_s.crb%3DUa69uhiQ3lroMGe0kDG5rJz%252b%252fdTJkOBqDSCgTE%252fgopo%253d" +
				"&SigAlg=http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1" +
				"&Signature=" + C_Signature5;		// recorded value = BySgKJubWYwcdsXJ%2BYuWRh2jkh9I6B8mkf7DOwZqICiy%2BN69a2jpGRSyeFn2c%2BrhW84y3nDC6nFtiOl0lIx4sKQVAyfda6ysj5GgLIVQaY0RoAC3qrSbJnDKUtv7ekhTkxWXDF7C1bhVP74VU9lIKSnfd5MxtS8mRW%2F4blWZQ9g%3D
		requestFile0432 = Lib.replaceTextPattern(requestFile0432, "BySgKJubWYwcdsXJ%2BYuWRh2jkh9I6B8mkf7DOwZqICiy%2BN69a2jpGRSyeFn2c%2BrhW84y3nDC6nFtiOl0lIx4sKQVAyfda6ysj5GgLIVQaY0RoAC3qrSbJnDKUtv7ekhTkxWXDF7C1bhVP74VU9lIKSnfd5MxtS8mRW%2F4blWZQ9g%3D", C_Signature5, 0);		// search and replace request file fragment "BySgKJubWYwcdsXJ%2BYuWRh2jkh9I6B8mkf7DOwZqICiy%2BN69a2jpGRSyeFn2c%2BrhW84y3nDC6nFtiOl0lIx4sKQVAyfda6ysj5GgLIVQaY0RoAC3qrSbJnDKUtv7ekhTkxWXDF7C1bhVP74VU9lIKSnfd5MxtS8mRW%2F4blWZQ9g%3D" with variable 'C_Signature5' on all occurrences
		requestFile0432 = Lib.replaceTextPattern(requestFile0432, "fZLLTsMwEEV%2FxZp9Hk4KQVZTVKgQlXhUNLBgg1x7AhaJHTwOhb8npAXBApa278y9c8bT47e2Ya%2FoyThbAo9TYGiV08Y%2BlnBbnUVHcDybkmybrBPzPjzZG3zpkQIbCi2J3UsJvbfCSTIkrGyRRFBiPb%2B8EFmcis674JRrgC2GQmNlGM2eQuhIJElA9RxLpVxvA8XOamyl1bFybTJ2T4zuEiKXADtzXuGYooRaNoTAlosSHrTWOfK6iA5RFdEk13kksciHI9ebSZoreTAMtiTqcWkpSBtKyNKMR2kWpbzKUpFlIuVxUfB7YKt93hNjdxz%2BG26zE5E4r6pVtLpeV8DuvngOAtjTE6O7%2F4nt%2F8aSCP0nKZh9kdputzH1SiFRLVVwnkZK1QBwmvx0%2Bd7Y1dB2uVi5xqh3Nm8atz31KAOWEHyPI9BWhr%2BD8JiPN0ZH9SgVvaUOlakNakhme9vfX2P2AQ%3D%3D", C_SAMLRequest15, 0);		// search and replace request file fragment "fZLLTsMwEEV%2FxZp9Hk4KQVZTVKgQlXhUNLBgg1x7AhaJHTwOhb8npAXBApa278y9c8bT47e2Ya%2FoyThbAo9TYGiV08Y%2BlnBbnUVHcDybkmybrBPzPjzZG3zpkQIbCi2J3UsJvbfCSTIkrGyRRFBiPb%2B8EFmcis674JRrgC2GQmNlGM2eQuhIJElA9RxLpVxvA8XOamyl1bFybTJ2T4zuEiKXADtzXuGYooRaNoTAlosSHrTWOfK6iA5RFdEk13kksciHI9ebSZoreTAMtiTqcWkpSBtKyNKMR2kWpbzKUpFlIuVxUfB7YKt93hNjdxz%2BG26zE5E4r6pVtLpeV8DuvngOAtjTE6O7%2F4nt%2F8aSCP0nKZh9kdputzH1SiFRLVVwnkZK1QBwmvx0%2Bd7Y1dB2uVi5xqh3Nm8atz31KAOWEHyPI9BWhr%2BD8JiPN0ZH9SgVvaUOlakNakhme9vfX2P2AQ%3D%3D" with variable 'C_SAMLRequest15' on all occurrences

		String requestHeader0432 = "GET " + requestFile0432 + " HTTP/" + httpProtocolVersion + "\r\n" + 
				"Host: teck.accounts.ondemand.com\r\n" + 
				"Connection: Keep-Alive\r\n" + 
				"sec-ch-ua: \"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"\r\n" + 
				"sec-ch-ua-mobile: ?0\r\n" + 
				"Upgrade-Insecure-Requests: 1\r\n" + 
				"User-Agent: " + USER_AGENT_1 + "\r\n" + 
				"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n" + 
				"Sec-Fetch-Site: cross-site\r\n" + 
				"Sec-Fetch-Mode: navigate\r\n" + 
				"Sec-Fetch-Dest: document\r\n" + 
				"Accept-Encoding: gzip, deflate, br\r\n" + 
				"Accept-Language: en-CA,en;q=0.9,ml-IN;q=0.8,ml;q=0.7,en-GB;q=0.6,en-US;q=0.5\r\n" + 
				"\r\n";

		// execute request
		testURL = new HttpTestURL(requestProt0432, requestHost0432, requestPort0432, requestHeader0432, null, requestTimeout, socketPool, cookieHandler, httpLogVectorObject);
		if (userNextProxyConfig != null)
			testURL.setProxy(userNextProxyConfig);
		testURL.setDNSContext(userDNSContext);
		performanceData.setInfoText(threadStep, testURL, -1);		// hint: param #3 is the maximum acceptable response time in milliseconds (-1 = not configured)
		log("[" + threadStep + "] " + testURL.getRequestInfoText() + " ...");

		// Check for browse cache
		if(enableBrowserCache)
		{
			testURL = isInCache(testURL);
			if(!testURL.isCached())
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
			else if(conditionalGet)
			{
				testURL.execute(performanceData);
				testURL = getFromCache(testURL, performanceData);
			}
			else
			{
				testURL.execute(performanceData);
				storeToCache(testURL, performanceData);
			}
		}
		else
		{
			testURL.execute(performanceData);
		}
		requestHeader0432 = null;		// support garbage collector to reduce memory
		log("   " + testURL.getShortResultText());

		// verify response: status code = 200, content type = "TEXT/HTML", header text fragment = [verification disabled], recorded content size = 3389
		// content test algorithm: search text
		urlCallPassed = httpResponseOk(testURL, threadStep, new int[] {200}, "TEXT/HTML", null, "div class='ids-footer__logo-container'");		// Test [432] <- Index 432
		if(replayMode)
		{
			long proxyDataRecordId =1612210922169L;
			createReplaySnapShotRecord(threadLoopCounter, proxyDataRecordId, testURL, replaySnapShotsDump);
		}
		if (!urlCallPassed)
		{
			// failure - dump wrong content to thread log and abort current loop
			terminateFailedUser(testURL);		// set the user to be terminated at end of loop ? - only performed if the URL call has marked before to support that !
			endOfExecuteLoop(false, testURL, threadStep, loopPluginContext);
			return false;
		}
		if (debugContent && urlCallPassed)
			log(testURL);

		// update performance data if url call passed
		if (urlCallPassed)
			threadStep = setPassed(performanceData, threadStep, testURL);
		else
			threadStep = threadStep + 1;		// url call failed - performance data already updated




		// all http requests of page #9_1 successful done
		return true;
	}



	boolean synchResponsesParallelRequestsPage_1(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 1 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_1(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_1 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_2(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 2 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_2(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_2 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_3(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 3 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_3(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_3 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_4(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 4 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_4(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_4 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_5(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 5 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_5(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_5 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_6(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 6 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_6(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_6 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_7(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 7 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_7(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_7 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_8(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 8 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_8(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_8 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	boolean synchResponsesParallelRequestsPage_9(int totalLoopCounter, LoadtestPluginContext loopPluginContext, InnerLoopContext innerLoopContext, Object httpLogVectorObject) throws Exception
	{
		int lastThreadStepInMainThread = threadStep;		// save last executed thread step
		
		// wait for the response of all parallel requests
		threadStep = pageThreadHandler.getLastThreadStep();
		pageThreadHandler.waitForSynch();
		log("Page 9 Time = " + pageThreadHandler.getPageTime() + " ms");
		
		if (!writeHttpAsyncResponseTabOutput_9(loopPluginContext,lastThreadStepInMainThread))
			return false;
		
		// all done
		threadStep = lastThreadStepInMainThread;		// restore last executed thread step
		return true;		// end of asynch response checks for this page
	}
	
	
	private boolean writeHttpAsyncResponseTabOutput_9 (LoadtestPluginContext loopPluginContext, int lastThreadStepInMainThread ) throws Exception
	{
		return true;		// end of asynch response checks for this page
	}



	/**
	 * implement GetRealTimeUserInputFieldsInterface: get the definition and the value of all real-time user input fields.
	 */
	public ArrayList<RealTimeUserInputField> getRealTimeUserInputFields()
	{
		try
		{
			ArrayList<RealTimeUserInputField> realTimeUserInputFieldList = new ArrayList<RealTimeUserInputField>();
			return realTimeUserInputFieldList;
		}
		catch (Exception e)
		{
			log(e);
			return null;
		}
	}



	/**
	 * implement ThreadStepInterface: get the current execution step (current URL call or page break) of a simulated user.
	 */
	public int getExecutionStep()
	{
		return threadStep;
	}



	/**
	 * implement SetThreadStepInterface: set the current execution step (current URL call or page break) of a simulated user.
	 */
	public void setExecutionStep(int threadStep)
	{
		this.threadStep = threadStep;
	}



	/**
	 * implement SSLSessionCacheStatisticInterface: get statistic data about the SSL session cache behavior of a simulated user.
	 */
	public SSLSessionCacheStatistic getSSLSessionCacheStatistic()
	{
		return sslStatistic;
	}



	/**
	 * implement VaryingTestDurationInterface: support to extend or to reduce the planned test duration.
	 */
	public int getPlannedTestDuration()
	{
		return plannedTestDuration;
	}
	
	public void setExtendTestDuration(int deltaSeconds)
	{
		if (plannedTestDuration == 0)
		{
			plannedTestDuration = deltaSeconds;		// the old planned test duration was unlimited but is now limited
			return;
		}
		if (deltaSeconds == 0)
		{
			plannedTestDuration = 0;		// the new planned test duration is now unlimited
			return;
		}
		plannedTestDuration = plannedTestDuration + deltaSeconds;
	}



	/**
	 * implement SuspendResumeInterface: support to suspend and to resume the test execution.
	 */
	public int getPlannedStartupDelay()
	{
		return plannedStartupDelay;
	}
	
	public void setUserResumeStartWaitDelay(int millis)
	{
		userResumeStartWaitDelay = millis;
	}



	/**
	 * implement VaryingLoadInterface: support to decrement the number of simulated users at runtime.
	 */
	public void setDecrementEndOfLoopFlag(boolean decrementEndOfLoopFlag)
	{
		this.decrementEndOfLoopFlag = decrementEndOfLoopFlag;
	}

	public boolean isDecrementEndOfLoopFlag()
	{
		return decrementEndOfLoopFlag;
	}



	/**
	 * internal method: execute the loops for one simulated user as a thread.
	 * controls the thread and displays the (thread-)log if one loop has been completed.
	 */
	public void run()
	{
		// user terminated by inline script, at start of user ?
		if (isTerminateUser())
		{
			System.out.println("# --- thread " + Thread.currentThread().getName() + " aborted --- " + ZoneTime.dateToShortString() + " ---");
			return;
		}
		try
		{
			while (true)
			{
				threadStep = ThreadStepInterface.THREAD_NO_STEP;
				clearLog();
				
				// execute loop
				log("--- loop started --- " + ZoneTime.dateToShortString() + " ---");
				long loopStartTime = System.nanoTime();
				if(replayMode)
				{
					createReplaySnapShot(threadLoopCounter, replaySnapShotsDump);
				}
				boolean loopPassed = this.execute(totalLoopCounter.getAndIncrement());
				performanceData.addUserTransactionMeasuredSamples(transactionHandler.getPendingTransactions());
				ArrayList<UserTransactionContext> nonExecutedTransactions = transactionHandler.getNotExecutedTransactions();

				for (UserTransactionContext nonExecutedTransaction : new ArrayList<>(nonExecutedTransactions))
				{
					if(transactionContextMap.containsKey(nonExecutedTransaction.getTransactionId()+"") && transactionContextMap.get(nonExecutedTransaction.getTransactionId()+"") == null)
					{
						transactionContextMap.remove(nonExecutedTransaction.getTransactionId()+"");
						nonExecutedTransactions.remove(nonExecutedTransaction);
					}
				}

				performanceData.addUserTransactionNotExecutedSamples(nonExecutedTransactions);
				performanceData.addSocktPoolStatistic(socketPool);
				socketPool.closePool();
				performanceData.addSSLCacheStatistic(sslStatistic.getSSLSessionCacheStatisticResult());
				sslStatistic.reset();
				
				// eof of input file ?
				if (abortedByEofInputFile())
					return;		// endOfRun() not called in such a case
				
				// check loop result
				String remainingLoopInfo = "";
				if (checkLoopCount)
					remainingLoopInfo = " [remaining loops = " + (remainingLoops - 1) + "]";
				if (loopPassed)
				{
					performanceData.addPassedLoop();
					log("--- loop passed ---  " + ZoneTime.dateToShortString() + " ---" + remainingLoopInfo);
				}
				else
				{
					performanceData.addFailedLoop();
					log("--- loop failed ---  " + ZoneTime.dateToShortString() + " ---" + remainingLoopInfo);
				}
				threadStep = ThreadStepInterface.THREAD_NO_STEP;
				
				// display thread log to standard output
				if (debugLoops || (debugFailedLoops && (!loopPassed)))
				{
					synchronized (dumpLock)
					{
						dumpLog(System.out);				// full log
					}
				}
				
				// check if max loops reached
				if (checkLoopCount)
				{
					// all done ?
					remainingLoops--;
					if (remainingLoops <= 0)
					{
						endOfRun();
						return;
					}
				}
				
				// check if simulated user must be decremented
				if (decrementEndOfLoopFlag && (getOwnLoadTestUserContext().getDecrementEndOfLoopPointInTime() <= System.currentTimeMillis()))
				{
					return;
				}
				
				// check if max test duration reached
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				{
					endOfRun();
					return;
				}
				
				// check if this specific user is terminated earlier than planned by a HTTP content verification or by a plug-in
				if (isTerminateUser())
				{
					endOfRun();
					System.out.println("# --- thread " + Thread.currentThread().getName() + " terminate failed user --- " + ZoneTime.dateToShortString() + " ---");
					return;
				}
				
				// check if load test execution is temporary suspended
				boolean wasSuspended = false;
				while (isSuspend())
				{
					wasSuspended = true;
					try { Thread.currentThread().sleep(20); } catch (InterruptedException ie) {}
					if (abortedByRemote() || abortedByEofInputFile())
					{
						endOfRun();
						return;
					}
					
					// check if max test duration reached during suspend
					if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
					{
						endOfRun();
						return;
					}
				}
				// check if load test execution is resumed
				if (wasSuspended)
				{
					try { sleepRemoteInterruptable(userResumeStartWaitDelay); } catch (InterruptedException ie) {}
				}
				
				// wait 20 milliseconds if loop has failed
				if (!loopPassed)
					try { Thread.currentThread().sleep(loopErrorDelay); } catch (InterruptedException ie) {}
				
				// enable pacing for the loop
				if(pacing > 0)
				{
					long loopElaspedTime = (System.nanoTime() - loopStartTime) / 1000000l;
					long loopPacingValue = Long.valueOf(pacing).longValue() * 1000l;
					if (loopElaspedTime < loopPacingValue)
					{
						threadStep = threadStep - 1;
						log(" - loop pacing: sleeping for "+ (loopPacingValue - loopElaspedTime)+" ms ...");
						Thread.currentThread().sleep(loopPacingValue - loopElaspedTime);
						threadStep++;
					}
				}
				// execute next loop
				threadLoopCounter++;
			}	// end: while (true)
		}
		catch (Throwable tex)
		{
			log("*** INTERNAL ERROR / LOAD TEST ABORTED ***");
			log(tex);
			log();
			synchronized (dumpLock)
			{
				if(replayMode)
				{
					saveReplaySnapShots("ZTReplay.snapshot");
				}
				dumpLog(System.out);				// full log
				System.err.println("*** INTERNAL ERROR / LOAD TEST ABORTED ***");
				tex.printStackTrace(System.err);
				System.exit(-2);
			}
		}
		finally
		{
			// remove the reference to this load test instance and the reference to the thread that runs this instance
			try
			{
				if (!decrementEndOfLoopFlag)
				{
					getUserContextTable().getWriteLock().lock();
					getOwnLoadTestUserContext().setLoadTestUserFinallyEnded();
					getUserContextTable().getWriteLock().unlock();
				}
				else
					decrementEndOfLoopFlag = false;
			}
			catch (Throwable texFinal)
			{
				System.err.println("*** INTERNAL FINALLY ERROR / LOAD TEST ABORTED ***");
				texFinal.printStackTrace(System.err);
				System.exit(-2);
			}
		}
	}



	/**
	 * internal method: called when a user has completed the test-run.
	 */
	public void endOfRun()
	{
		clearLog();
		
		if (debugLoops && (getLog().size() > 0))
		{
			synchronized (dumpLock)
			{
				dumpLog(System.out);		// dump log of inline scripts and load test plug-ins which are executed at end of user
			}
		}
	}



	/**
	 * Main program. Starts the test and waits until all have been done.
	 */
	public static void main(String[] args)
	{
		// check command line argument -h or -help
		if ((ParseArgs.hasOption(args, "-h")) || (ParseArgs.hasOption(args, "-help")))
		{
			System.out.println();
			System.out.println("Help - Proxy Sniffer Load Test Program:");
			System.out.println();
			System.out.println("-u <number>              ->> required argument: number of concurrent users");
			System.out.println("-d <seconds>             ->> required argument: planned test duration in seconds (default: 30, 0 = unlimited)");
			System.out.println("-t <seconds>             ->> required argument: request timeout per url in seconds");
			System.out.println();
			System.out.println("-tconnect <seconds>      ->> TCP/IP socket connect timeout in seconds (default: use value of -t <seconds>)");
			System.out.println();
			System.out.println("-sdelay <milliseconds>   ->> startup delay time between concurrent users in milliseconds (default: 200)");
			System.out.println("-mtpu <number>           ->> maximum number of parallel threads per user (default: " + MAX_PARALLEL_THREADS_PER_USER + ")");
			System.out.println("-maxloops <number>       ->> maximum number of loops per user (default: 0 = unlimited)");
			System.out.println("-pacing <seconds>        ->> sets a minimum time for all in the loop executed page breaks and url calls which must be elapsed before the next loop starts (default: 0 = no pacing)");
			System.out.println("-downlink <kbps>         ->> maximum downlink network bandwidth per user in kilobits per second (default: 0 = unlimited)");
			System.out.println("-uplink <kbps>           ->> maximum uplink network bandwidth per user in kilobits per second (default: 0 = unlimited)");
			System.out.println("-multihomed <filename>   ->> use serveral client ip addresses - file format: <addr1>, <addr2>, ... (all on the same line)");
			System.out.println("-sampling <seconds>      ->> statistic sampling interval in seconds (default: 15)");
			System.out.println("-percpage <percent>      ->> additional sampling rate per web page call in percent (default: 100)");
			System.out.println("-percurl <percent>       ->> additional sampling rate per url call in percent (default: 0)");
			System.out.println("-percurlopt <level>      ->> extended sampling level per url call, see application reference manual (default: 0 = disabled)");
			System.out.println("-maxerrsnap <number>     ->> maximum number of error snapshots per url (default: 0 = unlimited)");
			System.out.println("-maxerrmem <megabytes>   ->> maximum size of memory in megabytes which can be used for error snapshots (default: 20, -1 = unlimited)");
			System.out.println("-nosdelayCluster         ->> apply startup delay time between concurrent users per exec agent, but not per cluster job (default: apply per cluster job)");
			System.out.println("-setuseragent \"<text>\"   ->> replace the recorded value of the HTTP request header field User-Agent with a new value");
			System.out.println("-collect <host>[:<port>] ->> collect additional data from external measuring agents (data collectors)");
			System.out.println("-res <filename>          ->> overrides the default name of the binary output file");
			System.out.println("-nores                   ->> disables to create the binary output file");
			System.out.println();
			System.out.println("-ssl <version>           ->> set SSL version: possible options are \"all\" (default), \"v3\", \"tls\", \"tls11\" or \"tls12\"");
			System.out.println("-sslcache <seconds>      ->> timeout of user-related SSL session cache (default: 300, 0 = cache disabled)");
			System.out.println("-sslrandom <type>        ->> set the type of the random generator used for SSL handshakes: possible options are \"fast\", \"iaik\" (default) or \"java\"");
			System.out.println("-sslcmode                ->> apply SSL/HTTPS compatibility workarounds for deficient SSL servers");
			System.out.println("-noECC                   ->> disable support of elliptic curve cryptography (ECC)");
			System.out.println("-nosni                   ->> disable support of server name indication (SNI)");
			System.out.println("-snicritical             ->> set the TLS SNI extension as critical (default: non-critical)");
			System.out.println("-tlssessiontickets       ->> set the TLS to use Session Tickets (non-critical)");
			System.out.println("-iaikLast                ->> adds the IAIK security provider at the last position (instead of default: IAIK at first position)");
			System.out.println();
			System.out.println("-dnssrv <IP-1>[,IP-N])   ->> use specific DNS server(s) to resolve DNS host names (default: use OS to resolve host names)");
			System.out.println("-dnshosts <filename>     ->> use specific DNS hosts file (default: use OS to resolve host names)");
			System.out.println("-dnstranslation <filename> ->> use a DNS translation file that converts DNS names. It might be needed to disable TLS SNI if this option is used");
			System.out.println("-dnsenattl               ->> enable consideration of DNS TTL by using the received TTL-values from the DNS Server(s) (default: TTL disabled)");
			System.out.println("-dnsfixttl <seconds>     ->> enable DNS TTL by using a fixed TTL-value of seconds for all DNS resolves");
			System.out.println("-dnsperloop              ->> perform new DNS resolves for each executed loop. All resolves are stable within the same loop (no consideration of DNS TTL within a loop)");
			System.out.println("-dnsstatistic            ->> collect statistical data about DNS resolutions. Note: use this option only if not any other, more specific DNS option is enabled");
			System.out.println("-dnsdebug                ->> debug DNS resolves and the DNS cache");
			System.out.println("-enableIPv6 <networkinterface-name>  ->> enable only IPv6 support for recording, also can provide the IPv6 network interface of the load generator");
			System.out.println("-enableIPv6v4 <networkinterface-name> ->> enable both IPv6 and IPv4 (first will try with IPv6 ,if fails will try with IPv4 support for recording),also can provide the IPv6 network interface of the load generator");
			System.out.println();
			System.out.println("-dfl                     ->> debug execution steps of all failed loops to standard output");
			System.out.println("-dl                      ->> debug execution steps of all loops to standard output");
			System.out.println("-dh                      ->> debug HTTP protocol headers to standard output, includes the -dl option");
			System.out.println("-dc                      ->> debug HTTP content data to standard output, includes the -dl option");
			System.out.println("-dhc                     ->> debug HTTP protocol headers and HTTP content data to standard output, includes the -dl option");
			System.out.println("-dC                      ->> debug cookies to standard output, includes the -dl option");
			System.out.println("-dK                      ->> debug keep-alive (socket pool) to standard output, includes the -dl option");
			System.out.println("-dssl                    ->> debug SSL handshake (https) to standard output, includes the -dl and the -dK option");
			System.out.println();
			System.out.println("-tz <timezone>           ->> set time zone (see Application Reference Manual: supported time zones)");
			System.out.println("-dgs a|c                 ->> set number format (decimal group separator) a = '  c = ,");
			System.out.println("-browserlang <text>      ->> set the browser language for the test");
			System.out.println("-enablebrowcache         ->> set the browser cache mode on");
			System.out.println("-checknewpageversion     ->> set the conditional GET mode on");
			System.out.println("-replay                  ->> Indicates the replay mode");
			System.out.println("-annotation <text>       ->> adds an annotation for this test run");
			System.out.println();
			System.out.println("-execAgentHost <ip address or dns name>      ->> set the ip address or the dns name of the exec agent from which the license is used (default: 127.0.0.1)");
			System.out.println("-execAgentPort <port>                        ->> set the tcp/ip port of the exec agent (default: 7993)");
			System.out.println("-execAgentProtocol <plain | http | https>    ->> set the protocol of the exec agent (default: plain)");
			System.out.println("-execAgentUsername <string>                  ->> set the auth. username for the exec agent (default: [no username])");
			System.out.println("-execAgentPassword <string>                  ->> set the auth. password for the exec agent (default: [no password])");
			System.out.println();
			System.out.println("-h                       ->> display this help text");
			System.out.println("-help                    ->> display this help text");
			System.out.println();
			System.exit(-1);
		}
		
		System.out.println("+----------------------------------------------------------------+");
		System.out.println("| Welcome to the ZebraTester Load Test Program.                  |");
		System.out.println("| Additional help available with program argument \"-help\"        |");
		System.out.println("| Procedure Copyright by Apica. |");
		System.out.println("| All rights reserved.             |");
		System.out.println("+----------------------------------------------------------------+");
		
		
		if (commonNextProxyConfig != null)
		{
			System.out.println();
			System.out.println("*** Warning: Loadtest over HTTP(S) Proxy ***");
		}
		
		// check command line argument -noECC
		sslECC = (!ParseArgs.hasOption(args, "-noECC"));       // disable ssl ecc ?
		
		// initialize ssl/https support
		SSLInit.execute(!ParseArgs.hasOption(args, "-iaikLast"), true);
		if (sslECC)
			SSLInit.enableECC();
		
		// check command line argument -nosni
		if (ParseArgs.hasOption(args, "-nosni"))            // disable ssl sni ?
			sslSNI = false;
		
		// check command line argument -snicritical
		if (ParseArgs.hasOption(args, "-snicritical"))      // set ssl sni as critical tls extension ?
			sslSNICirical = true;
		
		// check command line argument -tlssessiontickets
		if (ParseArgs.hasOption(args, "-tlssessiontickets"))      // set tls extension session tickets?
			useTlsSessionTickets = true;
		
		// set default character set for response content tests
		setCharEncoding(prxCharEncoding);
		
		// check command line argument -tz <timezone>
		String timeZoneString = ParseArgs.getString(args, "-tz");
		if (timeZoneString != null)
			defaultTimeZone = timeZoneString.toUpperCase(); // set time zone?
		ZoneTime.setDefaultTimeZone(defaultTimeZone);
		
		// check command line argument -dgs a|c
		String dgs = ParseArgs.getString(args, "-dgs");
		if (dgs != null)
		{
			if (dgs.equalsIgnoreCase("a"))
				defaultNumberGroupingSeparator = '\'';
			if (dgs.equalsIgnoreCase("c"))
				defaultNumberGroupingSeparator = ',';
		}
		Lib.setDefaultNumberGroupingSeparator(defaultNumberGroupingSeparator);
		
		// check command line argument -browserlang <text>
		browserLanguage = ParseArgs.getString(args, "-browserlang");
		
		// check command line argument -enablebrowcache
		if (ParseArgs.hasOption(args, "-enablebrowcache"))
		{
			enableBrowserCache = true;
		}
		
		// check command line argument -checknewpageversion
		if (ParseArgs.hasOption(args, "-checknewpageversion"))
		{
			conditionalGet = true;
		}
		
		// check command line argument -replay
		if (ParseArgs.hasOption(args, "-replay"))
		{
			replayMode = true;
		}
		
		// check command line argument -annotation <text>
		String testRunAnnotation = ParseArgs.getString(args, "-annotation");
		if (testRunAnnotation != null)
		{
			if (testRunAnnotation.startsWith("\"") && testRunAnnotation.endsWith("\""))
				testRunAnnotation = testRunAnnotation.substring(1, testRunAnnotation.length() - 1);
		}
		
		// check command line argument -ssl
		String newSslProtocolVersion = ParseArgs.getString(args, "-ssl");
		if (newSslProtocolVersion != null)
		{
			if (newSslProtocolVersion.equalsIgnoreCase("v2"))
				sslProtocolVersion = "v2";
			if (newSslProtocolVersion.equalsIgnoreCase("v3"))
				sslProtocolVersion = "v3";
			if (newSslProtocolVersion.equalsIgnoreCase("tls"))
				sslProtocolVersion = "tls";
			if (newSslProtocolVersion.equalsIgnoreCase("tls11"))
				sslProtocolVersion = "tls11";
			if (newSslProtocolVersion.equalsIgnoreCase("tls12"))
				sslProtocolVersion = "tls12";
		}
		
		// check command line argument -sslcache <seconds>
		Integer newSslSessionCacheTimeout = ParseArgs.getInteger(args, "-sslcache");
		if (newSslSessionCacheTimeout != null)
			sslSessionCacheTimeout = newSslSessionCacheTimeout.intValue();
		
		// check command line argument -sslrandom
		String sslHandshakeRandomGeneratorTypeStr = ParseArgs.getString(args, "-sslrandom");
		if (sslHandshakeRandomGeneratorTypeStr != null)
		{
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("java"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_JAVA_DEFAULT;
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("iaik"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_IAIK_DEFAULT;
			if (sslHandshakeRandomGeneratorTypeStr.equalsIgnoreCase("fast"))
				sslHandshakeRandomGeneratorType = HttpSocketPool.SSL_HANDSHAKE_RANDOM_GENERATOR_TYPE_FAST;
		}
		
		// check command line argument -sslcmode
		sslcmode = ParseArgs.hasOption(args, "-sslcmode");  // enable ssl/https compatibility workarounds?
		
		// check command line argument -dfl
		debugFailedLoops = ParseArgs.hasOption(args, "-dfl"); // debug failed loops?
		
		// check command line argument -dl
		debugLoops = ParseArgs.hasOption(args, "-dl");      // debug loops?
		
		// check command line argument -dh
		debugHttp = ParseArgs.hasOption(args, "-dh");       // debug http?
		if (debugHttp)
			debugLoops = true;
		
		// check command line argument -dc
		debugContent = ParseArgs.hasOption(args, "-dc");    // debug content?
		if (debugContent)
			debugLoops = true;
		
		// check command line argument -dhc
		if (ParseArgs.hasOption(args, "-dhc"))				// debug http and content
		{
			debugLoops = true;
			debugHttp = true;
			debugContent = true;
		}
		
		// check command line argument -dC
		debugCookies = ParseArgs.hasOption(args, "-dC");    // debug cookies?
		if (debugCookies)
			debugLoops = true;
		
		// check command line argument -dK
		debugKeepAlive = ParseArgs.hasOption(args, "-dK");  // debug keep.alive (socket pool)?
		if (debugKeepAlive)
			debugLoops = true;
		
		// check command line argument -dssl
		debugSsl = ParseArgs.hasOption(args, "-dssl");      // debug keep.alive (socket pool)?
		if (debugSsl)
		{
			debugLoops = true;
			debugKeepAlive = true;
		}
		
		// get startup delay
		Integer newStartupDelay = ParseArgs.getInteger(args, "-sdelay");
		if (newStartupDelay != null)
			plannedStartupDelay = newStartupDelay.intValue();
		
		// get max. parallel threads per user - note: only valid if CONTAINS_PARALLEL_EXECUTED_URLS = true
		Integer newMaxParallelThreadsPerUser = ParseArgs.getInteger(args, "-mtpu");
		if (newMaxParallelThreadsPerUser != null)
		{
			if (newMaxParallelThreadsPerUser.intValue() > 0)
				maxParallelThreadsPerUser = newMaxParallelThreadsPerUser.intValue();
		}
		// get maximum number of loops per user
		maxPlannedLoops = 0;  // maximum loops per user, 0 = unlimited
		Integer newLoops = ParseArgs.getInteger(args, "-maxloops");
		if (newLoops != null)
			maxPlannedLoops = newLoops.intValue();
		
		// pacing of loops per user
		Integer pacingObj = ParseArgs.getInteger(args, "-pacing");
		if (pacingObj != null)
			pacing = pacingObj.intValue();
		
		// get maximum downlink network bandwidth per user (default = unlimited)
		Integer newDownlinkBandwidth = ParseArgs.getInteger(args, "-downlink");
		if (newDownlinkBandwidth != null)
			downlinkBandwidth = newDownlinkBandwidth.intValue();
		
		// get maximum uplink network bandwidth per user (default = unlimited)
		Integer newUplinkBandwidth = ParseArgs.getInteger(args, "-uplink");
		if (newUplinkBandwidth != null)
			uplinkBandwidth = newUplinkBandwidth.intValue();
		
		// get statistic sampling interval
		int samplingInterval = 15;  // statistic sampling interval in seconds
		Integer newSamplingInterval = ParseArgs.getInteger(args, "-sampling");
		if (newSamplingInterval != null)
			samplingInterval = newSamplingInterval.intValue();
		
		// get additional sampling rate per web page call
		int percentilePageSampling = 100;  // additional sampling rate per web page call in percent
		Integer newPercentilePageSampling = ParseArgs.getInteger(args, "-percpage");
		if (newPercentilePageSampling != null)
			percentilePageSampling = newPercentilePageSampling.intValue();
		
		// get additional sampling rate per url call
		int percentileUrlSampling = 0;  // additional sampling rate per url call in percent
		Integer newPercentileUrlSampling = ParseArgs.getInteger(args, "-percurl");
		if (newPercentileUrlSampling != null)
			percentileUrlSampling = newPercentileUrlSampling.intValue();
		
		// get extended sampling level per url call
		int percentileUrlSamplingAddOption = 0;  // extended sampling level per url call, 0 = disabled
		Integer newPercentileUrlSamplingAddOption = ParseArgs.getInteger(args, "-percurlopt");
		if (newPercentileUrlSamplingAddOption != null)
			percentileUrlSamplingAddOption = newPercentileUrlSamplingAddOption.intValue();
		
		// get maximum number of error snapshots per URL (0 = unlimited)
		int maxErrorSnapshots = 0;
		Integer newMaxErrorSnapshots = ParseArgs.getInteger(args, "-maxerrsnap");
		if (newMaxErrorSnapshots != null)
			maxErrorSnapshots = newMaxErrorSnapshots.intValue();
		
		// get maximum memory in megabytes which can be used for error snapshots (-1 = unlimited, default = 10)
		long maxErrorSnapshotMemory = 20;
		Long newMaxErrorSnapshotMemory = ParseArgs.getLong(args, "-maxerrmem");
		if (newMaxErrorSnapshotMemory != null)
			maxErrorSnapshotMemory = newMaxErrorSnapshotMemory.longValue();
		
		// single user mode ?
		boolean singleUserMode = ParseArgs.hasOption(args, "-singleuser");
		
		// override value for http user agent field ?
		String setUserAgentStr = ParseArgs.getIgnoreCaseString(args, "-setuseragent");
		if (setUserAgentStr != null)
		{
			USER_AGENT_1 = setUserAgentStr;
		}
		// get required input arguments
		int concurrentUsers = 0;     // number of concurrent users
		plannedRequestTimeout = 0;   // request timeout in seconds
		
		System.out.println();
		
		// parse -u argument or ask --> <number of concurrent users>
		Integer i = ParseArgs.getIntegerOrAsk(args, "-u", "Concurrent Users, <RETURN>=1 : ", new Integer(1));
		if (i == null)
			System.exit(-1);
		else
			concurrentUsers = i.intValue();
		
		// parse -d argument or ask --> <test duration in seconds>
		i = ParseArgs.getIntegerOrAsk(args, "-d", "Test Duration in Seconds, <RETURN>=30 : ", new Integer(30));
		if (i == null)
			System.exit(-1);
		else
			plannedTestDuration = i.intValue();
		
		// parse -t argument or ask --> <request timeout in seconds>
		i = ParseArgs.getIntegerOrAsk(args, "-t", "HTTP Request Timeout per URL in Seconds, <RETURN>=60 : ", new Integer(60));
		if (i == null)
			System.exit(-1);
		else
			plannedRequestTimeout = i.intValue();
		
		// parse optional -tconnect argument (TCP/IP socket connect timeout in seconds)
		i = ParseArgs.getInteger(args, "-tconnect");
		if (i != null)
			plannedConnectTimeout = i.intValue();
		
		String genericFileName = PerformanceData.proposeFileName("LoginReport_Prod_SM_corr", concurrentUsers, ParseArgs.getString(args, "-executionPlan"));
		
		// auto-configure binary result file
		if (!ParseArgs.hasOption(args, "-nores"))
		{
			String newResultFile = ParseArgs.getString(args, "-res");
			if (newResultFile == null)
				resultFile = genericFileName + ".prxres";
			else
				resultFile = newResultFile;
			System.out.println("Result File : " + resultFile);
		}
		
		// display common arguments at console output
		System.out.println();
		System.out.println("# concurrent users = " + concurrentUsers);
		System.out.println("# max. parallel threads per user = [serial execution order for all URLs]");
		System.out.print("# planned test duration = ");
		if (plannedTestDuration == 0)
			System.out.println("unlimited");
		else
			System.out.println("" + plannedTestDuration + " seconds");
		System.out.println("# http request timeout = " + plannedRequestTimeout + " seconds");
		if (plannedConnectTimeout != 0)
			System.out.println("# tcp/ip socket connect timeout = " + plannedConnectTimeout + " seconds");
		System.out.println("# startup delay = " + plannedStartupDelay + " milliseconds");
		System.out.println("# statistic sampling interval = " + samplingInterval + " seconds");
		System.out.println("# additional sampling rate per web page call = " + percentilePageSampling + " %");
		System.out.println("# additional sampling rate per url call = " + percentileUrlSampling + " %");
		System.out.println("# extended sampling per url call = " + PerformanceDataTickExtension.extTypeToString(percentileUrlSamplingAddOption).toLowerCase());
		System.out.print("# max loops per user = ");
		if (maxPlannedLoops == 0)
			System.out.println("unlimited");
		else
			System.out.println("" + maxPlannedLoops + " loops");
		System.out.print("# pacing for loops = ");
		if (pacing == 0)
			System.out.println("no pacing");
		else
			System.out.println("" + pacing + " seconds");
		if (downlinkBandwidth > 0)
			System.out.println("# max downlink bandwidth per user = " + downlinkBandwidth + " kbps");
		if (uplinkBandwidth > 0)
			System.out.println("# max uplink bandwidth per user = " + uplinkBandwidth + " kbps");
		System.out.println("# http protocol version = v" + httpProtocolVersion);
		System.out.println("# ssl protocol version = " + sslProtocolVersion);
		if (sslSessionCacheTimeout != 0)
			System.out.println("# ssl session cache timeout = " + sslSessionCacheTimeout + " seconds");
		else
			System.out.println("# ssl session cache disabled");
		if (resultFile != null)
			System.out.println("# result file = " + resultFile);
		else
			System.out.println("# no result file");
		if (debugFailedLoops)
			System.out.println("# debug failed loops");
		if (debugLoops)
			System.out.println("# debug loops");
		if (debugHttp)
			System.out.println("# debug http protocol headers");
		if (debugContent)
			System.out.println("# debug http content data");
		if (debugCookies)
			System.out.println("# debug cookies");
		if (debugKeepAlive)
			System.out.println("# debug keep-alive (socket pool)");
		if (debugSsl)
			System.out.println("# debug ssl (https)");
		
		
		// ----------------------------
		// *** initialize load test ***
		// ----------------------------
		
		
		// initialize performance data
		// ---------------------------
		final int PAGE_BREAKS = 9;  // number of page breaks in execute()  - modify this value if you add or delete some page breaks
		final int MAX_THREAD_STEPS = 424;  // number of URL requests in execute() - modify this value if you add or delete some requests
		performanceData = new PerformanceData(PAGE_BREAKS, MAX_THREAD_STEPS, concurrentUsers, -1, plannedTestDuration, maxPlannedLoops, httpProtocolVersion, plannedStartupDelay, plannedRequestTimeout, samplingInterval, percentilePageSampling, percentileUrlSampling, percentileUrlSamplingAddOption);
		performanceData.setInfoText("LoginReport_Prod_SM_corr");
		performanceData.setExecutorsAnnotation(testRunAnnotation);
		if (commonNextProxyConfig != null)
		{
			performanceData.setProxyInfo(proxyHttpHost, proxyHttpPort, proxyHttpsHost, proxyHttpsPort);
			performanceData.addTestDescription("*** Warning: Load test executed via outbound proxy ***");
		}
		performanceData.setResultFileName(resultFile);
		performanceData.setDumpStream(System.out, "# ");
		performanceData.setMaxErrorSnapshots(maxErrorSnapshots);		// 0 = unlimited
		if (maxErrorSnapshotMemory >= 0)
			performanceData.setMaxErrorSnapshotsMemory(maxErrorSnapshotMemory * 1048576l);		// value in bytes
		
		if (sslECC)
			performanceData.addTestDescription("*** SSL/TLS ECC is enabled ***");
		
		if ((downlinkBandwidth != 0) || (uplinkBandwidth != 0))
		{
			String downlinkBandwidthStr = "unlimited";
			String uplinkBandwidthStr = "unlimited";
			
			if (downlinkBandwidth != 0)
				downlinkBandwidthStr = "" + downlinkBandwidth + " kbps";
			if (uplinkBandwidth != 0)
				uplinkBandwidthStr = "" + uplinkBandwidth + " kbps";
			
			performanceData.addTestDescription("*** Warning: Max. network bandwidth per user limited. downlink = " + downlinkBandwidthStr + ", uplink = " + uplinkBandwidthStr + " ***");
		}
		
		if ((percentileUrlSamplingAddOption != PerformanceDataTickExtension.EXT_TYPE_NOTYPE) && (percentileUrlSampling > 0))
			performanceData.addTestDescription("*** Warning: Option \"" + PerformanceDataTickExtension.extTypeToString(percentileUrlSamplingAddOption).toLowerCase() + "\" enabled for additional sampling rate per URL call ***");
		if (debugFailedLoops)
			performanceData.addTestDescription("*** Warning: Debug failed loops enabled ***");
		if (debugLoops)
			performanceData.addTestDescription("*** Warning: Debug loops enabled ***");
		if (debugHttp)
			performanceData.addTestDescription("*** Warning: Debug HTTP protocol headers enabled ***");
		if (debugContent)
			performanceData.addTestDescription("*** Warning: Debug HTTP content data enabled ***");
		if (debugCookies)
			performanceData.addTestDescription("*** Warning: Debug cookies enabled ***");
		if (debugKeepAlive)
			performanceData.addTestDescription("*** Warning: Debug keep-alive enabled ***");
		if (debugSsl)
			performanceData.addTestDescription("*** Warning: Debug SSL/TLS enabled ***");
		if (!sslProtocolVersion.equalsIgnoreCase("all"))
			performanceData.addTestDescription("*** Warning: SSL/TLS protocol version fixed to " + sslProtocolVersion.toUpperCase() + " ***");
		if (sslSessionCacheTimeout == 0)
			performanceData.addTestDescription("*** Warning: SSL/TLS session cache disabled ***");
		if (singleUserMode)
		{
			String singleUserModeWarning = "*** Warning: Single user mode enabled ***";
			System.out.println(singleUserModeWarning);
			performanceData.addTestDescription(singleUserModeWarning);
		}
		if (setUserAgentStr != null)
		{
			String overrideUserAgentWarning = "*** Warning: User agent set to \"" + setUserAgentStr + "\" ***";
			System.out.println(overrideUserAgentWarning);
			performanceData.addTestDescription(overrideUserAgentWarning);
		}
		
		
		// ready to start load test...
		initNull(concurrentUsers);
		performanceData.setUserContextTable(getUserContextTable());
		
		// ... but init first remote interface ...
		initRemote(args);
		
		// ... and init plug-in class loader ...
		try
		{
			if (getPluginClassLoader() == null)
				setPluginClassLoader(new LoadtestPluginClassLoader(getSymmetricEncryptContext(), getEncryptedClasspathList()));
		}
		catch (Throwable pluginClassLoaderThrowable)
		{
			System.out.println("*** ERROR: Unable to load encrypted files ***");
			pluginClassLoaderThrowable.printStackTrace();
			System.exit(-1);
		}
		
		// ... and check multihomed option ...
		initMultihomed(args);
		
		// ... and add dynaTrace session ID to load test result - if available ...
		initDynaTrace();
		
		
		// use test-specific DNS hosts file (optional) ?
		String dnsHostsFile = ParseArgs.getIgnoreCaseString(args, "-dnshosts");
		if (dnsHostsFile != null)
		{
			try
			{
				dnsCache = new DNSCache(getSymmetricEncryptContext(), dnsHostsFile);
			}
			catch (IOException ie)
			{
				System.out.println("*** ERROR: unable to read DNS hosts file " + dnsHostsFile + " ***");
				System.out.println("*** Hint: you have to ZIP " + dnsHostsFile + " together with the compiled class of the load test program ***");
				ie.printStackTrace();
				System.exit(-1);
			}
		}
		
		// use test-specific DNS translation table (optional) ?
		String dnsTranslationTableFile = ParseArgs.getIgnoreCaseString(args, "-dnstranslation");
		if (dnsTranslationTableFile != null)
		{
			try
			{
				DNSTranslationTable dnsTranslationTable = new DNSTranslationTable(getSymmetricEncryptContext(), new File(dnsTranslationTableFile));
				if (dnsCache == null)
					dnsCache = new DNSCache();
				dnsCache.setDNSTranslationTable(dnsTranslationTable);
			}
			catch (IOException ie)
			{
				System.out.println("*** ERROR: unable to read DNS translation table file " + dnsTranslationTableFile + " ***");
				System.out.println("*** Hint: you have to ZIP " + dnsTranslationTableFile + " together with the compiled class of the load test program ***");
				ie.printStackTrace();
				System.exit(-1);
			}
		}
		
		// use test-specific DNS servers (optional) ?
		String dnsSrvStr = ParseArgs.getIgnoreCaseString(args, "-dnssrv");
		if (dnsSrvStr != null)
		{
			ArrayList<String> dnsSrvList = new ArrayList<String>();
			StringTokenizer dnsTok = new StringTokenizer(dnsSrvStr, ",;");
			while (dnsTok.hasMoreTokens())
				dnsSrvList.add(dnsTok.nextToken());
			if (dnsCache == null)
				dnsCache = new DNSCache(dnsSrvList);
			else
				dnsCache.setDnsServers(dnsSrvList);
		}
		
		// enable DNS TTL ?
		if (ParseArgs.hasOption(args, "-dnsenattl"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.enableTTL();
		}
		
		// set fixed DNS TTL ?
		Integer dnsFixTTL = ParseArgs.getInteger(args, "-dnsfixttl");
		{
			if (dnsFixTTL != null)
			{
				if (dnsCache == null)
					dnsCache = new DNSCache();
				dnsCache.setFixedTTL(dnsFixTTL.intValue());
			}
		}
		
		// enable DNS resolves per loop ?
		if (ParseArgs.hasOption(args, "-dnsperloop"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsPerLoop = true;
		}
		
		// enable DNS statistic ?   // note: use this option only if not any other, more specific DNS option is enabled.
		if (ParseArgs.hasOption(args, "-dnsstatistic"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
		}
		
		// debug DNS resolver ?
		if (ParseArgs.hasOption(args, "-dnsdebug"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setDebugToStdout(true);
		}
		
		// enable IPv6 
		if (ParseArgs.hasIgnoreCaseOption(args, "-enableIPv6"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setEnableIPv6(true);
			String networkInterfaceName = ParseArgs.getString(args, "-enableIPv6");
			if(null != networkInterfaceName && !networkInterfaceName.startsWith("-"))
				dnsCache.setNetworkInterfaceName(networkInterfaceName);
		}
		
		// enable IPv6 and V4 
		if (ParseArgs.hasIgnoreCaseOption(args, "-enableIPv6v4"))
		{
			if (dnsCache == null)
				dnsCache = new DNSCache();
			dnsCache.setEnableIPv6v4(true);
			String networkInterfaceName = ParseArgs.getString(args, "-enableIPv6v4");
			if(null != networkInterfaceName && !networkInterfaceName.startsWith("-"))
				dnsCache.setNetworkInterfaceName(networkInterfaceName);
		}
		
		if (dnsCache != null)
		{
			// update performance data with DNS settings
			performanceData.addDNSCacheStatistic(dnsCache.getCacheStatistic());
			performanceData.addTestDescription("*** Warning: OS-independent DNS access enabled. " + dnsCache.getConfigInfoText() + " ***");
			if (dnsPerLoop)
				performanceData.addTestDescription("*** Warning: DNS option -dnsperloop enabled ***");
			
			// log DNS settings
			System.out.println("# OS-independent DNS access enabled. " + dnsCache.getConfigInfoText());
			if (dnsPerLoop)
				System.out.println("# DNS option -dnsperloop enabled");
		}
		
		// initialize file cache for large XML, SOAP and ASCII requests
		try
		{
			requestFileCache.readFile(getSymmetricEncryptContext(), REQUEST_FILE_CACHE_FILE_1);		// LoginReport_Prod_SM_corr_RequestContent0135.txt
			requestFileCache.readFile(getSymmetricEncryptContext(), REQUEST_FILE_CACHE_FILE_2);		// LoginReport_Prod_SM_corr_RequestContent0243.txt
		}
		catch (IOException ie)
		{
			System.out.println("*** ERROR: UNABLE TO OPEN DATA FILE FOR LARGE ASCII OR XML REQUEST ***");
			ie.printStackTrace();
			System.exit(-2);
		}
		
		// calculate sampling offset and virtual user startup offset for cluster jobs (time shift per cluster member)
		int samplingTimeshift = 0;	// value in seconds
		if (!ParseArgs.hasOption(args, "-nosdelayCluster"))
		{
			if ((getClusterTotalMemberCount() > 1) && (getClusterMemberLocalId() > 0))
			{
				samplingTimeshift = Math.round(((float) samplingInterval / (float) getClusterTotalMemberCount()) * (float) getClusterMemberLocalId());
				System.out.println("# samplingTimeshift = " + samplingTimeshift + " seconds");
				
				long startupDelayOffset = (plannedStartupDelay / ((long) getClusterTotalMemberCount())) * ((long) getClusterMemberLocalId());
				System.out.println("# startupDelayTimeshift = " + startupDelayOffset + " milliseconds");
				System.out.println();
				if (startupDelayOffset > 0)
				{
					try { sleepRemoteInterruptable(startupDelayOffset); } catch (InterruptedException ie) {}
				}
			}
		}
		
		
		// update performance data
		// -----------------------
		testDurationStart = System.currentTimeMillis();
		performanceData.setStartDate();
		performanceData.addSnapshot(getCpuUsagePercent());
		performanceData.setSnapshotsTimeshift(samplingTimeshift);
		performanceData.setEndDate();
		
		// initialize global context for plug-ins  
		LoadtestPluginContext globalPluginContext = new LoadtestPluginContext(prxVersion, prxCharEncoding, new LoginReport_Prod_SM_corr());
		
		
		// --------------------------
		// *** start of load test ***
		// ---------------------------
		
		
		// special case for execution plans - start test with zero virtual users
		// ---------------------------------------------------------------------
		if (hasExecutionPlan())
		{
			if (concurrentUsers != 0)
			{
				System.out.println("*** Fatal Error: Load test with execution plan must start with zero number of virtual users - Load test program aborted ***");
				System.exit(1);
			}
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				LoginReport_Prod_SM_corr simulatedUser = new LoginReport_Prod_SM_corr(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				
				HttpLoadTestUserContext userContext = new HttpLoadTestUserContext(simulatedUser, null);
				userContext.setLoadTestUserExecutionPlanPlaceholder();
				getUserContextTable().getUserContextList().add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
		}
		
		
		// start virtual users as threads (normal case)
		// --------------------------------------------
		usersToBeIncreasedAtStartupOffset.set(concurrentUsers);
		for (int x = 0; x < concurrentUsers; x++)
		{
			if (cancelIncrementDecrementUser || cancelInitialIncrementUser)
			{
				usersToBeIncreasedAtStartupOffset.set(0);
				break;
			}
			
			// start load test thread
			// ----------------------
			Thread t = null;
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				LoginReport_Prod_SM_corr simulatedUser = new LoginReport_Prod_SM_corr(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				t = new Thread(simulatedUser);
				String threadName = "" + getUserContextTable().getUserContextList().size();
				threadName = THREAD_NAME.substring(0, 7 - threadName.length()) + threadName;
				t.setName(threadName);
				if (debugLoops && (simulatedUser.getLog().size() > 0))
				{
					synchronized (dumpLock)
					{
						simulatedUser.dumpLog(threadName + " ", System.out);		// dump log of constructor
					}
				}
				HttpLoadTestUserContext userContext = new HttpLoadTestUserContext(simulatedUser, t);
				getUserContextTable().getUserContextList().add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
			t.start();
			usersToBeIncreasedAtStartupOffset.decrementAndGet();
			System.out.println("# --- thread " + t.getName() + " created --- " + ZoneTime.dateToShortString() + " ---");
			
			while (isSuspend())
			{
				try { Thread.currentThread().sleep(100); } catch (InterruptedException ie) { break; }
				if (abortedByRemote() || abortedByEofInputFile())
					break;
				
				// check if max test duration reached during suspend
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
					break;
				
				// display and sample temporary performance data all "sampling interval" seconds - also during suspend
				if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
				{
					performanceData.addSnapshot(getCpuUsagePercent());
					performanceData.setEndDate();
				}
			}
			
			if (abortedByRemote() || abortedByEofInputFile())
				break;
			
			if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				break;
			
			// startup delay for next thread
			// -----------------------------
			try
			{
				if (!singleUserMode)   // create concurrent users
				{
					if (plannedStartupDelay <= 3000)
						sleepRemoteInterruptable(plannedStartupDelay);
					else
					{
						long startupDelayStartTime = System.currentTimeMillis();
						while (true)
						{
							if (abortedByRemote() || abortedByEofInputFile())
								break;
							if ((System.currentTimeMillis() - startupDelayStartTime) >= plannedStartupDelay)
								break;
							
							Thread.currentThread().sleep(100);
							
							// display and sample temporary performance data all "sampling interval" seconds
							if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
							{
								performanceData.addSnapshot(getCpuUsagePercent());
								performanceData.setEndDate();
							}
						}
						while (isSuspend())
						{
							try { Thread.currentThread().sleep(100); } catch (InterruptedException ie) { break; }
							if (abortedByRemote() || abortedByEofInputFile())
								break;
							
							// check if max test duration reached during suspend
							if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
								break;
							
							// display and sample temporary performance data all "sampling interval" seconds - also during suspend
							if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
							{
								performanceData.addSnapshot(getCpuUsagePercent());
								performanceData.setEndDate();
							}
						}
						
					}
				}
				else
					t.join();   // single user mode
			}
			catch (InterruptedException ie) { break; }
			if (abortedByRemote() || abortedByEofInputFile())
				break;
			
			
			// display and sample temporary performance data all "sampling interval" seconds
			if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
			{
				performanceData.addSnapshot(getCpuUsagePercent());
				performanceData.setEndDate();
				if (!isRemote())
				{
					synchronized (dumpLock)
					{
						performanceData.dump(false);
					}
				}
			}
		}
		usersToBeIncreasedAtStartupOffset.set(0);	// just in case that a thread is not started for any reason
		
		
		// wait for test-end in a loop
		// ---------------------------
		boolean allDone = false;
		while (!allDone)
		{
			// test aborted ?
			if (abortedByRemote() || abortedByEofInputFile())
			{
				nearRemoteEnd();
				String abort = "";
				if (abortedByRemote())
					abort = "*** test aborted by remote command ***";
				if (abortedByEofInputFile())
				{
					abort = "*** test aborted at eof of input file ***";
					performanceData.addTestDescription(abort);
				}
				synchronized (dumpLock)
				{
					addSSLCacheStatistic();
					performanceData.addSnapshot(getCpuUsagePercent());
					performanceData.setEndDate();
					
					if (!isRemote())
						performanceData.dump(false);
					if (resultFile != null)
						try { performanceData.writeObjectToFile(getSymmetricEncryptContext(), resultFile); } catch (IOException ie) { ie.printStackTrace(); }
					
					if(replayMode)
					{
						saveReplaySnapShots("ZTReplay.snapshot");
					}
					
					System.out.println();
					System.out.println(abort);
					System.out.println();
					System.out.flush();
					try { Thread.currentThread().sleep(10000); } catch (InterruptedException ie) {}
					System.exit(0);
				}
			}
			
			// display and sample temporary performance data all "sampling interval" seconds
			if (((System.currentTimeMillis() - performanceData.getLastSnapshotTime()) / 1000) >= samplingInterval)
			{
				performanceData.addSnapshot(getCpuUsagePercent());
				performanceData.setEndDate();
				if (!isRemote())
				{
					synchronized (dumpLock)
					{
						performanceData.dump(false);
					}
				}
			}
			
			// check if test has been done in case of decrement users to zero
			if ((decrementUser) && (plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				decrementUser = false;
			// check if test has been done
			if (!hasExecutionPlan())
				allDone = isTestDone();
			else
			{
				if ((plannedTestDuration > 0) && (((System.currentTimeMillis() - testDurationStart) / 1000) >= plannedTestDuration))
				{
					performanceData.addTestDescription("*** Warning: Load test aborted. Execution plan time limit exceeded after " + plannedTestDuration + " seconds ***");
					triggerAbort();
				}
			}
			
			// if not all is done: sleep one second
			if (!allDone)
				try { sleepRemoteInterruptable(1000); } catch (InterruptedException ie) { break; }
		} // end of wait loop
		
		
		// mark near end of test - only if a remote interface has been used
		nearRemoteEnd();
		
		
		
		// final test result - test completed
		// ----------------------------------
		performanceData.addSnapshot(getCpuUsagePercent());
		performanceData.setEndDate();
		if(replayMode)
		{
			saveReplaySnapShots("ZTReplay.snapshot");
		}
		
		// save test result
		performanceData.dump(true);
		if (resultFile != null)
			try { performanceData.writeObjectToFile(getSymmetricEncryptContext(), resultFile); } catch (IOException ie) { ie.printStackTrace(); }
		
		// all done
		System.out.flush();
		
		// wait for official end of test - only if a remote interface has been used
		waitRemoteEnd();
		
		System.out.println();
		System.out.println("Result File: " + resultFile);
		
		// now dead
		System.exit(0);
	}


	/**
	 * implement VaryingLoadInterface: support to increment the number of simulated users at runtime.
	 */
	public void setIncrementUser(long startTime)
	{
		incrementUserStartTime = startTime;
		incrementUserFlag = true;
	}

	public boolean isIncrementUser()
	{
		return incrementUserFlag;
	}

	public long getIncrementUserStartTime()
	{
		return incrementUserStartTime;
	}

	public void setIncrementUserStartTime(long startTime)
	{
		incrementUserStartTime = startTime;
	}

	public void clearIncrementUser()
	{
		incrementUserFlag = false;
	}

	public int incrementUsers(int numAddUsers, long startupDelay)
	{
		if (startupDelay < 0)
			startupDelay = plannedStartupDelay;
		return incrementUsersImplementation(numAddUsers, startupDelay, this);
	}

	static int incrementUsersImplementation(int numAddUsers, long startupDelay, HttpLoadTest httpLoadTest)
	{
		long startupDelayOffset = 0;
		if ((getClusterTotalMemberCount() > 1) && (getClusterMemberLocalId() > 0))
			startupDelayOffset = (startupDelay / ((long) getClusterTotalMemberCount())) * ((long) getClusterMemberLocalId());
		
		ArrayList<HttpLoadTestUserContext> addUserContextList = new ArrayList<HttpLoadTestUserContext>(numAddUsers);
		for (int x = 0; x < numAddUsers; x++)
		{
			if (abortedByRemote() || abortedByEofInputFile())
				return x;
			
			// initialize load test thread
			// ---------------------------
			try
			{
				getUserContextTable().getWriteLock().lock();
				
				LoginReport_Prod_SM_corr simulatedUser = new LoginReport_Prod_SM_corr(maxPlannedLoops, plannedRequestTimeout, getUserContextTable().getUserContextList().size());
				HttpLoadTestUserContext userContext = prepareIncrementUser(simulatedUser, System.currentTimeMillis() + startupDelayOffset + (x * startupDelay));
				addUserContextList.add(userContext);
				simulatedUser.setOwnLoadTestUserContext(userContext);
				if (debugLoops && (simulatedUser.getLog().size() > 0))
				{
					synchronized (dumpLock)
					{
						simulatedUser.dumpLog(userContext.getLoadTestThread().getName() + " ", System.out);		// dump log of constructor
					}
				}
			}
			finally
			{
				getUserContextTable().getWriteLock().unlock();
			}
		}
		
		// start load test threads by a thread
		// -----------------------------------
		HttpLoadTestIncrementUserThread incrementUserThread = new HttpLoadTestIncrementUserThread(httpLoadTest, addUserContextList);
		incrementUserThread.start();
		return numAddUsers;
	}


	/**
	 * Internal method used to load and apply next proxy settings from ZBAProxySettings.properties file.
	 * Settings are applied only if file exists and nextProxyIsActive is set to true in the file.
	 * Note that settings stored with the session, will be ineffective.
	 *
	 * @since V5.5-D
	 */
	private void applyNextProxySettingsFromFileIfExists()
	{
		
		String filename = "ZBAProxySettings.properties";
		BufferedReader bin = null;
		SymmetricEncryptContext decryptContext = getSymmetricEncryptContext();
		File file = new File(filename);
		
		if (file.exists())
		// open input file
		try
		{
			if (decryptContext == null)
			{
				bin = new BufferedReader(new InputStreamReader(new FileInputStream(filename), Charset.forName("UTF-8")));
			}
			else
			{
				// create a reader stream that decrypts the data on the fly
				bin = new BufferedReader(new InputStreamReader(SymmetricEncrypt.getCipherInputStream(new FileInputStream(filename), decryptContext), Charset.forName("UTF-8")));
			}
			
			if (bin != null)
			{
				Properties nextProxyConfigProperties = new Properties();
				nextProxyConfigProperties.load(bin);
				NextProxyConfig nextProxyConfig = new NextProxyConfig();
				nextProxyConfig.setActive(Boolean.valueOf(nextProxyConfigProperties.getProperty("nextProxyIsActive")));
				proxyEnabled = nextProxyConfig.isActive();                             // if false: do not use a proxy server
				
				if (proxyEnabled)
				{
					nextProxyConfig.disableHttpProxyCache(Boolean.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpCacheDisabled")));
					proxyCacheDisabled = nextProxyConfig.isDisabledHttpProxyCache();
					nextProxyConfig.setHttpHost(nextProxyConfigProperties.getProperty("nextProxyHttpHost"));
					proxyHttpHost = nextProxyConfig.getHttpHost();
					nextProxyConfig.setHttpPort(Integer.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpPort")));
					proxyHttpPort = nextProxyConfig.getHttpPort();
					nextProxyConfig.setHttpsHost(nextProxyConfigProperties.getProperty("nextProxyHttpsHost"));
					proxyHttpsHost = nextProxyConfig.getHttpsHost();
					nextProxyConfig.setHttpsPort(Integer.valueOf(nextProxyConfigProperties.getProperty("nextProxyHttpsPort")));
					proxyHttpsPort = nextProxyConfig.getHttpsPort();
					nextProxyConfig.setAuthUsername(nextProxyConfigProperties.getProperty("nextProxyAuthUsername"));
					nextProxyConfig.setAuthPassword(nextProxyConfigProperties.getProperty("nextProxyAuthPassword"));
					nextProxyConfig.setNoNextProxy(nextProxyConfigProperties.getProperty("noNextProxy"));
					noProxyFor = nextProxyConfig.getNoNextProxy();
					
					String proxyAuth = "";
					
					if (nextProxyConfig.getAuthUsername() != null)
					{
						proxyAuth = nextProxyConfig.getAuthUsername() + ":";
						if (nextProxyConfig.getAuthPassword() != null)
							proxyAuth = proxyAuth + nextProxyConfig.getAuthPassword();
					}
					
					String  proxyAuthorization = null;
					
					if (proxyAuth.length() > 1)
						proxyAuthorization = Base64Encoder.encode(proxyAuth);		// Base 64 encoded - used for basic authentication only
					
					commonNextProxyConfig = new NextProxyConfig(proxyEnabled, proxyCacheDisabled, proxyHttpHost, proxyHttpPort, proxyHttpsHost, proxyHttpsPort, proxyAuthorization, noProxyFor);
					
					log("*** Warning: Applying proxy configuration from file " + filename + " ***");
				}
				
			}
		}
		catch (Throwable tr)
		{
			log("*** Unable to load proxy configuration from properties file " + filename + " ***");
			tr.printStackTrace();
		}
		finally
		{
			if (bin != null)
			{
				try { bin.close(); } catch (Exception e) {}
			}
		}
		
	}
		
	// definition for external files used to support large XML, SOAP and ASCII requests
	// --------------------------------------------------------------------------------
	public static final String REQUEST_FILE_CACHE_FILE_1 = "LoginReport_Prod_SM_corr_RequestContent0135.txt";		// must be zipped together with the compiled class of this load test program
	public static final String REQUEST_FILE_CACHE_FILE_2 = "LoginReport_Prod_SM_corr_RequestContent0243.txt";		// must be zipped together with the compiled class of this load test program
	
	
	// source code of inline script "htmlconvdecode"
	public static String getInlineScriptCode_1614016884691()
	{
		return "vscrbdec=urlDecode(vScrb)\r\nprint(vscrbdec)";
	}
	
	
	/**
	* Execute the inline script "htmlconvdecode"
	* 
	* @param testURL 	the context of the executed URL call
	* @param urlCallPassed 	a flag that signals (when set to false) if a 'yellow' error did occur after the URL call (triggered by response verification settings)
	* @param threadStep 	the current execution step of the simulated user (page break or URL call)
	* @param totalLoopCounter 	the total number of executed loops - counted overall simulated users
	* @param innerLoopContext 	the context of the current inner loop, or null if the inline script in not executed inside an inner loop
	*
	* @return the context of the inline script
	*/
	public LoadtestInlineScriptContext executeInlineScript_1614016884691(HttpTestURL testURL, boolean urlCallPassed, int threadStep, int totalLoopCounter, InnerLoopContext innerLoopContext)
	{
		LoadtestInlineScriptContext inlineScriptContext = new LoadtestInlineScriptContext("htmlconvdecode", ProxySnifferVarSourceInlineScript.EXEC_SCOPE_URL_END, "", this, LoadtestInlineScriptContext.RESULT_TYPE_SET_OUTPUT_VARS, 15, threadNumber, threadLoopCounter, socketPool, cookieHandler, testURL, threadStep);
		inlineScriptContext.setUrlCallPassed(urlCallPassed);
		InlineScriptExecutor inlineScriptExecutor = new InlineScriptExecutor(getInlineScriptCode_1614016884691(), inlineScriptContext);
		log("Executing inline script \"" + inlineScriptContext.getScriptTitle() + "\"");
		LoadtestInlineScriptVar inputVar1 = new LoadtestInlineScriptVar("vScrb", Lib.nullToBlank(vScrb), 1);		// note: parameter no. 3 is the scope of the var
		inlineScriptContext.addInputVar(inputVar1);
		LoadtestInlineScriptVar inputVar2 = new LoadtestInlineScriptVar("vscrbdec", Lib.nullToBlank(vscrbdec), 1);		// note: parameter no. 3 is the scope of the var
		inlineScriptContext.addInputVar(inputVar2);
		LoadtestInlineScriptVar outputVar1 = new LoadtestInlineScriptVar("vScrb", Lib.nullToBlank(vScrb), 1);		// note: parameter no. 3 is the scope of the var
		inlineScriptContext.addOutputVar(outputVar1);
		LoadtestInlineScriptVar outputVar2 = new LoadtestInlineScriptVar("vscrbdec", Lib.nullToBlank(vscrbdec), 1);		// note: parameter no. 3 is the scope of the var
		inlineScriptContext.addOutputVar(outputVar2);
		inlineScriptExecutor.execute();		// execute inline script
		vScrb = inlineScriptContext.getOutputVar("vScrb").getVarValue();
		log("<<< vScrb = " + vScrb);
		vscrbdec = inlineScriptContext.getOutputVar("vscrbdec").getVarValue();
		log("<<< vscrbdec = " + vscrbdec);
		for (String stdoutLine : inlineScriptContext.getOutputStreamData())
			log(inlineScriptContext.getScriptTitle() + ": " + stdoutLine);
		for (String stderrLine : inlineScriptContext.getErrorStreamData())
			System.err.println(inlineScriptContext.getScriptTitle() + ": " + stderrLine);
		if (!inlineScriptExecutor.wasSuccessFulExecution())
		{
			if (!inlineScriptContext.isScriptAbort())
				throw new InlineScriptExecutionException("*** Execution of inline script \"" + inlineScriptContext.getScriptTitle() + "\" failed ***");
		}
		return inlineScriptContext;
	}

}	// end of class

